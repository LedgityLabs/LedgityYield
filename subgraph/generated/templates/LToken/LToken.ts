// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class APRChangeEvent extends ethereum.Event {
  get params(): APRChangeEvent__Params {
    return new APRChangeEvent__Params(this);
  }
}

export class APRChangeEvent__Params {
  _event: APRChangeEvent;

  constructor(event: APRChangeEvent) {
    this._event = event;
  }

  get newAPRUD7x3(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class ActivityEvent extends ethereum.Event {
  get params(): ActivityEvent__Params {
    return new ActivityEvent__Params(this);
  }
}

export class ActivityEvent__Params {
  _event: ActivityEvent;

  constructor(event: ActivityEvent) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get action(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get amountAfterFees(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get newStatus(): i32 {
    return this._event.parameters[5].value.toI32();
  }

  get newId(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class AdminChanged extends ethereum.Event {
  get params(): AdminChanged__Params {
    return new AdminChanged__Params(this);
  }
}

export class AdminChanged__Params {
  _event: AdminChanged;

  constructor(event: AdminChanged) {
    this._event = event;
  }

  get previousAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAdmin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class BeaconUpgraded extends ethereum.Event {
  get params(): BeaconUpgraded__Params {
    return new BeaconUpgraded__Params(this);
  }
}

export class BeaconUpgraded__Params {
  _event: BeaconUpgraded;

  constructor(event: BeaconUpgraded) {
    this._event = event;
  }

  get beacon(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class MintedRewardsEvent extends ethereum.Event {
  get params(): MintedRewardsEvent__Params {
    return new MintedRewardsEvent__Params(this);
  }
}

export class MintedRewardsEvent__Params {
  _event: MintedRewardsEvent;

  constructor(event: MintedRewardsEvent) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get balanceBefore(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get rewards(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class TVLChangeEvent extends ethereum.Event {
  get params(): TVLChangeEvent__Params {
    return new TVLChangeEvent__Params(this);
  }
}

export class TVLChangeEvent__Params {
  _event: TVLChangeEvent;

  constructor(event: TVLChangeEvent) {
    this._event = event;
  }

  get newTVL(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Upgraded extends ethereum.Event {
  get params(): Upgraded__Params {
    return new Upgraded__Params(this);
  }
}

export class Upgraded__Params {
  _event: Upgraded;

  constructor(event: Upgraded) {
    this._event = event;
  }

  get implementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class LToken__frozenRequestsResult {
  value0: Address;
  value1: BigInt;

  constructor(value0: Address, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getAccount(): Address {
    return this.value0;
  }

  getAmount(): BigInt {
    return this.value1;
  }
}

export class LToken__getWithdrawnAmountAndFeesResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getWithdrawnAmount(): BigInt {
    return this.value0;
  }

  getFees(): BigInt {
    return this.value1;
  }
}

export class LToken__withdrawalQueueResult {
  value0: Address;
  value1: BigInt;

  constructor(value0: Address, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getAccount(): Address {
    return this.value0;
  }

  getAmount(): BigInt {
    return this.value1;
  }
}

export class LToken extends ethereum.SmartContract {
  static bind(address: Address): LToken {
    return new LToken("LToken", address);
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)],
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount),
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account),
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  decreaseAllowance(spender: Address, subtractedValue: BigInt): boolean {
    let result = super.call(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue),
      ],
    );

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    spender: Address,
    subtractedValue: BigInt,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  depositFor(account: Address, amount: BigInt): boolean {
    let result = super.call(
      "depositFor",
      "depositFor(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(amount),
      ],
    );

    return result[0].toBoolean();
  }

  try_depositFor(
    account: Address,
    amount: BigInt,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "depositFor",
      "depositFor(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(amount),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  feesRateUD7x3(): BigInt {
    let result = super.call("feesRateUD7x3", "feesRateUD7x3():(uint32)", []);

    return result[0].toBigInt();
  }

  try_feesRateUD7x3(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("feesRateUD7x3", "feesRateUD7x3():(uint32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  frozenRequests(param0: BigInt): LToken__frozenRequestsResult {
    let result = super.call(
      "frozenRequests",
      "frozenRequests(uint256):(address,uint96)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return new LToken__frozenRequestsResult(
      result[0].toAddress(),
      result[1].toBigInt(),
    );
  }

  try_frozenRequests(
    param0: BigInt,
  ): ethereum.CallResult<LToken__frozenRequestsResult> {
    let result = super.tryCall(
      "frozenRequests",
      "frozenRequests(uint256):(address,uint96)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new LToken__frozenRequestsResult(
        value[0].toAddress(),
        value[1].toBigInt(),
      ),
    );
  }

  fund(): Address {
    let result = super.call("fund", "fund():(address)", []);

    return result[0].toAddress();
  }

  try_fund(): ethereum.CallResult<Address> {
    let result = super.tryCall("fund", "fund():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getAPR(): i32 {
    let result = super.call("getAPR", "getAPR():(uint16)", []);

    return result[0].toI32();
  }

  try_getAPR(): ethereum.CallResult<i32> {
    let result = super.tryCall("getAPR", "getAPR():(uint16)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getExpectedRetained(): BigInt {
    let result = super.call(
      "getExpectedRetained",
      "getExpectedRetained():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_getExpectedRetained(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getExpectedRetained",
      "getExpectedRetained():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getWithdrawnAmountAndFees(
    account: Address,
    amount: BigInt,
  ): LToken__getWithdrawnAmountAndFeesResult {
    let result = super.call(
      "getWithdrawnAmountAndFees",
      "getWithdrawnAmountAndFees(address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(amount),
      ],
    );

    return new LToken__getWithdrawnAmountAndFeesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
    );
  }

  try_getWithdrawnAmountAndFees(
    account: Address,
    amount: BigInt,
  ): ethereum.CallResult<LToken__getWithdrawnAmountAndFeesResult> {
    let result = super.tryCall(
      "getWithdrawnAmountAndFees",
      "getWithdrawnAmountAndFees(address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(amount),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new LToken__getWithdrawnAmountAndFeesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
      ),
    );
  }

  globalBlacklist(): Address {
    let result = super.call(
      "globalBlacklist",
      "globalBlacklist():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_globalBlacklist(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "globalBlacklist",
      "globalBlacklist():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  globalOwner(): Address {
    let result = super.call("globalOwner", "globalOwner():(address)", []);

    return result[0].toAddress();
  }

  try_globalOwner(): ethereum.CallResult<Address> {
    let result = super.tryCall("globalOwner", "globalOwner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  globalPause(): Address {
    let result = super.call("globalPause", "globalPause():(address)", []);

    return result[0].toAddress();
  }

  try_globalPause(): ethereum.CallResult<Address> {
    let result = super.tryCall("globalPause", "globalPause():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  increaseAllowance(spender: Address, addedValue: BigInt): boolean {
    let result = super.call(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue),
      ],
    );

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    spender: Address,
    addedValue: BigInt,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  invested(): Address {
    let result = super.call("invested", "invested():(address)", []);

    return result[0].toAddress();
  }

  try_invested(): ethereum.CallResult<Address> {
    let result = super.tryCall("invested", "invested():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ldyStaking(): Address {
    let result = super.call("ldyStaking", "ldyStaking():(address)", []);

    return result[0].toAddress();
  }

  try_ldyStaking(): ethereum.CallResult<Address> {
    let result = super.tryCall("ldyStaking", "ldyStaking():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  proxiableUUID(): Bytes {
    let result = super.call("proxiableUUID", "proxiableUUID():(bytes32)", []);

    return result[0].toBytes();
  }

  try_proxiableUUID(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "proxiableUUID",
      "proxiableUUID():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  realBalanceOf(account: Address): BigInt {
    let result = super.call(
      "realBalanceOf",
      "realBalanceOf(address):(uint256)",
      [ethereum.Value.fromAddress(account)],
    );

    return result[0].toBigInt();
  }

  try_realBalanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "realBalanceOf",
      "realBalanceOf(address):(uint256)",
      [ethereum.Value.fromAddress(account)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  realTotalSupply(): BigInt {
    let result = super.call(
      "realTotalSupply",
      "realTotalSupply():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_realTotalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "realTotalSupply",
      "realTotalSupply():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  retentionRateUD7x3(): BigInt {
    let result = super.call(
      "retentionRateUD7x3",
      "retentionRateUD7x3():(uint32)",
      [],
    );

    return result[0].toBigInt();
  }

  try_retentionRateUD7x3(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "retentionRateUD7x3",
      "retentionRateUD7x3():(uint32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewardsRedirectsFromTo(param0: Address): Address {
    let result = super.call(
      "rewardsRedirectsFromTo",
      "rewardsRedirectsFromTo(address):(address)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toAddress();
  }

  try_rewardsRedirectsFromTo(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "rewardsRedirectsFromTo",
      "rewardsRedirectsFromTo(address):(address)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  rewardsRedirectsToFrom(param0: Address, param1: BigInt): Address {
    let result = super.call(
      "rewardsRedirectsToFrom",
      "rewardsRedirectsToFrom(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );

    return result[0].toAddress();
  }

  try_rewardsRedirectsToFrom(
    param0: Address,
    param1: BigInt,
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "rewardsRedirectsToFrom",
      "rewardsRedirectsToFrom(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalQueued(): BigInt {
    let result = super.call("totalQueued", "totalQueued():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalQueued(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalQueued", "totalQueued():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(to: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(amount),
    ]);

    return result[0].toBoolean();
  }

  try_transfer(to: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(amount),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(from: Address, to: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount),
      ],
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    from: Address,
    to: Address,
    amount: BigInt,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transfersListeners(param0: BigInt): Address {
    let result = super.call(
      "transfersListeners",
      "transfersListeners(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return result[0].toAddress();
  }

  try_transfersListeners(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "transfersListeners",
      "transfersListeners(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  unclaimedFees(): BigInt {
    let result = super.call("unclaimedFees", "unclaimedFees():(uint256)", []);

    return result[0].toBigInt();
  }

  try_unclaimedFees(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "unclaimedFees",
      "unclaimedFees():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  underlying(): Address {
    let result = super.call("underlying", "underlying():(address)", []);

    return result[0].toAddress();
  }

  try_underlying(): ethereum.CallResult<Address> {
    let result = super.tryCall("underlying", "underlying():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  unmintedRewardsOf(account: Address): BigInt {
    let result = super.call(
      "unmintedRewardsOf",
      "unmintedRewardsOf(address):(uint256)",
      [ethereum.Value.fromAddress(account)],
    );

    return result[0].toBigInt();
  }

  try_unmintedRewardsOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "unmintedRewardsOf",
      "unmintedRewardsOf(address):(uint256)",
      [ethereum.Value.fromAddress(account)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  usableUnderlyings(): BigInt {
    let result = super.call(
      "usableUnderlyings",
      "usableUnderlyings():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_usableUnderlyings(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "usableUnderlyings",
      "usableUnderlyings():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdrawTo(account: Address, amount: BigInt): boolean {
    let result = super.call(
      "withdrawTo",
      "withdrawTo(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(amount),
      ],
    );

    return result[0].toBoolean();
  }

  try_withdrawTo(
    account: Address,
    amount: BigInt,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "withdrawTo",
      "withdrawTo(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(amount),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  withdrawalQueue(param0: BigInt): LToken__withdrawalQueueResult {
    let result = super.call(
      "withdrawalQueue",
      "withdrawalQueue(uint256):(address,uint96)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return new LToken__withdrawalQueueResult(
      result[0].toAddress(),
      result[1].toBigInt(),
    );
  }

  try_withdrawalQueue(
    param0: BigInt,
  ): ethereum.CallResult<LToken__withdrawalQueueResult> {
    let result = super.tryCall(
      "withdrawalQueue",
      "withdrawalQueue(uint256):(address,uint96)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new LToken__withdrawalQueueResult(
        value[0].toAddress(),
        value[1].toBigInt(),
      ),
    );
  }

  withdrawalQueueCursor(): BigInt {
    let result = super.call(
      "withdrawalQueueCursor",
      "withdrawalQueueCursor():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_withdrawalQueueCursor(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdrawalQueueCursor",
      "withdrawalQueueCursor():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdrawer(): Address {
    let result = super.call("withdrawer", "withdrawer():(address)", []);

    return result[0].toAddress();
  }

  try_withdrawer(): ethereum.CallResult<Address> {
    let result = super.tryCall("withdrawer", "withdrawer():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  withdrwalFeeInEth(): BigInt {
    let result = super.call(
      "withdrwalFeeInEth",
      "withdrwalFeeInEth():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_withdrwalFeeInEth(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdrwalFeeInEth",
      "withdrwalFeeInEth():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class CancelWithdrawalRequestCall extends ethereum.Call {
  get inputs(): CancelWithdrawalRequestCall__Inputs {
    return new CancelWithdrawalRequestCall__Inputs(this);
  }

  get outputs(): CancelWithdrawalRequestCall__Outputs {
    return new CancelWithdrawalRequestCall__Outputs(this);
  }
}

export class CancelWithdrawalRequestCall__Inputs {
  _call: CancelWithdrawalRequestCall;

  constructor(call: CancelWithdrawalRequestCall) {
    this._call = call;
  }

  get requestId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CancelWithdrawalRequestCall__Outputs {
  _call: CancelWithdrawalRequestCall;

  constructor(call: CancelWithdrawalRequestCall) {
    this._call = call;
  }
}

export class ClaimFeesCall extends ethereum.Call {
  get inputs(): ClaimFeesCall__Inputs {
    return new ClaimFeesCall__Inputs(this);
  }

  get outputs(): ClaimFeesCall__Outputs {
    return new ClaimFeesCall__Outputs(this);
  }
}

export class ClaimFeesCall__Inputs {
  _call: ClaimFeesCall;

  constructor(call: ClaimFeesCall) {
    this._call = call;
  }
}

export class ClaimFeesCall__Outputs {
  _call: ClaimFeesCall;

  constructor(call: ClaimFeesCall) {
    this._call = call;
  }
}

export class DecreaseAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get subtractedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class IncreaseAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get globalOwner_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get globalPause_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get globalBlacklist_(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get ldyStaking_(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get underlyingToken(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class InstantWithdrawalCall extends ethereum.Call {
  get inputs(): InstantWithdrawalCall__Inputs {
    return new InstantWithdrawalCall__Inputs(this);
  }

  get outputs(): InstantWithdrawalCall__Outputs {
    return new InstantWithdrawalCall__Outputs(this);
  }
}

export class InstantWithdrawalCall__Inputs {
  _call: InstantWithdrawalCall;

  constructor(call: InstantWithdrawalCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class InstantWithdrawalCall__Outputs {
  _call: InstantWithdrawalCall;

  constructor(call: InstantWithdrawalCall) {
    this._call = call;
  }
}

export class ListenToTransfersCall extends ethereum.Call {
  get inputs(): ListenToTransfersCall__Inputs {
    return new ListenToTransfersCall__Inputs(this);
  }

  get outputs(): ListenToTransfersCall__Outputs {
    return new ListenToTransfersCall__Outputs(this);
  }
}

export class ListenToTransfersCall__Inputs {
  _call: ListenToTransfersCall;

  constructor(call: ListenToTransfersCall) {
    this._call = call;
  }

  get listenerContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ListenToTransfersCall__Outputs {
  _call: ListenToTransfersCall;

  constructor(call: ListenToTransfersCall) {
    this._call = call;
  }
}

export class ProcessBigQueuedRequestCall extends ethereum.Call {
  get inputs(): ProcessBigQueuedRequestCall__Inputs {
    return new ProcessBigQueuedRequestCall__Inputs(this);
  }

  get outputs(): ProcessBigQueuedRequestCall__Outputs {
    return new ProcessBigQueuedRequestCall__Outputs(this);
  }
}

export class ProcessBigQueuedRequestCall__Inputs {
  _call: ProcessBigQueuedRequestCall;

  constructor(call: ProcessBigQueuedRequestCall) {
    this._call = call;
  }

  get requestId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ProcessBigQueuedRequestCall__Outputs {
  _call: ProcessBigQueuedRequestCall;

  constructor(call: ProcessBigQueuedRequestCall) {
    this._call = call;
  }
}

export class ProcessQueuedRequestsCall extends ethereum.Call {
  get inputs(): ProcessQueuedRequestsCall__Inputs {
    return new ProcessQueuedRequestsCall__Inputs(this);
  }

  get outputs(): ProcessQueuedRequestsCall__Outputs {
    return new ProcessQueuedRequestsCall__Outputs(this);
  }
}

export class ProcessQueuedRequestsCall__Inputs {
  _call: ProcessQueuedRequestsCall;

  constructor(call: ProcessQueuedRequestsCall) {
    this._call = call;
  }
}

export class ProcessQueuedRequestsCall__Outputs {
  _call: ProcessQueuedRequestsCall;

  constructor(call: ProcessQueuedRequestsCall) {
    this._call = call;
  }
}

export class RecoverERC20Call extends ethereum.Call {
  get inputs(): RecoverERC20Call__Inputs {
    return new RecoverERC20Call__Inputs(this);
  }

  get outputs(): RecoverERC20Call__Outputs {
    return new RecoverERC20Call__Outputs(this);
  }
}

export class RecoverERC20Call__Inputs {
  _call: RecoverERC20Call;

  constructor(call: RecoverERC20Call) {
    this._call = call;
  }

  get tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RecoverERC20Call__Outputs {
  _call: RecoverERC20Call;

  constructor(call: RecoverERC20Call) {
    this._call = call;
  }
}

export class RecoverUnderlyingCall extends ethereum.Call {
  get inputs(): RecoverUnderlyingCall__Inputs {
    return new RecoverUnderlyingCall__Inputs(this);
  }

  get outputs(): RecoverUnderlyingCall__Outputs {
    return new RecoverUnderlyingCall__Outputs(this);
  }
}

export class RecoverUnderlyingCall__Inputs {
  _call: RecoverUnderlyingCall;

  constructor(call: RecoverUnderlyingCall) {
    this._call = call;
  }
}

export class RecoverUnderlyingCall__Outputs {
  _call: RecoverUnderlyingCall;

  constructor(call: RecoverUnderlyingCall) {
    this._call = call;
  }
}

export class RepatriateCall extends ethereum.Call {
  get inputs(): RepatriateCall__Inputs {
    return new RepatriateCall__Inputs(this);
  }

  get outputs(): RepatriateCall__Outputs {
    return new RepatriateCall__Outputs(this);
  }
}

export class RepatriateCall__Inputs {
  _call: RepatriateCall;

  constructor(call: RepatriateCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RepatriateCall__Outputs {
  _call: RepatriateCall;

  constructor(call: RepatriateCall) {
    this._call = call;
  }
}

export class RequestWithdrawalCall extends ethereum.Call {
  get inputs(): RequestWithdrawalCall__Inputs {
    return new RequestWithdrawalCall__Inputs(this);
  }

  get outputs(): RequestWithdrawalCall__Outputs {
    return new RequestWithdrawalCall__Outputs(this);
  }
}

export class RequestWithdrawalCall__Inputs {
  _call: RequestWithdrawalCall;

  constructor(call: RequestWithdrawalCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RequestWithdrawalCall__Outputs {
  _call: RequestWithdrawalCall;

  constructor(call: RequestWithdrawalCall) {
    this._call = call;
  }
}

export class SetAPRCall extends ethereum.Call {
  get inputs(): SetAPRCall__Inputs {
    return new SetAPRCall__Inputs(this);
  }

  get outputs(): SetAPRCall__Outputs {
    return new SetAPRCall__Outputs(this);
  }
}

export class SetAPRCall__Inputs {
  _call: SetAPRCall;

  constructor(call: SetAPRCall) {
    this._call = call;
  }

  get aprUD7x3(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class SetAPRCall__Outputs {
  _call: SetAPRCall;

  constructor(call: SetAPRCall) {
    this._call = call;
  }
}

export class SetFeesRateCall extends ethereum.Call {
  get inputs(): SetFeesRateCall__Inputs {
    return new SetFeesRateCall__Inputs(this);
  }

  get outputs(): SetFeesRateCall__Outputs {
    return new SetFeesRateCall__Outputs(this);
  }
}

export class SetFeesRateCall__Inputs {
  _call: SetFeesRateCall;

  constructor(call: SetFeesRateCall) {
    this._call = call;
  }

  get feesRateUD7x3_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetFeesRateCall__Outputs {
  _call: SetFeesRateCall;

  constructor(call: SetFeesRateCall) {
    this._call = call;
  }
}

export class SetFundCall extends ethereum.Call {
  get inputs(): SetFundCall__Inputs {
    return new SetFundCall__Inputs(this);
  }

  get outputs(): SetFundCall__Outputs {
    return new SetFundCall__Outputs(this);
  }
}

export class SetFundCall__Inputs {
  _call: SetFundCall;

  constructor(call: SetFundCall) {
    this._call = call;
  }

  get fund_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetFundCall__Outputs {
  _call: SetFundCall;

  constructor(call: SetFundCall) {
    this._call = call;
  }
}

export class SetLDYStakingCall extends ethereum.Call {
  get inputs(): SetLDYStakingCall__Inputs {
    return new SetLDYStakingCall__Inputs(this);
  }

  get outputs(): SetLDYStakingCall__Outputs {
    return new SetLDYStakingCall__Outputs(this);
  }
}

export class SetLDYStakingCall__Inputs {
  _call: SetLDYStakingCall;

  constructor(call: SetLDYStakingCall) {
    this._call = call;
  }

  get ldyStakingAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetLDYStakingCall__Outputs {
  _call: SetLDYStakingCall;

  constructor(call: SetLDYStakingCall) {
    this._call = call;
  }
}

export class SetRetentionRateCall extends ethereum.Call {
  get inputs(): SetRetentionRateCall__Inputs {
    return new SetRetentionRateCall__Inputs(this);
  }

  get outputs(): SetRetentionRateCall__Outputs {
    return new SetRetentionRateCall__Outputs(this);
  }
}

export class SetRetentionRateCall__Inputs {
  _call: SetRetentionRateCall;

  constructor(call: SetRetentionRateCall) {
    this._call = call;
  }

  get retentionRateUD7x3_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetRetentionRateCall__Outputs {
  _call: SetRetentionRateCall;

  constructor(call: SetRetentionRateCall) {
    this._call = call;
  }
}

export class SetWithdrawerCall extends ethereum.Call {
  get inputs(): SetWithdrawerCall__Inputs {
    return new SetWithdrawerCall__Inputs(this);
  }

  get outputs(): SetWithdrawerCall__Outputs {
    return new SetWithdrawerCall__Outputs(this);
  }
}

export class SetWithdrawerCall__Inputs {
  _call: SetWithdrawerCall;

  constructor(call: SetWithdrawerCall) {
    this._call = call;
  }

  get withdrawer_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetWithdrawerCall__Outputs {
  _call: SetWithdrawerCall;

  constructor(call: SetWithdrawerCall) {
    this._call = call;
  }
}

export class SetWithdrwalFeeInEthCall extends ethereum.Call {
  get inputs(): SetWithdrwalFeeInEthCall__Inputs {
    return new SetWithdrwalFeeInEthCall__Inputs(this);
  }

  get outputs(): SetWithdrwalFeeInEthCall__Outputs {
    return new SetWithdrwalFeeInEthCall__Outputs(this);
  }
}

export class SetWithdrwalFeeInEthCall__Inputs {
  _call: SetWithdrwalFeeInEthCall;

  constructor(call: SetWithdrwalFeeInEthCall) {
    this._call = call;
  }

  get withdrwalFeeInEth_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetWithdrwalFeeInEthCall__Outputs {
  _call: SetWithdrwalFeeInEthCall;

  constructor(call: SetWithdrwalFeeInEthCall) {
    this._call = call;
  }
}

export class StartRewardsRedirectionCall extends ethereum.Call {
  get inputs(): StartRewardsRedirectionCall__Inputs {
    return new StartRewardsRedirectionCall__Inputs(this);
  }

  get outputs(): StartRewardsRedirectionCall__Outputs {
    return new StartRewardsRedirectionCall__Outputs(this);
  }
}

export class StartRewardsRedirectionCall__Inputs {
  _call: StartRewardsRedirectionCall;

  constructor(call: StartRewardsRedirectionCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class StartRewardsRedirectionCall__Outputs {
  _call: StartRewardsRedirectionCall;

  constructor(call: StartRewardsRedirectionCall) {
    this._call = call;
  }
}

export class StopRewardsRedirectionCall extends ethereum.Call {
  get inputs(): StopRewardsRedirectionCall__Inputs {
    return new StopRewardsRedirectionCall__Inputs(this);
  }

  get outputs(): StopRewardsRedirectionCall__Outputs {
    return new StopRewardsRedirectionCall__Outputs(this);
  }
}

export class StopRewardsRedirectionCall__Inputs {
  _call: StopRewardsRedirectionCall;

  constructor(call: StopRewardsRedirectionCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class StopRewardsRedirectionCall__Outputs {
  _call: StopRewardsRedirectionCall;

  constructor(call: StopRewardsRedirectionCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class UnlistenToTransfersCall extends ethereum.Call {
  get inputs(): UnlistenToTransfersCall__Inputs {
    return new UnlistenToTransfersCall__Inputs(this);
  }

  get outputs(): UnlistenToTransfersCall__Outputs {
    return new UnlistenToTransfersCall__Outputs(this);
  }
}

export class UnlistenToTransfersCall__Inputs {
  _call: UnlistenToTransfersCall;

  constructor(call: UnlistenToTransfersCall) {
    this._call = call;
  }

  get listenerContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UnlistenToTransfersCall__Outputs {
  _call: UnlistenToTransfersCall;

  constructor(call: UnlistenToTransfersCall) {
    this._call = call;
  }
}

export class UpgradeToCall extends ethereum.Call {
  get inputs(): UpgradeToCall__Inputs {
    return new UpgradeToCall__Inputs(this);
  }

  get outputs(): UpgradeToCall__Outputs {
    return new UpgradeToCall__Outputs(this);
  }
}

export class UpgradeToCall__Inputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpgradeToCall__Outputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }
}

export class UpgradeToAndCallCall extends ethereum.Call {
  get inputs(): UpgradeToAndCallCall__Inputs {
    return new UpgradeToAndCallCall__Inputs(this);
  }

  get outputs(): UpgradeToAndCallCall__Outputs {
    return new UpgradeToAndCallCall__Outputs(this);
  }
}

export class UpgradeToAndCallCall__Inputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpgradeToAndCallCall__Outputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }
}
