type LToken @entity {
  id: ID! # Token address
  symbol: String!
  decimals: Int!
  totalMintedRewards: BigDecimal!
  tvlUpdates: [TVLChange!] @derivedFrom(field: "ltoken")
  aprUpdates: [APRChange!] @derivedFrom(field: "ltoken")
  activities: [Activity!] @derivedFrom(field: "ltoken")
  rewardsMints: [RewardsMint!] @derivedFrom(field: "ltoken")
}

type TVLChange @entity(immutable: true) {
  id: ID!
  ltoken: LToken!
  timestamp: BigInt!
  amount: BigDecimal!
}

type APRChange @entity(immutable: true) {
  id: ID!
  ltoken: LToken!
  timestamp: BigInt!
  apr: BigDecimal!
}

enum ActivityAction {
  Deposit
  Withdraw
}

enum ActivityStatus {
  Queued
  Cancelled
  Success # Sucess for deposits
  Fulfilled # Success for withdrawals
}

type Activity @entity {
  id: ID!
  requestId: BigInt! # Withdrawal request ID, or -1
  ltoken: LToken!
  timestamp: BigInt!
  account: Bytes!
  action: ActivityAction!
  amount: BigDecimal!
  amountAfterFees: BigDecimal!
  status: ActivityStatus!
}

type RewardsMint @entity(immutable: true) {
  id: ID!
  ltoken: LToken!
  timestamp: BigInt!
  account: Bytes!
  balanceBefore: BigDecimal!
  revenue: BigDecimal!
  growth: BigDecimal!
}

type PreMiningLock @entity {
  id: ID! # Account address
  amount: BigDecimal!
  duration: Int!
}

type StakingUser @entity {
  id: ID! #User-StakeIndex
  user: Bytes! # Address
  stakeIndex: BigInt!
  stakedAmount: BigInt!
  earnedAmount: BigInt!
}

type StakingAPRInfo @entity {
  id: ID! # Static ID, "StakingAPRInfo"
  rewardPerSec: BigInt!
  totalStaked: BigInt!
  APR: BigDecimal!
}
