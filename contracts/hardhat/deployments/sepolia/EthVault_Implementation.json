{
  "address": "0x38B8465cE54B771F09441321DB39A8664EB5808a",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AmountMustBeGreaterThanZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ContractLocked",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requested",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "available",
          "type": "uint256"
        }
      ],
      "name": "InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestedEpochs",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "availableEpochs",
          "type": "uint256"
        }
      ],
      "name": "InsufficientClaimableEpochs",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "provided",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "required",
          "type": "uint256"
        }
      ],
      "name": "InsufficientFundsReturned",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "provided",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "required",
          "type": "uint256"
        }
      ],
      "name": "InsufficientStake",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestedEpochs",
          "type": "uint256"
        }
      ],
      "name": "InvalidEpochsToClaim",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoActiveStake",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoRewardToClaim",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoRewardsToAllocate",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoStakeToExit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotFundwallet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotWithdrawable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RewardsAlreadyAllocated",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnClaimableRewards",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "WrongPhase",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "epochNumber",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "EpochOpened",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "epochNumber",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalValueLocked",
          "type": "uint256"
        }
      ],
      "name": "EpochRunning",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "epochNumber",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "EpochTerminated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldFundWallet",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newFundWallet",
          "type": "address"
        }
      ],
      "name": "FundWalletChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "epochId",
          "type": "uint256"
        }
      ],
      "name": "FundsTransferredToFundWallet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "locked",
          "type": "bool"
        }
      ],
      "name": "LockingContract",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldMinimumStake",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMinimumStake",
          "type": "uint256"
        }
      ],
      "name": "MinimumStakeChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "epochNumber",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardAmount",
          "type": "uint256"
        }
      ],
      "name": "RewardsAllocated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "claimable",
          "type": "bool"
        }
      ],
      "name": "RewardsClaimabilityChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "epochNumber",
          "type": "uint256"
        }
      ],
      "name": "UserDeposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "epochNumber",
          "type": "uint256"
        }
      ],
      "name": "UserRewardClaim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "epochNumber",
          "type": "uint256"
        }
      ],
      "name": "UserWithdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "allocateRewards",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "calculateRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_numberOfEpochs",
          "type": "uint256"
        }
      ],
      "name": "claimRewardsForEpochs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimableRewards",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentEpochId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentEpochStatus",
      "outputs": [
        {
          "internalType": "enum EthVault.EpochStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enter",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "epochs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalValueLocked",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalEpochRewards",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "exit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundWallet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllEpochs",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "totalValueLocked",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalEpochRewards",
              "type": "uint256"
            }
          ],
          "internalType": "struct EthVault.Epoch[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentEpoch",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "totalValueLocked",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalEpochRewards",
              "type": "uint256"
            }
          ],
          "internalType": "struct EthVault.Epoch",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getEpochLengthToClaim",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "hasClaimableRewards",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fundWallet",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockFundsAndRunCurrentEpoch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_locked",
          "type": "bool"
        }
      ],
      "name": "lockOrUnlockContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "locked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mininmumStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fundWallet",
          "type": "address"
        }
      ],
      "name": "setFundWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mininmumStake",
          "type": "uint256"
        }
      ],
      "name": "setMinimumStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "terminateCurrentAndOpenNextEpoch",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userStakes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastEpochClaimedAt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x6327b49c6f6e1e0cc23d74c0c05e85d66d66abd46d55c1e529124cbe921aaade",
  "receipt": {
    "to": null,
    "from": "0x107100756599668Ee64e3D2e5B7ae6454B247Ab7",
    "contractAddress": "0x38B8465cE54B771F09441321DB39A8664EB5808a",
    "transactionIndex": 20,
    "gasUsed": "2255289",
    "logsBloom": "0x
    "blockHash": "0x50ba10ec051cffdc704a12d3875d1f54d4fdd6ca87ef4e30e3f6116fd810041f",
    "transactionHash": "0x6327b49c6f6e1e0cc23d74c0c05e85d66d66abd46d55c1e529124cbe921aaade",
    "logs": [
      {
        "transactionIndex": 20,
        "blockNumber": 6637183,
        "transactionHash": "0x6327b49c6f6e1e0cc23d74c0c05e85d66d66abd46d55c1e529124cbe921aaade",
        "address": "0x38B8465cE54B771F09441321DB39A8664EB5808a",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 52,
        "blockHash": "0x50ba10ec051cffdc704a12d3875d1f54d4fdd6ca87ef4e30e3f6116fd810041f"
      }
    ],
    "blockNumber": 6637183,
    "cumulativeGasUsed": "5008632",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "11de3d09755603a1541c5b7993381a85",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AmountMustBeGreaterThanZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ContractLocked\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"}],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestedEpochs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableEpochs\",\"type\":\"uint256\"}],\"name\":\"InsufficientClaimableEpochs\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"provided\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"InsufficientFundsReturned\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"provided\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"InsufficientStake\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestedEpochs\",\"type\":\"uint256\"}],\"name\":\"InvalidEpochsToClaim\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoActiveStake\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoRewardToClaim\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoRewardsToAllocate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoStakeToExit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotFundwallet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotWithdrawable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RewardsAlreadyAllocated\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnClaimableRewards\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"WrongPhase\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epochNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"EpochOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epochNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalValueLocked\",\"type\":\"uint256\"}],\"name\":\"EpochRunning\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epochNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"EpochTerminated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldFundWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newFundWallet\",\"type\":\"address\"}],\"name\":\"FundWalletChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"}],\"name\":\"FundsTransferredToFundWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"locked\",\"type\":\"bool\"}],\"name\":\"LockingContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMinimumStake\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinimumStake\",\"type\":\"uint256\"}],\"name\":\"MinimumStakeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epochNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"name\":\"RewardsAllocated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"claimable\",\"type\":\"bool\"}],\"name\":\"RewardsClaimabilityChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epochNumber\",\"type\":\"uint256\"}],\"name\":\"UserDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epochNumber\",\"type\":\"uint256\"}],\"name\":\"UserRewardClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epochNumber\",\"type\":\"uint256\"}],\"name\":\"UserWithdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"allocateRewards\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"calculateRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numberOfEpochs\",\"type\":\"uint256\"}],\"name\":\"claimRewardsForEpochs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimableRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentEpochId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentEpochStatus\",\"outputs\":[{\"internalType\":\"enum EthVault.EpochStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enter\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"epochs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalValueLocked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalEpochRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllEpochs\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalValueLocked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalEpochRewards\",\"type\":\"uint256\"}],\"internalType\":\"struct EthVault.Epoch[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentEpoch\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalValueLocked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalEpochRewards\",\"type\":\"uint256\"}],\"internalType\":\"struct EthVault.Epoch\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getEpochLengthToClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"hasClaimableRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fundWallet\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockFundsAndRunCurrentEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_locked\",\"type\":\"bool\"}],\"name\":\"lockOrUnlockContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mininmumStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fundWallet\",\"type\":\"address\"}],\"name\":\"setFundWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mininmumStake\",\"type\":\"uint256\"}],\"name\":\"setMinimumStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"terminateCurrentAndOpenNextEpoch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastEpochClaimedAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"torof\",\"custom:warning\":\"claiming entails the use of a loop, if too many epochs to claim, it may fail                 the gas cost of the call and the success or failure should be estimated before calling                 a security function is present to break down claiming in chunks.\",\"details\":\"The contract allows users to stake funds, which are locked for a period of time (an epoch).      The contract has a lifecycle that includes opening, running, and terminating epochs, distributing      rewards, and claiming rewards.      Adding and withdrawing funds is possible only when the epoch status is \\\"Open\\\".      Claiming rewards is always possible EXCEPT during the timeframe between when an epoch      starts running and when rewards are allocated for that epoch.\",\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is changed.\"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"calculateRewards(address)\":{\"params\":{\"_user\":\"The address of the user\"},\"returns\":{\"_0\":\"uint256 The total rewards for the user\"}},\"claimRewardsForEpochs(uint256)\":{\"details\":\"this is a secutiry function to avoid out of gas errors for the main claim function\",\"params\":{\"_numberOfEpochs\":\"The number of epochs to claim rewards for\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"exit(uint256)\":{\"params\":{\"_amount\":\"The amount of ETH to withdraw\"}},\"getAllEpochs()\":{\"returns\":{\"_0\":\"Epoch[] An array of all epochs\"}},\"getCurrentEpoch()\":{\"returns\":{\"_0\":\"Epoch The current epoch\"}},\"getEpochLengthToClaim(address)\":{\"params\":{\"_user\":\"The address of the user\"},\"returns\":{\"_0\":\"uint256 The number of epochs the user can claim rewards for\"}},\"hasClaimableRewards(address)\":{\"params\":{\"_user\":\"The address of the user\"},\"returns\":{\"_0\":\"bool indicating if the user has claimable rewards\"}},\"initialize(address)\":{\"params\":{\"_fundWallet\":\"The address of the fund wallet\"}},\"lockOrUnlockContract(bool)\":{\"params\":{\"_locked\":\"The new lock state\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setFundWallet(address)\":{\"params\":{\"_fundWallet\":\"The new fund wallet address\"}},\"setMinimumStake(uint256)\":{\"params\":{\"_mininmumStake\":\"The new minimum stake amount\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeTo(address)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"title\":\"Ledgity ETH Vault Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"allocateRewards()\":{\"notice\":\"Allocates rewards for the current epoch\"},\"calculateRewards(address)\":{\"notice\":\"Calculates the rewards for a user\"},\"claimRewards()\":{\"notice\":\"Allows users to claim their rewards\"},\"claimRewardsForEpochs(uint256)\":{\"notice\":\"Allows users to claim rewards for a specific number of epochs\"},\"enter()\":{\"notice\":\"Allows users to enter the vault by staking ETH\"},\"exit(uint256)\":{\"notice\":\"Allows users to exit the vault by withdrawing their stake\"},\"getAllEpochs()\":{\"notice\":\"Gets all epochs\"},\"getCurrentEpoch()\":{\"notice\":\"Gets the current epoch\"},\"getEpochLengthToClaim(address)\":{\"notice\":\"Gets the number of epochs a user can claim rewards for\"},\"hasClaimableRewards(address)\":{\"notice\":\"Checks if a user has claimable rewards\"},\"initialize(address)\":{\"notice\":\"Initializes the contract\"},\"lockFundsAndRunCurrentEpoch()\":{\"notice\":\"Locks funds and starts running the current epoch\"},\"lockOrUnlockContract(bool)\":{\"notice\":\"Locks or unlocks the contract\"},\"setFundWallet(address)\":{\"notice\":\"Sets the fund wallet address\"},\"setMinimumStake(uint256)\":{\"notice\":\"Sets the minimum stake amount\"},\"terminateCurrentAndOpenNextEpoch()\":{\"notice\":\"Terminates the current epoch and opens the next one by giving back the funds from the fundwallet\"}},\"notice\":\"This contract implements a ETH staking and reward distribution system operating in epochs.         Users can provide funds that will be used for derivatives (short put and call options) operations, and in return,         they will receive yield proportionally to their stake.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/src/EthVault.sol\":\"EthVault\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x4075622496acc77fd6d4de4cc30a8577a744d5c75afad33fdeacf1704d6eda98\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x47d6e06872b12e72c79d1b5eb55842f860b5fb1207b2317c2358d2766b950a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x584ebdf9c1118a7c773f98788e3f3ede01982bdf8932aa06f5acc7d54876e161\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xb607cb94c27e89750f5ae2ccebcb94e654e926f6125f4fd4c6262c89875118ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb82ef33f43b6b96109687d91b39c94573fdccaaa423fe28e8ba0977b31c023e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x07ac95acad040f1fb1f6120dd0aa5f702db69446e95f82613721879d30de0908\",\"license\":\"MIT\"},\"contracts/src/EthVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"solady/src/utils/FixedPointMathLib.sol\\\";\\n\\npragma solidity 0.8.18;\\n\\n/**\\n * @title Ledgity ETH Vault Contract\\n * @author torof\\n * @notice This contract implements a ETH staking and reward distribution system operating in epochs.\\n *         Users can provide funds that will be used for derivatives (short put and call options) operations, and in return,\\n *         they will receive yield proportionally to their stake.\\n * @dev The contract allows users to stake funds, which are locked for a period of time (an epoch).\\n *      The contract has a lifecycle that includes opening, running, and terminating epochs, distributing\\n *      rewards, and claiming rewards.\\n *      Adding and withdrawing funds is possible only when the epoch status is \\\"Open\\\".\\n *      Claiming rewards is always possible EXCEPT during the timeframe between when an epoch\\n *      starts running and when rewards are allocated for that epoch.\\n *\\n * @custom:warning claiming entails the use of a loop, if too many epochs to claim, it may fail\\n *                 the gas cost of the call and the success or failure should be estimated before calling\\n *                 a security function is present to break down claiming in chunks.\\n */\\ncontract EthVault is Initializable, UUPSUpgradeable, OwnableUpgradeable, ReentrancyGuardUpgradeable {\\n    struct Epoch {\\n        uint256 totalValueLocked;\\n        uint256 totalEpochRewards;\\n    }\\n\\n    struct UserStake {\\n        uint256 amount;\\n        uint256 lastEpochClaimedAt;\\n    }\\n\\n    enum EpochStatus {\\n        Open,\\n        Running\\n    }\\n\\n    EpochStatus public currentEpochStatus;\\n    Epoch[] public epochs;\\n    address public fundWallet;\\n    mapping(address => UserStake) public userStakes;\\n    uint256 public currentEpochId;\\n    uint256 public mininmumStake;\\n    bool public locked;\\n    bool public claimableRewards;\\n\\n    error WrongPhase(string);\\n    error NoRewardToClaim();\\n    error UnClaimableRewards();\\n    error TransferFailed();\\n    error NoStakeToExit();\\n    error NotWithdrawable();\\n    error InsufficientStake(uint256 provided, uint256 required);\\n    error AmountMustBeGreaterThanZero();\\n    error InsufficientBalance(uint256 requested, uint256 available);\\n    error NoActiveStake();\\n    error InsufficientFundsReturned(uint256 provided, uint256 required);\\n    error NoRewardsToAllocate();\\n    error RewardsAlreadyAllocated();\\n    error ContractLocked();\\n    error InsufficientClaimableEpochs(uint256 requestedEpochs, uint256 availableEpochs);\\n    error InvalidEpochsToClaim(uint256 requestedEpochs);\\n    error NotFundwallet();\\n\\n    event EpochOpened(uint256 indexed epochNumber, uint256 timestamp);\\n    event EpochRunning(uint256 indexed epochNumber, uint256 timestamp, uint256 totalValueLocked);\\n    event EpochTerminated(uint256 indexed epochNumber, uint256 timestamp);\\n    event RewardsAllocated(uint256 indexed epochNumber, uint256 rewardAmount);\\n    event UserDeposit(address indexed user, uint256 amount, uint256 epochNumber);\\n    event UserWithdraw(address indexed user, uint256 amount, uint256 epochNumber);\\n    event UserRewardClaim(address indexed user, uint256 amount, uint256 epochNumber);\\n    event MinimumStakeChanged(uint256 oldMinimumStake, uint256 newMinimumStake);\\n    event FundWalletChanged(address oldFundWallet, address newFundWallet);\\n    event FundsTransferredToFundWallet(uint256 amount, uint256 indexed epochId);\\n    event RewardsClaimabilityChanged(bool claimable);\\n    event LockingContract(bool locked);\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /// @notice Initializes the contract\\n    /// @param _fundWallet The address of the fund wallet\\n    function initialize(address _fundWallet) public initializer {\\n        __Ownable_init();\\n        __ReentrancyGuard_init();\\n        __UUPSUpgradeable_init();\\n\\n        epochs.push(Epoch(0, 0));\\n        epochs.push(Epoch(0, 0));\\n\\n        fundWallet = _fundWallet;\\n        currentEpochStatus = EpochStatus.Open;\\n        currentEpochId = 1;\\n        mininmumStake = 5 ether / 100; //initial minimum stake is 0.05 ETH\\n\\n        emit EpochOpened(currentEpochId, block.timestamp);\\n    }\\n\\n    /// @notice Modifier to check if the contract is locked\\n    modifier IsLocked() {\\n        if (locked) revert ContractLocked();\\n        _;\\n    }\\n\\n    modifier OnlyFundWallet() {\\n        if (msg.sender != fundWallet) revert NotFundwallet();\\n        _;\\n    }\\n\\n    /// @notice Allows users to enter the vault by staking ETH\\n    function enter() public payable nonReentrant IsLocked {\\n        if (currentEpochStatus != EpochStatus.Open) revert WrongPhase(\\\"ENTER: only allowed during open phase\\\");\\n        if (msg.value < mininmumStake) revert InsufficientStake(msg.value, mininmumStake);\\n\\n        UserStake storage userStake = userStakes[msg.sender];\\n\\n        if (hasClaimableRewards(msg.sender)) {\\n            _claimRewards(msg.sender);\\n        } else {\\n            userStake.lastEpochClaimedAt = currentEpochId - 1; // when epoch is opened rewards of current epoch haven't been distributed yet\\n        }\\n\\n        userStake.amount += msg.value;\\n        epochs[currentEpochId].totalValueLocked += msg.value;\\n\\n        emit UserDeposit(msg.sender, msg.value, currentEpochId);\\n    }\\n\\n    /// @notice Allows users to exit the vault by withdrawing their stake\\n    /// @param _amount The amount of ETH to withdraw\\n    function exit(uint256 _amount) public nonReentrant IsLocked {\\n        if (currentEpochStatus != EpochStatus.Open) revert WrongPhase(\\\"EXIT: only allowed during open phase\\\");\\n        UserStake storage userStake = userStakes[msg.sender];\\n        if (userStake.amount < _amount) revert InsufficientBalance(_amount, userStake.amount);\\n        if (_amount == 0) revert AmountMustBeGreaterThanZero();\\n\\n        if (hasClaimableRewards(msg.sender)) _claimRewards(msg.sender);\\n\\n        userStake.amount -= _amount;\\n        epochs[currentEpochId].totalValueLocked -= _amount;\\n\\n        (bool success,) = msg.sender.call{value: _amount}(\\\"\\\");\\n        if (!success) revert TransferFailed();\\n\\n        emit UserWithdraw(msg.sender, _amount, currentEpochId);\\n    }\\n\\n    /// @notice Allows users to claim their rewards\\n    function claimRewards() public IsLocked {\\n        if (!claimableRewards) revert UnClaimableRewards();\\n        if (!hasClaimableRewards(msg.sender)) revert NoRewardToClaim();\\n        _claimRewards(msg.sender);\\n    }\\n\\n    /// @notice Checks if a user has claimable rewards\\n    /// @param _user The address of the user\\n    /// @return bool indicating if the user has claimable rewards\\n    function hasClaimableRewards(address _user) public view returns (bool) {\\n        if (userStakes[_user].amount == 0) return false;\\n        if (currentEpochId == 1 && !claimableRewards) return false;\\n        if (currentEpochStatus == EpochStatus.Open && userStakes[_user].lastEpochClaimedAt == currentEpochId - 1) {\\n            return false;\\n        }\\n        if (userStakes[_user].lastEpochClaimedAt == currentEpochId) return false;\\n        else return true;\\n    }\\n\\n    /// @notice Internal function to claim rewards for a user\\n    /// @param _user The address of the user\\n    function _claimRewards(address _user) internal {\\n        uint256 totalRewards = calculateRewards(_user);\\n\\n        // Update lastEpochClaimedAt\\n        if (currentEpochStatus == EpochStatus.Open) {\\n            userStakes[_user].lastEpochClaimedAt = currentEpochId - 1; // when epoch is opened rewards of current epoch haven't been distributed yet\\n        } else {\\n            userStakes[_user].lastEpochClaimedAt = currentEpochId;\\n        }\\n\\n        (bool success,) = msg.sender.call{value: totalRewards}(\\\"\\\");\\n        if (!success) revert TransferFailed();\\n\\n        emit UserRewardClaim(msg.sender, totalRewards, currentEpochId);\\n    }\\n\\n    /// @notice Calculates the rewards for a user\\n    /// @param _user The address of the user\\n    /// @return uint256 The total rewards for the user\\n    function calculateRewards(address _user) public view returns (uint256) {\\n        if (!hasClaimableRewards(_user)) return 0;\\n\\n        uint256 totalRewards;\\n        uint256 startEpoch = userStakes[_user].lastEpochClaimedAt + 1;\\n        uint256 endEpoch;\\n\\n        if (currentEpochStatus == EpochStatus.Open) {\\n            endEpoch = currentEpochId - 1;\\n        } else {\\n            endEpoch = currentEpochId;\\n        }\\n\\n        for (uint256 i = startEpoch; i <= endEpoch; i++) {\\n            Epoch storage epoch = epochs[i];\\n            uint256 epochReward =\\n                FixedPointMathLib.mulDiv(userStakes[_user].amount, epoch.totalEpochRewards, epoch.totalValueLocked);\\n            totalRewards += epochReward;\\n        }\\n\\n        return totalRewards;\\n    }\\n\\n    /// @notice Allows users to claim rewards for a specific number of epochs\\n    /// @dev this is a secutiry function to avoid out of gas errors for the main claim function\\n    /// @param _numberOfEpochs The number of epochs to claim rewards for\\n    function claimRewardsForEpochs(uint256 _numberOfEpochs) public {\\n        if (_numberOfEpochs == 0) revert InvalidEpochsToClaim(_numberOfEpochs);\\n        if (!claimableRewards) revert UnClaimableRewards();\\n        if (!hasClaimableRewards(msg.sender)) revert NoRewardToClaim();\\n\\n        UserStake storage userStake = userStakes[msg.sender];\\n        uint256 startEpoch = userStake.lastEpochClaimedAt + 1;\\n        uint256 maxClaimableEpoch = currentEpochStatus == EpochStatus.Open ? currentEpochId - 1 : currentEpochId;\\n        uint256 availableEpochs = maxClaimableEpoch >= startEpoch ? maxClaimableEpoch - startEpoch + 1 : 0;\\n\\n        if (_numberOfEpochs > availableEpochs) {\\n            revert InsufficientClaimableEpochs(_numberOfEpochs, availableEpochs);\\n        }\\n\\n        uint256 endEpoch = startEpoch + _numberOfEpochs - 1;\\n        uint256 totalRewards;\\n\\n        for (uint256 i = startEpoch; i <= endEpoch; i++) {\\n            Epoch storage epoch = epochs[i];\\n            uint256 epochReward =\\n                FixedPointMathLib.mulDiv(userStake.amount, epoch.totalEpochRewards, epoch.totalValueLocked);\\n            totalRewards += epochReward;\\n        }\\n\\n        userStake.lastEpochClaimedAt = endEpoch;\\n\\n        (bool success,) = msg.sender.call{value: totalRewards}(\\\"\\\");\\n        if (!success) revert TransferFailed();\\n\\n        emit UserRewardClaim(msg.sender, totalRewards, endEpoch);\\n    }\\n\\n    /// @notice Terminates the current epoch and opens the next one by giving back the funds from the fundwallet\\n    function terminateCurrentAndOpenNextEpoch() external payable OnlyFundWallet {\\n        if (currentEpochStatus != EpochStatus.Running) revert WrongPhase(\\\"END EPOCH: can only end a running epoch\\\");\\n        if (!claimableRewards) revert WrongPhase(\\\"END EPOCH: rewards must be allocated before ending the epoch\\\");\\n        uint256 requiredFunds = epochs[currentEpochId].totalValueLocked;\\n        if (msg.value < requiredFunds) {\\n            revert InsufficientFundsReturned(msg.value, requiredFunds);\\n        }\\n\\n        Epoch storage currentEpoch = epochs[currentEpochId];\\n\\n        uint256 fundsToTransfer = currentEpoch.totalValueLocked;\\n\\n        emit EpochTerminated(currentEpochId, block.timestamp);\\n\\n        currentEpochId++;\\n\\n        epochs.push(Epoch(fundsToTransfer, 0));\\n        currentEpochStatus = EpochStatus.Open;\\n\\n        emit EpochOpened(currentEpochId, block.timestamp);\\n    }\\n\\n    /// @notice Allocates rewards for the current epoch\\n    function allocateRewards() external payable OnlyFundWallet {\\n        if (currentEpochStatus != EpochStatus.Running) revert WrongPhase(\\\"ALLOCATE REWARDS: must be in running phase\\\");\\n        if (msg.value == 0) revert NoRewardsToAllocate();\\n\\n        Epoch storage currentEpoch = epochs[currentEpochId];\\n        if (currentEpoch.totalEpochRewards != 0) revert RewardsAlreadyAllocated();\\n\\n        currentEpoch.totalEpochRewards = msg.value;\\n\\n        claimableRewards = true;\\n\\n        emit RewardsAllocated(currentEpochId, msg.value);\\n        emit RewardsClaimabilityChanged(true);\\n    }\\n\\n    /// @notice Locks funds and starts running the current epoch\\n    function lockFundsAndRunCurrentEpoch() external OnlyFundWallet {\\n        if (currentEpochStatus != EpochStatus.Open) {\\n            revert WrongPhase(\\\"RUN EPOCH: can only start running from open phase\\\");\\n        }\\n\\n        currentEpochStatus = EpochStatus.Running;\\n        claimableRewards = false;\\n\\n        uint256 amountToTransfer = epochs[currentEpochId].totalValueLocked;\\n        (bool success,) = address(fundWallet).call{value: amountToTransfer}(\\\"\\\");\\n        if (!success) revert TransferFailed();\\n\\n        emit EpochRunning(currentEpochId, block.timestamp, amountToTransfer);\\n        emit FundsTransferredToFundWallet(amountToTransfer, currentEpochId);\\n    }\\n\\n    /// @notice Gets the number of epochs a user can claim rewards for\\n    /// @param _user The address of the user\\n    /// @return uint256 The number of epochs the user can claim rewards for\\n    function getEpochLengthToClaim(address _user) external view returns (uint256) {\\n        if (userStakes[_user].amount == 0) {\\n            return 0;\\n        }\\n\\n        uint256 length;\\n        uint256 startEpoch = userStakes[_user].lastEpochClaimedAt + 1;\\n        uint256 endEpoch;\\n\\n        if (currentEpochStatus == EpochStatus.Open) {\\n            endEpoch = currentEpochId - 1;\\n        } else {\\n            endEpoch = currentEpochId;\\n        }\\n\\n        for (uint256 i = startEpoch; i <= endEpoch; i++) {\\n            length++;\\n        }\\n\\n        return length;\\n    }\\n\\n    /// @notice Sets the fund wallet address\\n    /// @param _fundWallet The new fund wallet address\\n    function setFundWallet(address _fundWallet) external onlyOwner {\\n        address previousFundWallet = fundWallet;\\n        fundWallet = _fundWallet;\\n        emit FundWalletChanged(previousFundWallet, fundWallet);\\n    }\\n\\n    /// @notice Sets the minimum stake amount\\n    /// @param _mininmumStake The new minimum stake amount\\n    function setMinimumStake(uint256 _mininmumStake) external onlyOwner {\\n        uint256 previousMininmumStake = mininmumStake;\\n        mininmumStake = _mininmumStake;\\n        emit MinimumStakeChanged(previousMininmumStake, mininmumStake);\\n    }\\n\\n    /// @notice Gets all epochs\\n    /// @return Epoch[] An array of all epochs\\n    function getAllEpochs() external view returns (Epoch[] memory) {\\n        return epochs;\\n    }\\n\\n    /// @notice Gets the current epoch\\n    /// @return Epoch The current epoch\\n    function getCurrentEpoch() external view returns (Epoch memory) {\\n        return epochs[currentEpochId];\\n    }\\n\\n    /// @notice Locks or unlocks the contract\\n    /// @param _locked The new lock state\\n    function lockOrUnlockContract(bool _locked) external onlyOwner {\\n        require(locked != _locked, \\\"Contract already in requested state\\\");\\n        locked = _locked;\\n        emit LockingContract(locked);\\n    }\\n\\n    /// @notice Internal function to authorize an upgrade\\n    /// @param newImplementation Address of the new implementation\\n    function _authorizeUpgrade(address newImplementation) internal override onlyOwner {}\\n}\\n\",\"keccak256\":\"0x98263de796bab37a3a39a4eefa1fbe7725c1bda429cc5c2d92a44f73265f5d3e\",\"license\":\"MIT\"},\"solady/src/utils/FixedPointMathLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @notice Arithmetic library with operations for fixed-point numbers.\\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/FixedPointMathLib.sol)\\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/FixedPointMathLib.sol)\\nlibrary FixedPointMathLib {\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                       CUSTOM ERRORS                        */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev The operation failed, as the output exceeds the maximum value of uint256.\\n    error ExpOverflow();\\n\\n    /// @dev The operation failed, as the output exceeds the maximum value of uint256.\\n    error FactorialOverflow();\\n\\n    /// @dev The operation failed, due to an overflow.\\n    error RPowOverflow();\\n\\n    /// @dev The mantissa is too big to fit.\\n    error MantissaOverflow();\\n\\n    /// @dev The operation failed, due to an multiplication overflow.\\n    error MulWadFailed();\\n\\n    /// @dev The operation failed, due to an multiplication overflow.\\n    error SMulWadFailed();\\n\\n    /// @dev The operation failed, either due to a multiplication overflow, or a division by a zero.\\n    error DivWadFailed();\\n\\n    /// @dev The operation failed, either due to a multiplication overflow, or a division by a zero.\\n    error SDivWadFailed();\\n\\n    /// @dev The operation failed, either due to a multiplication overflow, or a division by a zero.\\n    error MulDivFailed();\\n\\n    /// @dev The division failed, as the denominator is zero.\\n    error DivFailed();\\n\\n    /// @dev The full precision multiply-divide operation failed, either due\\n    /// to the result being larger than 256 bits, or a division by a zero.\\n    error FullMulDivFailed();\\n\\n    /// @dev The output is undefined, as the input is less-than-or-equal to zero.\\n    error LnWadUndefined();\\n\\n    /// @dev The input outside the acceptable domain.\\n    error OutOfDomain();\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                         CONSTANTS                          */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev The scalar of ETH and most ERC20s.\\n    uint256 internal constant WAD = 1e18;\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*              SIMPLIFIED FIXED POINT OPERATIONS             */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Equivalent to `(x * y) / WAD` rounded down.\\n    function mulWad(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Equivalent to `require(y == 0 || x <= type(uint256).max / y)`.\\n            if mul(y, gt(x, div(not(0), y))) {\\n                mstore(0x00, 0xbac65e5b) // `MulWadFailed()`.\\n                revert(0x1c, 0x04)\\n            }\\n            z := div(mul(x, y), WAD)\\n        }\\n    }\\n\\n    /// @dev Equivalent to `(x * y) / WAD` rounded down.\\n    function sMulWad(int256 x, int256 y) internal pure returns (int256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := mul(x, y)\\n            // Equivalent to `require((x == 0 || z / x == y) && !(x == -1 && y == type(int256).min))`.\\n            if iszero(gt(or(iszero(x), eq(sdiv(z, x), y)), lt(not(x), eq(y, shl(255, 1))))) {\\n                mstore(0x00, 0xedcd4dd4) // `SMulWadFailed()`.\\n                revert(0x1c, 0x04)\\n            }\\n            z := sdiv(z, WAD)\\n        }\\n    }\\n\\n    /// @dev Equivalent to `(x * y) / WAD` rounded down, but without overflow checks.\\n    function rawMulWad(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := div(mul(x, y), WAD)\\n        }\\n    }\\n\\n    /// @dev Equivalent to `(x * y) / WAD` rounded down, but without overflow checks.\\n    function rawSMulWad(int256 x, int256 y) internal pure returns (int256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := sdiv(mul(x, y), WAD)\\n        }\\n    }\\n\\n    /// @dev Equivalent to `(x * y) / WAD` rounded up.\\n    function mulWadUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Equivalent to `require(y == 0 || x <= type(uint256).max / y)`.\\n            if mul(y, gt(x, div(not(0), y))) {\\n                mstore(0x00, 0xbac65e5b) // `MulWadFailed()`.\\n                revert(0x1c, 0x04)\\n            }\\n            z := add(iszero(iszero(mod(mul(x, y), WAD))), div(mul(x, y), WAD))\\n        }\\n    }\\n\\n    /// @dev Equivalent to `(x * y) / WAD` rounded up, but without overflow checks.\\n    function rawMulWadUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := add(iszero(iszero(mod(mul(x, y), WAD))), div(mul(x, y), WAD))\\n        }\\n    }\\n\\n    /// @dev Equivalent to `(x * WAD) / y` rounded down.\\n    function divWad(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Equivalent to `require(y != 0 && (WAD == 0 || x <= type(uint256).max / WAD))`.\\n            if iszero(mul(y, iszero(mul(WAD, gt(x, div(not(0), WAD)))))) {\\n                mstore(0x00, 0x7c5f487d) // `DivWadFailed()`.\\n                revert(0x1c, 0x04)\\n            }\\n            z := div(mul(x, WAD), y)\\n        }\\n    }\\n\\n    /// @dev Equivalent to `(x * WAD) / y` rounded down.\\n    function sDivWad(int256 x, int256 y) internal pure returns (int256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := mul(x, WAD)\\n            // Equivalent to `require(y != 0 && ((x * WAD) / WAD == x))`.\\n            if iszero(and(iszero(iszero(y)), eq(sdiv(z, WAD), x))) {\\n                mstore(0x00, 0x5c43740d) // `SDivWadFailed()`.\\n                revert(0x1c, 0x04)\\n            }\\n            z := sdiv(mul(x, WAD), y)\\n        }\\n    }\\n\\n    /// @dev Equivalent to `(x * WAD) / y` rounded down, but without overflow and divide by zero checks.\\n    function rawDivWad(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := div(mul(x, WAD), y)\\n        }\\n    }\\n\\n    /// @dev Equivalent to `(x * WAD) / y` rounded down, but without overflow and divide by zero checks.\\n    function rawSDivWad(int256 x, int256 y) internal pure returns (int256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := sdiv(mul(x, WAD), y)\\n        }\\n    }\\n\\n    /// @dev Equivalent to `(x * WAD) / y` rounded up.\\n    function divWadUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Equivalent to `require(y != 0 && (WAD == 0 || x <= type(uint256).max / WAD))`.\\n            if iszero(mul(y, iszero(mul(WAD, gt(x, div(not(0), WAD)))))) {\\n                mstore(0x00, 0x7c5f487d) // `DivWadFailed()`.\\n                revert(0x1c, 0x04)\\n            }\\n            z := add(iszero(iszero(mod(mul(x, WAD), y))), div(mul(x, WAD), y))\\n        }\\n    }\\n\\n    /// @dev Equivalent to `(x * WAD) / y` rounded up, but without overflow and divide by zero checks.\\n    function rawDivWadUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := add(iszero(iszero(mod(mul(x, WAD), y))), div(mul(x, WAD), y))\\n        }\\n    }\\n\\n    /// @dev Equivalent to `x` to the power of `y`.\\n    /// because `x ** y = (e ** ln(x)) ** y = e ** (ln(x) * y)`.\\n    /// Note: This function is an approximation.\\n    function powWad(int256 x, int256 y) internal pure returns (int256) {\\n        // Using `ln(x)` means `x` must be greater than 0.\\n        return expWad((lnWad(x) * y) / int256(WAD));\\n    }\\n\\n    /// @dev Returns `exp(x)`, denominated in `WAD`.\\n    /// Credit to Remco Bloemen under MIT license: https://2\\u03c0.com/22/exp-ln\\n    /// Note: This function is an approximation. Monotonically increasing.\\n    function expWad(int256 x) internal pure returns (int256 r) {\\n        unchecked {\\n            // When the result is less than 0.5 we return zero.\\n            // This happens when `x <= (log(1e-18) * 1e18) ~ -4.15e19`.\\n            if (x <= -41446531673892822313) return r;\\n\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                // When the result is greater than `(2**255 - 1) / 1e18` we can not represent it as\\n                // an int. This happens when `x >= floor(log((2**255 - 1) / 1e18) * 1e18) \\u2248 135`.\\n                if iszero(slt(x, 135305999368893231589)) {\\n                    mstore(0x00, 0xa37bfec9) // `ExpOverflow()`.\\n                    revert(0x1c, 0x04)\\n                }\\n            }\\n\\n            // `x` is now in the range `(-42, 136) * 1e18`. Convert to `(-42, 136) * 2**96`\\n            // for more intermediate precision and a binary basis. This base conversion\\n            // is a multiplication by 1e18 / 2**96 = 5**18 / 2**78.\\n            x = (x << 78) / 5 ** 18;\\n\\n            // Reduce range of x to (-\\u00bd ln 2, \\u00bd ln 2) * 2**96 by factoring out powers\\n            // of two such that exp(x) = exp(x') * 2**k, where k is an integer.\\n            // Solving this gives k = round(x / log(2)) and x' = x - k * log(2).\\n            int256 k = ((x << 96) / 54916777467707473351141471128 + 2 ** 95) >> 96;\\n            x = x - k * 54916777467707473351141471128;\\n\\n            // `k` is in the range `[-61, 195]`.\\n\\n            // Evaluate using a (6, 7)-term rational approximation.\\n            // `p` is made monic, we'll multiply by a scale factor later.\\n            int256 y = x + 1346386616545796478920950773328;\\n            y = ((y * x) >> 96) + 57155421227552351082224309758442;\\n            int256 p = y + x - 94201549194550492254356042504812;\\n            p = ((p * y) >> 96) + 28719021644029726153956944680412240;\\n            p = p * x + (4385272521454847904659076985693276 << 96);\\n\\n            // We leave `p` in `2**192` basis so we don't need to scale it back up for the division.\\n            int256 q = x - 2855989394907223263936484059900;\\n            q = ((q * x) >> 96) + 50020603652535783019961831881945;\\n            q = ((q * x) >> 96) - 533845033583426703283633433725380;\\n            q = ((q * x) >> 96) + 3604857256930695427073651918091429;\\n            q = ((q * x) >> 96) - 14423608567350463180887372962807573;\\n            q = ((q * x) >> 96) + 26449188498355588339934803723976023;\\n\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                // Div in assembly because solidity adds a zero check despite the unchecked.\\n                // The q polynomial won't have zeros in the domain as all its roots are complex.\\n                // No scaling is necessary because p is already `2**96` too large.\\n                r := sdiv(p, q)\\n            }\\n\\n            // r should be in the range `(0.09, 0.25) * 2**96`.\\n\\n            // We now need to multiply r by:\\n            // - The scale factor `s \\u2248 6.031367120`.\\n            // - The `2**k` factor from the range reduction.\\n            // - The `1e18 / 2**96` factor for base conversion.\\n            // We do this all at once, with an intermediate result in `2**213`\\n            // basis, so the final right shift is always by a positive amount.\\n            r = int256(\\n                (uint256(r) * 3822833074963236453042738258902158003155416615667) >> uint256(195 - k)\\n            );\\n        }\\n    }\\n\\n    /// @dev Returns `ln(x)`, denominated in `WAD`.\\n    /// Credit to Remco Bloemen under MIT license: https://2\\u03c0.com/22/exp-ln\\n    /// Note: This function is an approximation. Monotonically increasing.\\n    function lnWad(int256 x) internal pure returns (int256 r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // We want to convert `x` from `10**18` fixed point to `2**96` fixed point.\\n            // We do this by multiplying by `2**96 / 10**18`. But since\\n            // `ln(x * C) = ln(x) + ln(C)`, we can simply do nothing here\\n            // and add `ln(2**96 / 10**18)` at the end.\\n\\n            // Compute `k = log2(x) - 96`, `r = 159 - k = 255 - log2(x) = 255 ^ log2(x)`.\\n            r := shl(7, lt(0xffffffffffffffffffffffffffffffff, x))\\n            r := or(r, shl(6, lt(0xffffffffffffffff, shr(r, x))))\\n            r := or(r, shl(5, lt(0xffffffff, shr(r, x))))\\n            r := or(r, shl(4, lt(0xffff, shr(r, x))))\\n            r := or(r, shl(3, lt(0xff, shr(r, x))))\\n            // We place the check here for more optimal stack operations.\\n            if iszero(sgt(x, 0)) {\\n                mstore(0x00, 0x1615e638) // `LnWadUndefined()`.\\n                revert(0x1c, 0x04)\\n            }\\n            // forgefmt: disable-next-item\\n            r := xor(r, byte(and(0x1f, shr(shr(r, x), 0x8421084210842108cc6318c6db6d54be)),\\n                0xf8f9f9faf9fdfafbf9fdfcfdfafbfcfef9fafdfafcfcfbfefafafcfbffffffff))\\n\\n            // Reduce range of x to (1, 2) * 2**96\\n            // ln(2^k * x) = k * ln(2) + ln(x)\\n            x := shr(159, shl(r, x))\\n\\n            // Evaluate using a (8, 8)-term rational approximation.\\n            // `p` is made monic, we will multiply by a scale factor later.\\n            // forgefmt: disable-next-item\\n            let p := sub( // This heavily nested expression is to avoid stack-too-deep for via-ir.\\n                sar(96, mul(add(43456485725739037958740375743393,\\n                sar(96, mul(add(24828157081833163892658089445524,\\n                sar(96, mul(add(3273285459638523848632254066296,\\n                    x), x))), x))), x)), 11111509109440967052023855526967)\\n            p := sub(sar(96, mul(p, x)), 45023709667254063763336534515857)\\n            p := sub(sar(96, mul(p, x)), 14706773417378608786704636184526)\\n            p := sub(mul(p, x), shl(96, 795164235651350426258249787498))\\n            // We leave `p` in `2**192` basis so we don't need to scale it back up for the division.\\n\\n            // `q` is monic by convention.\\n            let q := add(5573035233440673466300451813936, x)\\n            q := add(71694874799317883764090561454958, sar(96, mul(x, q)))\\n            q := add(283447036172924575727196451306956, sar(96, mul(x, q)))\\n            q := add(401686690394027663651624208769553, sar(96, mul(x, q)))\\n            q := add(204048457590392012362485061816622, sar(96, mul(x, q)))\\n            q := add(31853899698501571402653359427138, sar(96, mul(x, q)))\\n            q := add(909429971244387300277376558375, sar(96, mul(x, q)))\\n\\n            // `p / q` is in the range `(0, 0.125) * 2**96`.\\n\\n            // Finalization, we need to:\\n            // - Multiply by the scale factor `s = 5.549\\u2026`.\\n            // - Add `ln(2**96 / 10**18)`.\\n            // - Add `k * ln(2)`.\\n            // - Multiply by `10**18 / 2**96 = 5**18 >> 78`.\\n\\n            // The q polynomial is known not to have zeros in the domain.\\n            // No scaling required because p is already `2**96` too large.\\n            p := sdiv(p, q)\\n            // Multiply by the scaling factor: `s * 5**18 * 2**96`, base is now `5**18 * 2**192`.\\n            p := mul(1677202110996718588342820967067443963516166, p)\\n            // Add `ln(2) * k * 5**18 * 2**192`.\\n            // forgefmt: disable-next-item\\n            p := add(mul(16597577552685614221487285958193947469193820559219878177908093499208371, sub(159, r)), p)\\n            // Add `ln(2**96 / 10**18) * 5**18 * 2**192`.\\n            p := add(600920179829731861736702779321621459595472258049074101567377883020018308, p)\\n            // Base conversion: mul `2**18 / 2**192`.\\n            r := sar(174, p)\\n        }\\n    }\\n\\n    /// @dev Returns `W_0(x)`, denominated in `WAD`.\\n    /// See: https://en.wikipedia.org/wiki/Lambert_W_function\\n    /// a.k.a. Product log function. This is an approximation of the principal branch.\\n    /// Note: This function is an approximation. Monotonically increasing.\\n    function lambertW0Wad(int256 x) internal pure returns (int256 w) {\\n        // forgefmt: disable-next-item\\n        unchecked {\\n            if ((w = x) <= -367879441171442322) revert OutOfDomain(); // `x` less than `-1/e`.\\n            int256 wad = int256(WAD);\\n            int256 p = x;\\n            uint256 c; // Whether we need to avoid catastrophic cancellation.\\n            uint256 i = 4; // Number of iterations.\\n            if (w <= 0x1ffffffffffff) {\\n                if (-0x4000000000000 <= w) {\\n                    i = 1; // Inputs near zero only take one step to converge.\\n                } else if (w <= -0x3ffffffffffffff) {\\n                    i = 32; // Inputs near `-1/e` take very long to converge.\\n                }\\n            } else if (uint256(w >> 63) == uint256(0)) {\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    // Inline log2 for more performance, since the range is small.\\n                    let v := shr(49, w)\\n                    let l := shl(3, lt(0xff, v))\\n                    l := add(or(l, byte(and(0x1f, shr(shr(l, v), 0x8421084210842108cc6318c6db6d54be)),\\n                        0x0706060506020504060203020504030106050205030304010505030400000000)), 49)\\n                    w := sdiv(shl(l, 7), byte(sub(l, 31), 0x0303030303030303040506080c13))\\n                    c := gt(l, 60)\\n                    i := add(2, add(gt(l, 53), c))\\n                }\\n            } else {\\n                int256 ll = lnWad(w = lnWad(w));\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    // `w = ln(x) - ln(ln(x)) + b * ln(ln(x)) / ln(x)`.\\n                    w := add(sdiv(mul(ll, 1023715080943847266), w), sub(w, ll))\\n                    i := add(3, iszero(shr(68, x)))\\n                    c := iszero(shr(143, x))\\n                }\\n                if (c == uint256(0)) {\\n                    do { // If `x` is big, use Newton's so that intermediate values won't overflow.\\n                        int256 e = expWad(w);\\n                        /// @solidity memory-safe-assembly\\n                        assembly {\\n                            let t := mul(w, div(e, wad))\\n                            w := sub(w, sdiv(sub(t, x), div(add(e, t), wad)))\\n                        }\\n                        if (p <= w) break;\\n                        p = w;\\n                    } while (--i != uint256(0));\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        w := sub(w, sgt(w, 2))\\n                    }\\n                    return w;\\n                }\\n            }\\n            do { // Otherwise, use Halley's for faster convergence.\\n                int256 e = expWad(w);\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let t := add(w, wad)\\n                    let s := sub(mul(w, e), mul(x, wad))\\n                    w := sub(w, sdiv(mul(s, wad), sub(mul(e, t), sdiv(mul(add(t, wad), s), add(t, t)))))\\n                }\\n                if (p <= w) break;\\n                p = w;\\n            } while (--i != c);\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                w := sub(w, sgt(w, 2))\\n            }\\n            // For certain ranges of `x`, we'll use the quadratic-rate recursive formula of\\n            // R. Iacono and J.P. Boyd for the last iteration, to avoid catastrophic cancellation.\\n            if (c == uint256(0)) return w;\\n            int256 t = w | 1;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                x := sdiv(mul(x, wad), t)\\n            }\\n            x = (t * (wad + lnWad(x)));\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                w := sdiv(x, add(wad, t))\\n            }\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                  GENERAL NUMBER UTILITIES                  */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Calculates `floor(x * y / d)` with full precision.\\n    /// Throws if result overflows a uint256 or when `d` is zero.\\n    /// Credit to Remco Bloemen under MIT license: https://2\\u03c0.com/21/muldiv\\n    function fullMulDiv(uint256 x, uint256 y, uint256 d) internal pure returns (uint256 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // 512-bit multiply `[p1 p0] = x * y`.\\n            // Compute the product mod `2**256` and mod `2**256 - 1`\\n            // then use the Chinese Remainder Theorem to reconstruct\\n            // the 512 bit result. The result is stored in two 256\\n            // variables such that `product = p1 * 2**256 + p0`.\\n\\n            // Temporarily use `result` as `p0` to save gas.\\n            result := mul(x, y) // Lower 256 bits of `x * y`.\\n            for {} 1 {} {\\n                // If overflows.\\n                if iszero(mul(or(iszero(x), eq(div(result, x), y)), d)) {\\n                    let mm := mulmod(x, y, not(0))\\n                    let p1 := sub(mm, add(result, lt(mm, result))) // Upper 256 bits of `x * y`.\\n\\n                    /*------------------- 512 by 256 division --------------------*/\\n\\n                    // Make division exact by subtracting the remainder from `[p1 p0]`.\\n                    let r := mulmod(x, y, d) // Compute remainder using mulmod.\\n                    let t := and(d, sub(0, d)) // The least significant bit of `d`. `t >= 1`.\\n                    // Make sure the result is less than `2**256`. Also prevents `d == 0`.\\n                    // Placing the check here seems to give more optimal stack operations.\\n                    if iszero(gt(d, p1)) {\\n                        mstore(0x00, 0xae47f702) // `FullMulDivFailed()`.\\n                        revert(0x1c, 0x04)\\n                    }\\n                    d := div(d, t) // Divide `d` by `t`, which is a power of two.\\n                    // Invert `d mod 2**256`\\n                    // Now that `d` is an odd number, it has an inverse\\n                    // modulo `2**256` such that `d * inv = 1 mod 2**256`.\\n                    // Compute the inverse by starting with a seed that is correct\\n                    // correct for four bits. That is, `d * inv = 1 mod 2**4`.\\n                    let inv := xor(2, mul(3, d))\\n                    // Now use Newton-Raphson iteration to improve the precision.\\n                    // Thanks to Hensel's lifting lemma, this also works in modular\\n                    // arithmetic, doubling the correct bits in each step.\\n                    inv := mul(inv, sub(2, mul(d, inv))) // inverse mod 2**8\\n                    inv := mul(inv, sub(2, mul(d, inv))) // inverse mod 2**16\\n                    inv := mul(inv, sub(2, mul(d, inv))) // inverse mod 2**32\\n                    inv := mul(inv, sub(2, mul(d, inv))) // inverse mod 2**64\\n                    inv := mul(inv, sub(2, mul(d, inv))) // inverse mod 2**128\\n                    result :=\\n                        mul(\\n                            // Divide [p1 p0] by the factors of two.\\n                            // Shift in bits from `p1` into `p0`. For this we need\\n                            // to flip `t` such that it is `2**256 / t`.\\n                            or(\\n                                mul(sub(p1, gt(r, result)), add(div(sub(0, t), t), 1)),\\n                                div(sub(result, r), t)\\n                            ),\\n                            mul(sub(2, mul(d, inv)), inv) // inverse mod 2**256\\n                        )\\n                    break\\n                }\\n                result := div(result, d)\\n                break\\n            }\\n        }\\n    }\\n\\n    /// @dev Calculates `floor(x * y / d)` with full precision.\\n    /// Behavior is undefined if `d` is zero or the final result cannot fit in 256 bits.\\n    /// Performs the full 512 bit calculation regardless.\\n    function fullMulDivUnchecked(uint256 x, uint256 y, uint256 d)\\n        internal\\n        pure\\n        returns (uint256 result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mul(x, y)\\n            let mm := mulmod(x, y, not(0))\\n            let p1 := sub(mm, add(result, lt(mm, result)))\\n            let t := and(d, sub(0, d))\\n            let r := mulmod(x, y, d)\\n            d := div(d, t)\\n            let inv := xor(2, mul(3, d))\\n            inv := mul(inv, sub(2, mul(d, inv)))\\n            inv := mul(inv, sub(2, mul(d, inv)))\\n            inv := mul(inv, sub(2, mul(d, inv)))\\n            inv := mul(inv, sub(2, mul(d, inv)))\\n            inv := mul(inv, sub(2, mul(d, inv)))\\n            result :=\\n                mul(\\n                    or(mul(sub(p1, gt(r, result)), add(div(sub(0, t), t), 1)), div(sub(result, r), t)),\\n                    mul(sub(2, mul(d, inv)), inv)\\n                )\\n        }\\n    }\\n\\n    /// @dev Calculates `floor(x * y / d)` with full precision, rounded up.\\n    /// Throws if result overflows a uint256 or when `d` is zero.\\n    /// Credit to Uniswap-v3-core under MIT license:\\n    /// https://github.com/Uniswap/v3-core/blob/main/contracts/libraries/FullMath.sol\\n    function fullMulDivUp(uint256 x, uint256 y, uint256 d) internal pure returns (uint256 result) {\\n        result = fullMulDiv(x, y, d);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if mulmod(x, y, d) {\\n                result := add(result, 1)\\n                if iszero(result) {\\n                    mstore(0x00, 0xae47f702) // `FullMulDivFailed()`.\\n                    revert(0x1c, 0x04)\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns `floor(x * y / d)`.\\n    /// Reverts if `x * y` overflows, or `d` is zero.\\n    function mulDiv(uint256 x, uint256 y, uint256 d) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := mul(x, y)\\n            // Equivalent to `require(d != 0 && (y == 0 || x <= type(uint256).max / y))`.\\n            if iszero(mul(or(iszero(x), eq(div(z, x), y)), d)) {\\n                mstore(0x00, 0xad251c27) // `MulDivFailed()`.\\n                revert(0x1c, 0x04)\\n            }\\n            z := div(z, d)\\n        }\\n    }\\n\\n    /// @dev Returns `ceil(x * y / d)`.\\n    /// Reverts if `x * y` overflows, or `d` is zero.\\n    function mulDivUp(uint256 x, uint256 y, uint256 d) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := mul(x, y)\\n            // Equivalent to `require(d != 0 && (y == 0 || x <= type(uint256).max / y))`.\\n            if iszero(mul(or(iszero(x), eq(div(z, x), y)), d)) {\\n                mstore(0x00, 0xad251c27) // `MulDivFailed()`.\\n                revert(0x1c, 0x04)\\n            }\\n            z := add(iszero(iszero(mod(z, d))), div(z, d))\\n        }\\n    }\\n\\n    /// @dev Returns `ceil(x / d)`.\\n    /// Reverts if `d` is zero.\\n    function divUp(uint256 x, uint256 d) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if iszero(d) {\\n                mstore(0x00, 0x65244e4e) // `DivFailed()`.\\n                revert(0x1c, 0x04)\\n            }\\n            z := add(iszero(iszero(mod(x, d))), div(x, d))\\n        }\\n    }\\n\\n    /// @dev Returns `max(0, x - y)`.\\n    function zeroFloorSub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := mul(gt(x, y), sub(x, y))\\n        }\\n    }\\n\\n    /// @dev Returns `condition ? x : y`, without branching.\\n    function ternary(bool condition, uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := xor(x, mul(xor(x, y), iszero(condition)))\\n        }\\n    }\\n\\n    /// @dev Exponentiate `x` to `y` by squaring, denominated in base `b`.\\n    /// Reverts if the computation overflows.\\n    function rpow(uint256 x, uint256 y, uint256 b) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := mul(b, iszero(y)) // `0 ** 0 = 1`. Otherwise, `0 ** n = 0`.\\n            if x {\\n                z := xor(b, mul(xor(b, x), and(y, 1))) // `z = isEven(y) ? scale : x`\\n                let half := shr(1, b) // Divide `b` by 2.\\n                // Divide `y` by 2 every iteration.\\n                for { y := shr(1, y) } y { y := shr(1, y) } {\\n                    let xx := mul(x, x) // Store x squared.\\n                    let xxRound := add(xx, half) // Round to the nearest number.\\n                    // Revert if `xx + half` overflowed, or if `x ** 2` overflows.\\n                    if or(lt(xxRound, xx), shr(128, x)) {\\n                        mstore(0x00, 0x49f7642b) // `RPowOverflow()`.\\n                        revert(0x1c, 0x04)\\n                    }\\n                    x := div(xxRound, b) // Set `x` to scaled `xxRound`.\\n                    // If `y` is odd:\\n                    if and(y, 1) {\\n                        let zx := mul(z, x) // Compute `z * x`.\\n                        let zxRound := add(zx, half) // Round to the nearest number.\\n                        // If `z * x` overflowed or `zx + half` overflowed:\\n                        if or(xor(div(zx, x), z), lt(zxRound, zx)) {\\n                            // Revert if `x` is non-zero.\\n                            if x {\\n                                mstore(0x00, 0x49f7642b) // `RPowOverflow()`.\\n                                revert(0x1c, 0x04)\\n                            }\\n                        }\\n                        z := div(zxRound, b) // Return properly scaled `zxRound`.\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns the square root of `x`, rounded down.\\n    function sqrt(uint256 x) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // `floor(sqrt(2**15)) = 181`. `sqrt(2**15) - 181 = 2.84`.\\n            z := 181 // The \\\"correct\\\" value is 1, but this saves a multiplication later.\\n\\n            // This segment is to get a reasonable initial estimate for the Babylonian method. With a bad\\n            // start, the correct # of bits increases ~linearly each iteration instead of ~quadratically.\\n\\n            // Let `y = x / 2**r`. We check `y >= 2**(k + 8)`\\n            // but shift right by `k` bits to ensure that if `x >= 256`, then `y >= 256`.\\n            let r := shl(7, lt(0xffffffffffffffffffffffffffffffffff, x))\\n            r := or(r, shl(6, lt(0xffffffffffffffffff, shr(r, x))))\\n            r := or(r, shl(5, lt(0xffffffffff, shr(r, x))))\\n            r := or(r, shl(4, lt(0xffffff, shr(r, x))))\\n            z := shl(shr(1, r), z)\\n\\n            // Goal was to get `z*z*y` within a small factor of `x`. More iterations could\\n            // get y in a tighter range. Currently, we will have y in `[256, 256*(2**16))`.\\n            // We ensured `y >= 256` so that the relative difference between `y` and `y+1` is small.\\n            // That's not possible if `x < 256` but we can just verify those cases exhaustively.\\n\\n            // Now, `z*z*y <= x < z*z*(y+1)`, and `y <= 2**(16+8)`, and either `y >= 256`, or `x < 256`.\\n            // Correctness can be checked exhaustively for `x < 256`, so we assume `y >= 256`.\\n            // Then `z*sqrt(y)` is within `sqrt(257)/sqrt(256)` of `sqrt(x)`, or about 20bps.\\n\\n            // For `s` in the range `[1/256, 256]`, the estimate `f(s) = (181/1024) * (s+1)`\\n            // is in the range `(1/2.84 * sqrt(s), 2.84 * sqrt(s))`,\\n            // with largest error when `s = 1` and when `s = 256` or `1/256`.\\n\\n            // Since `y` is in `[256, 256*(2**16))`, let `a = y/65536`, so that `a` is in `[1/256, 256)`.\\n            // Then we can estimate `sqrt(y)` using\\n            // `sqrt(65536) * 181/1024 * (a + 1) = 181/4 * (y + 65536)/65536 = 181 * (y + 65536)/2**18`.\\n\\n            // There is no overflow risk here since `y < 2**136` after the first branch above.\\n            z := shr(18, mul(z, add(shr(r, x), 65536))) // A `mul()` is saved from starting `z` at 181.\\n\\n            // Given the worst case multiplicative error of 2.84 above, 7 iterations should be enough.\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n\\n            // If `x+1` is a perfect square, the Babylonian method cycles between\\n            // `floor(sqrt(x))` and `ceil(sqrt(x))`. This statement ensures we return floor.\\n            // See: https://en.wikipedia.org/wiki/Integer_square_root#Using_only_integer_division\\n            z := sub(z, lt(div(x, z), z))\\n        }\\n    }\\n\\n    /// @dev Returns the cube root of `x`, rounded down.\\n    /// Credit to bout3fiddy and pcaversaccio under AGPLv3 license:\\n    /// https://github.com/pcaversaccio/snekmate/blob/main/src/utils/Math.vy\\n    /// Formally verified by xuwinnie:\\n    /// https://github.com/vectorized/solady/blob/main/audits/xuwinnie-solady-cbrt-proof.pdf\\n    function cbrt(uint256 x) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let r := shl(7, lt(0xffffffffffffffffffffffffffffffff, x))\\n            r := or(r, shl(6, lt(0xffffffffffffffff, shr(r, x))))\\n            r := or(r, shl(5, lt(0xffffffff, shr(r, x))))\\n            r := or(r, shl(4, lt(0xffff, shr(r, x))))\\n            r := or(r, shl(3, lt(0xff, shr(r, x))))\\n            // Makeshift lookup table to nudge the approximate log2 result.\\n            z := div(shl(div(r, 3), shl(lt(0xf, shr(r, x)), 0xf)), xor(7, mod(r, 3)))\\n            // Newton-Raphson's.\\n            z := div(add(add(div(x, mul(z, z)), z), z), 3)\\n            z := div(add(add(div(x, mul(z, z)), z), z), 3)\\n            z := div(add(add(div(x, mul(z, z)), z), z), 3)\\n            z := div(add(add(div(x, mul(z, z)), z), z), 3)\\n            z := div(add(add(div(x, mul(z, z)), z), z), 3)\\n            z := div(add(add(div(x, mul(z, z)), z), z), 3)\\n            z := div(add(add(div(x, mul(z, z)), z), z), 3)\\n            // Round down.\\n            z := sub(z, lt(div(x, mul(z, z)), z))\\n        }\\n    }\\n\\n    /// @dev Returns the square root of `x`, denominated in `WAD`, rounded down.\\n    function sqrtWad(uint256 x) internal pure returns (uint256 z) {\\n        unchecked {\\n            if (x <= type(uint256).max / 10 ** 18) return sqrt(x * 10 ** 18);\\n            z = (1 + sqrt(x)) * 10 ** 9;\\n            z = (fullMulDivUnchecked(x, 10 ** 18, z) + z) >> 1;\\n        }\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := sub(z, gt(999999999999999999, sub(mulmod(z, z, x), 1))) // Round down.\\n        }\\n    }\\n\\n    /// @dev Returns the cube root of `x`, denominated in `WAD`, rounded down.\\n    /// Formally verified by xuwinnie:\\n    /// https://github.com/vectorized/solady/blob/main/audits/xuwinnie-solady-cbrt-proof.pdf\\n    function cbrtWad(uint256 x) internal pure returns (uint256 z) {\\n        unchecked {\\n            if (x <= type(uint256).max / 10 ** 36) return cbrt(x * 10 ** 36);\\n            z = (1 + cbrt(x)) * 10 ** 12;\\n            z = (fullMulDivUnchecked(x, 10 ** 36, z * z) + z + z) / 3;\\n        }\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let p := x\\n            for {} 1 {} {\\n                if iszero(shr(229, p)) {\\n                    if iszero(shr(199, p)) {\\n                        p := mul(p, 100000000000000000) // 10 ** 17.\\n                        break\\n                    }\\n                    p := mul(p, 100000000) // 10 ** 8.\\n                    break\\n                }\\n                if iszero(shr(249, p)) { p := mul(p, 100) }\\n                break\\n            }\\n            let t := mulmod(mul(z, z), z, p)\\n            z := sub(z, gt(lt(t, shr(1, p)), iszero(t))) // Round down.\\n        }\\n    }\\n\\n    /// @dev Returns the factorial of `x`.\\n    function factorial(uint256 x) internal pure returns (uint256 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := 1\\n            if iszero(lt(x, 58)) {\\n                mstore(0x00, 0xaba0f2a2) // `FactorialOverflow()`.\\n                revert(0x1c, 0x04)\\n            }\\n            for {} x { x := sub(x, 1) } { result := mul(result, x) }\\n        }\\n    }\\n\\n    /// @dev Returns the log2 of `x`.\\n    /// Equivalent to computing the index of the most significant bit (MSB) of `x`.\\n    /// Returns 0 if `x` is zero.\\n    function log2(uint256 x) internal pure returns (uint256 r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r := shl(7, lt(0xffffffffffffffffffffffffffffffff, x))\\n            r := or(r, shl(6, lt(0xffffffffffffffff, shr(r, x))))\\n            r := or(r, shl(5, lt(0xffffffff, shr(r, x))))\\n            r := or(r, shl(4, lt(0xffff, shr(r, x))))\\n            r := or(r, shl(3, lt(0xff, shr(r, x))))\\n            // forgefmt: disable-next-item\\n            r := or(r, byte(and(0x1f, shr(shr(r, x), 0x8421084210842108cc6318c6db6d54be)),\\n                0x0706060506020504060203020504030106050205030304010505030400000000))\\n        }\\n    }\\n\\n    /// @dev Returns the log2 of `x`, rounded up.\\n    /// Returns 0 if `x` is zero.\\n    function log2Up(uint256 x) internal pure returns (uint256 r) {\\n        r = log2(x);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r := add(r, lt(shl(r, 1), x))\\n        }\\n    }\\n\\n    /// @dev Returns the log10 of `x`.\\n    /// Returns 0 if `x` is zero.\\n    function log10(uint256 x) internal pure returns (uint256 r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if iszero(lt(x, 100000000000000000000000000000000000000)) {\\n                x := div(x, 100000000000000000000000000000000000000)\\n                r := 38\\n            }\\n            if iszero(lt(x, 100000000000000000000)) {\\n                x := div(x, 100000000000000000000)\\n                r := add(r, 20)\\n            }\\n            if iszero(lt(x, 10000000000)) {\\n                x := div(x, 10000000000)\\n                r := add(r, 10)\\n            }\\n            if iszero(lt(x, 100000)) {\\n                x := div(x, 100000)\\n                r := add(r, 5)\\n            }\\n            r := add(r, add(gt(x, 9), add(gt(x, 99), add(gt(x, 999), gt(x, 9999)))))\\n        }\\n    }\\n\\n    /// @dev Returns the log10 of `x`, rounded up.\\n    /// Returns 0 if `x` is zero.\\n    function log10Up(uint256 x) internal pure returns (uint256 r) {\\n        r = log10(x);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r := add(r, lt(exp(10, r), x))\\n        }\\n    }\\n\\n    /// @dev Returns the log256 of `x`.\\n    /// Returns 0 if `x` is zero.\\n    function log256(uint256 x) internal pure returns (uint256 r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r := shl(7, lt(0xffffffffffffffffffffffffffffffff, x))\\n            r := or(r, shl(6, lt(0xffffffffffffffff, shr(r, x))))\\n            r := or(r, shl(5, lt(0xffffffff, shr(r, x))))\\n            r := or(r, shl(4, lt(0xffff, shr(r, x))))\\n            r := or(shr(3, r), lt(0xff, shr(r, x)))\\n        }\\n    }\\n\\n    /// @dev Returns the log256 of `x`, rounded up.\\n    /// Returns 0 if `x` is zero.\\n    function log256Up(uint256 x) internal pure returns (uint256 r) {\\n        r = log256(x);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r := add(r, lt(shl(shl(3, r), 1), x))\\n        }\\n    }\\n\\n    /// @dev Returns the scientific notation format `mantissa * 10 ** exponent` of `x`.\\n    /// Useful for compressing prices (e.g. using 25 bit mantissa and 7 bit exponent).\\n    function sci(uint256 x) internal pure returns (uint256 mantissa, uint256 exponent) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mantissa := x\\n            if mantissa {\\n                if iszero(mod(mantissa, 1000000000000000000000000000000000)) {\\n                    mantissa := div(mantissa, 1000000000000000000000000000000000)\\n                    exponent := 33\\n                }\\n                if iszero(mod(mantissa, 10000000000000000000)) {\\n                    mantissa := div(mantissa, 10000000000000000000)\\n                    exponent := add(exponent, 19)\\n                }\\n                if iszero(mod(mantissa, 1000000000000)) {\\n                    mantissa := div(mantissa, 1000000000000)\\n                    exponent := add(exponent, 12)\\n                }\\n                if iszero(mod(mantissa, 1000000)) {\\n                    mantissa := div(mantissa, 1000000)\\n                    exponent := add(exponent, 6)\\n                }\\n                if iszero(mod(mantissa, 10000)) {\\n                    mantissa := div(mantissa, 10000)\\n                    exponent := add(exponent, 4)\\n                }\\n                if iszero(mod(mantissa, 100)) {\\n                    mantissa := div(mantissa, 100)\\n                    exponent := add(exponent, 2)\\n                }\\n                if iszero(mod(mantissa, 10)) {\\n                    mantissa := div(mantissa, 10)\\n                    exponent := add(exponent, 1)\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Convenience function for packing `x` into a smaller number using `sci`.\\n    /// The `mantissa` will be in bits [7..255] (the upper 249 bits).\\n    /// The `exponent` will be in bits [0..6] (the lower 7 bits).\\n    /// Use `SafeCastLib` to safely ensure that the `packed` number is small\\n    /// enough to fit in the desired unsigned integer type:\\n    /// ```\\n    ///     uint32 packed = SafeCastLib.toUint32(FixedPointMathLib.packSci(777 ether));\\n    /// ```\\n    function packSci(uint256 x) internal pure returns (uint256 packed) {\\n        (x, packed) = sci(x); // Reuse for `mantissa` and `exponent`.\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if shr(249, x) {\\n                mstore(0x00, 0xce30380c) // `MantissaOverflow()`.\\n                revert(0x1c, 0x04)\\n            }\\n            packed := or(shl(7, x), packed)\\n        }\\n    }\\n\\n    /// @dev Convenience function for unpacking a packed number from `packSci`.\\n    function unpackSci(uint256 packed) internal pure returns (uint256 unpacked) {\\n        unchecked {\\n            unpacked = (packed >> 7) * 10 ** (packed & 0x7f);\\n        }\\n    }\\n\\n    /// @dev Returns the average of `x` and `y`. Rounds towards zero.\\n    function avg(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        unchecked {\\n            z = (x & y) + ((x ^ y) >> 1);\\n        }\\n    }\\n\\n    /// @dev Returns the average of `x` and `y`. Rounds towards negative infinity.\\n    function avg(int256 x, int256 y) internal pure returns (int256 z) {\\n        unchecked {\\n            z = (x >> 1) + (y >> 1) + (x & y & 1);\\n        }\\n    }\\n\\n    /// @dev Returns the absolute value of `x`.\\n    function abs(int256 x) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := xor(sar(255, x), add(sar(255, x), x))\\n        }\\n    }\\n\\n    /// @dev Returns the absolute distance between `x` and `y`.\\n    function dist(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := xor(mul(xor(sub(y, x), sub(x, y)), gt(x, y)), sub(y, x))\\n        }\\n    }\\n\\n    /// @dev Returns the absolute distance between `x` and `y`.\\n    function dist(int256 x, int256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := xor(mul(xor(sub(y, x), sub(x, y)), sgt(x, y)), sub(y, x))\\n        }\\n    }\\n\\n    /// @dev Returns the minimum of `x` and `y`.\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := xor(x, mul(xor(x, y), lt(y, x)))\\n        }\\n    }\\n\\n    /// @dev Returns the minimum of `x` and `y`.\\n    function min(int256 x, int256 y) internal pure returns (int256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := xor(x, mul(xor(x, y), slt(y, x)))\\n        }\\n    }\\n\\n    /// @dev Returns the maximum of `x` and `y`.\\n    function max(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := xor(x, mul(xor(x, y), gt(y, x)))\\n        }\\n    }\\n\\n    /// @dev Returns the maximum of `x` and `y`.\\n    function max(int256 x, int256 y) internal pure returns (int256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := xor(x, mul(xor(x, y), sgt(y, x)))\\n        }\\n    }\\n\\n    /// @dev Returns `x`, bounded to `minValue` and `maxValue`.\\n    function clamp(uint256 x, uint256 minValue, uint256 maxValue)\\n        internal\\n        pure\\n        returns (uint256 z)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := xor(x, mul(xor(x, minValue), gt(minValue, x)))\\n            z := xor(z, mul(xor(z, maxValue), lt(maxValue, z)))\\n        }\\n    }\\n\\n    /// @dev Returns `x`, bounded to `minValue` and `maxValue`.\\n    function clamp(int256 x, int256 minValue, int256 maxValue) internal pure returns (int256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := xor(x, mul(xor(x, minValue), sgt(minValue, x)))\\n            z := xor(z, mul(xor(z, maxValue), slt(maxValue, z)))\\n        }\\n    }\\n\\n    /// @dev Returns greatest common divisor of `x` and `y`.\\n    function gcd(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            for { z := x } y {} {\\n                let t := y\\n                y := mod(z, y)\\n                z := t\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns `a + (b - a) * (t - begin) / (end - begin)`,\\n    /// with `t` clamped between `begin` and `end` (inclusive).\\n    /// Agnostic to the order of (`a`, `b`) and (`end`, `begin`).\\n    /// If `begins == end`, returns `t <= begin ? a : b`.\\n    function lerp(uint256 a, uint256 b, uint256 t, uint256 begin, uint256 end)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        if (begin > end) {\\n            t = ~t;\\n            begin = ~begin;\\n            end = ~end;\\n        }\\n        if (t <= begin) return a;\\n        if (t >= end) return b;\\n        unchecked {\\n            if (b >= a) return a + fullMulDiv(b - a, t - begin, end - begin);\\n            return a - fullMulDiv(a - b, t - begin, end - begin);\\n        }\\n    }\\n\\n    /// @dev Returns `a + (b - a) * (t - begin) / (end - begin)`.\\n    /// with `t` clamped between `begin` and `end` (inclusive).\\n    /// Agnostic to the order of (`a`, `b`) and (`end`, `begin`).\\n    /// If `begins == end`, returns `t <= begin ? a : b`.\\n    function lerp(int256 a, int256 b, int256 t, int256 begin, int256 end)\\n        internal\\n        pure\\n        returns (int256)\\n    {\\n        if (begin > end) {\\n            t = int256(~uint256(t));\\n            begin = int256(~uint256(begin));\\n            end = int256(~uint256(end));\\n        }\\n        if (t <= begin) return a;\\n        if (t >= end) return b;\\n        // forgefmt: disable-next-item\\n        unchecked {\\n            if (b >= a) return int256(uint256(a) + fullMulDiv(uint256(b) - uint256(a),\\n                uint256(t) - uint256(begin), uint256(end) - uint256(begin)));\\n            return int256(uint256(a) - fullMulDiv(uint256(a) - uint256(b),\\n                uint256(t) - uint256(begin), uint256(end) - uint256(begin)));\\n        }\\n    }\\n\\n    /// @dev Returns if `x` is an even number. Some people may need this.\\n    function isEven(uint256 x) internal pure returns (bool) {\\n        return x & uint256(1) == uint256(0);\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                   RAW NUMBER OPERATIONS                    */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns `x + y`, without checking for overflow.\\n    function rawAdd(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        unchecked {\\n            z = x + y;\\n        }\\n    }\\n\\n    /// @dev Returns `x + y`, without checking for overflow.\\n    function rawAdd(int256 x, int256 y) internal pure returns (int256 z) {\\n        unchecked {\\n            z = x + y;\\n        }\\n    }\\n\\n    /// @dev Returns `x - y`, without checking for underflow.\\n    function rawSub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        unchecked {\\n            z = x - y;\\n        }\\n    }\\n\\n    /// @dev Returns `x - y`, without checking for underflow.\\n    function rawSub(int256 x, int256 y) internal pure returns (int256 z) {\\n        unchecked {\\n            z = x - y;\\n        }\\n    }\\n\\n    /// @dev Returns `x * y`, without checking for overflow.\\n    function rawMul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        unchecked {\\n            z = x * y;\\n        }\\n    }\\n\\n    /// @dev Returns `x * y`, without checking for overflow.\\n    function rawMul(int256 x, int256 y) internal pure returns (int256 z) {\\n        unchecked {\\n            z = x * y;\\n        }\\n    }\\n\\n    /// @dev Returns `x / y`, returning 0 if `y` is zero.\\n    function rawDiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := div(x, y)\\n        }\\n    }\\n\\n    /// @dev Returns `x / y`, returning 0 if `y` is zero.\\n    function rawSDiv(int256 x, int256 y) internal pure returns (int256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := sdiv(x, y)\\n        }\\n    }\\n\\n    /// @dev Returns `x % y`, returning 0 if `y` is zero.\\n    function rawMod(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := mod(x, y)\\n        }\\n    }\\n\\n    /// @dev Returns `x % y`, returning 0 if `y` is zero.\\n    function rawSMod(int256 x, int256 y) internal pure returns (int256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := smod(x, y)\\n        }\\n    }\\n\\n    /// @dev Returns `(x + y) % d`, return 0 if `d` if zero.\\n    function rawAddMod(uint256 x, uint256 y, uint256 d) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := addmod(x, y, d)\\n        }\\n    }\\n\\n    /// @dev Returns `(x * y) % d`, return 0 if `d` if zero.\\n    function rawMulMod(uint256 x, uint256 y, uint256 d) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := mulmod(x, y, d)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x08d912d9c732b2a4c31c81bb90e6e3ce73d3fcf2685de44ba3fb6a184812ad41\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0604052306080523480156200001557600080fd5b506200002062000026565b620000e7565b600054610100900460ff1615620000935760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811614620000e5576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b60805161275b6200011f600039600081816108a2015281816108e2015281816109e801528181610a280152610aa4015261275b6000f3fe60806040526004361061018d5760003560e01c80638da7ad23116100d7578063c6b61e4c11610085578063c6b61e4c14610456578063cd237a4114610476578063cf30901214610496578063e6c47bc5146104b1578063e97dcb62146104c8578063eacdc5ff146104d0578063f2fde38b146104e6578063f567244c1461050657600080fd5b80638da7ad2314610367578063a17d97f3146103b0578063a3bc61a5146103c5578063a72b05bc146103cd578063b6ff4934146103f4578063b97dd9e214610414578063c4d66de81461043657600080fd5b806355ce3b9a1161013f57806355ce3b9a146102645780635f75659f1461028457806364ab86751461028c578063664a1ad6146102ac5780636c003a9b146102e4578063715018a6146103145780637f8661a1146103295780638da5cb5b1461034957600080fd5b8063233e9903146101925780632697f03a146101b45780632aa3a2bc146101d45780633659cfe614610207578063372500ab146102275780634f1ef2861461023c57806352d1902d1461024f575b600080fd5b34801561019e57600080fd5b506101b26101ad36600461230c565b610528565b005b3480156101c057600080fd5b506101b26101cf36600461230c565b610577565b3480156101e057600080fd5b506101f46101ef36600461233c565b6107d8565b6040519081526020015b60405180910390f35b34801561021357600080fd5b506101b261022236600461233c565b610898565b34801561023357600080fd5b506101b2610960565b6101b261024a36600461236d565b6109de565b34801561025b57600080fd5b506101f4610a97565b34801561027057600080fd5b506101b261027f36600461233c565b610b45565b6101b2610ba7565b34801561029857600080fd5b506101f46102a736600461233c565b610e56565b3480156102b857600080fd5b5060fd546102cc906001600160a01b031681565b6040516001600160a01b0390911681526020016101fe565b3480156102f057600080fd5b506101015461030490610100900460ff1681565b60405190151581526020016101fe565b34801561032057600080fd5b506101b2610f4f565b34801561033557600080fd5b506101b261034436600461230c565b610f61565b34801561035557600080fd5b506097546001600160a01b03166102cc565b34801561037357600080fd5b5061039b61038236600461233c565b60fe602052600090815260409020805460019091015482565b604080519283526020830191909152016101fe565b3480156103bc57600080fd5b506101b2611186565b6101b261135f565b3480156103d957600080fd5b5060fb546103e79060ff1681565b6040516101fe9190612445565b34801561040057600080fd5b5061030461040f36600461233c565b6114ff565b34801561042057600080fd5b506104296115e2565b6040516101fe919061246d565b34801561044257600080fd5b506101b261045136600461233c565b61163d565b34801561046257600080fd5b5061039b61047136600461230c565b61186a565b34801561048257600080fd5b506101b2610491366004612484565b611898565b3480156104a257600080fd5b50610101546103049060ff1681565b3480156104bd57600080fd5b506101f46101005481565b6101b261194f565b3480156104dc57600080fd5b506101f460ff5481565b3480156104f257600080fd5b506101b261050136600461233c565b611b09565b34801561051257600080fd5b5061051b611b7f565b6040516101fe91906124ad565b610530611bf2565b61010080549082905560408051828152602081018490527fdc4a0b2dc1fa27da98de2ac6f8fa373b4be405e1bf69fc3976597b6d56b79abc91015b60405180910390a15050565b806000036105a0576040516362541df360e01b8152600481018290526024015b60405180910390fd5b61010154610100900460ff166105c85760405162f4f7c560e11b815260040160405180910390fd5b6105d1336114ff565b6105ee57604051635aa9184d60e01b815260040160405180910390fd5b33600090815260fe6020526040812060018082015491929161060f9161251a565b905060008060fb5460ff16600181111561062b5761062b61242f565b146106385760ff54610647565b600160ff54610647919061252d565b905060008282101561065a57600061066f565b610664838361252d565b61066f90600161251a565b90508085111561069c57604051632fe9914b60e21b81526004810186905260248101829052604401610597565b600060016106aa878661251a565b6106b4919061252d565b90506000845b82811161072257600060fc82815481106106d6576106d6612540565b9060005260206000209060020201905060006106ff896000015483600101548460000154611c4c565b905061070b818561251a565b93505050808061071a90612556565b9150506106ba565b5060018601829055604051600090339083908381818185875af1925050503d806000811461076c576040519150601f19603f3d011682016040523d82523d6000602084013e610771565b606091505b5050905080610793576040516312171d8360e31b815260040160405180910390fd5b604080518381526020810185905233917ff0a79ba53601e311de7e03ea2c22463403a62c3d42cec4b256a0f74e1259dae5910160405180910390a25050505050505050565b6001600160a01b038116600090815260fe602052604081205481036107ff57506000919050565b6001600160a01b038216600090815260fe602052604081206001908101548291610829919061251a565b905060008060fb5460ff1660018111156108455761084561242f565b0361086057600160ff54610859919061252d565b9050610865565b5060ff545b815b81811161088e578361087881612556565b945050808061088690612556565b915050610867565b5091949350505050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036108e05760405162461bcd60e51b81526004016105979061256f565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610912611c72565b6001600160a01b0316146109385760405162461bcd60e51b8152600401610597906125bb565b61094181611c8e565b6040805160008082526020820190925261095d91839190611c96565b50565b6101015460ff1615610985576040516337affdbf60e11b815260040160405180910390fd5b61010154610100900460ff166109ad5760405162f4f7c560e11b815260040160405180910390fd5b6109b6336114ff565b6109d357604051635aa9184d60e01b815260040160405180910390fd5b6109dc33611e06565b565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610a265760405162461bcd60e51b81526004016105979061256f565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610a58611c72565b6001600160a01b031614610a7e5760405162461bcd60e51b8152600401610597906125bb565b610a8782611c8e565b610a9382826001611c96565b5050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610b325760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c6044820152771b1959081d1a1c9bdd59da0819195b1959d85d1958d85b1b60421b6064820152608401610597565b506000805160206126df83398151915290565b610b4d611bf2565b60fd80546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f9c41a9a969e821894638b441dcdf78c0573277c91b8ac63440d790f5634a2b0b910161056b565b60fd546001600160a01b03163314610bd257604051632b3cd49d60e21b815260040160405180910390fd5b600160fb5460ff166001811115610beb57610beb61242f565b14610c495760405163fcbfb2b160e01b815260206004820152602760248201527f454e442045504f43483a2063616e206f6e6c7920656e6420612072756e6e696e6044820152660ce40cae0dec6d60cb1b6064820152608401610597565b61010154610100900460ff16610cc85760405163fcbfb2b160e01b815260206004820152603c60248201527f454e442045504f43483a2072657761726473206d75737420626520616c6c6f6360448201527f61746564206265666f726520656e64696e67207468652065706f6368000000006064820152608401610597565b600060fc60ff5481548110610cdf57610cdf612540565b906000526020600020906002020160000154905080341015610d1d5760405163082e13a160e31b815234600482015260248101829052604401610597565b600060fc60ff5481548110610d3457610d34612540565b9060005260206000209060020201905060008160000154905060ff547f64570abbb448406f773ac3a0c62178ed95f93e5465f64860899859bbe490fb4242604051610d8191815260200190565b60405180910390a260ff8054906000610d9983612556565b90915550506040805180820182528281526000602080830182815260fc8054600181018255935292517f371f36870d18f32a11fea0f144b021c8b407bb50f8e0267c711123f454b963c060029093029283015591517f371f36870d18f32a11fea0f144b021c8b407bb50f8e0267c711123f454b963c19091015560fb805460ff1916905560ff5491514281527f3011a2cb7316f75847dafe7f596d9728f2bcb38e662b785f36bc7ea76e4e714291015b60405180910390a2505050565b6000610e61826114ff565b610e6d57506000919050565b6001600160a01b038216600090815260fe602052604081206001908101548291610e97919061251a565b905060008060fb5460ff166001811115610eb357610eb361242f565b03610ece57600160ff54610ec7919061252d565b9050610ed3565b5060ff545b815b81811161088e57600060fc8281548110610ef157610ef1612540565b600091825260208083206001600160a01b038b16845260fe90915260408320546002929092020160018101548154919450610f2c9291611c4c565b9050610f38818761251a565b955050508080610f4790612556565b915050610ed5565b610f57611bf2565b6109dc6000611f26565b610f69611f78565b6101015460ff1615610f8e576040516337affdbf60e11b815260040160405180910390fd5b600060fb5460ff166001811115610fa757610fa761242f565b146110015760405163fcbfb2b160e01b8152602060048201526024808201527f455849543a206f6e6c7920616c6c6f77656420647572696e67206f70656e20706044820152636861736560e01b6064820152608401610597565b33600090815260fe60205260409020805482111561103f57805460405163cf47918160e01b8152610597918491600401918252602082015260400190565b8160000361106057604051635e85ae7360e01b815260040160405180910390fd5b611069336114ff565b156110775761107733611e06565b8181600001600082825461108b919061252d565b925050819055508160fc60ff54815481106110a8576110a8612540565b906000526020600020906002020160000160008282546110c8919061252d565b9091555050604051600090339084908381818185875af1925050503d806000811461110f576040519150601f19603f3d011682016040523d82523d6000602084013e611114565b606091505b5050905080611136576040516312171d8360e31b815260040160405180910390fd5b60ff5460405133917fd2263e970e3552b8e14c013f4d6af030894ef3ae6f025607042368db047a44189161117291878252602082015260400190565b60405180910390a2505061095d600160c955565b60fd546001600160a01b031633146111b157604051632b3cd49d60e21b815260040160405180910390fd5b600060fb5460ff1660018111156111ca576111ca61242f565b146112325760405163fcbfb2b160e01b815260206004820152603160248201527f52554e2045504f43483a2063616e206f6e6c792073746172742072756e6e696e604482015270672066726f6d206f70656e20706861736560781b6064820152608401610597565b60fb805460ff19166001179055610101805461ff001916905560ff5460fc805460009290811061126457611264612540565b600091825260208220600291909102015460fd546040519193506001600160a01b03169083908381818185875af1925050503d80600081146112c2576040519150601f19603f3d011682016040523d82523d6000602084013e6112c7565b606091505b50509050806112e9576040516312171d8360e31b815260040160405180910390fd5b60ff5460408051428152602081018590527f52c5abe9e004b5b25ca01e93c14fc741f8f6f73683e7299cbb65a18b8c6296a2910160405180910390a260ff546040518381527f04ded3f62ae2ab4717c7253fd9d8a4b3f253afc40fd5280a272755ce344d1cc69060200160405180910390a25050565b60fd546001600160a01b0316331461138a57604051632b3cd49d60e21b815260040160405180910390fd5b600160fb5460ff1660018111156113a3576113a361242f565b146114045760405163fcbfb2b160e01b815260206004820152602a60248201527f414c4c4f4341544520524557415244533a206d75737420626520696e2072756e6044820152696e696e6720706861736560b01b6064820152608401610597565b3460000361142557604051634891ab2560e11b815260040160405180910390fd5b600060fc60ff548154811061143c5761143c612540565b90600052602060002090600202019050806001015460001461147157604051630ec94ce560e41b815260040160405180910390fd5b3460018201819055610101805461ff00191661010017905560ff5460405190917ff9ecaf62687e41c2eb3b9f3bb3e5562b198859fda05aed70e3cc7e3a060e8c9d916114bf91815260200190565b60405180910390a2604051600181527fbba732616e420f73d99f0db8b286a4d23e682e7317282ff0723f9dc8daf98809906020015b60405180910390a150565b6001600160a01b038116600090815260fe6020526040812054810361152657506000919050565b60ff546001148015611541575061010154610100900460ff16155b1561154e57506000919050565b600060fb5460ff1660018111156115675761156761242f565b14801561159c5750600160ff5461157e919061252d565b6001600160a01b038316600090815260fe6020526040902060010154145b156115a957506000919050565b60ff546001600160a01b038316600090815260fe6020526040902060010154036115d557506000919050565b506001919050565b919050565b604080518082019091526000808252602082015260fc60ff548154811061160b5761160b612540565b906000526020600020906002020160405180604001604052908160008201548152602001600182015481525050905090565b600054610100900460ff161580801561165d5750600054600160ff909116105b806116775750303b158015611677575060005460ff166001145b6116da5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610597565b6000805460ff1916600117905580156116fd576000805461ff0019166101001790555b611705611fd8565b61170d612007565b611715612036565b6040805180820182526000808252602080830182815260fc805460018082018355828652955160029182027f371f36870d18f32a11fea0f144b021c8b407bb50f8e0267c711123f454b963c08181019290925593517f371f36870d18f32a11fea0f144b021c8b407bb50f8e0267c711123f454b963c194850155875180890189528681528086018781528454808a01865594909752519290910290810191909155925192019190915560fd80546001600160a01b0387166001600160a01b031990911617905560fb805460ff1916905560ff82905566b1a2bc2ec5000061010055915142815290917f3011a2cb7316f75847dafe7f596d9728f2bcb38e662b785f36bc7ea76e4e7142910160405180910390a28015610a93576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200161056b565b60fc818154811061187a57600080fd5b60009182526020909120600290910201805460019091015490915082565b6118a0611bf2565b6101015481151560ff9091161515036119075760405162461bcd60e51b815260206004820152602360248201527f436f6e747261637420616c726561647920696e2072657175657374656420737460448201526261746560e81b6064820152608401610597565b610101805460ff191682151590811790915560405160ff909116151581527fe02150678eb6624ed499094e86e8c4a31d3b37225e9a835c9193964d5eb1eec7906020016114f4565b611957611f78565b6101015460ff161561197c576040516337affdbf60e11b815260040160405180910390fd5b600060fb5460ff1660018111156119955761199561242f565b146119f15760405163fcbfb2b160e01b815260206004820152602560248201527f454e5445523a206f6e6c7920616c6c6f77656420647572696e67206f70656e20604482015264706861736560d81b6064820152608401610597565b61010054341015611a2357610100546040516322df051360e11b81523460048201526024810191909152604401610597565b33600081815260fe6020526040902090611a3c906114ff565b15611a4f57611a4a33611e06565b611a64565b600160ff54611a5e919061252d565b60018201555b34816000016000828254611a78919061251a565b925050819055503460fc60ff5481548110611a9557611a95612540565b90600052602060002090600202016000016000828254611ab5919061251a565b909155505060ff5460405133917f2f1a7fda57b5fd5cb62770aebd7fc9a8a0a834c5ff558eb7562f85f2b28c437591611af691348252602082015260400190565b60405180910390a2506109dc600160c955565b611b11611bf2565b6001600160a01b038116611b765760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610597565b61095d81611f26565b606060fc805480602002602001604051908101604052809291908181526020016000905b82821015611be957838290600052602060002090600202016040518060400160405290816000820154815260200160018201548152505081526020019060010190611ba3565b50505050905090565b6097546001600160a01b031633146109dc5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610597565b82820283158482048414178202611c6b5763ad251c276000526004601cfd5b0492915050565b6000805160206126df833981519152546001600160a01b031690565b61095d611bf2565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611cce57611cc98361205d565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611d28575060408051601f3d908101601f19168201909252611d2591810190612607565b60015b611d8b5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610597565b6000805160206126df8339815191528114611dfa5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610597565b50611cc98383836120f9565b6000611e1182610e56565b9050600060fb5460ff166001811115611e2c57611e2c61242f565b03611e6157600160ff54611e40919061252d565b6001600160a01b038316600090815260fe6020526040902060010155611e81565b60ff546001600160a01b038316600090815260fe60205260409020600101555b604051600090339083908381818185875af1925050503d8060008114611ec3576040519150601f19603f3d011682016040523d82523d6000602084013e611ec8565b606091505b5050905080611eea576040516312171d8360e31b815260040160405180910390fd5b60ff5460405133917ff0a79ba53601e311de7e03ea2c22463403a62c3d42cec4b256a0f74e1259dae591610e4991868252602082015260400190565b609780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600260c95403611fca5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610597565b600260c955565b600160c955565b600054610100900460ff16611fff5760405162461bcd60e51b815260040161059790612620565b6109dc612124565b600054610100900460ff1661202e5760405162461bcd60e51b815260040161059790612620565b6109dc612154565b600054610100900460ff166109dc5760405162461bcd60e51b815260040161059790612620565b6001600160a01b0381163b6120ca5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610597565b6000805160206126df83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6121028361217b565b60008251118061210f5750805b15611cc95761211e83836121bb565b50505050565b600054610100900460ff1661214b5760405162461bcd60e51b815260040161059790612620565b6109dc33611f26565b600054610100900460ff16611fd15760405162461bcd60e51b815260040161059790612620565b6121848161205d565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606121e083836040518060600160405280602781526020016126ff602791396121e9565b90505b92915050565b6060600080856001600160a01b031685604051612206919061268f565b600060405180830381855af49150503d8060008114612241576040519150601f19603f3d011682016040523d82523d6000602084013e612246565b606091505b509150915061225786838387612261565b9695505050505050565b606083156122d05782516000036122c9576001600160a01b0385163b6122c95760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610597565b50816122da565b6122da83836122e2565b949350505050565b8151156122f25781518083602001fd5b8060405162461bcd60e51b815260040161059791906126ab565b60006020828403121561231e57600080fd5b5035919050565b80356001600160a01b03811681146115dd57600080fd5b60006020828403121561234e57600080fd5b6121e082612325565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561238057600080fd5b61238983612325565b9150602083013567ffffffffffffffff808211156123a657600080fd5b818501915085601f8301126123ba57600080fd5b8135818111156123cc576123cc612357565b604051601f8201601f19908116603f011681019083821181831017156123f4576123f4612357565b8160405282815288602084870101111561240d57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b634e487b7160e01b600052602160045260246000fd5b602081016002831061246757634e487b7160e01b600052602160045260246000fd5b91905290565b8151815260208083015190820152604081016121e3565b60006020828403121561249657600080fd5b813580151581146124a657600080fd5b9392505050565b602080825282518282018190526000919060409081850190868401855b828110156124f7576124e784835180518252602090810151910152565b92840192908501906001016124ca565b5091979650505050505050565b634e487b7160e01b600052601160045260246000fd5b808201808211156121e3576121e3612504565b818103818111156121e3576121e3612504565b634e487b7160e01b600052603260045260246000fd5b60006001820161256857612568612504565b5060010190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b60006020828403121561261957600080fd5b5051919050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60005b8381101561268657818101518382015260200161266e565b50506000910152565b600082516126a181846020870161266b565b9190910192915050565b60208152600082518060208401526126ca81604085016020870161266b565b601f01601f1916919091016040019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122052c062967abdba8ac0414655a4b0c26a4bc45b30171ff4d901e156afbee8875664736f6c63430008120033",
  "deployedBytecode": "0x60806040526004361061018d5760003560e01c80638da7ad23116100d7578063c6b61e4c11610085578063c6b61e4c14610456578063cd237a4114610476578063cf30901214610496578063e6c47bc5146104b1578063e97dcb62146104c8578063eacdc5ff146104d0578063f2fde38b146104e6578063f567244c1461050657600080fd5b80638da7ad2314610367578063a17d97f3146103b0578063a3bc61a5146103c5578063a72b05bc146103cd578063b6ff4934146103f4578063b97dd9e214610414578063c4d66de81461043657600080fd5b806355ce3b9a1161013f57806355ce3b9a146102645780635f75659f1461028457806364ab86751461028c578063664a1ad6146102ac5780636c003a9b146102e4578063715018a6146103145780637f8661a1146103295780638da5cb5b1461034957600080fd5b8063233e9903146101925780632697f03a146101b45780632aa3a2bc146101d45780633659cfe614610207578063372500ab146102275780634f1ef2861461023c57806352d1902d1461024f575b600080fd5b34801561019e57600080fd5b506101b26101ad36600461230c565b610528565b005b3480156101c057600080fd5b506101b26101cf36600461230c565b610577565b3480156101e057600080fd5b506101f46101ef36600461233c565b6107d8565b6040519081526020015b60405180910390f35b34801561021357600080fd5b506101b261022236600461233c565b610898565b34801561023357600080fd5b506101b2610960565b6101b261024a36600461236d565b6109de565b34801561025b57600080fd5b506101f4610a97565b34801561027057600080fd5b506101b261027f36600461233c565b610b45565b6101b2610ba7565b34801561029857600080fd5b506101f46102a736600461233c565b610e56565b3480156102b857600080fd5b5060fd546102cc906001600160a01b031681565b6040516001600160a01b0390911681526020016101fe565b3480156102f057600080fd5b506101015461030490610100900460ff1681565b60405190151581526020016101fe565b34801561032057600080fd5b506101b2610f4f565b34801561033557600080fd5b506101b261034436600461230c565b610f61565b34801561035557600080fd5b506097546001600160a01b03166102cc565b34801561037357600080fd5b5061039b61038236600461233c565b60fe602052600090815260409020805460019091015482565b604080519283526020830191909152016101fe565b3480156103bc57600080fd5b506101b2611186565b6101b261135f565b3480156103d957600080fd5b5060fb546103e79060ff1681565b6040516101fe9190612445565b34801561040057600080fd5b5061030461040f36600461233c565b6114ff565b34801561042057600080fd5b506104296115e2565b6040516101fe919061246d565b34801561044257600080fd5b506101b261045136600461233c565b61163d565b34801561046257600080fd5b5061039b61047136600461230c565b61186a565b34801561048257600080fd5b506101b2610491366004612484565b611898565b3480156104a257600080fd5b50610101546103049060ff1681565b3480156104bd57600080fd5b506101f46101005481565b6101b261194f565b3480156104dc57600080fd5b506101f460ff5481565b3480156104f257600080fd5b506101b261050136600461233c565b611b09565b34801561051257600080fd5b5061051b611b7f565b6040516101fe91906124ad565b610530611bf2565b61010080549082905560408051828152602081018490527fdc4a0b2dc1fa27da98de2ac6f8fa373b4be405e1bf69fc3976597b6d56b79abc91015b60405180910390a15050565b806000036105a0576040516362541df360e01b8152600481018290526024015b60405180910390fd5b61010154610100900460ff166105c85760405162f4f7c560e11b815260040160405180910390fd5b6105d1336114ff565b6105ee57604051635aa9184d60e01b815260040160405180910390fd5b33600090815260fe6020526040812060018082015491929161060f9161251a565b905060008060fb5460ff16600181111561062b5761062b61242f565b146106385760ff54610647565b600160ff54610647919061252d565b905060008282101561065a57600061066f565b610664838361252d565b61066f90600161251a565b90508085111561069c57604051632fe9914b60e21b81526004810186905260248101829052604401610597565b600060016106aa878661251a565b6106b4919061252d565b90506000845b82811161072257600060fc82815481106106d6576106d6612540565b9060005260206000209060020201905060006106ff896000015483600101548460000154611c4c565b905061070b818561251a565b93505050808061071a90612556565b9150506106ba565b5060018601829055604051600090339083908381818185875af1925050503d806000811461076c576040519150601f19603f3d011682016040523d82523d6000602084013e610771565b606091505b5050905080610793576040516312171d8360e31b815260040160405180910390fd5b604080518381526020810185905233917ff0a79ba53601e311de7e03ea2c22463403a62c3d42cec4b256a0f74e1259dae5910160405180910390a25050505050505050565b6001600160a01b038116600090815260fe602052604081205481036107ff57506000919050565b6001600160a01b038216600090815260fe602052604081206001908101548291610829919061251a565b905060008060fb5460ff1660018111156108455761084561242f565b0361086057600160ff54610859919061252d565b9050610865565b5060ff545b815b81811161088e578361087881612556565b945050808061088690612556565b915050610867565b5091949350505050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036108e05760405162461bcd60e51b81526004016105979061256f565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610912611c72565b6001600160a01b0316146109385760405162461bcd60e51b8152600401610597906125bb565b61094181611c8e565b6040805160008082526020820190925261095d91839190611c96565b50565b6101015460ff1615610985576040516337affdbf60e11b815260040160405180910390fd5b61010154610100900460ff166109ad5760405162f4f7c560e11b815260040160405180910390fd5b6109b6336114ff565b6109d357604051635aa9184d60e01b815260040160405180910390fd5b6109dc33611e06565b565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610a265760405162461bcd60e51b81526004016105979061256f565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610a58611c72565b6001600160a01b031614610a7e5760405162461bcd60e51b8152600401610597906125bb565b610a8782611c8e565b610a9382826001611c96565b5050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610b325760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c6044820152771b1959081d1a1c9bdd59da0819195b1959d85d1958d85b1b60421b6064820152608401610597565b506000805160206126df83398151915290565b610b4d611bf2565b60fd80546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f9c41a9a969e821894638b441dcdf78c0573277c91b8ac63440d790f5634a2b0b910161056b565b60fd546001600160a01b03163314610bd257604051632b3cd49d60e21b815260040160405180910390fd5b600160fb5460ff166001811115610beb57610beb61242f565b14610c495760405163fcbfb2b160e01b815260206004820152602760248201527f454e442045504f43483a2063616e206f6e6c7920656e6420612072756e6e696e6044820152660ce40cae0dec6d60cb1b6064820152608401610597565b61010154610100900460ff16610cc85760405163fcbfb2b160e01b815260206004820152603c60248201527f454e442045504f43483a2072657761726473206d75737420626520616c6c6f6360448201527f61746564206265666f726520656e64696e67207468652065706f6368000000006064820152608401610597565b600060fc60ff5481548110610cdf57610cdf612540565b906000526020600020906002020160000154905080341015610d1d5760405163082e13a160e31b815234600482015260248101829052604401610597565b600060fc60ff5481548110610d3457610d34612540565b9060005260206000209060020201905060008160000154905060ff547f64570abbb448406f773ac3a0c62178ed95f93e5465f64860899859bbe490fb4242604051610d8191815260200190565b60405180910390a260ff8054906000610d9983612556565b90915550506040805180820182528281526000602080830182815260fc8054600181018255935292517f371f36870d18f32a11fea0f144b021c8b407bb50f8e0267c711123f454b963c060029093029283015591517f371f36870d18f32a11fea0f144b021c8b407bb50f8e0267c711123f454b963c19091015560fb805460ff1916905560ff5491514281527f3011a2cb7316f75847dafe7f596d9728f2bcb38e662b785f36bc7ea76e4e714291015b60405180910390a2505050565b6000610e61826114ff565b610e6d57506000919050565b6001600160a01b038216600090815260fe602052604081206001908101548291610e97919061251a565b905060008060fb5460ff166001811115610eb357610eb361242f565b03610ece57600160ff54610ec7919061252d565b9050610ed3565b5060ff545b815b81811161088e57600060fc8281548110610ef157610ef1612540565b600091825260208083206001600160a01b038b16845260fe90915260408320546002929092020160018101548154919450610f2c9291611c4c565b9050610f38818761251a565b955050508080610f4790612556565b915050610ed5565b610f57611bf2565b6109dc6000611f26565b610f69611f78565b6101015460ff1615610f8e576040516337affdbf60e11b815260040160405180910390fd5b600060fb5460ff166001811115610fa757610fa761242f565b146110015760405163fcbfb2b160e01b8152602060048201526024808201527f455849543a206f6e6c7920616c6c6f77656420647572696e67206f70656e20706044820152636861736560e01b6064820152608401610597565b33600090815260fe60205260409020805482111561103f57805460405163cf47918160e01b8152610597918491600401918252602082015260400190565b8160000361106057604051635e85ae7360e01b815260040160405180910390fd5b611069336114ff565b156110775761107733611e06565b8181600001600082825461108b919061252d565b925050819055508160fc60ff54815481106110a8576110a8612540565b906000526020600020906002020160000160008282546110c8919061252d565b9091555050604051600090339084908381818185875af1925050503d806000811461110f576040519150601f19603f3d011682016040523d82523d6000602084013e611114565b606091505b5050905080611136576040516312171d8360e31b815260040160405180910390fd5b60ff5460405133917fd2263e970e3552b8e14c013f4d6af030894ef3ae6f025607042368db047a44189161117291878252602082015260400190565b60405180910390a2505061095d600160c955565b60fd546001600160a01b031633146111b157604051632b3cd49d60e21b815260040160405180910390fd5b600060fb5460ff1660018111156111ca576111ca61242f565b146112325760405163fcbfb2b160e01b815260206004820152603160248201527f52554e2045504f43483a2063616e206f6e6c792073746172742072756e6e696e604482015270672066726f6d206f70656e20706861736560781b6064820152608401610597565b60fb805460ff19166001179055610101805461ff001916905560ff5460fc805460009290811061126457611264612540565b600091825260208220600291909102015460fd546040519193506001600160a01b03169083908381818185875af1925050503d80600081146112c2576040519150601f19603f3d011682016040523d82523d6000602084013e6112c7565b606091505b50509050806112e9576040516312171d8360e31b815260040160405180910390fd5b60ff5460408051428152602081018590527f52c5abe9e004b5b25ca01e93c14fc741f8f6f73683e7299cbb65a18b8c6296a2910160405180910390a260ff546040518381527f04ded3f62ae2ab4717c7253fd9d8a4b3f253afc40fd5280a272755ce344d1cc69060200160405180910390a25050565b60fd546001600160a01b0316331461138a57604051632b3cd49d60e21b815260040160405180910390fd5b600160fb5460ff1660018111156113a3576113a361242f565b146114045760405163fcbfb2b160e01b815260206004820152602a60248201527f414c4c4f4341544520524557415244533a206d75737420626520696e2072756e6044820152696e696e6720706861736560b01b6064820152608401610597565b3460000361142557604051634891ab2560e11b815260040160405180910390fd5b600060fc60ff548154811061143c5761143c612540565b90600052602060002090600202019050806001015460001461147157604051630ec94ce560e41b815260040160405180910390fd5b3460018201819055610101805461ff00191661010017905560ff5460405190917ff9ecaf62687e41c2eb3b9f3bb3e5562b198859fda05aed70e3cc7e3a060e8c9d916114bf91815260200190565b60405180910390a2604051600181527fbba732616e420f73d99f0db8b286a4d23e682e7317282ff0723f9dc8daf98809906020015b60405180910390a150565b6001600160a01b038116600090815260fe6020526040812054810361152657506000919050565b60ff546001148015611541575061010154610100900460ff16155b1561154e57506000919050565b600060fb5460ff1660018111156115675761156761242f565b14801561159c5750600160ff5461157e919061252d565b6001600160a01b038316600090815260fe6020526040902060010154145b156115a957506000919050565b60ff546001600160a01b038316600090815260fe6020526040902060010154036115d557506000919050565b506001919050565b919050565b604080518082019091526000808252602082015260fc60ff548154811061160b5761160b612540565b906000526020600020906002020160405180604001604052908160008201548152602001600182015481525050905090565b600054610100900460ff161580801561165d5750600054600160ff909116105b806116775750303b158015611677575060005460ff166001145b6116da5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610597565b6000805460ff1916600117905580156116fd576000805461ff0019166101001790555b611705611fd8565b61170d612007565b611715612036565b6040805180820182526000808252602080830182815260fc805460018082018355828652955160029182027f371f36870d18f32a11fea0f144b021c8b407bb50f8e0267c711123f454b963c08181019290925593517f371f36870d18f32a11fea0f144b021c8b407bb50f8e0267c711123f454b963c194850155875180890189528681528086018781528454808a01865594909752519290910290810191909155925192019190915560fd80546001600160a01b0387166001600160a01b031990911617905560fb805460ff1916905560ff82905566b1a2bc2ec5000061010055915142815290917f3011a2cb7316f75847dafe7f596d9728f2bcb38e662b785f36bc7ea76e4e7142910160405180910390a28015610a93576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200161056b565b60fc818154811061187a57600080fd5b60009182526020909120600290910201805460019091015490915082565b6118a0611bf2565b6101015481151560ff9091161515036119075760405162461bcd60e51b815260206004820152602360248201527f436f6e747261637420616c726561647920696e2072657175657374656420737460448201526261746560e81b6064820152608401610597565b610101805460ff191682151590811790915560405160ff909116151581527fe02150678eb6624ed499094e86e8c4a31d3b37225e9a835c9193964d5eb1eec7906020016114f4565b611957611f78565b6101015460ff161561197c576040516337affdbf60e11b815260040160405180910390fd5b600060fb5460ff1660018111156119955761199561242f565b146119f15760405163fcbfb2b160e01b815260206004820152602560248201527f454e5445523a206f6e6c7920616c6c6f77656420647572696e67206f70656e20604482015264706861736560d81b6064820152608401610597565b61010054341015611a2357610100546040516322df051360e11b81523460048201526024810191909152604401610597565b33600081815260fe6020526040902090611a3c906114ff565b15611a4f57611a4a33611e06565b611a64565b600160ff54611a5e919061252d565b60018201555b34816000016000828254611a78919061251a565b925050819055503460fc60ff5481548110611a9557611a95612540565b90600052602060002090600202016000016000828254611ab5919061251a565b909155505060ff5460405133917f2f1a7fda57b5fd5cb62770aebd7fc9a8a0a834c5ff558eb7562f85f2b28c437591611af691348252602082015260400190565b60405180910390a2506109dc600160c955565b611b11611bf2565b6001600160a01b038116611b765760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610597565b61095d81611f26565b606060fc805480602002602001604051908101604052809291908181526020016000905b82821015611be957838290600052602060002090600202016040518060400160405290816000820154815260200160018201548152505081526020019060010190611ba3565b50505050905090565b6097546001600160a01b031633146109dc5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610597565b82820283158482048414178202611c6b5763ad251c276000526004601cfd5b0492915050565b6000805160206126df833981519152546001600160a01b031690565b61095d611bf2565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611cce57611cc98361205d565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611d28575060408051601f3d908101601f19168201909252611d2591810190612607565b60015b611d8b5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610597565b6000805160206126df8339815191528114611dfa5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610597565b50611cc98383836120f9565b6000611e1182610e56565b9050600060fb5460ff166001811115611e2c57611e2c61242f565b03611e6157600160ff54611e40919061252d565b6001600160a01b038316600090815260fe6020526040902060010155611e81565b60ff546001600160a01b038316600090815260fe60205260409020600101555b604051600090339083908381818185875af1925050503d8060008114611ec3576040519150601f19603f3d011682016040523d82523d6000602084013e611ec8565b606091505b5050905080611eea576040516312171d8360e31b815260040160405180910390fd5b60ff5460405133917ff0a79ba53601e311de7e03ea2c22463403a62c3d42cec4b256a0f74e1259dae591610e4991868252602082015260400190565b609780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600260c95403611fca5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610597565b600260c955565b600160c955565b600054610100900460ff16611fff5760405162461bcd60e51b815260040161059790612620565b6109dc612124565b600054610100900460ff1661202e5760405162461bcd60e51b815260040161059790612620565b6109dc612154565b600054610100900460ff166109dc5760405162461bcd60e51b815260040161059790612620565b6001600160a01b0381163b6120ca5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610597565b6000805160206126df83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6121028361217b565b60008251118061210f5750805b15611cc95761211e83836121bb565b50505050565b600054610100900460ff1661214b5760405162461bcd60e51b815260040161059790612620565b6109dc33611f26565b600054610100900460ff16611fd15760405162461bcd60e51b815260040161059790612620565b6121848161205d565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606121e083836040518060600160405280602781526020016126ff602791396121e9565b90505b92915050565b6060600080856001600160a01b031685604051612206919061268f565b600060405180830381855af49150503d8060008114612241576040519150601f19603f3d011682016040523d82523d6000602084013e612246565b606091505b509150915061225786838387612261565b9695505050505050565b606083156122d05782516000036122c9576001600160a01b0385163b6122c95760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610597565b50816122da565b6122da83836122e2565b949350505050565b8151156122f25781518083602001fd5b8060405162461bcd60e51b815260040161059791906126ab565b60006020828403121561231e57600080fd5b5035919050565b80356001600160a01b03811681146115dd57600080fd5b60006020828403121561234e57600080fd5b6121e082612325565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561238057600080fd5b61238983612325565b9150602083013567ffffffffffffffff808211156123a657600080fd5b818501915085601f8301126123ba57600080fd5b8135818111156123cc576123cc612357565b604051601f8201601f19908116603f011681019083821181831017156123f4576123f4612357565b8160405282815288602084870101111561240d57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b634e487b7160e01b600052602160045260246000fd5b602081016002831061246757634e487b7160e01b600052602160045260246000fd5b91905290565b8151815260208083015190820152604081016121e3565b60006020828403121561249657600080fd5b813580151581146124a657600080fd5b9392505050565b602080825282518282018190526000919060409081850190868401855b828110156124f7576124e784835180518252602090810151910152565b92840192908501906001016124ca565b5091979650505050505050565b634e487b7160e01b600052601160045260246000fd5b808201808211156121e3576121e3612504565b818103818111156121e3576121e3612504565b634e487b7160e01b600052603260045260246000fd5b60006001820161256857612568612504565b5060010190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b60006020828403121561261957600080fd5b5051919050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60005b8381101561268657818101518382015260200161266e565b50506000910152565b600082516126a181846020870161266b565b9190910192915050565b60208152600082518060208401526126ca81604085016020870161266b565b601f01601f1916919091016040019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122052c062967abdba8ac0414655a4b0c26a4bc45b30171ff4d901e156afbee8875664736f6c63430008120033",
  "devdoc": {
    "author": "torof",
    "custom:warning": "claiming entails the use of a loop, if too many epochs to claim, it may fail                 the gas cost of the call and the success or failure should be estimated before calling                 a security function is present to break down claiming in chunks.",
    "details": "The contract allows users to stake funds, which are locked for a period of time (an epoch).      The contract has a lifecycle that includes opening, running, and terminating epochs, distributing      rewards, and claiming rewards.      Adding and withdrawing funds is possible only when the epoch status is \"Open\".      Claiming rewards is always possible EXCEPT during the timeframe between when an epoch      starts running and when rewards are allocated for that epoch.",
    "events": {
      "AdminChanged(address,address)": {
        "details": "Emitted when the admin account has changed."
      },
      "BeaconUpgraded(address)": {
        "details": "Emitted when the beacon is changed."
      },
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Upgraded(address)": {
        "details": "Emitted when the implementation is upgraded."
      }
    },
    "kind": "dev",
    "methods": {
      "calculateRewards(address)": {
        "params": {
          "_user": "The address of the user"
        },
        "returns": {
          "_0": "uint256 The total rewards for the user"
        }
      },
      "claimRewardsForEpochs(uint256)": {
        "details": "this is a secutiry function to avoid out of gas errors for the main claim function",
        "params": {
          "_numberOfEpochs": "The number of epochs to claim rewards for"
        }
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "exit(uint256)": {
        "params": {
          "_amount": "The amount of ETH to withdraw"
        }
      },
      "getAllEpochs()": {
        "returns": {
          "_0": "Epoch[] An array of all epochs"
        }
      },
      "getCurrentEpoch()": {
        "returns": {
          "_0": "Epoch The current epoch"
        }
      },
      "getEpochLengthToClaim(address)": {
        "params": {
          "_user": "The address of the user"
        },
        "returns": {
          "_0": "uint256 The number of epochs the user can claim rewards for"
        }
      },
      "hasClaimableRewards(address)": {
        "params": {
          "_user": "The address of the user"
        },
        "returns": {
          "_0": "bool indicating if the user has claimable rewards"
        }
      },
      "initialize(address)": {
        "params": {
          "_fundWallet": "The address of the fund wallet"
        }
      },
      "lockOrUnlockContract(bool)": {
        "params": {
          "_locked": "The new lock state"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setFundWallet(address)": {
        "params": {
          "_fundWallet": "The new fund wallet address"
        }
      },
      "setMinimumStake(uint256)": {
        "params": {
          "_mininmumStake": "The new minimum stake amount"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "upgradeTo(address)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "title": "Ledgity ETH Vault Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "allocateRewards()": {
        "notice": "Allocates rewards for the current epoch"
      },
      "calculateRewards(address)": {
        "notice": "Calculates the rewards for a user"
      },
      "claimRewards()": {
        "notice": "Allows users to claim their rewards"
      },
      "claimRewardsForEpochs(uint256)": {
        "notice": "Allows users to claim rewards for a specific number of epochs"
      },
      "enter()": {
        "notice": "Allows users to enter the vault by staking ETH"
      },
      "exit(uint256)": {
        "notice": "Allows users to exit the vault by withdrawing their stake"
      },
      "getAllEpochs()": {
        "notice": "Gets all epochs"
      },
      "getCurrentEpoch()": {
        "notice": "Gets the current epoch"
      },
      "getEpochLengthToClaim(address)": {
        "notice": "Gets the number of epochs a user can claim rewards for"
      },
      "hasClaimableRewards(address)": {
        "notice": "Checks if a user has claimable rewards"
      },
      "initialize(address)": {
        "notice": "Initializes the contract"
      },
      "lockFundsAndRunCurrentEpoch()": {
        "notice": "Locks funds and starts running the current epoch"
      },
      "lockOrUnlockContract(bool)": {
        "notice": "Locks or unlocks the contract"
      },
      "setFundWallet(address)": {
        "notice": "Sets the fund wallet address"
      },
      "setMinimumStake(uint256)": {
        "notice": "Sets the minimum stake amount"
      },
      "terminateCurrentAndOpenNextEpoch()": {
        "notice": "Terminates the current epoch and opens the next one by giving back the funds from the fundwallet"
      }
    },
    "notice": "This contract implements a ETH staking and reward distribution system operating in epochs.         Users can provide funds that will be used for derivatives (short put and call options) operations, and in return,         they will receive yield proportionally to their stake.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 503,
        "contract": "contracts/src/EthVault.sol:EthVault",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 506,
        "contract": "contracts/src/EthVault.sol:EthVault",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 485,
        "contract": "contracts/src/EthVault.sol:EthVault",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 800,
        "contract": "contracts/src/EthVault.sol:EthVault",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1256,
        "contract": "contracts/src/EthVault.sol:EthVault",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/src/EthVault.sol:EthVault",
        "label": "_owner",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/src/EthVault.sol:EthVault",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 815,
        "contract": "contracts/src/EthVault.sol:EthVault",
        "label": "_status",
        "offset": 0,
        "slot": "201",
        "type": "t_uint256"
      },
      {
        "astId": 884,
        "contract": "contracts/src/EthVault.sol:EthVault",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1399,
        "contract": "contracts/src/EthVault.sol:EthVault",
        "label": "currentEpochStatus",
        "offset": 0,
        "slot": "251",
        "type": "t_enum(EpochStatus)1396"
      },
      {
        "astId": 1403,
        "contract": "contracts/src/EthVault.sol:EthVault",
        "label": "epochs",
        "offset": 0,
        "slot": "252",
        "type": "t_array(t_struct(Epoch)1388_storage)dyn_storage"
      },
      {
        "astId": 1405,
        "contract": "contracts/src/EthVault.sol:EthVault",
        "label": "fundWallet",
        "offset": 0,
        "slot": "253",
        "type": "t_address"
      },
      {
        "astId": 1410,
        "contract": "contracts/src/EthVault.sol:EthVault",
        "label": "userStakes",
        "offset": 0,
        "slot": "254",
        "type": "t_mapping(t_address,t_struct(UserStake)1393_storage)"
      },
      {
        "astId": 1412,
        "contract": "contracts/src/EthVault.sol:EthVault",
        "label": "currentEpochId",
        "offset": 0,
        "slot": "255",
        "type": "t_uint256"
      },
      {
        "astId": 1414,
        "contract": "contracts/src/EthVault.sol:EthVault",
        "label": "mininmumStake",
        "offset": 0,
        "slot": "256",
        "type": "t_uint256"
      },
      {
        "astId": 1416,
        "contract": "contracts/src/EthVault.sol:EthVault",
        "label": "locked",
        "offset": 0,
        "slot": "257",
        "type": "t_bool"
      },
      {
        "astId": 1418,
        "contract": "contracts/src/EthVault.sol:EthVault",
        "label": "claimableRewards",
        "offset": 1,
        "slot": "257",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Epoch)1388_storage)dyn_storage": {
        "base": "t_struct(Epoch)1388_storage",
        "encoding": "dynamic_array",
        "label": "struct EthVault.Epoch[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(EpochStatus)1396": {
        "encoding": "inplace",
        "label": "enum EthVault.EpochStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(UserStake)1393_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EthVault.UserStake)",
        "numberOfBytes": "32",
        "value": "t_struct(UserStake)1393_storage"
      },
      "t_struct(Epoch)1388_storage": {
        "encoding": "inplace",
        "label": "struct EthVault.Epoch",
        "members": [
          {
            "astId": 1385,
            "contract": "contracts/src/EthVault.sol:EthVault",
            "label": "totalValueLocked",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1387,
            "contract": "contracts/src/EthVault.sol:EthVault",
            "label": "totalEpochRewards",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UserStake)1393_storage": {
        "encoding": "inplace",
        "label": "struct EthVault.UserStake",
        "members": [
          {
            "astId": 1390,
            "contract": "contracts/src/EthVault.sol:EthVault",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1392,
            "contract": "contracts/src/EthVault.sol:EthVault",
            "label": "lastEpochClaimedAt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}