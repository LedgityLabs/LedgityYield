{
  "address": "0x9AAaC2DAf58FaC79e752e5CBe05241Bd9e8BFbC7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_stakeDurations",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_stakeDurationForPerks",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_stakeAmountForPerks",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stakeNumber",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "RewardPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stakeNumber",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stakeNumber",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Unstaked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "StakeAmountForPerks",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "StakeDurationForPerks",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "StakeDurations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "Token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_stakeNumber",
          "type": "uint256"
        }
      ],
      "name": "earned",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "finishAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_stakeNumber",
          "type": "uint256"
        }
      ],
      "name": "getReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserStakes",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "stakedAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "unStakeAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rewardPerTokenPaid",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rewards",
              "type": "uint256"
            }
          ],
          "internalType": "struct LDYStaking.StakingInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "highTierAccounts",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastTimeRewardApplicable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastUpdateTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "notifyRewardAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerTokenStored",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardRatePerSec",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        }
      ],
      "name": "setRewardsDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakeAndRewardToken",
          "type": "address"
        }
      ],
      "name": "setStakeRewardToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_stakePeriodIndex",
          "type": "uint8"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "tierOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tier",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_stakeNumber",
          "type": "uint256"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userStakingInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "stakedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unStakeAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardPerTokenPaid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewards",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x698ae7a67af1530344d5c7d8c12ba928ef385fdd73aa2b0d4dd3f32741beb08f",
  "receipt": {
    "to": null,
    "from": "0x69b69DC81CAf0b2FF53b946421F51b0eC276E679",
    "contractAddress": "0x9AAaC2DAf58FaC79e752e5CBe05241Bd9e8BFbC7",
    "transactionIndex": 6,
    "gasUsed": "1792978",
    "logsBloom": "0x
    "blockHash": "0x1e1b13ad9f7f72e2a23a238cda63937ade4f392038ae676405711d522e48466f",
    "transactionHash": "0x698ae7a67af1530344d5c7d8c12ba928ef385fdd73aa2b0d4dd3f32741beb08f",
    "logs": [
      {
        "transactionIndex": 6,
        "blockNumber": 8751400,
        "transactionHash": "0x698ae7a67af1530344d5c7d8c12ba928ef385fdd73aa2b0d4dd3f32741beb08f",
        "address": "0x9AAaC2DAf58FaC79e752e5CBe05241Bd9e8BFbC7",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000069b69dc81caf0b2ff53b946421f51b0ec276e679"
        ],
        "data": "0x",
        "logIndex": 74,
        "blockHash": "0x1e1b13ad9f7f72e2a23a238cda63937ade4f392038ae676405711d522e48466f"
      }
    ],
    "blockNumber": 8751400,
    "cumulativeGasUsed": "4401227",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      2678400,
      16070400,
      32140800,
      64281600,
      96422400
    ],
    32140800,
    "1000000000000000000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "4aaaafff8c445a7515b90b33a7f09fbf",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_stakeDurations\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_stakeDurationForPerks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakeAmountForPerks\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"StakeAmountForPerks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"StakeDurationForPerks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"StakeDurations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakeNumber\",\"type\":\"uint256\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeNumber\",\"type\":\"uint256\"}],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserStakes\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unStakeAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerTokenPaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"}],\"internalType\":\"struct LDYStaking.StakingInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"highTierAccounts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRatePerSec\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"setRewardsDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeAndRewardToken\",\"type\":\"address\"}],\"name\":\"setStakeRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_stakePeriodIndex\",\"type\":\"uint8\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"tierOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tier\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakeNumber\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userStakingInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unStakeAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerTokenPaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"custom:security-contact\":\"security@ledgity.comsecurity@ledgity.com\",\"details\":\"This contract implements tierOf() function from LDYStaking as it's the only one the LToken contract relies on.\",\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"The new owner accepts the ownership transfer.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"tierOf(address)\":{\"details\":\"tierOf() function that always return that the given account is not elligible to any LDY staking tier, except if the account is in the highTierAccounts mapping.\",\"params\":{\"account\":\"The account to check the tier of.\"}},\"transferOwnership(address)\":{\"details\":\"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner.\"}},\"stateVariables\":{\"highTierAccounts\":{\"details\":\"This is notably used to allow PreMining contracts to benefit from 0% withdrawal fees in L-Tokens contracts, when accounts unlock their funds.\"}},\"title\":\"LDYStaking\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"highTierAccounts(address)\":{\"notice\":\"Holds a mapping of addresses that default to the highest staking tier.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/src/LDYStaking.sol\":\"LDYStaking\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable2Step.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2Step is Ownable {\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n}\\n\",\"keccak256\":\"0xde231558366826d7cb61725af8147965a61c53b77a352cc8c9af38fc5a92ac3c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x909d608c2db6eb165ca178c81289a07ed2e118e444d0025b2a85c97d0b44a4fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/src/LDYStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable2Step.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/**\\n * @title LDYStaking\\n * @custom:security-contact security@ledgity.com\\n *\\n *\\n * @dev This contract implements tierOf() function from LDYStaking as it's the only\\n * one the LToken contract relies on.\\n *\\n * @custom:security-contact security@ledgity.com\\n */\\ncontract LDYStaking is Ownable2Step, ReentrancyGuard, Pausable {\\n    using SafeERC20 for IERC20;\\n\\n    struct StakingInfo {\\n        uint256 stakedAmount; // Amount of the stake\\n        uint256 unStakeAt; // Unstake at\\n        uint256 duration; // Staking period in seconds\\n        uint256 rewardPerTokenPaid; // Reward per token paid\\n        uint256 rewards; // Rewards to be claimed\\n    }\\n\\n    IERC20 public Token;\\n\\n    uint256 public immutable StakeDurationForPerks;\\n    uint256 public immutable StakeAmountForPerks;\\n\\n    // Stake durations\\n    uint256[] public StakeDurations;\\n\\n    // Duration of the rewards (in seconds)\\n    uint256 public rewardsDuration;\\n    // Timestamp of when the rewards finish\\n    uint256 public finishAt;\\n    // Timestamp of the reward updated\\n    uint256 public lastUpdateTime;\\n    // Reward per second(total rewards / duration)\\n    uint256 public rewardRatePerSec;\\n    // Sum of (reward rate * dt * 1e18 / total supply)\\n    uint256 public rewardPerTokenStored;\\n\\n    // Total staked amounts\\n    uint256 public totalStaked;\\n\\n    // User address => array of the staking info\\n    mapping(address => StakingInfo[]) public userStakingInfo;\\n\\n    event Staked(address indexed user, uint256 stakeNumber, uint256 amount);\\n    event Unstaked(address indexed user, uint256 stakeNumber, uint256 amount);\\n    event RewardPaid(address indexed user, uint256 stakeNumber, uint256 reward);\\n\\n    /**\\n     * @notice Holds a mapping of addresses that default to the highest staking tier.\\n     * @dev This is notably used to allow PreMining contracts to benefit from 0%\\n     * withdrawal fees in L-Tokens contracts, when accounts unlock their funds.\\n     */\\n    mapping(address => bool) public highTierAccounts;\\n\\n    constructor(\\n        uint256[] memory _stakeDurations,\\n        uint256 _stakeDurationForPerks,\\n        uint256 _stakeAmountForPerks\\n    ) {\\n        StakeDurations = _stakeDurations;\\n        StakeDurationForPerks = _stakeDurationForPerks;\\n        StakeAmountForPerks = _stakeAmountForPerks;\\n    }\\n\\n    function lastTimeRewardApplicable() public view returns (uint256) {\\n        return _min(finishAt, block.timestamp);\\n    }\\n\\n    function rewardPerToken() public view returns (uint256) {\\n        if (totalStaked == 0) {\\n            return rewardPerTokenStored;\\n        }\\n\\n        return\\n            rewardPerTokenStored +\\n            (rewardRatePerSec * (lastTimeRewardApplicable() - lastUpdateTime) * 1e18) /\\n            totalStaked;\\n    }\\n\\n    function stake(uint256 _amount, uint8 _stakePeriodIndex) external nonReentrant whenNotPaused {\\n        require(_amount > 0, \\\"amount = 0\\\");\\n        require(_stakePeriodIndex <= StakeDurations.length - 1, \\\"invalid staking period\\\");\\n\\n        _updateReward(address(0), 0);\\n        uint256 stakeDuration = StakeDurations[_stakePeriodIndex];\\n        StakingInfo memory stakingInfo = StakingInfo({\\n            stakedAmount: _amount,\\n            unStakeAt: block.timestamp + stakeDuration,\\n            duration: stakeDuration,\\n            rewardPerTokenPaid: rewardPerTokenStored,\\n            rewards: 0\\n        });\\n\\n        // check whether account is eligible for benefit from the protocol\\n        if (stakeDuration >= StakeDurationForPerks && _amount >= StakeAmountForPerks) {\\n            highTierAccounts[msg.sender] = true;\\n        }\\n\\n        userStakingInfo[msg.sender].push(stakingInfo);\\n\\n        uint256 stakeNumber = userStakingInfo[msg.sender].length - 1;\\n        totalStaked += _amount;\\n\\n        Token.safeTransferFrom(msg.sender, address(this), _amount);\\n        emit Staked(msg.sender, stakeNumber, _amount);\\n    }\\n\\n    function unstake(uint256 _amount, uint256 _stakeNumber) external nonReentrant {\\n        require(_amount > 0, \\\"amount = 0\\\");\\n        require(userStakingInfo[msg.sender].length >= _stakeNumber + 1, \\\"invalid stakeNumber\\\");\\n        require(\\n            block.timestamp >= userStakingInfo[msg.sender][_stakeNumber].unStakeAt,\\n            \\\"not allowed unstaking in the staking period\\\"\\n        );\\n        require(\\n            _amount <= userStakingInfo[msg.sender][_stakeNumber].stakedAmount,\\n            \\\"insufficient amount\\\"\\n        );\\n\\n        _updateReward(msg.sender, _stakeNumber);\\n        totalStaked -= _amount;\\n        userStakingInfo[msg.sender][_stakeNumber].stakedAmount -= _amount;\\n\\n        // check whether account is eligible for benefit from the protocol\\n        if (\\n            userStakingInfo[msg.sender][_stakeNumber].duration >= StakeDurationForPerks &&\\n            userStakingInfo[msg.sender][_stakeNumber].stakedAmount < StakeAmountForPerks\\n        ) {\\n            highTierAccounts[msg.sender] = false;\\n        }\\n\\n        // remove staking info from array\\n        if (userStakingInfo[msg.sender][_stakeNumber].stakedAmount == 0) {\\n            _claimReward(msg.sender, _stakeNumber);\\n\\n            userStakingInfo[msg.sender][_stakeNumber] = userStakingInfo[msg.sender][\\n                userStakingInfo[msg.sender].length - 1\\n            ];\\n            userStakingInfo[msg.sender].pop();\\n        }\\n        Token.safeTransfer(msg.sender, _amount);\\n        emit Unstaked(msg.sender, _stakeNumber, _amount);\\n    }\\n\\n    function earned(address _account, uint256 _stakeNumber) public view returns (uint256) {\\n        StakingInfo memory userInfo = userStakingInfo[_account][_stakeNumber];\\n        uint256 rewardsSinceLastUpdate = ((userInfo.stakedAmount *\\n            (rewardPerToken() - userInfo.rewardPerTokenPaid)) / 1e18);\\n        return rewardsSinceLastUpdate + userInfo.rewards;\\n    }\\n\\n    function getReward(uint256 _stakeNumber) external nonReentrant {\\n        require(userStakingInfo[msg.sender].length >= _stakeNumber + 1, \\\"invalid stakeNumber\\\");\\n        _updateReward(msg.sender, _stakeNumber);\\n        _claimReward(msg.sender, _stakeNumber);\\n    }\\n\\n    function setStakeRewardToken(address _stakeAndRewardToken) external onlyOwner {\\n        Token = IERC20(_stakeAndRewardToken);\\n    }\\n\\n    function setRewardsDuration(uint256 _duration) external onlyOwner {\\n        require(finishAt < block.timestamp, \\\"reward duration is not finished\\\");\\n        rewardsDuration = _duration;\\n    }\\n\\n    function notifyRewardAmount(uint256 _amount) external onlyOwner {\\n        require(rewardsDuration > 0, \\\"rewards duration is not set\\\");\\n        require(_amount > 0, \\\"amount = 0\\\");\\n\\n        _updateReward(address(0), 0);\\n\\n        Token.safeTransferFrom(msg.sender, address(this), _amount);\\n\\n        if (block.timestamp >= finishAt) {\\n            rewardRatePerSec = _amount / rewardsDuration;\\n        } else {\\n            uint256 remainingRewards = (finishAt - block.timestamp) * rewardRatePerSec;\\n            rewardRatePerSec = (_amount + remainingRewards) / rewardsDuration;\\n        }\\n\\n        require(rewardRatePerSec > 0, \\\"reward rate = 0\\\");\\n        require(\\n            rewardRatePerSec * rewardsDuration <= (Token.balanceOf(address(this)) - totalStaked),\\n            \\\"reward amount > balance\\\"\\n        );\\n\\n        finishAt = block.timestamp + rewardsDuration;\\n        lastUpdateTime = block.timestamp;\\n    }\\n\\n    /**\\n     * @dev tierOf() function that always return that the given account is not\\n     * elligible to any LDY staking tier, except if the account is in the\\n     * highTierAccounts mapping.\\n     * @param account The account to check the tier of.\\n     */\\n    function tierOf(address account) public view returns (uint256 tier) {\\n        if (highTierAccounts[account]) return 3;\\n        return 0;\\n    }\\n\\n    function getUserStakes(address _user) external view returns (StakingInfo[] memory) {\\n        return userStakingInfo[_user];\\n    }\\n\\n    function _claimReward(address _user, uint256 _stakeNumber) private {\\n        uint256 reward = userStakingInfo[_user][_stakeNumber].rewards;\\n\\n        if (reward > 0) {\\n            userStakingInfo[_user][_stakeNumber].rewards = 0;\\n            Token.safeTransfer(_user, reward);\\n            emit RewardPaid(_user, _stakeNumber, reward);\\n        }\\n    }\\n\\n    function _updateReward(address _account, uint256 _stakeNumber) private {\\n        rewardPerTokenStored = rewardPerToken();\\n        lastUpdateTime = lastTimeRewardApplicable();\\n\\n        if (_account != address(0)) {\\n            userStakingInfo[_account][_stakeNumber].rewards = earned(_account, _stakeNumber);\\n            userStakingInfo[_account][_stakeNumber].rewardPerTokenPaid = rewardPerTokenStored;\\n        }\\n    }\\n\\n    function _min(uint256 x, uint256 y) private pure returns (uint256) {\\n        return x <= y ? x : y;\\n    }\\n\\n    function pause() public onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyOwner {\\n        _unpause();\\n    }\\n}\\n\",\"keccak256\":\"0x672b8827ab44dec0f51f3c86996abf9793cb9e003eba8dbc06ef39d3c5a886bb\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b5060405162001e8238038062001e8283398101604081905262000034916200016b565b6200003f3362000074565b60016002556003805460ff19169055825162000063906004906020860190620000ee565b5060809190915260a0525062000247565b600180546001600160a01b03191690556200009b816200009e602090811b6200120e17901c565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b8280548282559060005260206000209081019282156200012c579160200282015b828111156200012c5782518255916020019190600101906200010f565b506200013a9291506200013e565b5090565b5b808211156200013a57600081556001016200013f565b634e487b7160e01b600052604160045260246000fd5b6000806000606084860312156200018157600080fd5b83516001600160401b03808211156200019957600080fd5b818601915086601f830112620001ae57600080fd5b8151602082821115620001c557620001c562000155565b8160051b604051601f19603f83011681018181108682111715620001ed57620001ed62000155565b60405292835281830193508481018201928a8411156200020c57600080fd5b948201945b838610156200022c5785518552948201949382019362000211565b91890151604090990151919a98995090979650505050505050565b60805160a051611bf96200028960003960008181610363015281816105cb0152610ea501526000818161041f015281816105a00152610e460152611bf96000f3fe608060405234801561001057600080fd5b50600436106101e55760003560e01c8063842e29811161010f578063c8f33c91116100a2578063df136d6511610071578063df136d6514610400578063e30c397814610409578063ed2441831461041a578063f2fde38b1461044157600080fd5b8063c8f33c91146103c9578063c8f74bb8146103d2578063cc1a378f146103e5578063cd3daf9d146103f857600080fd5b8063a75b085c116100de578063a75b085c1461035e578063bddff59214610385578063c24126761461038e578063c66120f4146103a657600080fd5b8063842e2981146102fe5780638456cb591461031e5780638da5cb5b146103265780639e2c8a5b1461034b57600080fd5b80635c975abb1161018757806379ba50971161015657806379ba5097146102d25780637c7993ac146102da57806380faa57d146102ed578063817b1cd2146102f557600080fd5b80635c975abb1461029757806367d3b488146102ae5780636fc229c6146102b7578063715018a6146102ca57600080fd5b8063386a9525116101c3578063386a9525146102525780633c6b16ab146102695780633e491d471461027c5780633f4ba83a1461028f57600080fd5b806304d978f1146101ea57806310087fb11461022a5780631c4b774b1461023f575b600080fd5b6101fd6101f836600461192c565b610454565b604080519586526020860194909452928401919091526060830152608082015260a0015b60405180910390f35b61023d610238366004611956565b6104a2565b005b61023d61024d36600461198c565b6106f5565b61025b60055481565b604051908152602001610221565b61023d61027736600461198c565b61077d565b61025b61028a36600461192c565b6109af565b61023d610a7e565b60035460ff165b6040519015158152602001610221565b61025b60065481565b61023d6102c53660046119a5565b610a90565b61023d610ac0565b61023d610ad2565b61025b6102e836600461198c565b610b49565b61025b610b6a565b61025b600a5481565b61031161030c3660046119a5565b610b7d565b60405161022191906119c0565b61023d610c24565b6000546001600160a01b03165b6040516001600160a01b039091168152602001610221565b61023d610359366004611a2e565b610c34565b61025b7f000000000000000000000000000000000000000000000000000000000000000081565b61025b60085481565b6003546103339061010090046001600160a01b031681565b61029e6103b43660046119a5565b600c6020526000908152604090205460ff1681565b61025b60075481565b61025b6103e03660046119a5565b6110ad565b61023d6103f336600461198c565b6110de565b61025b61113c565b61025b60095481565b6001546001600160a01b0316610333565b61025b7f000000000000000000000000000000000000000000000000000000000000000081565b61023d61044f3660046119a5565b61119d565b600b602052816000526040600020818154811061047057600080fd5b600091825260209091206005909102018054600182015460028301546003840154600490940154929550909350919085565b6104aa61125e565b6104b26112b5565b600082116104db5760405162461bcd60e51b81526004016104d290611a50565b60405180910390fd5b6004546104ea90600190611a8a565b8160ff1611156105355760405162461bcd60e51b81526020600482015260166024820152751a5b9d985b1a59081cdd185ada5b99c81c195c9a5bd960521b60448201526064016104d2565b6105406000806112fb565b600060048260ff168154811061055857610558611a9d565b9060005260206000200154905060006040518060a0016040528085815260200183426105849190611ab3565b81526020018381526020016009548152602001600081525090507f000000000000000000000000000000000000000000000000000000000000000082101580156105ee57507f00000000000000000000000000000000000000000000000000000000000000008410155b1561060e57336000908152600c60205260409020805460ff191660011790555b336000818152600b60209081526040808320805460018181018355828652848620885160059093020191825593870151818501559186015160028301556060860151600383015560808601516004909201919091559282529154909161067391611a8a565b905084600a60008282546106879190611ab3565b90915550506003546106a99061010090046001600160a01b03163330886113bb565b604080518281526020810187905233917f1449c6dd7851abc30abf37f57715f492010519147cc2652fbc38202c18a6ee90910160405180910390a25050506106f16001600255565b5050565b6106fd61125e565b610708816001611ab3565b336000908152600b6020526040902054101561075c5760405162461bcd60e51b815260206004820152601360248201527234b73b30b634b21039ba30b5b2a73ab6b132b960691b60448201526064016104d2565b61076633826112fb565b610770338261142c565b61077a6001600255565b50565b610785611517565b6000600554116107d75760405162461bcd60e51b815260206004820152601b60248201527f72657761726473206475726174696f6e206973206e6f7420736574000000000060448201526064016104d2565b600081116107f75760405162461bcd60e51b81526004016104d290611a50565b6108026000806112fb565b60035461081f9061010090046001600160a01b03163330846113bb565b600654421061083d576005546108359082611ac6565b600855610879565b6000600854426006546108509190611a8a565b61085a9190611ae8565b60055490915061086a8284611ab3565b6108749190611ac6565b600855505b6000600854116108bd5760405162461bcd60e51b815260206004820152600f60248201526e07265776172642072617465203d203608c1b60448201526064016104d2565b600a546003546040516370a0823160e01b81523060048201526101009091046001600160a01b0316906370a0823190602401602060405180830381865afa15801561090c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109309190611aff565b61093a9190611a8a565b60055460085461094a9190611ae8565b11156109985760405162461bcd60e51b815260206004820152601760248201527f72657761726420616d6f756e74203e2062616c616e636500000000000000000060448201526064016104d2565b6005546109a59042611ab3565b6006555042600755565b6001600160a01b0382166000908152600b602052604081208054829190849081106109dc576109dc611a9d565b90600052602060002090600502016040518060a00160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152505090506000670de0b6b3a76400008260600151610a4161113c565b610a4b9190611a8a565b8351610a579190611ae8565b610a619190611ac6565b9050816080015181610a739190611ab3565b925050505b92915050565b610a86611517565b610a8e611571565b565b610a98611517565b600380546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b610ac8611517565b610a8e60006115c3565b60015433906001600160a01b03168114610b405760405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b60648201526084016104d2565b61077a816115c3565b60048181548110610b5957600080fd5b600091825260209091200154905081565b6000610b78600654426115dc565b905090565b6001600160a01b0381166000908152600b60209081526040808320805482518185028101850190935280835260609492939192909184015b82821015610c1957838290600052602060002090600502016040518060a00160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152505081526020019060010190610bb5565b505050509050919050565b610c2c611517565b610a8e6115f5565b610c3c61125e565b60008211610c5c5760405162461bcd60e51b81526004016104d290611a50565b610c67816001611ab3565b336000908152600b60205260409020541015610cbb5760405162461bcd60e51b815260206004820152601360248201527234b73b30b634b21039ba30b5b2a73ab6b132b960691b60448201526064016104d2565b336000908152600b60205260409020805482908110610cdc57610cdc611a9d565b906000526020600020906005020160010154421015610d515760405162461bcd60e51b815260206004820152602b60248201527f6e6f7420616c6c6f77656420756e7374616b696e6720696e207468652073746160448201526a1ada5b99c81c195c9a5bd960aa1b60648201526084016104d2565b336000908152600b60205260409020805482908110610d7257610d72611a9d565b906000526020600020906005020160000154821115610dc95760405162461bcd60e51b81526020600482015260136024820152721a5b9cdd59999a58da595b9d08185b5bdd5b9d606a1b60448201526064016104d2565b610dd333826112fb565b81600a6000828254610de59190611a8a565b9091555050336000908152600b60205260409020805483919083908110610e0e57610e0e611a9d565b90600052602060002090600502016000016000828254610e2e9190611a8a565b9091555050336000908152600b6020526040902080547f0000000000000000000000000000000000000000000000000000000000000000919083908110610e7757610e77611a9d565b90600052602060002090600502016002015410158015610eea5750336000908152600b6020526040902080547f0000000000000000000000000000000000000000000000000000000000000000919083908110610ed657610ed6611a9d565b906000526020600020906005020160000154105b15610f0757336000908152600c60205260409020805460ff191690555b336000908152600b60205260409020805482908110610f2857610f28611a9d565b90600052602060002090600502016000015460000361104c57610f4b338261142c565b336000908152600b602052604090208054610f6890600190611a8a565b81548110610f7857610f78611a9d565b9060005260206000209060050201600b6000336001600160a01b03166001600160a01b031681526020019081526020016000208281548110610fbc57610fbc611a9d565b6000918252602080832084546005909302019182556001808501549083015560028085015490830155600380850154908301556004938401549390910192909255338152600b9091526040902080548061101857611018611b18565b6000828152602081206005600019909301928302018181556001810182905560028101829055600381018290556004015590555b6003546110689061010090046001600160a01b03163384611632565b604080518281526020810184905233917f7fc4727e062e336010f2c282598ef5f14facb3de68cf8195c2f23e1454b2b74e910160405180910390a26106f16001600255565b6001600160a01b0381166000908152600c602052604081205460ff16156110d657506003919050565b506000919050565b6110e6611517565b42600654106111375760405162461bcd60e51b815260206004820152601f60248201527f726577617264206475726174696f6e206973206e6f742066696e69736865640060448201526064016104d2565b600555565b6000600a5460000361114f575060095490565b600a5460075461115d610b6a565b6111679190611a8a565b6008546111749190611ae8565b61118690670de0b6b3a7640000611ae8565b6111909190611ac6565b600954610b789190611ab3565b6111a5611517565b600180546001600160a01b0383166001600160a01b031990911681179091556111d66000546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60028054036112af5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016104d2565b60028055565b60035460ff1615610a8e5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016104d2565b61130361113c565b60095561130e610b6a565b6007556001600160a01b038216156106f15761132a82826109af565b6001600160a01b0383166000908152600b6020526040902080548390811061135457611354611a9d565b906000526020600020906005020160040181905550600954600b6000846001600160a01b03166001600160a01b0316815260200190815260200160002082815481106113a2576113a2611a9d565b9060005260206000209060050201600301819055505050565b6040516001600160a01b03808516602483015283166044820152606481018290526114269085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611662565b50505050565b6001600160a01b0382166000908152600b6020526040812080548390811061145657611456611a9d565b90600052602060002090600502016004015490506000811115611512576001600160a01b0383166000908152600b6020526040812080548490811061149d5761149d611a9d565b60009182526020909120600590910201600401556003546114cd9061010090046001600160a01b03168483611632565b60408051838152602081018390526001600160a01b038516917fd6f2c8500df5b44f11e9e48b91ff9f1b9d81bc496d55570c2b1b75bf65243f51910160405180910390a25b505050565b6000546001600160a01b03163314610a8e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104d2565b611579611737565b6003805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600180546001600160a01b031916905561077a8161120e565b6000818311156115ec57816115ee565b825b9392505050565b6115fd6112b5565b6003805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586115a63390565b6040516001600160a01b03831660248201526044810182905261151290849063a9059cbb60e01b906064016113ef565b60006116b7826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166117809092919063ffffffff16565b90508051600014806116d85750808060200190518101906116d89190611b2e565b6115125760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016104d2565b60035460ff16610a8e5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016104d2565b606061178f8484600085611797565b949350505050565b6060824710156117f85760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016104d2565b600080866001600160a01b031685876040516118149190611b74565b60006040518083038185875af1925050503d8060008114611851576040519150601f19603f3d011682016040523d82523d6000602084013e611856565b606091505b509150915061186787838387611872565b979650505050505050565b606083156118e15782516000036118da576001600160a01b0385163b6118da5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016104d2565b508161178f565b61178f83838151156118f65781518083602001fd5b8060405162461bcd60e51b81526004016104d29190611b90565b80356001600160a01b038116811461192757600080fd5b919050565b6000806040838503121561193f57600080fd5b61194883611910565b946020939093013593505050565b6000806040838503121561196957600080fd5b82359150602083013560ff8116811461198157600080fd5b809150509250929050565b60006020828403121561199e57600080fd5b5035919050565b6000602082840312156119b757600080fd5b6115ee82611910565b602080825282518282018190526000919060409081850190868401855b82811015611a215781518051855286810151878601528581015186860152606080820151908601526080908101519085015260a090930192908501906001016119dd565b5091979650505050505050565b60008060408385031215611a4157600080fd5b50508035926020909101359150565b6020808252600a90820152690616d6f756e74203d20360b41b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b81810381811115610a7857610a78611a74565b634e487b7160e01b600052603260045260246000fd5b80820180821115610a7857610a78611a74565b600082611ae357634e487b7160e01b600052601260045260246000fd5b500490565b8082028115828204841417610a7857610a78611a74565b600060208284031215611b1157600080fd5b5051919050565b634e487b7160e01b600052603160045260246000fd5b600060208284031215611b4057600080fd5b815180151581146115ee57600080fd5b60005b83811015611b6b578181015183820152602001611b53565b50506000910152565b60008251611b86818460208701611b50565b9190910192915050565b6020815260008251806020840152611baf816040850160208701611b50565b601f01601f1916919091016040019291505056fea2646970667358221220d34837119a44b5f96e4a605192c2bc5863cd2e3790cb90aa6f4561b4d3fb030864736f6c63430008120033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101e55760003560e01c8063842e29811161010f578063c8f33c91116100a2578063df136d6511610071578063df136d6514610400578063e30c397814610409578063ed2441831461041a578063f2fde38b1461044157600080fd5b8063c8f33c91146103c9578063c8f74bb8146103d2578063cc1a378f146103e5578063cd3daf9d146103f857600080fd5b8063a75b085c116100de578063a75b085c1461035e578063bddff59214610385578063c24126761461038e578063c66120f4146103a657600080fd5b8063842e2981146102fe5780638456cb591461031e5780638da5cb5b146103265780639e2c8a5b1461034b57600080fd5b80635c975abb1161018757806379ba50971161015657806379ba5097146102d25780637c7993ac146102da57806380faa57d146102ed578063817b1cd2146102f557600080fd5b80635c975abb1461029757806367d3b488146102ae5780636fc229c6146102b7578063715018a6146102ca57600080fd5b8063386a9525116101c3578063386a9525146102525780633c6b16ab146102695780633e491d471461027c5780633f4ba83a1461028f57600080fd5b806304d978f1146101ea57806310087fb11461022a5780631c4b774b1461023f575b600080fd5b6101fd6101f836600461192c565b610454565b604080519586526020860194909452928401919091526060830152608082015260a0015b60405180910390f35b61023d610238366004611956565b6104a2565b005b61023d61024d36600461198c565b6106f5565b61025b60055481565b604051908152602001610221565b61023d61027736600461198c565b61077d565b61025b61028a36600461192c565b6109af565b61023d610a7e565b60035460ff165b6040519015158152602001610221565b61025b60065481565b61023d6102c53660046119a5565b610a90565b61023d610ac0565b61023d610ad2565b61025b6102e836600461198c565b610b49565b61025b610b6a565b61025b600a5481565b61031161030c3660046119a5565b610b7d565b60405161022191906119c0565b61023d610c24565b6000546001600160a01b03165b6040516001600160a01b039091168152602001610221565b61023d610359366004611a2e565b610c34565b61025b7f000000000000000000000000000000000000000000000000000000000000000081565b61025b60085481565b6003546103339061010090046001600160a01b031681565b61029e6103b43660046119a5565b600c6020526000908152604090205460ff1681565b61025b60075481565b61025b6103e03660046119a5565b6110ad565b61023d6103f336600461198c565b6110de565b61025b61113c565b61025b60095481565b6001546001600160a01b0316610333565b61025b7f000000000000000000000000000000000000000000000000000000000000000081565b61023d61044f3660046119a5565b61119d565b600b602052816000526040600020818154811061047057600080fd5b600091825260209091206005909102018054600182015460028301546003840154600490940154929550909350919085565b6104aa61125e565b6104b26112b5565b600082116104db5760405162461bcd60e51b81526004016104d290611a50565b60405180910390fd5b6004546104ea90600190611a8a565b8160ff1611156105355760405162461bcd60e51b81526020600482015260166024820152751a5b9d985b1a59081cdd185ada5b99c81c195c9a5bd960521b60448201526064016104d2565b6105406000806112fb565b600060048260ff168154811061055857610558611a9d565b9060005260206000200154905060006040518060a0016040528085815260200183426105849190611ab3565b81526020018381526020016009548152602001600081525090507f000000000000000000000000000000000000000000000000000000000000000082101580156105ee57507f00000000000000000000000000000000000000000000000000000000000000008410155b1561060e57336000908152600c60205260409020805460ff191660011790555b336000818152600b60209081526040808320805460018181018355828652848620885160059093020191825593870151818501559186015160028301556060860151600383015560808601516004909201919091559282529154909161067391611a8a565b905084600a60008282546106879190611ab3565b90915550506003546106a99061010090046001600160a01b03163330886113bb565b604080518281526020810187905233917f1449c6dd7851abc30abf37f57715f492010519147cc2652fbc38202c18a6ee90910160405180910390a25050506106f16001600255565b5050565b6106fd61125e565b610708816001611ab3565b336000908152600b6020526040902054101561075c5760405162461bcd60e51b815260206004820152601360248201527234b73b30b634b21039ba30b5b2a73ab6b132b960691b60448201526064016104d2565b61076633826112fb565b610770338261142c565b61077a6001600255565b50565b610785611517565b6000600554116107d75760405162461bcd60e51b815260206004820152601b60248201527f72657761726473206475726174696f6e206973206e6f7420736574000000000060448201526064016104d2565b600081116107f75760405162461bcd60e51b81526004016104d290611a50565b6108026000806112fb565b60035461081f9061010090046001600160a01b03163330846113bb565b600654421061083d576005546108359082611ac6565b600855610879565b6000600854426006546108509190611a8a565b61085a9190611ae8565b60055490915061086a8284611ab3565b6108749190611ac6565b600855505b6000600854116108bd5760405162461bcd60e51b815260206004820152600f60248201526e07265776172642072617465203d203608c1b60448201526064016104d2565b600a546003546040516370a0823160e01b81523060048201526101009091046001600160a01b0316906370a0823190602401602060405180830381865afa15801561090c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109309190611aff565b61093a9190611a8a565b60055460085461094a9190611ae8565b11156109985760405162461bcd60e51b815260206004820152601760248201527f72657761726420616d6f756e74203e2062616c616e636500000000000000000060448201526064016104d2565b6005546109a59042611ab3565b6006555042600755565b6001600160a01b0382166000908152600b602052604081208054829190849081106109dc576109dc611a9d565b90600052602060002090600502016040518060a00160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152505090506000670de0b6b3a76400008260600151610a4161113c565b610a4b9190611a8a565b8351610a579190611ae8565b610a619190611ac6565b9050816080015181610a739190611ab3565b925050505b92915050565b610a86611517565b610a8e611571565b565b610a98611517565b600380546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b610ac8611517565b610a8e60006115c3565b60015433906001600160a01b03168114610b405760405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b60648201526084016104d2565b61077a816115c3565b60048181548110610b5957600080fd5b600091825260209091200154905081565b6000610b78600654426115dc565b905090565b6001600160a01b0381166000908152600b60209081526040808320805482518185028101850190935280835260609492939192909184015b82821015610c1957838290600052602060002090600502016040518060a00160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152505081526020019060010190610bb5565b505050509050919050565b610c2c611517565b610a8e6115f5565b610c3c61125e565b60008211610c5c5760405162461bcd60e51b81526004016104d290611a50565b610c67816001611ab3565b336000908152600b60205260409020541015610cbb5760405162461bcd60e51b815260206004820152601360248201527234b73b30b634b21039ba30b5b2a73ab6b132b960691b60448201526064016104d2565b336000908152600b60205260409020805482908110610cdc57610cdc611a9d565b906000526020600020906005020160010154421015610d515760405162461bcd60e51b815260206004820152602b60248201527f6e6f7420616c6c6f77656420756e7374616b696e6720696e207468652073746160448201526a1ada5b99c81c195c9a5bd960aa1b60648201526084016104d2565b336000908152600b60205260409020805482908110610d7257610d72611a9d565b906000526020600020906005020160000154821115610dc95760405162461bcd60e51b81526020600482015260136024820152721a5b9cdd59999a58da595b9d08185b5bdd5b9d606a1b60448201526064016104d2565b610dd333826112fb565b81600a6000828254610de59190611a8a565b9091555050336000908152600b60205260409020805483919083908110610e0e57610e0e611a9d565b90600052602060002090600502016000016000828254610e2e9190611a8a565b9091555050336000908152600b6020526040902080547f0000000000000000000000000000000000000000000000000000000000000000919083908110610e7757610e77611a9d565b90600052602060002090600502016002015410158015610eea5750336000908152600b6020526040902080547f0000000000000000000000000000000000000000000000000000000000000000919083908110610ed657610ed6611a9d565b906000526020600020906005020160000154105b15610f0757336000908152600c60205260409020805460ff191690555b336000908152600b60205260409020805482908110610f2857610f28611a9d565b90600052602060002090600502016000015460000361104c57610f4b338261142c565b336000908152600b602052604090208054610f6890600190611a8a565b81548110610f7857610f78611a9d565b9060005260206000209060050201600b6000336001600160a01b03166001600160a01b031681526020019081526020016000208281548110610fbc57610fbc611a9d565b6000918252602080832084546005909302019182556001808501549083015560028085015490830155600380850154908301556004938401549390910192909255338152600b9091526040902080548061101857611018611b18565b6000828152602081206005600019909301928302018181556001810182905560028101829055600381018290556004015590555b6003546110689061010090046001600160a01b03163384611632565b604080518281526020810184905233917f7fc4727e062e336010f2c282598ef5f14facb3de68cf8195c2f23e1454b2b74e910160405180910390a26106f16001600255565b6001600160a01b0381166000908152600c602052604081205460ff16156110d657506003919050565b506000919050565b6110e6611517565b42600654106111375760405162461bcd60e51b815260206004820152601f60248201527f726577617264206475726174696f6e206973206e6f742066696e69736865640060448201526064016104d2565b600555565b6000600a5460000361114f575060095490565b600a5460075461115d610b6a565b6111679190611a8a565b6008546111749190611ae8565b61118690670de0b6b3a7640000611ae8565b6111909190611ac6565b600954610b789190611ab3565b6111a5611517565b600180546001600160a01b0383166001600160a01b031990911681179091556111d66000546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60028054036112af5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016104d2565b60028055565b60035460ff1615610a8e5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016104d2565b61130361113c565b60095561130e610b6a565b6007556001600160a01b038216156106f15761132a82826109af565b6001600160a01b0383166000908152600b6020526040902080548390811061135457611354611a9d565b906000526020600020906005020160040181905550600954600b6000846001600160a01b03166001600160a01b0316815260200190815260200160002082815481106113a2576113a2611a9d565b9060005260206000209060050201600301819055505050565b6040516001600160a01b03808516602483015283166044820152606481018290526114269085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611662565b50505050565b6001600160a01b0382166000908152600b6020526040812080548390811061145657611456611a9d565b90600052602060002090600502016004015490506000811115611512576001600160a01b0383166000908152600b6020526040812080548490811061149d5761149d611a9d565b60009182526020909120600590910201600401556003546114cd9061010090046001600160a01b03168483611632565b60408051838152602081018390526001600160a01b038516917fd6f2c8500df5b44f11e9e48b91ff9f1b9d81bc496d55570c2b1b75bf65243f51910160405180910390a25b505050565b6000546001600160a01b03163314610a8e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104d2565b611579611737565b6003805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600180546001600160a01b031916905561077a8161120e565b6000818311156115ec57816115ee565b825b9392505050565b6115fd6112b5565b6003805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586115a63390565b6040516001600160a01b03831660248201526044810182905261151290849063a9059cbb60e01b906064016113ef565b60006116b7826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166117809092919063ffffffff16565b90508051600014806116d85750808060200190518101906116d89190611b2e565b6115125760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016104d2565b60035460ff16610a8e5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016104d2565b606061178f8484600085611797565b949350505050565b6060824710156117f85760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016104d2565b600080866001600160a01b031685876040516118149190611b74565b60006040518083038185875af1925050503d8060008114611851576040519150601f19603f3d011682016040523d82523d6000602084013e611856565b606091505b509150915061186787838387611872565b979650505050505050565b606083156118e15782516000036118da576001600160a01b0385163b6118da5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016104d2565b508161178f565b61178f83838151156118f65781518083602001fd5b8060405162461bcd60e51b81526004016104d29190611b90565b80356001600160a01b038116811461192757600080fd5b919050565b6000806040838503121561193f57600080fd5b61194883611910565b946020939093013593505050565b6000806040838503121561196957600080fd5b82359150602083013560ff8116811461198157600080fd5b809150509250929050565b60006020828403121561199e57600080fd5b5035919050565b6000602082840312156119b757600080fd5b6115ee82611910565b602080825282518282018190526000919060409081850190868401855b82811015611a215781518051855286810151878601528581015186860152606080820151908601526080908101519085015260a090930192908501906001016119dd565b5091979650505050505050565b60008060408385031215611a4157600080fd5b50508035926020909101359150565b6020808252600a90820152690616d6f756e74203d20360b41b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b81810381811115610a7857610a78611a74565b634e487b7160e01b600052603260045260246000fd5b80820180821115610a7857610a78611a74565b600082611ae357634e487b7160e01b600052601260045260246000fd5b500490565b8082028115828204841417610a7857610a78611a74565b600060208284031215611b1157600080fd5b5051919050565b634e487b7160e01b600052603160045260246000fd5b600060208284031215611b4057600080fd5b815180151581146115ee57600080fd5b60005b83811015611b6b578181015183820152602001611b53565b50506000910152565b60008251611b86818460208701611b50565b9190910192915050565b6020815260008251806020840152611baf816040850160208701611b50565b601f01601f1916919091016040019291505056fea2646970667358221220d34837119a44b5f96e4a605192c2bc5863cd2e3790cb90aa6f4561b4d3fb030864736f6c63430008120033",
  "devdoc": {
    "custom:security-contact": "security@ledgity.comsecurity@ledgity.com",
    "details": "This contract implements tierOf() function from LDYStaking as it's the only one the LToken contract relies on.",
    "events": {
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "The new owner accepts the ownership transfer."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "pendingOwner()": {
        "details": "Returns the address of the pending owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "tierOf(address)": {
        "details": "tierOf() function that always return that the given account is not elligible to any LDY staking tier, except if the account is in the highTierAccounts mapping.",
        "params": {
          "account": "The account to check the tier of."
        }
      },
      "transferOwnership(address)": {
        "details": "Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "highTierAccounts": {
        "details": "This is notably used to allow PreMining contracts to benefit from 0% withdrawal fees in L-Tokens contracts, when accounts unlock their funds."
      }
    },
    "title": "LDYStaking",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "highTierAccounts(address)": {
        "notice": "Holds a mapping of addresses that default to the highest staking tier."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2904,
        "contract": "contracts/src/LDYStaking.sol:LDYStaking",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3017,
        "contract": "contracts/src/LDYStaking.sol:LDYStaking",
        "label": "_pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 3211,
        "contract": "contracts/src/LDYStaking.sol:LDYStaking",
        "label": "_status",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 3110,
        "contract": "contracts/src/LDYStaking.sol:LDYStaking",
        "label": "_paused",
        "offset": 0,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 4397,
        "contract": "contracts/src/LDYStaking.sol:LDYStaking",
        "label": "Token",
        "offset": 1,
        "slot": "3",
        "type": "t_contract(IERC20)3343"
      },
      {
        "astId": 4404,
        "contract": "contracts/src/LDYStaking.sol:LDYStaking",
        "label": "StakeDurations",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 4406,
        "contract": "contracts/src/LDYStaking.sol:LDYStaking",
        "label": "rewardsDuration",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 4408,
        "contract": "contracts/src/LDYStaking.sol:LDYStaking",
        "label": "finishAt",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 4410,
        "contract": "contracts/src/LDYStaking.sol:LDYStaking",
        "label": "lastUpdateTime",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 4412,
        "contract": "contracts/src/LDYStaking.sol:LDYStaking",
        "label": "rewardRatePerSec",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 4414,
        "contract": "contracts/src/LDYStaking.sol:LDYStaking",
        "label": "rewardPerTokenStored",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 4416,
        "contract": "contracts/src/LDYStaking.sol:LDYStaking",
        "label": "totalStaked",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 4422,
        "contract": "contracts/src/LDYStaking.sol:LDYStaking",
        "label": "userStakingInfo",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_array(t_struct(StakingInfo)4394_storage)dyn_storage)"
      },
      {
        "astId": 4451,
        "contract": "contracts/src/LDYStaking.sol:LDYStaking",
        "label": "highTierAccounts",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(StakingInfo)4394_storage)dyn_storage": {
        "base": "t_struct(StakingInfo)4394_storage",
        "encoding": "dynamic_array",
        "label": "struct LDYStaking.StakingInfo[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)3343": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_struct(StakingInfo)4394_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct LDYStaking.StakingInfo[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(StakingInfo)4394_storage)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_struct(StakingInfo)4394_storage": {
        "encoding": "inplace",
        "label": "struct LDYStaking.StakingInfo",
        "members": [
          {
            "astId": 4385,
            "contract": "contracts/src/LDYStaking.sol:LDYStaking",
            "label": "stakedAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4387,
            "contract": "contracts/src/LDYStaking.sol:LDYStaking",
            "label": "unStakeAt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4389,
            "contract": "contracts/src/LDYStaking.sol:LDYStaking",
            "label": "duration",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4391,
            "contract": "contracts/src/LDYStaking.sol:LDYStaking",
            "label": "rewardPerTokenPaid",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4393,
            "contract": "contracts/src/LDYStaking.sol:LDYStaking",
            "label": "rewards",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}