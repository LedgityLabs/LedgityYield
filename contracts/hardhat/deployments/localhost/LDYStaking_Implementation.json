{
  "address": "0x2279B7A0a67DB372996a5FaB50D91eAA73d2eBe6",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardPerSec",
          "type": "uint256"
        }
      ],
      "name": "NotifiedRewardAmount",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stakeIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "RewardPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stakeIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stakeIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Unstaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MULTIPLIER_BASIS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "stakeIndex",
          "type": "uint256"
        }
      ],
      "name": "earned",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "finishAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getEarnedUser",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "stakeIndex",
          "type": "uint256"
        }
      ],
      "name": "getReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getStakeDurationInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "multiplier",
              "type": "uint256"
            }
          ],
          "internalType": "struct LDYStaking.StakeDurationInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getUserStakes",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "stakedAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "unStakeAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rewardPerTokenPaid",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rewards",
              "type": "uint256"
            }
          ],
          "internalType": "struct LDYStaking.StakingInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "globalBlacklist",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "globalOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "globalPause",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "highTierAccounts",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "globalOwner_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "globalPause_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "globalBlacklist_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "stakeRewardToken_",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "multiplier",
              "type": "uint256"
            }
          ],
          "internalType": "struct LDYStaking.StakeDurationInfo[]",
          "name": "stakeDurationInfos_",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "stakeDurationForPerks_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stakeAmountForPerks_",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastTimeRewardApplicable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastUpdateTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "notifyRewardAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "multiplier",
              "type": "uint256"
            }
          ],
          "internalType": "struct LDYStaking.StakeDurationInfo",
          "name": "durationInfo",
          "type": "tuple"
        }
      ],
      "name": "pushStakeDurationInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerTokenStored",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardRatePerSec",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "setRewardsDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "stakeAmountForPerks_",
          "type": "uint256"
        }
      ],
      "name": "setStakeAmountForPerks",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "stakeDurationForPerks_",
          "type": "uint256"
        }
      ],
      "name": "setStakeDurationForPerks",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "stakeDurationIndex",
          "type": "uint8"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakeAmountForPerks",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakeDurationForPerks",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stakeDurationInfos",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "multiplier",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakeRewardToken",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "tierOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tier",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalWeightedStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stakeIndex",
          "type": "uint256"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userStakingInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "stakedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unStakeAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardPerTokenPaid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewards",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xfabe47b8ba31dad71e029260b84976aae25abb4d07b9752d5e94886744ddecea",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x2279B7A0a67DB372996a5FaB50D91eAA73d2eBe6",
    "transactionIndex": 0,
    "gasUsed": "2774860",
    "logsBloom": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000440000000000000000000000000000000008000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x082a8b8a4f13edb190d176a053d2321e52b7bb9e41881112d23444c635c1d0bc",
    "transactionHash": "0xfabe47b8ba31dad71e029260b84976aae25abb4d07b9752d5e94886744ddecea",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 9,
        "transactionHash": "0xfabe47b8ba31dad71e029260b84976aae25abb4d07b9752d5e94886744ddecea",
        "address": "0x2279B7A0a67DB372996a5FaB50D91eAA73d2eBe6",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 0,
        "blockHash": "0x082a8b8a4f13edb190d176a053d2321e52b7bb9e41881112d23444c635c1d0bc"
      }
    ],
    "blockNumber": 9,
    "cumulativeGasUsed": "2774860",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "08ddb93411e2a1f8f8b878ec7ebf111c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardPerSec\",\"type\":\"uint256\"}],\"name\":\"NotifiedRewardAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MULTIPLIER_BASIS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeIndex\",\"type\":\"uint256\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getEarnedUser\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeIndex\",\"type\":\"uint256\"}],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getStakeDurationInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"}],\"internalType\":\"struct LDYStaking.StakeDurationInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUserStakes\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unStakeAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerTokenPaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"}],\"internalType\":\"struct LDYStaking.StakingInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalBlacklist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalPause\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"highTierAccounts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"globalOwner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"globalPause_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"globalBlacklist_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stakeRewardToken_\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"}],\"internalType\":\"struct LDYStaking.StakeDurationInfo[]\",\"name\":\"stakeDurationInfos_\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"stakeDurationForPerks_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeAmountForPerks_\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"}],\"internalType\":\"struct LDYStaking.StakeDurationInfo\",\"name\":\"durationInfo\",\"type\":\"tuple\"}],\"name\":\"pushStakeDurationInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRatePerSec\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"setRewardsDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeAmountForPerks_\",\"type\":\"uint256\"}],\"name\":\"setStakeAmountForPerks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeDurationForPerks_\",\"type\":\"uint256\"}],\"name\":\"setStakeDurationForPerks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"stakeDurationIndex\",\"type\":\"uint8\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeAmountForPerks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeDurationForPerks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakeDurationInfos\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeRewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"tierOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tier\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWeightedStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeIndex\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userStakingInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unStakeAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerTokenPaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"custom:security-contact\":\"security@ledgity.comsecurity@ledgity.com\",\"details\":\"This contract implements tierOf() function from LDYStaking as it's the only one the LToken contract relies on.\",\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is changed.\"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"NotifiedRewardAmount(uint256,uint256)\":{\"params\":{\"rewardAmount\":\"Reward amount added by admin.\",\"rewardPerSec\":\"RewardRatePerSec updated.\"}},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"RewardPaid(address,uint256,uint256)\":{\"params\":{\"reward\":\"Reward token amount\",\"stakeIndex\":\"User staking pool index\",\"user\":\"User address\"}},\"Staked(address,uint256,uint256)\":{\"params\":{\"amount\":\"Staked amount\",\"stakeIndex\":\"Latest index of user staking pool\",\"user\":\"User address\"}},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"},\"Unstaked(address,uint256,uint256)\":{\"params\":{\"amount\":\"Staked amount\",\"stakeIndex\":\"User staking pool index\",\"user\":\"User address\"}},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"earned(address,uint256)\":{\"params\":{\"account\":\"Address of the user.\",\"stakeIndex\":\"Index of the stakePool\"},\"returns\":{\"_0\":\"Return earned amounts\"}},\"getEarnedUser(address)\":{\"params\":{\"account\":\"Address of the user.\"},\"returns\":{\"_0\":\"Return earned rewards array for a user.\"}},\"getReward(uint256)\":{\"details\":\"Emits a `RewardPaid` event upon successful reward claim.\",\"params\":{\"stakeIndex\":\"The index of user staking pool.\"}},\"getStakeDurationInfo(uint256)\":{\"params\":{\"index\":\"Index of StakeDurationInfos.\"},\"returns\":{\"_0\":\"StakeDurationInfo.\"}},\"getUserStakes(address)\":{\"params\":{\"account\":\"The address of user.\"},\"returns\":{\"_0\":\"StakingInfo array.\"}},\"globalBlacklist()\":{\"returns\":{\"_0\":\"The address of the GlobalBlacklist contract.\"}},\"globalOwner()\":{\"returns\":{\"_0\":\"The address of the GlobalOwner contract.\"}},\"globalPause()\":{\"returns\":{\"_0\":\"The address of the GlobalPause contract.\"}},\"initialize(address,address,address,address,(uint256,uint256)[],uint256,uint256)\":{\"details\":\"This function is intended for setting initial values for the contract's state variables.\",\"params\":{\"globalBlacklist_\":\"The address of the GlobalBlacklist contract.\",\"globalOwner_\":\"The address of the GlobalOwner contract.\",\"globalPause_\":\"The address of the GlobalPause contract.\",\"stakeAmountForPerks_\":\"Minimal staking amount for perks.\",\"stakeDurationForPerks_\":\"Minimal staking duration for perks.\",\"stakeDurationInfos_\":\"Available Staking Durations.\",\"stakeRewardToken_\":\"The address of stake and reward token(LDY token).\"}},\"lastTimeRewardApplicable()\":{\"returns\":{\"_0\":\"Timestamp of the most recent rewards calculation.\"}},\"notifyRewardAmount(uint256)\":{\"details\":\"Only callable by owner.\",\"params\":{\"amount\":\"The amount of reward to be distributed.\"}},\"owner()\":{\"returns\":{\"_0\":\"The address of the owner\"}},\"paused()\":{\"returns\":{\"_0\":\"Whether the contract is paused or not.\"}},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"pushStakeDurationInfo((uint256,uint256))\":{\"details\":\"Only callable by owner.\"},\"recoverERC20(address,uint256)\":{\"params\":{\"amount\":\"The amount of token to recover.\",\"tokenAddress\":\"The address of the token to recover.\"}},\"rewardPerToken()\":{\"returns\":{\"_0\":\"Current reward per token.\"}},\"setRewardsDuration(uint256)\":{\"details\":\"Only callable by owner, and setting available only after rewards period.\",\"params\":{\"duration\":\"New reward duration in seconds.\"}},\"setStakeAmountForPerks(uint256)\":{\"details\":\"Only callable by owner.\",\"params\":{\"stakeAmountForPerks_\":\"New stakeDurationForPerks.\"}},\"setStakeDurationForPerks(uint256)\":{\"details\":\"Only callable by owner.\",\"params\":{\"stakeDurationForPerks_\":\"New stakeDurationForPerks.\"}},\"stake(uint256,uint8)\":{\"details\":\"Emits a `Staked` event upon successful staking.\",\"params\":{\"amount\":\"The amount of tokens to stake.\",\"stakeDurationIndex\":\"The Index of stakeDurationInfos array.\"}},\"tierOf(address)\":{\"details\":\"tierOf() function that always return that the given account is not elligible to any LDY staking tier, except if the account is in the highTierAccounts mapping.\",\"params\":{\"account\":\"The account to check the tier of.\"}},\"unstake(uint256,uint256)\":{\"details\":\"Emits a `Unstaked` event upon successful withdrawal. On full withdrawal, userStakingInfo removes stake pool for stakeIndex.\",\"params\":{\"amount\":\"The amount of tokens to withdraw.\",\"stakeIndex\":\"The index of user staking pool\"}},\"upgradeTo(address)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"stateVariables\":{\"highTierAccounts\":{\"details\":\"This is notably used to allow PreMining contracts to benefit from 0% withdrawal fees in L-Tokens contracts, when accounts unlock their funds.\"}},\"title\":\"LDYStaking\",\"version\":1},\"userdoc\":{\"events\":{\"NotifiedRewardAmount(uint256,uint256)\":{\"notice\":\"Emitted when admin add rewards.\"},\"RewardPaid(address,uint256,uint256)\":{\"notice\":\"Emitted when users claim rewards\"},\"Staked(address,uint256,uint256)\":{\"notice\":\"Emitted when users stake token\"},\"Unstaked(address,uint256,uint256)\":{\"notice\":\"Emitted when users unstake token\"}},\"kind\":\"user\",\"methods\":{\"MULTIPLIER_BASIS()\":{\"notice\":\"Decimals of multiplier\"},\"earned(address,uint256)\":{\"notice\":\"Calculate the user's stake pool earnings\"},\"finishAt()\":{\"notice\":\"Timestamp of when the rewards finish.\"},\"getEarnedUser(address)\":{\"notice\":\"Get the earned rewards array for a user.\"},\"getReward(uint256)\":{\"notice\":\"Claim pending rewards.\"},\"getStakeDurationInfo(uint256)\":{\"notice\":\"Get StakeDurationInfo.\"},\"getUserStakes(address)\":{\"notice\":\"Get User Stake Data.\"},\"globalBlacklist()\":{\"notice\":\"Retrieves the address of GlobalBlacklist contract.\"},\"globalOwner()\":{\"notice\":\"Retrieves the address of GlobalOwner contract.\"},\"globalPause()\":{\"notice\":\"Retrieves the address of GlobalPause contract.\"},\"highTierAccounts(address)\":{\"notice\":\"Holds a mapping of addresses that default to the highest staking tier.\"},\"initialize(address,address,address,address,(uint256,uint256)[],uint256,uint256)\":{\"notice\":\"Initializes the contract and sets the initial state variables. This is called by the proxy and should only be called once.\"},\"lastTimeRewardApplicable()\":{\"notice\":\"Get the last time when rewards were applicable for the specified reward token.\"},\"lastUpdateTime()\":{\"notice\":\"Timestamp of the reward updated.\"},\"notifyRewardAmount(uint256)\":{\"notice\":\"Notify the contract about the amount of rewards to be distributed and update reward parameters.\"},\"owner()\":{\"notice\":\"Override of OwnableUpgradeable.owner() that retrieves the owner's address from the GlobalOwner contract instead.\"},\"paused()\":{\"notice\":\"Override of PausableUpgradeable.pause() that retrieves the pause state from the GlobalPause contract instead.\"},\"pushStakeDurationInfo((uint256,uint256))\":{\"notice\":\"Push stakeDurationInfo\"},\"recoverERC20(address,uint256)\":{\"notice\":\"Recovers a specified amount of a given token address. Will fail if the contract doesn't hold enough tokens.\"},\"renounceOwnership()\":{\"notice\":\"Override of OwnableUpgradeable.renounceOwnership() that always reverts. Ownership is managed by the GlobalOwner contract and must be modified there.\"},\"rewardPerToken()\":{\"notice\":\"Calculate the reward per token for a given reward token.\"},\"rewardPerTokenStored()\":{\"notice\":\"Reward per token stored, sum of (reward rate * dt * 1e18 / total supply).\"},\"rewardRatePerSec()\":{\"notice\":\"Reward per second(total rewards / duration).\"},\"rewardsDuration()\":{\"notice\":\"Duration of the rewards (in seconds).\"},\"setRewardsDuration(uint256)\":{\"notice\":\"Update Rewards Duration.\"},\"setStakeAmountForPerks(uint256)\":{\"notice\":\"Update stakeAmountForPerks\"},\"setStakeDurationForPerks(uint256)\":{\"notice\":\"Update stakeDurationForPerks\"},\"stake(uint256,uint8)\":{\"notice\":\"Staked tokens cannot be withdrawn during the stakeDuration period and are eligible to claim rewards.\"},\"stakeAmountForPerks()\":{\"notice\":\"Minimal stake amount for perks.\"},\"stakeDurationForPerks()\":{\"notice\":\"Minimal stake duration for perks.\"},\"stakeDurationInfos(uint256)\":{\"notice\":\"Stake durations info array.\"},\"stakeRewardToken()\":{\"notice\":\"Stake and Reward token.\"},\"totalRewards()\":{\"notice\":\"Total rewards amount.\"},\"totalStaked()\":{\"notice\":\"Total staked amounts.\"},\"transferOwnership(address)\":{\"notice\":\"Override of OwnableUpgradeable.transferOwnership() that always reverts. Ownership is managed by the GlobalOwner contract and must be modified there.\"},\"unstake(uint256,uint256)\":{\"notice\":\"Withdraw staked tokens after stakeDuration has passed.\"},\"userStakingInfo(address,uint256)\":{\"notice\":\"User stakingInfo map, user address => array of the staking info\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/src/LDYStaking.sol\":\"LDYStaking\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OwnableUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2StepUpgradeable is Initializable, OwnableUpgradeable {\\n    function __Ownable2Step_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable2Step_init_unchained() internal onlyInitializing {\\n    }\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x84efb8889801b0ac817324aff6acc691d07bbee816b671817132911d287a8c63\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x4075622496acc77fd6d4de4cc30a8577a744d5c75afad33fdeacf1704d6eda98\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x47d6e06872b12e72c79d1b5eb55842f860b5fb1207b2317c2358d2766b950a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x584ebdf9c1118a7c773f98788e3f3ede01982bdf8932aa06f5acc7d54876e161\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xb607cb94c27e89750f5ae2ccebcb94e654e926f6125f4fd4c6262c89875118ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb82ef33f43b6b96109687d91b39c94573fdccaaa423fe28e8ba0977b31c023e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xd60f939a3ca0199014d079b4dd66aa757954334947d81eb5c1d35d7a83061ab3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20Upgradeable token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && AddressUpgradeable.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x4dae161227d332808312ee2caf6384929321b83c16cc89b5642985fbec6b814c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x07ac95acad040f1fb1f6120dd0aa5f702db69446e95f82613721879d30de0908\",\"license\":\"MIT\"},\"contracts/src/GlobalBlacklist.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {UUPSUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport {GlobalOwnableUpgradeable} from \\\"./abstracts/GlobalOwnableUpgradeable.sol\\\";\\n\\n/**\\n * @title GlobalBlacklist\\n * @author Lila Rest (https://lila.rest)\\n * @custom:security-contact security@ledgity.com\\n *\\n * @notice Holds a global mapping of blacklisted accounts shared by all contracts of the\\n * Ledgity Yield codebase.\\n *\\n * @dev Specifically, some contracts within the codebase inherit from the\\n * GlobalRestrictableUpgradeable abstract contract. This provides them with modifiers\\n * and getter functions to easily check against this global blacklist.\\n *\\n * @dev For further details, see \\\"GlobalBlacklist\\\" section of whitepaper.\\n * @custom:security-contact security@ledgity.com\\n */\\ncontract GlobalBlacklist is Initializable, UUPSUpgradeable, GlobalOwnableUpgradeable {\\n    /**\\n     * @notice Mapping of accounts to their blacklist status.\\n     * @dev This mapping is made private and isBlacklisted() should be used instead.This\\n     * helps saving gas in some scenario. See isBlacklisted() documentation for more details.\\n     */\\n    mapping(address => bool) private _list;\\n\\n    /// @dev Emitted when `account` is blacklisted.\\n    event Blacklisted(address account);\\n\\n    /// @dev Emitted when `account` is unblacklisted.\\n    event Unblacklisted(address account);\\n\\n    /**\\n     * @notice Prevents implementation contract from being initialized as recommended by\\n     * OpenZeppelin.\\n     * @dev See: https://docs.openzeppelin.com/contracts/4.x/api/proxy#Initializable-_disableInitializers--\\n     * @custom:oz-upgrades-unsafe-allow constructor\\n     */\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /**\\n     * @notice Initializer function of the contract. It replaces the constructor()\\n     * function in the context of upgradeable contracts.\\n     * @dev See: https://docs.openzeppelin.com/contracts/4.x/upgradeable\\n     * @param globalOwner_ The address of the GlobalOwner contract.\\n     */\\n    function initialize(address globalOwner_) public initializer {\\n        __GlobalOwnable_init(globalOwner_);\\n        __UUPSUpgradeable_init();\\n    }\\n\\n    /**\\n     * @notice Override of UUPSUpgradeable._authorizeUpgrade() function restricted to\\n     * global owner. It is called by the proxy contract during an upgrade.\\n     * @param newImplementation The address of the new implementation contract.\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal override onlyOwner {}\\n\\n    /**\\n     * @notice Adds a given account to the blacklist.\\n     * @param account The account's address to be blacklisted.\\n     */\\n    function blacklist(address account) external onlyOwner {\\n        require(account != address(0), \\\"L20\\\");\\n        _list[account] = true;\\n        emit Blacklisted(account);\\n    }\\n\\n    /**\\n     * @notice Removes a given account from the blacklist.\\n     * @param account The account's address to be un-blacklisted.\\n     */\\n    function unBlacklist(address account) external onlyOwner {\\n        _list[account] = false;\\n        emit Unblacklisted(account);\\n    }\\n\\n    /**\\n     * @notice Checks whether a given account is blacklisted.\\n     * @param account Address of the account to check.\\n     * @return 'true' if the account is blacklisted, 'false' otherwise\\n     */\\n    function isBlacklisted(address account) external view returns (bool) {\\n        // Gas optimization: Avoid accessing storage if account is the zero address\\n        // (e.g, during a mint or a burn of tokens)\\n        if (account == address(0)) return false;\\n\\n        // Else, return current account's blacklist status\\n        return _list[account];\\n    }\\n}\\n\",\"keccak256\":\"0x7e771076a06cfec935df22cf2d307df7e1f7df5b887976ec1dea30f8b68a878d\",\"license\":\"MIT\"},\"contracts/src/GlobalOwner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {UUPSUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport {Ownable2StepUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\\\";\\n\\n/**\\n * @title GlobalOwner\\n * @author Lila Rest (https://lila.rest)\\n * @custom:security-contact security@ledgity.com\\n *\\n * @notice Holds the address of a global owner account shared by all contracts of the\\n * Ledgity Yield's codebase.\\n *\\n * @dev Specifically, some contracts within the codebase inherit from the\\n * GlobalOwnableUpgradeable abstract contract. This provides them with an overriden\\n * owner() function that retrieves the owner's address from this contract instead.\\n *\\n * @dev For further details, see \\\"GlobalOwner\\\" section of whitepaper.\\n * @custom:security-contact security@ledgity.com\\n */\\ncontract GlobalOwner is Initializable, UUPSUpgradeable, Ownable2StepUpgradeable {\\n    /**\\n     * @notice Prevents implementation contract from being initialized as recommended by\\n     * OpenZeppelin.\\n     * @dev See: https://docs.openzeppelin.com/contracts/4.x/api/proxy#Initializable-_disableInitializers--\\n     * @custom:oz-upgrades-unsafe-allow constructor\\n     */\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /**\\n     * @notice Initializer function of the contract. It replaces the constructor()\\n     * function in the context of upgradeable contracts.\\n     * @dev See: https://docs.openzeppelin.com/contracts/4.x/upgradeable\\n     */\\n    function initialize() public initializer {\\n        __Ownable2Step_init();\\n        __UUPSUpgradeable_init();\\n    }\\n\\n    /**\\n     * @notice Override of UUPSUpgradeable._authorizeUpgrade() function restricted to\\n     * global owner. It is called by the proxy contract during an upgrade.\\n     * @param newImplementation The address of the new implementation contract.\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal override onlyOwner {}\\n}\\n\",\"keccak256\":\"0xa3b880c4d82e796c162c99a398b569ce4a8e6d27232014b81a6a4503718f12dc\",\"license\":\"MIT\"},\"contracts/src/GlobalPause.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {UUPSUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport {PausableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport {GlobalOwnableUpgradeable} from \\\"./abstracts/GlobalOwnableUpgradeable.sol\\\";\\n\\n/**\\n * @title GlobalPause\\n * @author Lila Rest (https://lila.rest)\\n * @custom:security-contact security@ledgity.com\\n *\\n * @notice Holds a global pause state shared by all contracts of the Ledgity Yield\\n * codebase.\\n *\\n * @dev Specifically, some contracts within the codebase inherit from the\\n * GlobalPausableUpgradeable abstract contract. This provides them with an overriden\\n * paused() function that retrieves the pause state from this contract instead.\\n *\\n * @dev For further details, see \\\"GlobalPause\\\" section of whitepaper.\\n * @custom:security-contact security@ledgity.com\\n */\\ncontract GlobalPause is\\n    Initializable,\\n    UUPSUpgradeable,\\n    GlobalOwnableUpgradeable,\\n    PausableUpgradeable\\n{\\n    /**\\n     * @notice Prevents implementation contract from being initialized as recommended by\\n     * OpenZeppelin.\\n     * @dev See: https://docs.openzeppelin.com/contracts/4.x/api/proxy#Initializable-_disableInitializers--\\n     * @custom:oz-upgrades-unsafe-allow constructor\\n     */\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /**\\n     * @notice Initializer function of the contract. It replaces the constructor()\\n     * function in the context of upgradeable contracts.\\n     * @dev See: https://docs.openzeppelin.com/contracts/4.x/upgradeable\\n     * @param globalOwner_ The address of the GlobalOwner contract.\\n     */\\n    function initialize(address globalOwner_) public initializer {\\n        __GlobalOwnable_init(globalOwner_);\\n        __Pausable_init();\\n        __UUPSUpgradeable_init();\\n    }\\n\\n    /**\\n     * @notice Override of UUPSUpgradeable._authorizeUpgrade() function restricted to\\n     * global owner. It is called by the proxy contract during an upgrade.\\n     * @param newImplementation The address of the new implementation contract.\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal override onlyOwner {}\\n\\n    /**\\n     * @dev Public implementation of PausableUpgradeable's pausing and unpausing functions\\n     * but restricted to contract's owner.\\n     */\\n    function pause() public onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyOwner {\\n        _unpause();\\n    }\\n}\\n\",\"keccak256\":\"0x9a0767e761dbd1d5800db03558c3903f229e6ef29f5fe5ff38f45fb4d7572e2e\",\"license\":\"MIT\"},\"contracts/src/LDYStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\n// Contracts\\nimport {ReentrancyGuardUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport {BaseUpgradeable} from \\\"./abstracts/base/BaseUpgradeable.sol\\\";\\n\\n// Libraries\\nimport {SafeERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\n\\n// Interfaces\\nimport {IERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @title LDYStaking\\n * @custom:security-contact security@ledgity.com\\n *\\n * @dev This contract implements tierOf() function from LDYStaking as it's the only\\n * one the LToken contract relies on.\\n *\\n * @custom:security-contact security@ledgity.com\\n */\\ncontract LDYStaking is BaseUpgradeable, ReentrancyGuardUpgradeable {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    /**\\n     * @notice Represents a user staking info in array.\\n     * @param stakedAmount Amount of the stake.\\n     * @param unStakeAt Unstake at.\\n     * @param duration Staking period in seconds.\\n     * @param rewardPerTokenPaid Reward per token paid.\\n     * @param rewards Rewards to be claimed.\\n     */\\n    struct StakingInfo {\\n        uint256 stakedAmount;\\n        uint256 unStakeAt;\\n        uint256 duration;\\n        uint256 rewardPerTokenPaid;\\n        uint256 rewards;\\n    }\\n\\n    /**\\n     * @notice Represent duration and multiplier per each stake option.\\n     * @param duration Staking period in seconds.\\n     * @param multiplier Token weight\\n     */\\n    struct StakeDurationInfo {\\n        uint256 duration;\\n        uint256 multiplier;\\n    }\\n\\n    /// @notice Decimals of multiplier\\n    uint256 public constant MULTIPLIER_BASIS = 1e4;\\n\\n    /// @notice Stake and Reward token.\\n    IERC20Upgradeable public stakeRewardToken;\\n\\n    /// @notice Minimal stake duration for perks.\\n    uint256 public stakeDurationForPerks;\\n\\n    /// @notice Minimal stake amount for perks.\\n    uint256 public stakeAmountForPerks;\\n\\n    /// @notice Stake durations info array.\\n    StakeDurationInfo[] public stakeDurationInfos;\\n\\n    /// @notice Duration of the rewards (in seconds).\\n    uint256 public rewardsDuration;\\n\\n    /// @notice Timestamp of when the rewards finish.\\n    uint256 public finishAt;\\n\\n    /// @notice Timestamp of the reward updated.\\n    uint256 public lastUpdateTime;\\n\\n    /// @notice Reward per second(total rewards / duration).\\n    uint256 public rewardRatePerSec;\\n\\n    /// @notice Reward per token stored, sum of (reward rate * dt * 1e18 / total supply).\\n    uint256 public rewardPerTokenStored;\\n\\n    /// @notice Total staked amounts.\\n    uint256 public totalStaked;\\n\\n    // Total staked amounts with multiplier applied\\n    uint256 public totalWeightedStake;\\n\\n    /// @notice User stakingInfo map, user address => array of the staking info\\n    mapping(address => StakingInfo[]) public userStakingInfo;\\n\\n    /// @notice Total rewards amount.\\n    uint256 public totalRewards;\\n\\n    /**\\n     * @notice Emitted when users stake token\\n     * @param user User address\\n     * @param stakeIndex Latest index of user staking pool\\n     * @param amount Staked amount\\n     */\\n    event Staked(address indexed user, uint256 stakeIndex, uint256 amount);\\n\\n    /**\\n     * @notice Emitted when users unstake token\\n     * @param user User address\\n     * @param stakeIndex User staking pool index\\n     * @param amount Staked amount\\n     */\\n    event Unstaked(address indexed user, uint256 stakeIndex, uint256 amount);\\n\\n    /**\\n     * @notice Emitted when users claim rewards\\n     * @param user User address\\n     * @param stakeIndex User staking pool index\\n     * @param reward Reward token amount\\n     */\\n    event RewardPaid(address indexed user, uint256 stakeIndex, uint256 reward);\\n\\n    /**\\n     * @notice Emitted when admin add rewards.\\n     * @param rewardAmount Reward amount added by admin.\\n     * @param rewardPerSec RewardRatePerSec updated.\\n     */\\n    event NotifiedRewardAmount(uint256 rewardAmount, uint256 rewardPerSec);\\n\\n    /**\\n     * @notice Holds a mapping of addresses that default to the highest staking tier.\\n     * @dev This is notably used to allow PreMining contracts to benefit from 0%\\n     * withdrawal fees in L-Tokens contracts, when accounts unlock their funds.\\n     */\\n    mapping(address => bool) public highTierAccounts;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /**\\n     * @notice Initializes the contract and sets the initial state variables. This is called by the proxy and should only be called once.\\n     * @dev This function is intended for setting initial values for the contract's state variables.\\n     * @param globalOwner_ The address of the GlobalOwner contract.\\n     * @param globalPause_ The address of the GlobalPause contract.\\n     * @param globalBlacklist_ The address of the GlobalBlacklist contract.\\n     * @param stakeRewardToken_ The address of stake and reward token(LDY token).\\n     * @param stakeDurationInfos_ Available Staking Durations.\\n     * @param stakeDurationForPerks_ Minimal staking duration for perks.\\n     * @param stakeAmountForPerks_ Minimal staking amount for perks.\\n     */\\n    function initialize(\\n        address globalOwner_,\\n        address globalPause_,\\n        address globalBlacklist_,\\n        address stakeRewardToken_,\\n        StakeDurationInfo[] memory stakeDurationInfos_,\\n        uint256 stakeDurationForPerks_,\\n        uint256 stakeAmountForPerks_\\n    ) public initializer {\\n        __Base_init(globalOwner_, globalPause_, globalBlacklist_);\\n        stakeRewardToken = IERC20Upgradeable(stakeRewardToken_);\\n        uint stakeDurationInfosLength = stakeDurationInfos_.length;\\n        for (uint256 i = 0; i < stakeDurationInfosLength; i++) {\\n            stakeDurationInfos.push(stakeDurationInfos_[i]);\\n        }\\n        stakeDurationForPerks = stakeDurationForPerks_;\\n        stakeAmountForPerks = stakeAmountForPerks_;\\n    }\\n\\n    // --------------------\\n    //  MUTATIVE FUNCTIONS\\n    // --------------------\\n\\n    /**\\n     * @notice Staked tokens cannot be withdrawn during the stakeDuration period and are eligible to claim rewards.\\n     * @dev Emits a `Staked` event upon successful staking.\\n     * @param amount The amount of tokens to stake.\\n     * @param stakeDurationIndex The Index of stakeDurationInfos array.\\n     */\\n    function stake(\\n        uint256 amount,\\n        uint8 stakeDurationIndex\\n    ) external nonReentrant whenNotPaused notBlacklisted(_msgSender()) {\\n        require(amount > 0, \\\"amount = 0\\\");\\n        require(stakeDurationIndex <= stakeDurationInfos.length - 1, \\\"Invalid staking period\\\");\\n\\n        _updateReward(address(0), 0);\\n        StakeDurationInfo memory stakeDurationInfo = stakeDurationInfos[stakeDurationIndex];\\n        StakingInfo memory stakingInfo = StakingInfo({\\n            stakedAmount: amount,\\n            unStakeAt: block.timestamp + stakeDurationInfo.duration,\\n            duration: stakeDurationInfo.duration,\\n            rewardPerTokenPaid: rewardPerTokenStored,\\n            rewards: 0\\n        });\\n\\n        // check whether account is eligible for benefit from the protocol\\n        if (stakeDurationInfo.duration >= stakeDurationForPerks && amount >= stakeAmountForPerks) {\\n            highTierAccounts[_msgSender()] = true;\\n        }\\n\\n        userStakingInfo[_msgSender()].push(stakingInfo);\\n\\n        uint256 stakeIndex = userStakingInfo[_msgSender()].length - 1;\\n        uint256 weightedStake = (amount * stakeDurationInfo.multiplier) / MULTIPLIER_BASIS;\\n        totalWeightedStake += weightedStake;\\n        totalStaked += amount;\\n\\n        stakeRewardToken.safeTransferFrom(_msgSender(), address(this), amount);\\n\\n        emit Staked(_msgSender(), stakeIndex, amount);\\n    }\\n\\n    /**\\n     * @notice Withdraw staked tokens after stakeDuration has passed.\\n     * @dev Emits a `Unstaked` event upon successful withdrawal.\\n     * On full withdrawal, userStakingInfo removes stake pool for stakeIndex.\\n     * @param amount The amount of tokens to withdraw.\\n     * @param stakeIndex The index of user staking pool\\n     */\\n    function unstake(\\n        uint256 amount,\\n        uint256 stakeIndex\\n    ) external nonReentrant notBlacklisted(_msgSender()) {\\n        require(amount > 0, \\\"amount = 0\\\");\\n        require(userStakingInfo[_msgSender()].length >= stakeIndex + 1, \\\"Invalid stakeIndex\\\");\\n        require(\\n            block.timestamp >= userStakingInfo[_msgSender()][stakeIndex].unStakeAt,\\n            \\\"Cannot unstake during staking period\\\"\\n        );\\n        require(\\n            amount <= userStakingInfo[_msgSender()][stakeIndex].stakedAmount,\\n            \\\"Insufficient unstake amount\\\"\\n        );\\n\\n        _updateReward(_msgSender(), stakeIndex);\\n\\n        uint256 multiplier = _getMultiplier(userStakingInfo[_msgSender()][stakeIndex].duration);\\n\\n        uint256 currentWeightedStake = (amount * multiplier) / MULTIPLIER_BASIS;\\n        totalWeightedStake -= currentWeightedStake;\\n\\n        totalStaked -= amount;\\n        userStakingInfo[_msgSender()][stakeIndex].stakedAmount -= amount;\\n\\n        // check whether account is eligible for benefit from the protocol\\n        if (\\n            userStakingInfo[_msgSender()][stakeIndex].duration >= stakeDurationForPerks &&\\n            userStakingInfo[_msgSender()][stakeIndex].stakedAmount < stakeAmountForPerks\\n        ) {\\n            highTierAccounts[_msgSender()] = false;\\n        }\\n\\n        // remove staking info from array on full withdrawal\\n        if (userStakingInfo[_msgSender()][stakeIndex].stakedAmount == 0) {\\n            _claimReward(_msgSender(), stakeIndex);\\n\\n            userStakingInfo[_msgSender()][stakeIndex] = userStakingInfo[_msgSender()][\\n                userStakingInfo[_msgSender()].length - 1\\n            ];\\n            userStakingInfo[_msgSender()].pop();\\n        }\\n        stakeRewardToken.safeTransfer(_msgSender(), amount);\\n\\n        emit Unstaked(_msgSender(), stakeIndex, amount);\\n    }\\n\\n    /**\\n     * @notice Claim pending rewards.\\n     * @dev Emits a `RewardPaid` event upon successful reward claim.\\n     * @param stakeIndex The index of user staking pool.\\n     */\\n    function getReward(uint256 stakeIndex) external nonReentrant notBlacklisted(_msgSender()) {\\n        require(userStakingInfo[_msgSender()].length >= stakeIndex + 1, \\\"Invalid stakeIndex\\\");\\n        _updateReward(_msgSender(), stakeIndex);\\n        _claimReward(_msgSender(), stakeIndex);\\n    }\\n\\n    // --------------------\\n    // ADMIN CONFIGURATION\\n    // --------------------\\n\\n    /**\\n     * @notice Update Rewards Duration.\\n     * @dev Only callable by owner, and setting available only after rewards period.\\n     * @param duration New reward duration in seconds.\\n     */\\n    function setRewardsDuration(uint256 duration) external onlyOwner {\\n        require(finishAt < block.timestamp, \\\"reward duration is not finished\\\");\\n        rewardsDuration = duration;\\n    }\\n\\n    /**\\n     * @notice Update stakeDurationForPerks\\n     * @dev Only callable by owner.\\n     * @param stakeDurationForPerks_ New stakeDurationForPerks.\\n     */\\n    function setStakeDurationForPerks(uint256 stakeDurationForPerks_) external onlyOwner {\\n        stakeDurationForPerks = stakeDurationForPerks_;\\n    }\\n\\n    /**\\n     * @notice Update stakeAmountForPerks\\n     * @dev Only callable by owner.\\n     * @param stakeAmountForPerks_ New stakeDurationForPerks.\\n     */\\n    function setStakeAmountForPerks(uint256 stakeAmountForPerks_) external onlyOwner {\\n        stakeAmountForPerks = stakeAmountForPerks_;\\n    }\\n\\n    /**\\n     * @notice Push stakeDurationInfo\\n     * @dev Only callable by owner.\\n     */\\n    function pushStakeDurationInfo(StakeDurationInfo memory durationInfo) external onlyOwner {\\n        stakeDurationInfos.push(durationInfo);\\n    }\\n\\n    /**\\n     * @notice Notify the contract about the amount of rewards to be distributed and update reward parameters.\\n     * @dev Only callable by owner.\\n     * @param amount The amount of reward to be distributed.\\n     */\\n    function notifyRewardAmount(uint256 amount) external onlyOwner {\\n        require(rewardsDuration > 0, \\\"rewards duration is not set\\\");\\n        require(amount > 0, \\\"amount = 0\\\");\\n\\n        _updateReward(address(0), 0);\\n\\n        if (block.timestamp >= finishAt) {\\n            rewardRatePerSec = amount / rewardsDuration;\\n        } else {\\n            uint256 remainingRewards = (finishAt - block.timestamp) * rewardRatePerSec;\\n            rewardRatePerSec = (amount + remainingRewards) / rewardsDuration;\\n        }\\n\\n        require(rewardRatePerSec > 0, \\\"reward rate = 0\\\");\\n        require(\\n            rewardRatePerSec <=\\n                (stakeRewardToken.balanceOf(address(this)) + amount - totalStaked) /\\n                    rewardsDuration,\\n            \\\"reward amount > balance\\\"\\n        );\\n\\n        finishAt = block.timestamp + rewardsDuration;\\n        lastUpdateTime = block.timestamp;\\n\\n        totalRewards += amount;\\n        stakeRewardToken.safeTransferFrom(_msgSender(), address(this), amount);\\n\\n        emit NotifiedRewardAmount(amount, rewardRatePerSec);\\n    }\\n\\n    // --------------------\\n    //    VIEW FUNCTIONS\\n    // --------------------\\n\\n    /**\\n     * @notice Get the last time when rewards were applicable for the specified reward token.\\n     * @return Timestamp of the most recent rewards calculation.\\n     */\\n    function lastTimeRewardApplicable() public view returns (uint256) {\\n        return _min(finishAt, block.timestamp);\\n    }\\n\\n    /**\\n     * @notice Calculate the reward per token for a given reward token.\\n     * @return Current reward per token.\\n     */\\n    function rewardPerToken() public view returns (uint256) {\\n        if (totalStaked == 0) {\\n            return rewardPerTokenStored;\\n        }\\n\\n        return\\n            rewardPerTokenStored +\\n            ((rewardRatePerSec * (lastTimeRewardApplicable() - lastUpdateTime) * 1e18) /\\n                totalWeightedStake);\\n    }\\n\\n    /**\\n     * @notice Calculate the user's stake pool earnings\\n     * @param account Address of the user.\\n     * @param stakeIndex Index of the stakePool\\n     * @return Return earned amounts\\n     */\\n    function earned(address account, uint256 stakeIndex) public view returns (uint256) {\\n        StakingInfo memory userInfo = userStakingInfo[account][stakeIndex];\\n        uint256 multiplier = _getMultiplier(userInfo.duration);\\n        uint256 weightedAmount = (userInfo.stakedAmount * multiplier) / MULTIPLIER_BASIS;\\n        uint256 rewardsSinceLastUpdate = ((weightedAmount *\\n            (rewardPerToken() - userInfo.rewardPerTokenPaid)) / 1e18);\\n        return rewardsSinceLastUpdate + userInfo.rewards;\\n    }\\n\\n    /**\\n     * @notice Get the earned rewards array for a user.\\n     * @param account Address of the user.\\n     * @return Return earned rewards array for a user.\\n     */\\n    function getEarnedUser(address account) public view returns (uint256[] memory) {\\n        uint256 numberOfPools = userStakingInfo[account].length;\\n        uint256[] memory earnedArray = new uint256[](numberOfPools);\\n        for (uint256 index; index < numberOfPools; index++) {\\n            earnedArray[index] = earned(account, index);\\n        }\\n        return earnedArray;\\n    }\\n\\n    /**\\n     * @dev tierOf() function that always return that the given account is not\\n     * elligible to any LDY staking tier, except if the account is in the\\n     * highTierAccounts mapping.\\n     * @param account The account to check the tier of.\\n     */\\n    function tierOf(address account) public view returns (uint256 tier) {\\n        if (highTierAccounts[account]) return 3;\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Get User Stake Data.\\n     * @param account The address of user.\\n     * @return StakingInfo array.\\n     */\\n    function getUserStakes(address account) external view returns (StakingInfo[] memory) {\\n        return userStakingInfo[account];\\n    }\\n\\n    /**\\n     * @notice Get StakeDurationInfo.\\n     * @param index Index of StakeDurationInfos.\\n     * @return StakeDurationInfo.\\n     */\\n    function getStakeDurationInfo(uint256 index) external view returns (StakeDurationInfo memory) {\\n        require(stakeDurationInfos.length - 1 >= index, \\\"wrong index\\\");\\n        return stakeDurationInfos[index];\\n    }\\n\\n    /**\\n     * @notice Send rewards to user.\\n     * @dev This is private function, called by getReward function.\\n     * @param account The address of user.\\n     * @param stakeIndex The index of user staking pool.\\n     */\\n    function _claimReward(address account, uint256 stakeIndex) private {\\n        uint256 reward = userStakingInfo[account][stakeIndex].rewards;\\n\\n        if (reward > 0) {\\n            userStakingInfo[account][stakeIndex].rewards = 0;\\n            totalRewards -= reward;\\n            stakeRewardToken.safeTransfer(account, reward);\\n            emit RewardPaid(account, stakeIndex, reward);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculate and update user rewards per stakeIndex.\\n     * @dev this is private function, called by stake, unstake, getRewards, and notifyRewardAmount functions.\\n     * @param account The address of user.\\n     * @param stakeIndex The index of user staking pool.\\n     */\\n    function _updateReward(address account, uint256 stakeIndex) private {\\n        rewardPerTokenStored = rewardPerToken();\\n        lastUpdateTime = lastTimeRewardApplicable();\\n\\n        if (account != address(0)) {\\n            userStakingInfo[account][stakeIndex].rewards = earned(account, stakeIndex);\\n            userStakingInfo[account][stakeIndex].rewardPerTokenPaid = rewardPerTokenStored;\\n        }\\n    }\\n\\n    /**\\n     * @notice Get multiplier from stakeDurationInfo based on duration\\n     * @param duration Stake Duration\\n     */\\n    function _getMultiplier(uint256 duration) private view returns (uint256) {\\n        uint256 stakeDurationInfosLength = stakeDurationInfos.length;\\n        for (uint256 i = 0; i < stakeDurationInfosLength; i++) {\\n            StakeDurationInfo memory stakeDurationInfo = stakeDurationInfos[i];\\n            if (duration == stakeDurationInfo.duration) {\\n                return stakeDurationInfo.multiplier;\\n            }\\n        }\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Take minimum value between x and y.\\n     */\\n    function _min(uint256 x, uint256 y) private pure returns (uint256) {\\n        return x <= y ? x : y;\\n    }\\n}\\n\",\"keccak256\":\"0x7e6eba9f67c4a0ad1ade18149d04fe01a53bae4cc3a898a8ab0b347c1d036cc5\",\"license\":\"MIT\"},\"contracts/src/abstracts/GlobalOwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {GlobalOwner} from \\\"../GlobalOwner.sol\\\";\\n\\n/**\\n * @title GlobalOwnableUpgradeable\\n * @author Lila Rest (https://lila.rest)\\n * @custom:security-contact security@ledgity.com\\n *\\n * @notice Derived contracts will inherit ownership from the specified GlobalOwner\\n * contract (see GlobalOwner.sol). This design facilitates centralized management\\n * of ownership for all the Ledgity Yield contracts.\\n *\\n * @dev Security measure:\\n * The _globalOwner state must be set at initialization time and, for evident security\\n * reasons, cannot be changed afterward.\\n *\\n * @dev For further details, see \\\"GlobalOwnableUpgradeable\\\" section of whitepaper.\\n * @custom:security-contact security@ledgity.com\\n */\\nabstract contract GlobalOwnableUpgradeable is Initializable, OwnableUpgradeable {\\n    /**\\n     * @notice The GlobalOwner contract the ownership will be inherited from.\\n     * @dev This state is private so derived contracts cannot change its value.\\n     */\\n    GlobalOwner private _globalOwner;\\n\\n    /**\\n     * @notice Initializer functions of the contract. They replace the constructor()\\n     * function in the context of upgradeable contracts.\\n     * @dev See: https://docs.openzeppelin.com/contracts/4.x/upgradeable\\n     * @param globalOwner_ The address of the GlobalOwner contract.\\n     */\\n    function __GlobalOwnable_init(address globalOwner_) internal onlyInitializing {\\n        __GlobalOwnable_init_unchained(globalOwner_);\\n        // Note: __Ownable_init() doesn't have to be called as the overriden owner()\\n        // function no longer rely on the _owner state. Since __Ownable_init() only sets\\n        // the initial _owner value, calling it would have no effect.\\n    }\\n\\n    function __GlobalOwnable_init_unchained(address globalOwner_) internal onlyInitializing {\\n        _globalOwner = GlobalOwner(globalOwner_);\\n    }\\n\\n    /**\\n     * @notice Retrieves the address of GlobalOwner contract.\\n     * @return The address of the GlobalOwner contract.\\n     */\\n    function globalOwner() public view returns (address) {\\n        return address(_globalOwner);\\n    }\\n\\n    /**\\n     * @notice Override of OwnableUpgradeable.owner() that retrieves the owner's address\\n     * from the GlobalOwner contract instead.\\n     * @return The address of the owner\\n     */\\n    function owner() public view override returns (address) {\\n        return _globalOwner.owner();\\n    }\\n\\n    /**\\n     * @notice Override of OwnableUpgradeable.transferOwnership() that always reverts.\\n     * Ownership is managed by the GlobalOwner contract and must be modified there.\\n     */\\n    function transferOwnership(address newOwner) public view override onlyOwner {\\n        newOwner; // Silence unused variable compiler warning\\n        revert(\\\"L8\\\");\\n    }\\n\\n    /**\\n     * @notice Override of OwnableUpgradeable.renounceOwnership() that always reverts.\\n     * Ownership is managed by the GlobalOwner contract and must be modified there.\\n     */\\n    function renounceOwnership() public view override onlyOwner {\\n        revert(\\\"L65\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add\\n     * new variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9203f7a2a19def126d8ff0fde8357053ffcf1100d65ec8faec8299b6ed2c0c5a\",\"license\":\"MIT\"},\"contracts/src/abstracts/GlobalPausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {PausableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport {GlobalPause} from \\\"../GlobalPause.sol\\\";\\n\\n/**\\n * @title GlobalPausableUpgradeable\\n * @author Lila Rest (https://lila.rest)\\n * @custom:security-contact security@ledgity.com\\n *\\n * @notice Derived contracts will inherit a pause state from the specified GlobalPause\\n * contract (see GlobalPause.sol). This design facilitates centralized management of\\n * pause state for all the Ledgity Yield contracts.\\n *\\n * @dev Security measure\\n * The _globalPause state must be set at initialization time and, for evident security\\n * reasons, cannot be changed afterward.\\n *\\n * @dev For further details, see \\\"GlobalPausableUpgradeable\\\" section of whitepaper.\\n * @custom:security-contact security@ledgity.com\\n */\\nabstract contract GlobalPausableUpgradeable is Initializable, PausableUpgradeable {\\n    /**\\n     * @notice The GlobalPause contract the pause state will be inherited from.\\n     * @dev This state is private so derived contracts cannot change its value.\\n     */\\n    GlobalPause private _globalPause;\\n\\n    /**\\n     * @notice Initializer functions of the contract. They replace the constructor()\\n     * function in the context of upgradeable contracts.\\n     * @dev See: https://docs.openzeppelin.com/contracts/4.x/upgradeable\\n     * @param globalPause_ The address of the GlobalPause contract.\\n     */\\n    function __GlobalPausable_init(address globalPause_) internal onlyInitializing {\\n        __Pausable_init();\\n        __GlobalPausable_init_unchained(globalPause_);\\n    }\\n\\n    function __GlobalPausable_init_unchained(address globalPause_) internal onlyInitializing {\\n        _globalPause = GlobalPause(globalPause_);\\n    }\\n\\n    /**\\n     * @notice Retrieves the address of GlobalPause contract.\\n     * @return The address of the GlobalPause contract.\\n     */\\n    function globalPause() public view returns (address) {\\n        return address(_globalPause);\\n    }\\n\\n    /**\\n     * @notice Override of PausableUpgradeable.pause() that retrieves the pause state\\n     * from the GlobalPause contract instead.\\n     * @return Whether the contract is paused or not.\\n     */\\n    function paused() public view virtual override returns (bool) {\\n        return _globalPause.paused();\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add\\n     * new variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xff508c0b8c48916885453b4894d0401e94580fb24fb6af1885a3e160864cde94\",\"license\":\"MIT\"},\"contracts/src/abstracts/GlobalRestrictableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {GlobalBlacklist} from \\\"../GlobalBlacklist.sol\\\";\\n\\n/**\\n * @title GlobalRestrictableUpgradeable\\n * @author Lila Rest (https://lila.rest)\\n * @custom:security-contact security@ledgity.com\\n *\\n * @notice Derived contracts will inherit a blacklist state from the specified\\n * GlobalBlacklist contract (see GlobalBlacklist.sol). This design facilitates\\n * centralized management of a blacklist for all the Ledgity Yield contracts.\\n *\\n * @dev Security measure:\\n * The _globalBlacklist state must be set at initialization time and, for evident\\n * security reasons, cannot be changed afterward.\\n *\\n * @dev For further details, see \\\"GlobalRestrictableUpgradeable\\\" section of whitepaper.\\n * @custom:security-contact security@ledgity.com\\n */\\nabstract contract GlobalRestrictableUpgradeable is Initializable {\\n    /**\\n     * @notice The GlobalBlacklist contract the blacklist state will be inherited from.\\n     * @dev This state is private so derived contracts cannot change its value.\\n     */\\n    GlobalBlacklist private _globalBlacklist;\\n\\n    /**\\n     * @notice Initializer functions of the contract. They replace the constructor()\\n     * function in the context of upgradeable contracts.\\n     * @dev See: https://docs.openzeppelin.com/contracts/4.x/upgradeable\\n     * @param globalBlacklist_ The address of the GlobalBlacklist contract.\\n     */\\n    function __GlobalRestrictable_init(address globalBlacklist_) internal onlyInitializing {\\n        __GlobalRestrictable_init_unchained(globalBlacklist_);\\n    }\\n\\n    function __GlobalRestrictable_init_unchained(\\n        address globalBlacklist_\\n    ) internal onlyInitializing {\\n        _globalBlacklist = GlobalBlacklist(globalBlacklist_);\\n    }\\n\\n    /**\\n     * @notice Retrieves the address of GlobalBlacklist contract.\\n     * @return The address of the GlobalBlacklist contract.\\n     */\\n    function globalBlacklist() public view returns (address) {\\n        return address(_globalBlacklist);\\n    }\\n\\n    /**\\n     * @notice Reverts if the given account is blacklisted by the GlobalBlacklist contract.\\n     * @param account Address to verify.\\n     */\\n    modifier notBlacklisted(address account) {\\n        require(isBlacklisted(account) == false, \\\"L9\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Checks if the given account is blacklisted by the GlobalBlacklist contract.\\n     * @param account Address to verify.\\n     * @return Whether the account is blacklisted.\\n     */\\n    function isBlacklisted(address account) internal view returns (bool) {\\n        return _globalBlacklist.isBlacklisted(account);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add\\n     * new variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0032fde90d9cf23e70dd4b604ae0d1ed3283f117bc24f68d32f8933e1bd372bc\",\"license\":\"MIT\"},\"contracts/src/abstracts/RecoverableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\n// Conracts\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {GlobalOwnableUpgradeable} from \\\"./GlobalOwnableUpgradeable.sol\\\";\\n\\n// Libraries\\nimport {SafeERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\n\\n// Interfaces\\nimport {IERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @title RecoverableUpgradeable\\n * @author Lila Rest (https://lila.rest)\\n * @custom:security-contact security@ledgity.com\\n *\\n * @notice Derived contracts are provided with helper functions allowing the recovery of\\n * assets accidentally sent to them.\\n *\\n * @dev Where are utilities Ether, ERC721, etc.?\\n * This abstract contract currently supports only ERC20 tokens. Derived contracts\\n * in this codebase currently do not implement the necessary functions to receive Ether\\n * or ERC721/ERC1155 tokens, so no recovery functions are provided for these assets.\\n *\\n * @dev For further details, see \\\"RecoverableUpgradeable\\\" section of whitepaper.\\n * @custom:security-contact security@ledgity.com\\n */\\nabstract contract RecoverableUpgradeable is Initializable, GlobalOwnableUpgradeable {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    /**\\n     * @notice Initializer functions of the contract. They replace the constructor()\\n     * function in the context of upgradeable contracts.\\n     * @dev See: https://docs.openzeppelin.com/contracts/4.x/upgradeable\\n     * @param globalOwner_ The address of the GlobalOwner contract.\\n     */\\n    function __Recoverable_init(address globalOwner_) internal onlyInitializing {\\n        __GlobalOwnable_init(globalOwner_);\\n        __Recoverable_init_unchained();\\n    }\\n\\n    function __Recoverable_init_unchained() internal onlyInitializing {}\\n\\n    /**\\n     * @notice Recovers a specified amount of a given token address. Will fail if the\\n     * contract doesn't hold enough tokens.\\n     * @param tokenAddress The address of the token to recover.\\n     * @param amount The amount of token to recover.\\n     */\\n    function recoverERC20(address tokenAddress, uint256 amount) public virtual onlyOwner {\\n        // Ensure the specified amount is not zero\\n        require(amount > 0, \\\"L10\\\");\\n\\n        // Create a reference to token's contract\\n        IERC20Upgradeable tokenContract = IERC20Upgradeable(tokenAddress);\\n\\n        // Ensure there is enough token to recover\\n        require(tokenContract.balanceOf(address(this)) >= amount, \\\"L11\\\");\\n\\n        // Transfer the recovered token amount to the sender\\n        tokenContract.safeTransfer(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add\\n     * new variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xc70110d1284c9e4aa7c518b3b98682dd9edbe6f6fb23761d825554ba41a80d5e\",\"license\":\"MIT\"},\"contracts/src/abstracts/base/BaseUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {UUPSUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport {GlobalPausableUpgradeable} from \\\"../GlobalPausableUpgradeable.sol\\\";\\nimport {GlobalOwnableUpgradeable} from \\\"../GlobalOwnableUpgradeable.sol\\\";\\nimport {GlobalRestrictableUpgradeable} from \\\"../GlobalRestrictableUpgradeable.sol\\\";\\nimport {RecoverableUpgradeable} from \\\"../RecoverableUpgradeable.sol\\\";\\n\\n/**\\n * @title BaseUpgradeable\\n * @author Lila Rest (https://lila.rest)\\n * @custom:security-contact security@ledgity.com\\n *\\n * @notice This abstract contract acts as a base for numerous contracts in this codebase,\\n * minimizing code repetition and enhancing readability and maintainability.\\n *\\n * @dev For further details, see \\\"Base\\\" section of whitepaper.\\n * @custom:security-contact security@ledgity.com\\n */\\nabstract contract BaseUpgradeable is\\n    Initializable,\\n    UUPSUpgradeable,\\n    GlobalOwnableUpgradeable,\\n    GlobalPausableUpgradeable,\\n    GlobalRestrictableUpgradeable,\\n    RecoverableUpgradeable\\n{\\n    /**\\n     * @notice Prevents implementation contract from being initialized as recommended by\\n     * OpenZeppelin.\\n     * @dev See: https://docs.openzeppelin.com/contracts/4.x/api/proxy#Initializable-_disableInitializers--\\n     * @custom:oz-upgrades-unsafe-allow constructor\\n     */\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /**\\n     * @notice Initializer functions of the contract. They replace the constructor()\\n     * function in the context of upgradeable contracts.\\n     * @dev See: https://docs.openzeppelin.com/contracts/4.x/upgradeable\\n     * @param globalOwner_ The address of the GlobalOwner contract.\\n     * @param globalPause_ The address of the GlobalPause contract.\\n     * @param globalBlacklist_ The address of the GlobalBlacklist contract.\\n     */\\n    function __Base_init(\\n        address globalOwner_,\\n        address globalPause_,\\n        address globalBlacklist_\\n    ) internal onlyInitializing {\\n        __UUPSUpgradeable_init();\\n        __GlobalOwnable_init(globalOwner_);\\n        __Pausable_init();\\n        __GlobalPausable_init_unchained(globalPause_);\\n        __GlobalRestrictable_init_unchained(globalBlacklist_);\\n        __Recoverable_init_unchained();\\n    }\\n\\n    function __Base_init_unchained() internal onlyInitializing {}\\n\\n    /**\\n     * @notice Override of UUPSUpgradeable._authorizeUpgrade() function restricted to\\n     * global owner. It is called by the proxy contract during an upgrade.\\n     * @param newImplementation The address of the new implementation contract.\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal override onlyOwner {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add\\n     * new variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xe445c759682f31d39e63663ff8217072c0e81086bda11ea473247be334c3e424\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0604052306080523480156200001557600080fd5b506200002062000030565b6200002a62000030565b620000f1565b600054610100900460ff16156200009d5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811614620000ef576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6080516130c06200012960003960008181610b1501528181610b5501528181610f8601528181610fc6015261103e01526130c06000f3fe6080604052600436106102515760003560e01c8063817b1cd211610139578063c8f33c91116100b6578063df136d651161007a578063df136d65146106e5578063eed9da1f146106fc578063f12d54d814610713578063f2fde38b14610732578063f6c3565014610752578063f762e7341461077357600080fd5b8063c8f33c9114610662578063c8f74bb814610679578063cc1a378f14610699578063cd3daf9d146106b9578063cedaf639146106ce57600080fd5b80639e2c8a5b116100fd5780639e2c8a5b1461059f578063a029e898146105bf578063bddff592146105fa578063be01d6c714610611578063c66120f41461063157600080fd5b8063817b1cd21461050f578063842e2981146105265780638980f11f146105535780638da5cb5b146105735780639b602f0a1461058857600080fd5b80634f1ef286116101d257806367d3b4881161019657806367d3b48814610459578063715018a614610470578063793e875e146104855780637b2cca38146104a55780637c2edb16146104d257806380faa57d146104fa57600080fd5b80634f1ef286146103b757806352d1902d146103ca5780635c046e66146103df5780635c975abb1461041457806363d071201461043957600080fd5b8063386a952511610219578063386a95251461032a5780633c6b16ab146103415780633e491d471461036157806340a8d39f146103815780634a7f48041461039757600080fd5b806304d978f1146102565780630e15561a146102a357806310087fb1146102c85780631c4b774b146102ea5780633659cfe61461030a575b600080fd5b34801561026257600080fd5b50610276610271366004612984565b610791565b604080519586526020860194909452928401919091526060830152608082015260a0015b60405180910390f35b3480156102af57600080fd5b506102ba6102365481565b60405190815260200161029a565b3480156102d457600080fd5b506102e86102e33660046129b0565b6107e0565b005b3480156102f657600080fd5b506102e86103053660046129e6565b610a7e565b34801561031657600080fd5b506102e86103253660046129ff565b610b0b565b34801561033657600080fd5b506102ba61022e5481565b34801561034d57600080fd5b506102e861035c3660046129e6565b610bd0565b34801561036d57600080fd5b506102ba61037c366004612984565b610e6c565b34801561038d57600080fd5b506102ba61271081565b3480156103a357600080fd5b506102e86103b23660046129e6565b610f6e565b6102e86103c5366004612a63565b610f7c565b3480156103d657600080fd5b506102ba611031565b3480156103eb57600080fd5b506103ff6103fa3660046129e6565b6110df565b6040805192835260208301919091520161029a565b34801561042057600080fd5b5061042961110e565b604051901515815260200161029a565b34801561044557600080fd5b506102e8610454366004612b5a565b611182565b34801561046557600080fd5b506102ba61022f5481565b34801561047c57600080fd5b506102e861132a565b34801561049157600080fd5b506102e86104a0366004612c6b565b611360565b3480156104b157600080fd5b506104c56104c03660046129ff565b6113d2565b60405161029a9190612c87565b3480156104de57600080fd5b50610161546001600160a01b03165b60405161029a9190612ccb565b34801561050657600080fd5b506102ba611480565b34801561051b57600080fd5b506102ba6102335481565b34801561053257600080fd5b506105466105413660046129ff565b61148f565b60405161029a9190612cdf565b34801561055f57600080fd5b506102e861056e366004612984565b611537565b34801561057f57600080fd5b506104ed611633565b34801561059457600080fd5b506102ba61022c5481565b3480156105ab57600080fd5b506102e86105ba366004612d4d565b6116a1565b3480156105cb57600080fd5b506105df6105da3660046129e6565b611b86565b6040805182518152602092830151928101929092520161029a565b34801561060657600080fd5b506102ba6102315481565b34801561061d57600080fd5b506102e861062c3660046129e6565b611c30565b34801561063d57600080fd5b5061042961064c3660046129ff565b6102376020526000908152604090205460ff1681565b34801561066e57600080fd5b506102ba6102305481565b34801561068557600080fd5b506102ba6106943660046129ff565b611c3e565b3480156106a557600080fd5b506102e86106b43660046129e6565b611c70565b3480156106c557600080fd5b506102ba611cd0565b3480156106da57600080fd5b506102ba61022b5481565b3480156106f157600080fd5b506102ba6102325481565b34801561070857600080fd5b506102ba6102345481565b34801561071f57600080fd5b5061012e546001600160a01b03166104ed565b34801561073e57600080fd5b506102e861074d3660046129ff565b611d37565b34801561075e57600080fd5b5061022a546104ed906001600160a01b031681565b34801561077f57600080fd5b5060fb546001600160a01b03166104ed565b61023560205281600052604060002081815481106107ae57600080fd5b600091825260209091206005909102018054600182015460028301546003840154600490940154929550909350919085565b6107e8611d6c565b6107f0611dc7565b336107fa81611e11565b156108205760405162461bcd60e51b815260040161081790612d6f565b60405180910390fd5b600083116108405760405162461bcd60e51b815260040161081790612d8b565b61022d5461085090600190612dc5565b8260ff16111561089b5760405162461bcd60e51b8152602060048201526016602482015275125b9d985b1a59081cdd185ada5b99c81c195c9a5bd960521b6044820152606401610817565b6108a6600080611e84565b600061022d8360ff16815481106108bf576108bf612dd8565b600091825260208083206040805180820182526002909402909101805484526001015483830152805160a08101909152878152825192945091908201906109069042612dee565b815283516020820152610232546040820152600060609091015261022b5483519192501180159061093a575061022c548510155b1561095b5733600090815261023760205260409020805460ff191660011790555b3360008181526102356020908152604080832080546001808201835582865284862088516005909302019182559387015181850155918601516002830155606086015160038301556080860151600490920191909155928252915490916109c191612dc5565b905060006127108460200151886109d89190612e01565b6109e29190612e18565b90508061023460008282546109f79190612dee565b92505081905550866102336000828254610a119190612dee565b909155505061022a54610a2f906001600160a01b031633308a611f49565b604080518381526020810189905233917f1449c6dd7851abc30abf37f57715f492010519147cc2652fbc38202c18a6ee90910160405180910390a25050505050610a7a60016101f855565b5050565b610a86611d6c565b33610a9081611e11565b15610aad5760405162461bcd60e51b815260040161081790612d6f565b610ab8826001612dee565b33600090815261023560205260409020541015610ae75760405162461bcd60e51b815260040161081790612e3a565b610af2335b83611e84565b610afc3383611fba565b50610b0860016101f855565b50565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610b535760405162461bcd60e51b815260040161081790612e66565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610b856120bb565b6001600160a01b031614610bab5760405162461bcd60e51b815260040161081790612eb2565b610bb4816120d7565b60408051600080825260208201909252610b08918391906120df565b610bd861224a565b600061022e5411610c2b5760405162461bcd60e51b815260206004820152601b60248201527f72657761726473206475726174696f6e206973206e6f742073657400000000006044820152606401610817565b60008111610c4b5760405162461bcd60e51b815260040161081790612d8b565b610c56600080611e84565b61022f544210610c775761022e54610c6e9082612e18565b61023155610cb7565b6000610231544261022f54610c8c9190612dc5565b610c969190612e01565b61022e54909150610ca78284612dee565b610cb19190612e18565b61023155505b60006102315411610cfc5760405162461bcd60e51b815260206004820152600f60248201526e07265776172642072617465203d203608c1b6044820152606401610817565b61022e546102335461022a546040516370a0823160e01b815284916001600160a01b0316906370a0823190610d35903090600401612ccb565b602060405180830381865afa158015610d52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d769190612efe565b610d809190612dee565b610d8a9190612dc5565b610d949190612e18565b610231541115610de05760405162461bcd60e51b815260206004820152601760248201527672657761726420616d6f756e74203e2062616c616e636560481b6044820152606401610817565b61022e54610dee9042612dee565b61022f5542610230556102368054829190600090610e0d908490612dee565b909155505061022a54610e2b906001600160a01b0316333084611f49565b610231546040805183815260208101929092527fc3ed9e2a55e03c1173986e2799c70b4a5654ed43739f79f1ad3833683dad9f7f910160405180910390a150565b6001600160a01b038216600090815261023560205260408120805482919084908110610e9a57610e9a612dd8565b90600052602060002090600502016040518060a00160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152505090506000610ef682604001516122a9565b90506000612710828460000151610f0d9190612e01565b610f179190612e18565b90506000670de0b6b3a76400008460600151610f31611cd0565b610f3b9190612dc5565b610f459084612e01565b610f4f9190612e18565b9050836080015181610f619190612dee565b9450505050505b92915050565b610f7661224a565b61022b55565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610fc45760405162461bcd60e51b815260040161081790612e66565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610ff66120bb565b6001600160a01b03161461101c5760405162461bcd60e51b815260040161081790612eb2565b611025826120d7565b610a7a828260016120df565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146110cc5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c6044820152771b1959081d1a1c9bdd59da0819195b1959d85d1958d85b1b60421b6064820152608401610817565b5060008051602061304483398151915290565b61022d81815481106110f057600080fd5b60009182526020909120600290910201805460019091015490915082565b61012e5460408051635c975abb60e01b815290516000926001600160a01b031691635c975abb9160048083019260209291908290030181865afa158015611159573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061117d9190612f17565b905090565b600054610100900460ff16158080156111a25750600054600160ff909116105b806111bc5750303b1580156111bc575060005460ff166001145b61121f5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610817565b6000805460ff191660011790558015611242576000805461ff0019166101001790555b61124d888888612333565b61022a80546001600160a01b0319166001600160a01b038716179055835160005b818110156112cc5761022d86828151811061128b5761128b612dd8565b6020908102919091018101518254600181810185556000948552938390208251600290920201908155910151910155806112c481612f39565b91505061126e565b505061022b83905561022c8290558015611320576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050565b61133261224a565b60405162461bcd60e51b81526020600482015260036024820152624c363560e81b6044820152606401610817565b61136861224a565b61022d805460018101825560009190915281517fcbe5eb94ee31c6183f3d82fc7ed725908f7d7e2da0ee28e8d5e09973be5efd3d6002909202918201556020909101517fcbe5eb94ee31c6183f3d82fc7ed725908f7d7e2da0ee28e8d5e09973be5efd3e90910155565b6001600160a01b038116600090815261023560205260408120546060918167ffffffffffffffff81111561140857611408612a1c565b604051908082528060200260200182016040528015611431578160200160208202803683370190505b50905060005b82811015611478576114498582610e6c565b82828151811061145b5761145b612dd8565b60209081029190910101528061147081612f39565b915050611437565b509392505050565b600061117d61022f544261238d565b6001600160a01b038116600090815261023560209081526040808320805482518185028101850190935280835260609492939192909184015b8282101561152c57838290600052602060002090600502016040518060a001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481525050815260200190600101906114c8565b505050509050919050565b61153f61224a565b600081116115755760405162461bcd60e51b815260206004820152600360248201526204c31360ec1b6044820152606401610817565b6040516370a0823160e01b8152829082906001600160a01b038316906370a08231906115a5903090600401612ccb565b602060405180830381865afa1580156115c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115e69190612efe565b101561161a5760405162461bcd60e51b81526020600482015260036024820152624c313160e81b6044820152606401610817565b61162e6001600160a01b03821633846123a6565b505050565b60fb5460408051638da5cb5b60e01b815290516000926001600160a01b031691638da5cb5b9160048083019260209291908290030181865afa15801561167d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061117d9190612f52565b6116a9611d6c565b336116b381611e11565b156116d05760405162461bcd60e51b815260040161081790612d6f565b600083116116f05760405162461bcd60e51b815260040161081790612d8b565b6116fb826001612dee565b3360009081526102356020526040902054101561172a5760405162461bcd60e51b815260040161081790612e3a565b3360009081526102356020526040902080548390811061174c5761174c612dd8565b9060005260206000209060050201600101544210156117b95760405162461bcd60e51b8152602060048201526024808201527f43616e6e6f7420756e7374616b6520647572696e67207374616b696e672070656044820152631c9a5bd960e21b6064820152608401610817565b336000908152610235602052604090208054839081106117db576117db612dd8565b90600052602060002090600502016000015483111561183c5760405162461bcd60e51b815260206004820152601b60248201527f496e73756666696369656e7420756e7374616b6520616d6f756e7400000000006044820152606401610817565b61184533610aec565b33600090815261023560205260408120805461188391908590811061186c5761186c612dd8565b9060005260206000209060050201600201546122a9565b905060006127106118948387612e01565b61189e9190612e18565b90508061023460008282546118b39190612dc5565b925050819055508461023360008282546118cd9190612dc5565b9091555050336000908152610235602052604090208054869190869081106118f7576118f7612dd8565b906000526020600020906005020160000160008282546119179190612dc5565b909155505061022b543360009081526102356020526040902080548690811061194257611942612dd8565b90600052602060002090600502016002015410158015611997575061022c543360009081526102356020526040902080548690811061198357611983612dd8565b906000526020600020906005020160000154105b156119b55733600090815261023760205260409020805460ff191690555b336000908152610235602052604090208054859081106119d7576119d7612dd8565b906000526020600020906005020160000154600003611b25576119fa3385611fba565b336000908152610235602052604090208054611a1890600190612dc5565b81548110611a2857611a28612dd8565b90600052602060002090600502016102356000611a423390565b6001600160a01b03166001600160a01b031681526020019081526020016000208581548110611a7357611a73612dd8565b906000526020600020906005020160008201548160000155600182015481600101556002820154816002015560038201548160030155600482015481600401559050506102356000611ac23390565b6001600160a01b03166001600160a01b03168152602001908152602001600020805480611af157611af1612f6f565b6000828152602081206005600019909301928302018181556001810182905560028101829055600381018290556004015590555b611b3d3361022a546001600160a01b031690876123a6565b604080518581526020810187905233917f7fc4727e062e336010f2c282598ef5f14facb3de68cf8195c2f23e1454b2b74e910160405180910390a2505050610a7a60016101f855565b604080518082019091526000808252602082015261022d548290611bac90600190612dc5565b1015611be85760405162461bcd60e51b815260206004820152600b60248201526a0eee4dedcce40d2dcc8caf60ab1b6044820152606401610817565b61022d8281548110611bfc57611bfc612dd8565b9060005260206000209060020201604051806040016040529081600082015481526020016001820154815250509050919050565b611c3861224a565b61022c55565b6001600160a01b0381166000908152610237602052604081205460ff1615611c6857506003919050565b506000919050565b611c7861224a565b4261022f5410611cca5760405162461bcd60e51b815260206004820152601f60248201527f726577617264206475726174696f6e206973206e6f742066696e6973686564006044820152606401610817565b61022e55565b600061023354600003611ce557506102325490565b6102345461023054611cf5611480565b611cff9190612dc5565b61023154611d0d9190612e01565b611d1f90670de0b6b3a7640000612e01565b611d299190612e18565b6102325461117d9190612dee565b611d3f61224a565b60405162461bcd60e51b8152602060048201526002602482015261098760f31b6044820152606401610817565b60026101f85403611dbf5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610817565b60026101f855565b611dcf61110e565b15611e0f5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610817565b565b6101615460405163fe575a8760e01b81526000916001600160a01b03169063fe575a8790611e43908590600401612ccb565b602060405180830381865afa158015611e60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f689190612f17565b611e8c611cd0565b61023255611e98611480565b610230556001600160a01b03821615610a7a57611eb58282610e6c565b6001600160a01b038316600090815261023560205260409020805483908110611ee057611ee0612dd8565b906000526020600020906005020160040181905550610232546102356000846001600160a01b03166001600160a01b031681526020019081526020016000208281548110611f3057611f30612dd8565b9060005260206000209060050201600301819055505050565b6040516001600160a01b0380851660248301528316604482015260648101829052611fb49085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526123d6565b50505050565b6001600160a01b038216600090815261023560205260408120805483908110611fe557611fe5612dd8565b9060005260206000209060050201600401549050600081111561162e576001600160a01b03831660009081526102356020526040812080548490811061202d5761202d612dd8565b9060005260206000209060050201600401819055508061023660008282546120559190612dc5565b909155505061022a54612072906001600160a01b031684836123a6565b60408051838152602081018390526001600160a01b038516917fd6f2c8500df5b44f11e9e48b91ff9f1b9d81bc496d55570c2b1b75bf65243f51910160405180910390a2505050565b600080516020613044833981519152546001600160a01b031690565b610b0861224a565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156121125761162e836124ab565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561216c575060408051601f3d908101601f1916820190925261216991810190612efe565b60015b6121cf5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610817565b600080516020613044833981519152811461223e5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610817565b5061162e838383612547565b33612253611633565b6001600160a01b031614611e0f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610817565b61022d54600090815b8181101561232957600061022d82815481106122d0576122d0612dd8565b9060005260206000209060020201604051806040016040529081600082015481526020016001820154815250509050806000015185036123165760200151949350505050565b508061232181612f39565b9150506122b2565b5060009392505050565b600054610100900460ff1661235a5760405162461bcd60e51b815260040161081790612f85565b61236261256c565b61236b83612593565b6123736125c3565b61237c826125f2565b6123858161263c565b61162e61256c565b60008183111561239d578161239f565b825b9392505050565b6040516001600160a01b03831660248201526044810182905261162e90849063a9059cbb60e01b90606401611f7d565b600061242b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166126869092919063ffffffff16565b905080516000148061244c57508080602001905181019061244c9190612f17565b61162e5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610817565b6001600160a01b0381163b6125185760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610817565b60008051602061304483398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6125508361269d565b60008251118061255d5750805b1561162e57611fb483836126dd565b600054610100900460ff16611e0f5760405162461bcd60e51b815260040161081790612f85565b600054610100900460ff166125ba5760405162461bcd60e51b815260040161081790612f85565b610b0881612702565b600054610100900460ff166125ea5760405162461bcd60e51b815260040161081790612f85565b611e0f61274b565b600054610100900460ff166126195760405162461bcd60e51b815260040161081790612f85565b61012e80546001600160a01b0319166001600160a01b0392909216919091179055565b600054610100900460ff166126635760405162461bcd60e51b815260040161081790612f85565b61016180546001600160a01b0319166001600160a01b0392909216919091179055565b6060612695848460008561277e565b949350505050565b6126a6816124ab565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b606061239f838360405180606001604052806027815260200161306460279139612859565b600054610100900460ff166127295760405162461bcd60e51b815260040161081790612f85565b60fb80546001600160a01b0319166001600160a01b0392909216919091179055565b600054610100900460ff166127725760405162461bcd60e51b815260040161081790612f85565b6097805460ff19169055565b6060824710156127df5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610817565b600080866001600160a01b031685876040516127fb9190612ff4565b60006040518083038185875af1925050503d8060008114612838576040519150601f19603f3d011682016040523d82523d6000602084013e61283d565b606091505b509150915061284e878383876128d1565b979650505050505050565b6060600080856001600160a01b0316856040516128769190612ff4565b600060405180830381855af49150503d80600081146128b1576040519150601f19603f3d011682016040523d82523d6000602084013e6128b6565b606091505b50915091506128c7868383876128d1565b9695505050505050565b60608315612940578251600003612939576001600160a01b0385163b6129395760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610817565b5081612695565b61269583838151156129555781518083602001fd5b8060405162461bcd60e51b81526004016108179190613010565b6001600160a01b0381168114610b0857600080fd5b6000806040838503121561299757600080fd5b82356129a28161296f565b946020939093013593505050565b600080604083850312156129c357600080fd5b82359150602083013560ff811681146129db57600080fd5b809150509250929050565b6000602082840312156129f857600080fd5b5035919050565b600060208284031215612a1157600080fd5b813561239f8161296f565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612a5b57612a5b612a1c565b604052919050565b60008060408385031215612a7657600080fd5b8235612a818161296f565b915060208381013567ffffffffffffffff80821115612a9f57600080fd5b818601915086601f830112612ab357600080fd5b813581811115612ac557612ac5612a1c565b612ad7601f8201601f19168501612a32565b91508082528784828501011115612aed57600080fd5b80848401858401376000848284010152508093505050509250929050565b600060408284031215612b1d57600080fd5b6040516040810181811067ffffffffffffffff82111715612b4057612b40612a1c565b604052823581526020928301359281019290925250919050565b600080600080600080600060e0888a031215612b7557600080fd5b8735612b808161296f565b9650602088810135612b918161296f565b9650604089810135612ba28161296f565b965060608a0135612bb28161296f565b955060808a013567ffffffffffffffff80821115612bcf57600080fd5b818c0191508c601f830112612be357600080fd5b813581811115612bf557612bf5612a1c565b612c03858260051b01612a32565b818152858101925060069190911b83018501908e821115612c2357600080fd5b928501925b81841015612c4957612c3a8f85612b0b565b83529284019291850191612c28565b9b9e9a9d50989b979a9960a0890135995060c090980135979650505050505050565b600060408284031215612c7d57600080fd5b61239f8383612b0b565b6020808252825182820181905260009190848201906040850190845b81811015612cbf57835183529284019291840191600101612ca3565b50909695505050505050565b6001600160a01b0391909116815260200190565b602080825282518282018190526000919060409081850190868401855b82811015612d405781518051855286810151878601528581015186860152606080820151908601526080908101519085015260a09093019290850190600101612cfc565b5091979650505050505050565b60008060408385031215612d6057600080fd5b50508035926020909101359150565b6020808252600290820152614c3960f01b604082015260600190565b6020808252600a90820152690616d6f756e74203d20360b41b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b81810381811115610f6857610f68612daf565b634e487b7160e01b600052603260045260246000fd5b80820180821115610f6857610f68612daf565b8082028115828204841417610f6857610f68612daf565b600082612e3557634e487b7160e01b600052601260045260246000fd5b500490565b602080825260129082015271092dcecc2d8d2c840e6e8c2d6ca92dcc8caf60731b604082015260600190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b600060208284031215612f1057600080fd5b5051919050565b600060208284031215612f2957600080fd5b8151801515811461239f57600080fd5b600060018201612f4b57612f4b612daf565b5060010190565b600060208284031215612f6457600080fd5b815161239f8161296f565b634e487b7160e01b600052603160045260246000fd5b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60005b83811015612feb578181015183820152602001612fd3565b50506000910152565b60008251613006818460208701612fd0565b9190910192915050565b602081526000825180602084015261302f816040850160208701612fd0565b601f01601f1916919091016040019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220dd8f5718c929011317fcd87e89f5583d4a3d3bab40cf01666a792f08e3afe72d64736f6c63430008120033",
  "deployedBytecode": "0x6080604052600436106102515760003560e01c8063817b1cd211610139578063c8f33c91116100b6578063df136d651161007a578063df136d65146106e5578063eed9da1f146106fc578063f12d54d814610713578063f2fde38b14610732578063f6c3565014610752578063f762e7341461077357600080fd5b8063c8f33c9114610662578063c8f74bb814610679578063cc1a378f14610699578063cd3daf9d146106b9578063cedaf639146106ce57600080fd5b80639e2c8a5b116100fd5780639e2c8a5b1461059f578063a029e898146105bf578063bddff592146105fa578063be01d6c714610611578063c66120f41461063157600080fd5b8063817b1cd21461050f578063842e2981146105265780638980f11f146105535780638da5cb5b146105735780639b602f0a1461058857600080fd5b80634f1ef286116101d257806367d3b4881161019657806367d3b48814610459578063715018a614610470578063793e875e146104855780637b2cca38146104a55780637c2edb16146104d257806380faa57d146104fa57600080fd5b80634f1ef286146103b757806352d1902d146103ca5780635c046e66146103df5780635c975abb1461041457806363d071201461043957600080fd5b8063386a952511610219578063386a95251461032a5780633c6b16ab146103415780633e491d471461036157806340a8d39f146103815780634a7f48041461039757600080fd5b806304d978f1146102565780630e15561a146102a357806310087fb1146102c85780631c4b774b146102ea5780633659cfe61461030a575b600080fd5b34801561026257600080fd5b50610276610271366004612984565b610791565b604080519586526020860194909452928401919091526060830152608082015260a0015b60405180910390f35b3480156102af57600080fd5b506102ba6102365481565b60405190815260200161029a565b3480156102d457600080fd5b506102e86102e33660046129b0565b6107e0565b005b3480156102f657600080fd5b506102e86103053660046129e6565b610a7e565b34801561031657600080fd5b506102e86103253660046129ff565b610b0b565b34801561033657600080fd5b506102ba61022e5481565b34801561034d57600080fd5b506102e861035c3660046129e6565b610bd0565b34801561036d57600080fd5b506102ba61037c366004612984565b610e6c565b34801561038d57600080fd5b506102ba61271081565b3480156103a357600080fd5b506102e86103b23660046129e6565b610f6e565b6102e86103c5366004612a63565b610f7c565b3480156103d657600080fd5b506102ba611031565b3480156103eb57600080fd5b506103ff6103fa3660046129e6565b6110df565b6040805192835260208301919091520161029a565b34801561042057600080fd5b5061042961110e565b604051901515815260200161029a565b34801561044557600080fd5b506102e8610454366004612b5a565b611182565b34801561046557600080fd5b506102ba61022f5481565b34801561047c57600080fd5b506102e861132a565b34801561049157600080fd5b506102e86104a0366004612c6b565b611360565b3480156104b157600080fd5b506104c56104c03660046129ff565b6113d2565b60405161029a9190612c87565b3480156104de57600080fd5b50610161546001600160a01b03165b60405161029a9190612ccb565b34801561050657600080fd5b506102ba611480565b34801561051b57600080fd5b506102ba6102335481565b34801561053257600080fd5b506105466105413660046129ff565b61148f565b60405161029a9190612cdf565b34801561055f57600080fd5b506102e861056e366004612984565b611537565b34801561057f57600080fd5b506104ed611633565b34801561059457600080fd5b506102ba61022c5481565b3480156105ab57600080fd5b506102e86105ba366004612d4d565b6116a1565b3480156105cb57600080fd5b506105df6105da3660046129e6565b611b86565b6040805182518152602092830151928101929092520161029a565b34801561060657600080fd5b506102ba6102315481565b34801561061d57600080fd5b506102e861062c3660046129e6565b611c30565b34801561063d57600080fd5b5061042961064c3660046129ff565b6102376020526000908152604090205460ff1681565b34801561066e57600080fd5b506102ba6102305481565b34801561068557600080fd5b506102ba6106943660046129ff565b611c3e565b3480156106a557600080fd5b506102e86106b43660046129e6565b611c70565b3480156106c557600080fd5b506102ba611cd0565b3480156106da57600080fd5b506102ba61022b5481565b3480156106f157600080fd5b506102ba6102325481565b34801561070857600080fd5b506102ba6102345481565b34801561071f57600080fd5b5061012e546001600160a01b03166104ed565b34801561073e57600080fd5b506102e861074d3660046129ff565b611d37565b34801561075e57600080fd5b5061022a546104ed906001600160a01b031681565b34801561077f57600080fd5b5060fb546001600160a01b03166104ed565b61023560205281600052604060002081815481106107ae57600080fd5b600091825260209091206005909102018054600182015460028301546003840154600490940154929550909350919085565b6107e8611d6c565b6107f0611dc7565b336107fa81611e11565b156108205760405162461bcd60e51b815260040161081790612d6f565b60405180910390fd5b600083116108405760405162461bcd60e51b815260040161081790612d8b565b61022d5461085090600190612dc5565b8260ff16111561089b5760405162461bcd60e51b8152602060048201526016602482015275125b9d985b1a59081cdd185ada5b99c81c195c9a5bd960521b6044820152606401610817565b6108a6600080611e84565b600061022d8360ff16815481106108bf576108bf612dd8565b600091825260208083206040805180820182526002909402909101805484526001015483830152805160a08101909152878152825192945091908201906109069042612dee565b815283516020820152610232546040820152600060609091015261022b5483519192501180159061093a575061022c548510155b1561095b5733600090815261023760205260409020805460ff191660011790555b3360008181526102356020908152604080832080546001808201835582865284862088516005909302019182559387015181850155918601516002830155606086015160038301556080860151600490920191909155928252915490916109c191612dc5565b905060006127108460200151886109d89190612e01565b6109e29190612e18565b90508061023460008282546109f79190612dee565b92505081905550866102336000828254610a119190612dee565b909155505061022a54610a2f906001600160a01b031633308a611f49565b604080518381526020810189905233917f1449c6dd7851abc30abf37f57715f492010519147cc2652fbc38202c18a6ee90910160405180910390a25050505050610a7a60016101f855565b5050565b610a86611d6c565b33610a9081611e11565b15610aad5760405162461bcd60e51b815260040161081790612d6f565b610ab8826001612dee565b33600090815261023560205260409020541015610ae75760405162461bcd60e51b815260040161081790612e3a565b610af2335b83611e84565b610afc3383611fba565b50610b0860016101f855565b50565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610b535760405162461bcd60e51b815260040161081790612e66565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610b856120bb565b6001600160a01b031614610bab5760405162461bcd60e51b815260040161081790612eb2565b610bb4816120d7565b60408051600080825260208201909252610b08918391906120df565b610bd861224a565b600061022e5411610c2b5760405162461bcd60e51b815260206004820152601b60248201527f72657761726473206475726174696f6e206973206e6f742073657400000000006044820152606401610817565b60008111610c4b5760405162461bcd60e51b815260040161081790612d8b565b610c56600080611e84565b61022f544210610c775761022e54610c6e9082612e18565b61023155610cb7565b6000610231544261022f54610c8c9190612dc5565b610c969190612e01565b61022e54909150610ca78284612dee565b610cb19190612e18565b61023155505b60006102315411610cfc5760405162461bcd60e51b815260206004820152600f60248201526e07265776172642072617465203d203608c1b6044820152606401610817565b61022e546102335461022a546040516370a0823160e01b815284916001600160a01b0316906370a0823190610d35903090600401612ccb565b602060405180830381865afa158015610d52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d769190612efe565b610d809190612dee565b610d8a9190612dc5565b610d949190612e18565b610231541115610de05760405162461bcd60e51b815260206004820152601760248201527672657761726420616d6f756e74203e2062616c616e636560481b6044820152606401610817565b61022e54610dee9042612dee565b61022f5542610230556102368054829190600090610e0d908490612dee565b909155505061022a54610e2b906001600160a01b0316333084611f49565b610231546040805183815260208101929092527fc3ed9e2a55e03c1173986e2799c70b4a5654ed43739f79f1ad3833683dad9f7f910160405180910390a150565b6001600160a01b038216600090815261023560205260408120805482919084908110610e9a57610e9a612dd8565b90600052602060002090600502016040518060a00160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152505090506000610ef682604001516122a9565b90506000612710828460000151610f0d9190612e01565b610f179190612e18565b90506000670de0b6b3a76400008460600151610f31611cd0565b610f3b9190612dc5565b610f459084612e01565b610f4f9190612e18565b9050836080015181610f619190612dee565b9450505050505b92915050565b610f7661224a565b61022b55565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610fc45760405162461bcd60e51b815260040161081790612e66565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610ff66120bb565b6001600160a01b03161461101c5760405162461bcd60e51b815260040161081790612eb2565b611025826120d7565b610a7a828260016120df565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146110cc5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c6044820152771b1959081d1a1c9bdd59da0819195b1959d85d1958d85b1b60421b6064820152608401610817565b5060008051602061304483398151915290565b61022d81815481106110f057600080fd5b60009182526020909120600290910201805460019091015490915082565b61012e5460408051635c975abb60e01b815290516000926001600160a01b031691635c975abb9160048083019260209291908290030181865afa158015611159573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061117d9190612f17565b905090565b600054610100900460ff16158080156111a25750600054600160ff909116105b806111bc5750303b1580156111bc575060005460ff166001145b61121f5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610817565b6000805460ff191660011790558015611242576000805461ff0019166101001790555b61124d888888612333565b61022a80546001600160a01b0319166001600160a01b038716179055835160005b818110156112cc5761022d86828151811061128b5761128b612dd8565b6020908102919091018101518254600181810185556000948552938390208251600290920201908155910151910155806112c481612f39565b91505061126e565b505061022b83905561022c8290558015611320576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050565b61133261224a565b60405162461bcd60e51b81526020600482015260036024820152624c363560e81b6044820152606401610817565b61136861224a565b61022d805460018101825560009190915281517fcbe5eb94ee31c6183f3d82fc7ed725908f7d7e2da0ee28e8d5e09973be5efd3d6002909202918201556020909101517fcbe5eb94ee31c6183f3d82fc7ed725908f7d7e2da0ee28e8d5e09973be5efd3e90910155565b6001600160a01b038116600090815261023560205260408120546060918167ffffffffffffffff81111561140857611408612a1c565b604051908082528060200260200182016040528015611431578160200160208202803683370190505b50905060005b82811015611478576114498582610e6c565b82828151811061145b5761145b612dd8565b60209081029190910101528061147081612f39565b915050611437565b509392505050565b600061117d61022f544261238d565b6001600160a01b038116600090815261023560209081526040808320805482518185028101850190935280835260609492939192909184015b8282101561152c57838290600052602060002090600502016040518060a001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481525050815260200190600101906114c8565b505050509050919050565b61153f61224a565b600081116115755760405162461bcd60e51b815260206004820152600360248201526204c31360ec1b6044820152606401610817565b6040516370a0823160e01b8152829082906001600160a01b038316906370a08231906115a5903090600401612ccb565b602060405180830381865afa1580156115c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115e69190612efe565b101561161a5760405162461bcd60e51b81526020600482015260036024820152624c313160e81b6044820152606401610817565b61162e6001600160a01b03821633846123a6565b505050565b60fb5460408051638da5cb5b60e01b815290516000926001600160a01b031691638da5cb5b9160048083019260209291908290030181865afa15801561167d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061117d9190612f52565b6116a9611d6c565b336116b381611e11565b156116d05760405162461bcd60e51b815260040161081790612d6f565b600083116116f05760405162461bcd60e51b815260040161081790612d8b565b6116fb826001612dee565b3360009081526102356020526040902054101561172a5760405162461bcd60e51b815260040161081790612e3a565b3360009081526102356020526040902080548390811061174c5761174c612dd8565b9060005260206000209060050201600101544210156117b95760405162461bcd60e51b8152602060048201526024808201527f43616e6e6f7420756e7374616b6520647572696e67207374616b696e672070656044820152631c9a5bd960e21b6064820152608401610817565b336000908152610235602052604090208054839081106117db576117db612dd8565b90600052602060002090600502016000015483111561183c5760405162461bcd60e51b815260206004820152601b60248201527f496e73756666696369656e7420756e7374616b6520616d6f756e7400000000006044820152606401610817565b61184533610aec565b33600090815261023560205260408120805461188391908590811061186c5761186c612dd8565b9060005260206000209060050201600201546122a9565b905060006127106118948387612e01565b61189e9190612e18565b90508061023460008282546118b39190612dc5565b925050819055508461023360008282546118cd9190612dc5565b9091555050336000908152610235602052604090208054869190869081106118f7576118f7612dd8565b906000526020600020906005020160000160008282546119179190612dc5565b909155505061022b543360009081526102356020526040902080548690811061194257611942612dd8565b90600052602060002090600502016002015410158015611997575061022c543360009081526102356020526040902080548690811061198357611983612dd8565b906000526020600020906005020160000154105b156119b55733600090815261023760205260409020805460ff191690555b336000908152610235602052604090208054859081106119d7576119d7612dd8565b906000526020600020906005020160000154600003611b25576119fa3385611fba565b336000908152610235602052604090208054611a1890600190612dc5565b81548110611a2857611a28612dd8565b90600052602060002090600502016102356000611a423390565b6001600160a01b03166001600160a01b031681526020019081526020016000208581548110611a7357611a73612dd8565b906000526020600020906005020160008201548160000155600182015481600101556002820154816002015560038201548160030155600482015481600401559050506102356000611ac23390565b6001600160a01b03166001600160a01b03168152602001908152602001600020805480611af157611af1612f6f565b6000828152602081206005600019909301928302018181556001810182905560028101829055600381018290556004015590555b611b3d3361022a546001600160a01b031690876123a6565b604080518581526020810187905233917f7fc4727e062e336010f2c282598ef5f14facb3de68cf8195c2f23e1454b2b74e910160405180910390a2505050610a7a60016101f855565b604080518082019091526000808252602082015261022d548290611bac90600190612dc5565b1015611be85760405162461bcd60e51b815260206004820152600b60248201526a0eee4dedcce40d2dcc8caf60ab1b6044820152606401610817565b61022d8281548110611bfc57611bfc612dd8565b9060005260206000209060020201604051806040016040529081600082015481526020016001820154815250509050919050565b611c3861224a565b61022c55565b6001600160a01b0381166000908152610237602052604081205460ff1615611c6857506003919050565b506000919050565b611c7861224a565b4261022f5410611cca5760405162461bcd60e51b815260206004820152601f60248201527f726577617264206475726174696f6e206973206e6f742066696e6973686564006044820152606401610817565b61022e55565b600061023354600003611ce557506102325490565b6102345461023054611cf5611480565b611cff9190612dc5565b61023154611d0d9190612e01565b611d1f90670de0b6b3a7640000612e01565b611d299190612e18565b6102325461117d9190612dee565b611d3f61224a565b60405162461bcd60e51b8152602060048201526002602482015261098760f31b6044820152606401610817565b60026101f85403611dbf5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610817565b60026101f855565b611dcf61110e565b15611e0f5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610817565b565b6101615460405163fe575a8760e01b81526000916001600160a01b03169063fe575a8790611e43908590600401612ccb565b602060405180830381865afa158015611e60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f689190612f17565b611e8c611cd0565b61023255611e98611480565b610230556001600160a01b03821615610a7a57611eb58282610e6c565b6001600160a01b038316600090815261023560205260409020805483908110611ee057611ee0612dd8565b906000526020600020906005020160040181905550610232546102356000846001600160a01b03166001600160a01b031681526020019081526020016000208281548110611f3057611f30612dd8565b9060005260206000209060050201600301819055505050565b6040516001600160a01b0380851660248301528316604482015260648101829052611fb49085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526123d6565b50505050565b6001600160a01b038216600090815261023560205260408120805483908110611fe557611fe5612dd8565b9060005260206000209060050201600401549050600081111561162e576001600160a01b03831660009081526102356020526040812080548490811061202d5761202d612dd8565b9060005260206000209060050201600401819055508061023660008282546120559190612dc5565b909155505061022a54612072906001600160a01b031684836123a6565b60408051838152602081018390526001600160a01b038516917fd6f2c8500df5b44f11e9e48b91ff9f1b9d81bc496d55570c2b1b75bf65243f51910160405180910390a2505050565b600080516020613044833981519152546001600160a01b031690565b610b0861224a565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156121125761162e836124ab565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561216c575060408051601f3d908101601f1916820190925261216991810190612efe565b60015b6121cf5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610817565b600080516020613044833981519152811461223e5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610817565b5061162e838383612547565b33612253611633565b6001600160a01b031614611e0f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610817565b61022d54600090815b8181101561232957600061022d82815481106122d0576122d0612dd8565b9060005260206000209060020201604051806040016040529081600082015481526020016001820154815250509050806000015185036123165760200151949350505050565b508061232181612f39565b9150506122b2565b5060009392505050565b600054610100900460ff1661235a5760405162461bcd60e51b815260040161081790612f85565b61236261256c565b61236b83612593565b6123736125c3565b61237c826125f2565b6123858161263c565b61162e61256c565b60008183111561239d578161239f565b825b9392505050565b6040516001600160a01b03831660248201526044810182905261162e90849063a9059cbb60e01b90606401611f7d565b600061242b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166126869092919063ffffffff16565b905080516000148061244c57508080602001905181019061244c9190612f17565b61162e5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610817565b6001600160a01b0381163b6125185760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610817565b60008051602061304483398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6125508361269d565b60008251118061255d5750805b1561162e57611fb483836126dd565b600054610100900460ff16611e0f5760405162461bcd60e51b815260040161081790612f85565b600054610100900460ff166125ba5760405162461bcd60e51b815260040161081790612f85565b610b0881612702565b600054610100900460ff166125ea5760405162461bcd60e51b815260040161081790612f85565b611e0f61274b565b600054610100900460ff166126195760405162461bcd60e51b815260040161081790612f85565b61012e80546001600160a01b0319166001600160a01b0392909216919091179055565b600054610100900460ff166126635760405162461bcd60e51b815260040161081790612f85565b61016180546001600160a01b0319166001600160a01b0392909216919091179055565b6060612695848460008561277e565b949350505050565b6126a6816124ab565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b606061239f838360405180606001604052806027815260200161306460279139612859565b600054610100900460ff166127295760405162461bcd60e51b815260040161081790612f85565b60fb80546001600160a01b0319166001600160a01b0392909216919091179055565b600054610100900460ff166127725760405162461bcd60e51b815260040161081790612f85565b6097805460ff19169055565b6060824710156127df5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610817565b600080866001600160a01b031685876040516127fb9190612ff4565b60006040518083038185875af1925050503d8060008114612838576040519150601f19603f3d011682016040523d82523d6000602084013e61283d565b606091505b509150915061284e878383876128d1565b979650505050505050565b6060600080856001600160a01b0316856040516128769190612ff4565b600060405180830381855af49150503d80600081146128b1576040519150601f19603f3d011682016040523d82523d6000602084013e6128b6565b606091505b50915091506128c7868383876128d1565b9695505050505050565b60608315612940578251600003612939576001600160a01b0385163b6129395760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610817565b5081612695565b61269583838151156129555781518083602001fd5b8060405162461bcd60e51b81526004016108179190613010565b6001600160a01b0381168114610b0857600080fd5b6000806040838503121561299757600080fd5b82356129a28161296f565b946020939093013593505050565b600080604083850312156129c357600080fd5b82359150602083013560ff811681146129db57600080fd5b809150509250929050565b6000602082840312156129f857600080fd5b5035919050565b600060208284031215612a1157600080fd5b813561239f8161296f565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612a5b57612a5b612a1c565b604052919050565b60008060408385031215612a7657600080fd5b8235612a818161296f565b915060208381013567ffffffffffffffff80821115612a9f57600080fd5b818601915086601f830112612ab357600080fd5b813581811115612ac557612ac5612a1c565b612ad7601f8201601f19168501612a32565b91508082528784828501011115612aed57600080fd5b80848401858401376000848284010152508093505050509250929050565b600060408284031215612b1d57600080fd5b6040516040810181811067ffffffffffffffff82111715612b4057612b40612a1c565b604052823581526020928301359281019290925250919050565b600080600080600080600060e0888a031215612b7557600080fd5b8735612b808161296f565b9650602088810135612b918161296f565b9650604089810135612ba28161296f565b965060608a0135612bb28161296f565b955060808a013567ffffffffffffffff80821115612bcf57600080fd5b818c0191508c601f830112612be357600080fd5b813581811115612bf557612bf5612a1c565b612c03858260051b01612a32565b818152858101925060069190911b83018501908e821115612c2357600080fd5b928501925b81841015612c4957612c3a8f85612b0b565b83529284019291850191612c28565b9b9e9a9d50989b979a9960a0890135995060c090980135979650505050505050565b600060408284031215612c7d57600080fd5b61239f8383612b0b565b6020808252825182820181905260009190848201906040850190845b81811015612cbf57835183529284019291840191600101612ca3565b50909695505050505050565b6001600160a01b0391909116815260200190565b602080825282518282018190526000919060409081850190868401855b82811015612d405781518051855286810151878601528581015186860152606080820151908601526080908101519085015260a09093019290850190600101612cfc565b5091979650505050505050565b60008060408385031215612d6057600080fd5b50508035926020909101359150565b6020808252600290820152614c3960f01b604082015260600190565b6020808252600a90820152690616d6f756e74203d20360b41b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b81810381811115610f6857610f68612daf565b634e487b7160e01b600052603260045260246000fd5b80820180821115610f6857610f68612daf565b8082028115828204841417610f6857610f68612daf565b600082612e3557634e487b7160e01b600052601260045260246000fd5b500490565b602080825260129082015271092dcecc2d8d2c840e6e8c2d6ca92dcc8caf60731b604082015260600190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b600060208284031215612f1057600080fd5b5051919050565b600060208284031215612f2957600080fd5b8151801515811461239f57600080fd5b600060018201612f4b57612f4b612daf565b5060010190565b600060208284031215612f6457600080fd5b815161239f8161296f565b634e487b7160e01b600052603160045260246000fd5b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60005b83811015612feb578181015183820152602001612fd3565b50506000910152565b60008251613006818460208701612fd0565b9190910192915050565b602081526000825180602084015261302f816040850160208701612fd0565b601f01601f1916919091016040019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220dd8f5718c929011317fcd87e89f5583d4a3d3bab40cf01666a792f08e3afe72d64736f6c63430008120033",
  "devdoc": {
    "custom:security-contact": "security@ledgity.comsecurity@ledgity.com",
    "details": "This contract implements tierOf() function from LDYStaking as it's the only one the LToken contract relies on.",
    "events": {
      "AdminChanged(address,address)": {
        "details": "Emitted when the admin account has changed."
      },
      "BeaconUpgraded(address)": {
        "details": "Emitted when the beacon is changed."
      },
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "NotifiedRewardAmount(uint256,uint256)": {
        "params": {
          "rewardAmount": "Reward amount added by admin.",
          "rewardPerSec": "RewardRatePerSec updated."
        }
      },
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "RewardPaid(address,uint256,uint256)": {
        "params": {
          "reward": "Reward token amount",
          "stakeIndex": "User staking pool index",
          "user": "User address"
        }
      },
      "Staked(address,uint256,uint256)": {
        "params": {
          "amount": "Staked amount",
          "stakeIndex": "Latest index of user staking pool",
          "user": "User address"
        }
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      },
      "Unstaked(address,uint256,uint256)": {
        "params": {
          "amount": "Staked amount",
          "stakeIndex": "User staking pool index",
          "user": "User address"
        }
      },
      "Upgraded(address)": {
        "details": "Emitted when the implementation is upgraded."
      }
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "earned(address,uint256)": {
        "params": {
          "account": "Address of the user.",
          "stakeIndex": "Index of the stakePool"
        },
        "returns": {
          "_0": "Return earned amounts"
        }
      },
      "getEarnedUser(address)": {
        "params": {
          "account": "Address of the user."
        },
        "returns": {
          "_0": "Return earned rewards array for a user."
        }
      },
      "getReward(uint256)": {
        "details": "Emits a `RewardPaid` event upon successful reward claim.",
        "params": {
          "stakeIndex": "The index of user staking pool."
        }
      },
      "getStakeDurationInfo(uint256)": {
        "params": {
          "index": "Index of StakeDurationInfos."
        },
        "returns": {
          "_0": "StakeDurationInfo."
        }
      },
      "getUserStakes(address)": {
        "params": {
          "account": "The address of user."
        },
        "returns": {
          "_0": "StakingInfo array."
        }
      },
      "globalBlacklist()": {
        "returns": {
          "_0": "The address of the GlobalBlacklist contract."
        }
      },
      "globalOwner()": {
        "returns": {
          "_0": "The address of the GlobalOwner contract."
        }
      },
      "globalPause()": {
        "returns": {
          "_0": "The address of the GlobalPause contract."
        }
      },
      "initialize(address,address,address,address,(uint256,uint256)[],uint256,uint256)": {
        "details": "This function is intended for setting initial values for the contract's state variables.",
        "params": {
          "globalBlacklist_": "The address of the GlobalBlacklist contract.",
          "globalOwner_": "The address of the GlobalOwner contract.",
          "globalPause_": "The address of the GlobalPause contract.",
          "stakeAmountForPerks_": "Minimal staking amount for perks.",
          "stakeDurationForPerks_": "Minimal staking duration for perks.",
          "stakeDurationInfos_": "Available Staking Durations.",
          "stakeRewardToken_": "The address of stake and reward token(LDY token)."
        }
      },
      "lastTimeRewardApplicable()": {
        "returns": {
          "_0": "Timestamp of the most recent rewards calculation."
        }
      },
      "notifyRewardAmount(uint256)": {
        "details": "Only callable by owner.",
        "params": {
          "amount": "The amount of reward to be distributed."
        }
      },
      "owner()": {
        "returns": {
          "_0": "The address of the owner"
        }
      },
      "paused()": {
        "returns": {
          "_0": "Whether the contract is paused or not."
        }
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "pushStakeDurationInfo((uint256,uint256))": {
        "details": "Only callable by owner."
      },
      "recoverERC20(address,uint256)": {
        "params": {
          "amount": "The amount of token to recover.",
          "tokenAddress": "The address of the token to recover."
        }
      },
      "rewardPerToken()": {
        "returns": {
          "_0": "Current reward per token."
        }
      },
      "setRewardsDuration(uint256)": {
        "details": "Only callable by owner, and setting available only after rewards period.",
        "params": {
          "duration": "New reward duration in seconds."
        }
      },
      "setStakeAmountForPerks(uint256)": {
        "details": "Only callable by owner.",
        "params": {
          "stakeAmountForPerks_": "New stakeDurationForPerks."
        }
      },
      "setStakeDurationForPerks(uint256)": {
        "details": "Only callable by owner.",
        "params": {
          "stakeDurationForPerks_": "New stakeDurationForPerks."
        }
      },
      "stake(uint256,uint8)": {
        "details": "Emits a `Staked` event upon successful staking.",
        "params": {
          "amount": "The amount of tokens to stake.",
          "stakeDurationIndex": "The Index of stakeDurationInfos array."
        }
      },
      "tierOf(address)": {
        "details": "tierOf() function that always return that the given account is not elligible to any LDY staking tier, except if the account is in the highTierAccounts mapping.",
        "params": {
          "account": "The account to check the tier of."
        }
      },
      "unstake(uint256,uint256)": {
        "details": "Emits a `Unstaked` event upon successful withdrawal. On full withdrawal, userStakingInfo removes stake pool for stakeIndex.",
        "params": {
          "amount": "The amount of tokens to withdraw.",
          "stakeIndex": "The index of user staking pool"
        }
      },
      "upgradeTo(address)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "stateVariables": {
      "highTierAccounts": {
        "details": "This is notably used to allow PreMining contracts to benefit from 0% withdrawal fees in L-Tokens contracts, when accounts unlock their funds."
      }
    },
    "title": "LDYStaking",
    "version": 1
  },
  "userdoc": {
    "events": {
      "NotifiedRewardAmount(uint256,uint256)": {
        "notice": "Emitted when admin add rewards."
      },
      "RewardPaid(address,uint256,uint256)": {
        "notice": "Emitted when users claim rewards"
      },
      "Staked(address,uint256,uint256)": {
        "notice": "Emitted when users stake token"
      },
      "Unstaked(address,uint256,uint256)": {
        "notice": "Emitted when users unstake token"
      }
    },
    "kind": "user",
    "methods": {
      "MULTIPLIER_BASIS()": {
        "notice": "Decimals of multiplier"
      },
      "earned(address,uint256)": {
        "notice": "Calculate the user's stake pool earnings"
      },
      "finishAt()": {
        "notice": "Timestamp of when the rewards finish."
      },
      "getEarnedUser(address)": {
        "notice": "Get the earned rewards array for a user."
      },
      "getReward(uint256)": {
        "notice": "Claim pending rewards."
      },
      "getStakeDurationInfo(uint256)": {
        "notice": "Get StakeDurationInfo."
      },
      "getUserStakes(address)": {
        "notice": "Get User Stake Data."
      },
      "globalBlacklist()": {
        "notice": "Retrieves the address of GlobalBlacklist contract."
      },
      "globalOwner()": {
        "notice": "Retrieves the address of GlobalOwner contract."
      },
      "globalPause()": {
        "notice": "Retrieves the address of GlobalPause contract."
      },
      "highTierAccounts(address)": {
        "notice": "Holds a mapping of addresses that default to the highest staking tier."
      },
      "initialize(address,address,address,address,(uint256,uint256)[],uint256,uint256)": {
        "notice": "Initializes the contract and sets the initial state variables. This is called by the proxy and should only be called once."
      },
      "lastTimeRewardApplicable()": {
        "notice": "Get the last time when rewards were applicable for the specified reward token."
      },
      "lastUpdateTime()": {
        "notice": "Timestamp of the reward updated."
      },
      "notifyRewardAmount(uint256)": {
        "notice": "Notify the contract about the amount of rewards to be distributed and update reward parameters."
      },
      "owner()": {
        "notice": "Override of OwnableUpgradeable.owner() that retrieves the owner's address from the GlobalOwner contract instead."
      },
      "paused()": {
        "notice": "Override of PausableUpgradeable.pause() that retrieves the pause state from the GlobalPause contract instead."
      },
      "pushStakeDurationInfo((uint256,uint256))": {
        "notice": "Push stakeDurationInfo"
      },
      "recoverERC20(address,uint256)": {
        "notice": "Recovers a specified amount of a given token address. Will fail if the contract doesn't hold enough tokens."
      },
      "renounceOwnership()": {
        "notice": "Override of OwnableUpgradeable.renounceOwnership() that always reverts. Ownership is managed by the GlobalOwner contract and must be modified there."
      },
      "rewardPerToken()": {
        "notice": "Calculate the reward per token for a given reward token."
      },
      "rewardPerTokenStored()": {
        "notice": "Reward per token stored, sum of (reward rate * dt * 1e18 / total supply)."
      },
      "rewardRatePerSec()": {
        "notice": "Reward per second(total rewards / duration)."
      },
      "rewardsDuration()": {
        "notice": "Duration of the rewards (in seconds)."
      },
      "setRewardsDuration(uint256)": {
        "notice": "Update Rewards Duration."
      },
      "setStakeAmountForPerks(uint256)": {
        "notice": "Update stakeAmountForPerks"
      },
      "setStakeDurationForPerks(uint256)": {
        "notice": "Update stakeDurationForPerks"
      },
      "stake(uint256,uint8)": {
        "notice": "Staked tokens cannot be withdrawn during the stakeDuration period and are eligible to claim rewards."
      },
      "stakeAmountForPerks()": {
        "notice": "Minimal stake amount for perks."
      },
      "stakeDurationForPerks()": {
        "notice": "Minimal stake duration for perks."
      },
      "stakeDurationInfos(uint256)": {
        "notice": "Stake durations info array."
      },
      "stakeRewardToken()": {
        "notice": "Stake and Reward token."
      },
      "totalRewards()": {
        "notice": "Total rewards amount."
      },
      "totalStaked()": {
        "notice": "Total staked amounts."
      },
      "transferOwnership(address)": {
        "notice": "Override of OwnableUpgradeable.transferOwnership() that always reverts. Ownership is managed by the GlobalOwner contract and must be modified there."
      },
      "unstake(uint256,uint256)": {
        "notice": "Withdraw staked tokens after stakeDuration has passed."
      },
      "userStakingInfo(address,uint256)": {
        "notice": "User stakingInfo map, user address => array of the staking info"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 609,
        "contract": "contracts/src/LDYStaking.sol:LDYStaking",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 612,
        "contract": "contracts/src/LDYStaking.sol:LDYStaking",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 591,
        "contract": "contracts/src/LDYStaking.sol:LDYStaking",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 906,
        "contract": "contracts/src/LDYStaking.sol:LDYStaking",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2869,
        "contract": "contracts/src/LDYStaking.sol:LDYStaking",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 928,
        "contract": "contracts/src/LDYStaking.sol:LDYStaking",
        "label": "_paused",
        "offset": 0,
        "slot": "151",
        "type": "t_bool"
      },
      {
        "astId": 1033,
        "contract": "contracts/src/LDYStaking.sol:LDYStaking",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 116,
        "contract": "contracts/src/LDYStaking.sol:LDYStaking",
        "label": "_owner",
        "offset": 0,
        "slot": "201",
        "type": "t_address"
      },
      {
        "astId": 236,
        "contract": "contracts/src/LDYStaking.sol:LDYStaking",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 8981,
        "contract": "contracts/src/LDYStaking.sol:LDYStaking",
        "label": "_globalOwner",
        "offset": 0,
        "slot": "251",
        "type": "t_contract(GlobalOwner)5028"
      },
      {
        "astId": 9065,
        "contract": "contracts/src/LDYStaking.sol:LDYStaking",
        "label": "__gap",
        "offset": 0,
        "slot": "252",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 9083,
        "contract": "contracts/src/LDYStaking.sol:LDYStaking",
        "label": "_globalPause",
        "offset": 0,
        "slot": "302",
        "type": "t_contract(GlobalPause)5104"
      },
      {
        "astId": 9142,
        "contract": "contracts/src/LDYStaking.sol:LDYStaking",
        "label": "__gap",
        "offset": 0,
        "slot": "303",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 9156,
        "contract": "contracts/src/LDYStaking.sol:LDYStaking",
        "label": "_globalBlacklist",
        "offset": 0,
        "slot": "353",
        "type": "t_contract(GlobalBlacklist)4981"
      },
      {
        "astId": 9230,
        "contract": "contracts/src/LDYStaking.sol:LDYStaking",
        "label": "__gap",
        "offset": 0,
        "slot": "354",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10249,
        "contract": "contracts/src/LDYStaking.sol:LDYStaking",
        "label": "__gap",
        "offset": 0,
        "slot": "404",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10340,
        "contract": "contracts/src/LDYStaking.sol:LDYStaking",
        "label": "__gap",
        "offset": 0,
        "slot": "454",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1048,
        "contract": "contracts/src/LDYStaking.sol:LDYStaking",
        "label": "_status",
        "offset": 0,
        "slot": "504",
        "type": "t_uint256"
      },
      {
        "astId": 1117,
        "contract": "contracts/src/LDYStaking.sol:LDYStaking",
        "label": "__gap",
        "offset": 0,
        "slot": "505",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 5178,
        "contract": "contracts/src/LDYStaking.sol:LDYStaking",
        "label": "stakeRewardToken",
        "offset": 0,
        "slot": "554",
        "type": "t_contract(IERC20Upgradeable)1808"
      },
      {
        "astId": 5181,
        "contract": "contracts/src/LDYStaking.sol:LDYStaking",
        "label": "stakeDurationForPerks",
        "offset": 0,
        "slot": "555",
        "type": "t_uint256"
      },
      {
        "astId": 5184,
        "contract": "contracts/src/LDYStaking.sol:LDYStaking",
        "label": "stakeAmountForPerks",
        "offset": 0,
        "slot": "556",
        "type": "t_uint256"
      },
      {
        "astId": 5189,
        "contract": "contracts/src/LDYStaking.sol:LDYStaking",
        "label": "stakeDurationInfos",
        "offset": 0,
        "slot": "557",
        "type": "t_array(t_struct(StakeDurationInfo)5170_storage)dyn_storage"
      },
      {
        "astId": 5192,
        "contract": "contracts/src/LDYStaking.sol:LDYStaking",
        "label": "rewardsDuration",
        "offset": 0,
        "slot": "558",
        "type": "t_uint256"
      },
      {
        "astId": 5195,
        "contract": "contracts/src/LDYStaking.sol:LDYStaking",
        "label": "finishAt",
        "offset": 0,
        "slot": "559",
        "type": "t_uint256"
      },
      {
        "astId": 5198,
        "contract": "contracts/src/LDYStaking.sol:LDYStaking",
        "label": "lastUpdateTime",
        "offset": 0,
        "slot": "560",
        "type": "t_uint256"
      },
      {
        "astId": 5201,
        "contract": "contracts/src/LDYStaking.sol:LDYStaking",
        "label": "rewardRatePerSec",
        "offset": 0,
        "slot": "561",
        "type": "t_uint256"
      },
      {
        "astId": 5204,
        "contract": "contracts/src/LDYStaking.sol:LDYStaking",
        "label": "rewardPerTokenStored",
        "offset": 0,
        "slot": "562",
        "type": "t_uint256"
      },
      {
        "astId": 5207,
        "contract": "contracts/src/LDYStaking.sol:LDYStaking",
        "label": "totalStaked",
        "offset": 0,
        "slot": "563",
        "type": "t_uint256"
      },
      {
        "astId": 5209,
        "contract": "contracts/src/LDYStaking.sol:LDYStaking",
        "label": "totalWeightedStake",
        "offset": 0,
        "slot": "564",
        "type": "t_uint256"
      },
      {
        "astId": 5216,
        "contract": "contracts/src/LDYStaking.sol:LDYStaking",
        "label": "userStakingInfo",
        "offset": 0,
        "slot": "565",
        "type": "t_mapping(t_address,t_array(t_struct(StakingInfo)5165_storage)dyn_storage)"
      },
      {
        "astId": 5219,
        "contract": "contracts/src/LDYStaking.sol:LDYStaking",
        "label": "totalRewards",
        "offset": 0,
        "slot": "566",
        "type": "t_uint256"
      },
      {
        "astId": 5258,
        "contract": "contracts/src/LDYStaking.sol:LDYStaking",
        "label": "highTierAccounts",
        "offset": 0,
        "slot": "567",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(StakeDurationInfo)5170_storage)dyn_storage": {
        "base": "t_struct(StakeDurationInfo)5170_storage",
        "encoding": "dynamic_array",
        "label": "struct LDYStaking.StakeDurationInfo[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(StakingInfo)5165_storage)dyn_storage": {
        "base": "t_struct(StakingInfo)5165_storage",
        "encoding": "dynamic_array",
        "label": "struct LDYStaking.StakingInfo[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(GlobalBlacklist)4981": {
        "encoding": "inplace",
        "label": "contract GlobalBlacklist",
        "numberOfBytes": "20"
      },
      "t_contract(GlobalOwner)5028": {
        "encoding": "inplace",
        "label": "contract GlobalOwner",
        "numberOfBytes": "20"
      },
      "t_contract(GlobalPause)5104": {
        "encoding": "inplace",
        "label": "contract GlobalPause",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20Upgradeable)1808": {
        "encoding": "inplace",
        "label": "contract IERC20Upgradeable",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_struct(StakingInfo)5165_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct LDYStaking.StakingInfo[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(StakingInfo)5165_storage)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_struct(StakeDurationInfo)5170_storage": {
        "encoding": "inplace",
        "label": "struct LDYStaking.StakeDurationInfo",
        "members": [
          {
            "astId": 5167,
            "contract": "contracts/src/LDYStaking.sol:LDYStaking",
            "label": "duration",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5169,
            "contract": "contracts/src/LDYStaking.sol:LDYStaking",
            "label": "multiplier",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(StakingInfo)5165_storage": {
        "encoding": "inplace",
        "label": "struct LDYStaking.StakingInfo",
        "members": [
          {
            "astId": 5156,
            "contract": "contracts/src/LDYStaking.sol:LDYStaking",
            "label": "stakedAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5158,
            "contract": "contracts/src/LDYStaking.sol:LDYStaking",
            "label": "unStakeAt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5160,
            "contract": "contracts/src/LDYStaking.sol:LDYStaking",
            "label": "duration",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5162,
            "contract": "contracts/src/LDYStaking.sol:LDYStaking",
            "label": "rewardPerTokenPaid",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 5164,
            "contract": "contracts/src/LDYStaking.sol:LDYStaking",
            "label": "rewards",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}