// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class AdminChanged extends ethereum.Event {
  get params(): AdminChanged__Params {
    return new AdminChanged__Params(this);
  }
}

export class AdminChanged__Params {
  _event: AdminChanged;

  constructor(event: AdminChanged) {
    this._event = event;
  }

  get previousAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAdmin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class BeaconUpgraded extends ethereum.Event {
  get params(): BeaconUpgraded__Params {
    return new BeaconUpgraded__Params(this);
  }
}

export class BeaconUpgraded__Params {
  _event: BeaconUpgraded;

  constructor(event: BeaconUpgraded) {
    this._event = event;
  }

  get beacon(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class NotifiedRewardAmount extends ethereum.Event {
  get params(): NotifiedRewardAmount__Params {
    return new NotifiedRewardAmount__Params(this);
  }
}

export class NotifiedRewardAmount__Params {
  _event: NotifiedRewardAmount;

  constructor(event: NotifiedRewardAmount) {
    this._event = event;
  }

  get rewardAmount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get rewardPerSec(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class RewardPaid extends ethereum.Event {
  get params(): RewardPaid__Params {
    return new RewardPaid__Params(this);
  }
}

export class RewardPaid__Params {
  _event: RewardPaid;

  constructor(event: RewardPaid) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get stakeIndex(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get reward(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Staked extends ethereum.Event {
  get params(): Staked__Params {
    return new Staked__Params(this);
  }
}

export class Staked__Params {
  _event: Staked;

  constructor(event: Staked) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get stakeIndex(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Unstaked extends ethereum.Event {
  get params(): Unstaked__Params {
    return new Unstaked__Params(this);
  }
}

export class Unstaked__Params {
  _event: Unstaked;

  constructor(event: Unstaked) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get stakeIndex(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Upgraded extends ethereum.Event {
  get params(): Upgraded__Params {
    return new Upgraded__Params(this);
  }
}

export class Upgraded__Params {
  _event: Upgraded;

  constructor(event: Upgraded) {
    this._event = event;
  }

  get implementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class LDYStaking__getStakeDurationInfoResultValue0Struct extends ethereum.Tuple {
  get duration(): BigInt {
    return this[0].toBigInt();
  }

  get multiplier(): BigInt {
    return this[1].toBigInt();
  }
}

export class LDYStaking__getUserStakesResultValue0Struct extends ethereum.Tuple {
  get stakedAmount(): BigInt {
    return this[0].toBigInt();
  }

  get unStakeAt(): BigInt {
    return this[1].toBigInt();
  }

  get duration(): BigInt {
    return this[2].toBigInt();
  }

  get rewardPerTokenPaid(): BigInt {
    return this[3].toBigInt();
  }

  get rewards(): BigInt {
    return this[4].toBigInt();
  }
}

export class LDYStaking__stakeDurationInfosResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getDuration(): BigInt {
    return this.value0;
  }

  getMultiplier(): BigInt {
    return this.value1;
  }
}

export class LDYStaking__userStakingInfoResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }

  getStakedAmount(): BigInt {
    return this.value0;
  }

  getUnStakeAt(): BigInt {
    return this.value1;
  }

  getDuration(): BigInt {
    return this.value2;
  }

  getRewardPerTokenPaid(): BigInt {
    return this.value3;
  }

  getRewards(): BigInt {
    return this.value4;
  }
}

export class LDYStaking extends ethereum.SmartContract {
  static bind(address: Address): LDYStaking {
    return new LDYStaking("LDYStaking", address);
  }

  MULTIPLIER_BASIS(): BigInt {
    let result = super.call(
      "MULTIPLIER_BASIS",
      "MULTIPLIER_BASIS():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_MULTIPLIER_BASIS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MULTIPLIER_BASIS",
      "MULTIPLIER_BASIS():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  earned(account: Address, stakeIndex: BigInt): BigInt {
    let result = super.call("earned", "earned(address,uint256):(uint256)", [
      ethereum.Value.fromAddress(account),
      ethereum.Value.fromUnsignedBigInt(stakeIndex),
    ]);

    return result[0].toBigInt();
  }

  try_earned(
    account: Address,
    stakeIndex: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall("earned", "earned(address,uint256):(uint256)", [
      ethereum.Value.fromAddress(account),
      ethereum.Value.fromUnsignedBigInt(stakeIndex),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  finishAt(): BigInt {
    let result = super.call("finishAt", "finishAt():(uint256)", []);

    return result[0].toBigInt();
  }

  try_finishAt(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("finishAt", "finishAt():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getEarnedUser(account: Address): Array<BigInt> {
    let result = super.call(
      "getEarnedUser",
      "getEarnedUser(address):(uint256[])",
      [ethereum.Value.fromAddress(account)],
    );

    return result[0].toBigIntArray();
  }

  try_getEarnedUser(account: Address): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getEarnedUser",
      "getEarnedUser(address):(uint256[])",
      [ethereum.Value.fromAddress(account)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getStakeDurationInfo(
    index: BigInt,
  ): LDYStaking__getStakeDurationInfoResultValue0Struct {
    let result = super.call(
      "getStakeDurationInfo",
      "getStakeDurationInfo(uint256):((uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(index)],
    );

    return changetype<LDYStaking__getStakeDurationInfoResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_getStakeDurationInfo(
    index: BigInt,
  ): ethereum.CallResult<LDYStaking__getStakeDurationInfoResultValue0Struct> {
    let result = super.tryCall(
      "getStakeDurationInfo",
      "getStakeDurationInfo(uint256):((uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(index)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<LDYStaking__getStakeDurationInfoResultValue0Struct>(
        value[0].toTuple(),
      ),
    );
  }

  getUserStakes(
    account: Address,
  ): Array<LDYStaking__getUserStakesResultValue0Struct> {
    let result = super.call(
      "getUserStakes",
      "getUserStakes(address):((uint256,uint256,uint256,uint256,uint256)[])",
      [ethereum.Value.fromAddress(account)],
    );

    return result[0].toTupleArray<LDYStaking__getUserStakesResultValue0Struct>();
  }

  try_getUserStakes(
    account: Address,
  ): ethereum.CallResult<Array<LDYStaking__getUserStakesResultValue0Struct>> {
    let result = super.tryCall(
      "getUserStakes",
      "getUserStakes(address):((uint256,uint256,uint256,uint256,uint256)[])",
      [ethereum.Value.fromAddress(account)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<LDYStaking__getUserStakesResultValue0Struct>(),
    );
  }

  globalBlacklist(): Address {
    let result = super.call(
      "globalBlacklist",
      "globalBlacklist():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_globalBlacklist(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "globalBlacklist",
      "globalBlacklist():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  globalOwner(): Address {
    let result = super.call("globalOwner", "globalOwner():(address)", []);

    return result[0].toAddress();
  }

  try_globalOwner(): ethereum.CallResult<Address> {
    let result = super.tryCall("globalOwner", "globalOwner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  globalPause(): Address {
    let result = super.call("globalPause", "globalPause():(address)", []);

    return result[0].toAddress();
  }

  try_globalPause(): ethereum.CallResult<Address> {
    let result = super.tryCall("globalPause", "globalPause():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  highTierAccounts(param0: Address): boolean {
    let result = super.call(
      "highTierAccounts",
      "highTierAccounts(address):(bool)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBoolean();
  }

  try_highTierAccounts(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "highTierAccounts",
      "highTierAccounts(address):(bool)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lastTimeRewardApplicable(): BigInt {
    let result = super.call(
      "lastTimeRewardApplicable",
      "lastTimeRewardApplicable():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_lastTimeRewardApplicable(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastTimeRewardApplicable",
      "lastTimeRewardApplicable():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastUpdateTime(): BigInt {
    let result = super.call("lastUpdateTime", "lastUpdateTime():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lastUpdateTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastUpdateTime",
      "lastUpdateTime():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  proxiableUUID(): Bytes {
    let result = super.call("proxiableUUID", "proxiableUUID():(bytes32)", []);

    return result[0].toBytes();
  }

  try_proxiableUUID(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "proxiableUUID",
      "proxiableUUID():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  rewardPerToken(): BigInt {
    let result = super.call("rewardPerToken", "rewardPerToken():(uint256)", []);

    return result[0].toBigInt();
  }

  try_rewardPerToken(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rewardPerToken",
      "rewardPerToken():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewardPerTokenStored(): BigInt {
    let result = super.call(
      "rewardPerTokenStored",
      "rewardPerTokenStored():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_rewardPerTokenStored(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rewardPerTokenStored",
      "rewardPerTokenStored():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewardRatePerSec(): BigInt {
    let result = super.call(
      "rewardRatePerSec",
      "rewardRatePerSec():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_rewardRatePerSec(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rewardRatePerSec",
      "rewardRatePerSec():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewardsDuration(): BigInt {
    let result = super.call(
      "rewardsDuration",
      "rewardsDuration():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_rewardsDuration(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rewardsDuration",
      "rewardsDuration():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stakeAmountForPerks(): BigInt {
    let result = super.call(
      "stakeAmountForPerks",
      "stakeAmountForPerks():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_stakeAmountForPerks(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "stakeAmountForPerks",
      "stakeAmountForPerks():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stakeDurationForPerks(): BigInt {
    let result = super.call(
      "stakeDurationForPerks",
      "stakeDurationForPerks():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_stakeDurationForPerks(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "stakeDurationForPerks",
      "stakeDurationForPerks():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stakeDurationInfos(param0: BigInt): LDYStaking__stakeDurationInfosResult {
    let result = super.call(
      "stakeDurationInfos",
      "stakeDurationInfos(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return new LDYStaking__stakeDurationInfosResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
    );
  }

  try_stakeDurationInfos(
    param0: BigInt,
  ): ethereum.CallResult<LDYStaking__stakeDurationInfosResult> {
    let result = super.tryCall(
      "stakeDurationInfos",
      "stakeDurationInfos(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new LDYStaking__stakeDurationInfosResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
      ),
    );
  }

  stakeRewardToken(): Address {
    let result = super.call(
      "stakeRewardToken",
      "stakeRewardToken():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_stakeRewardToken(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "stakeRewardToken",
      "stakeRewardToken():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tierOf(account: Address): BigInt {
    let result = super.call("tierOf", "tierOf(address):(uint256)", [
      ethereum.Value.fromAddress(account),
    ]);

    return result[0].toBigInt();
  }

  try_tierOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("tierOf", "tierOf(address):(uint256)", [
      ethereum.Value.fromAddress(account),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalRewards(): BigInt {
    let result = super.call("totalRewards", "totalRewards():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalRewards(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalRewards", "totalRewards():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalStaked(): BigInt {
    let result = super.call("totalStaked", "totalStaked():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalStaked(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalStaked", "totalStaked():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalWeightedStake(): BigInt {
    let result = super.call(
      "totalWeightedStake",
      "totalWeightedStake():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_totalWeightedStake(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalWeightedStake",
      "totalWeightedStake():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userStakingInfo(
    param0: Address,
    param1: BigInt,
  ): LDYStaking__userStakingInfoResult {
    let result = super.call(
      "userStakingInfo",
      "userStakingInfo(address,uint256):(uint256,uint256,uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );

    return new LDYStaking__userStakingInfoResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
    );
  }

  try_userStakingInfo(
    param0: Address,
    param1: BigInt,
  ): ethereum.CallResult<LDYStaking__userStakingInfoResult> {
    let result = super.tryCall(
      "userStakingInfo",
      "userStakingInfo(address,uint256):(uint256,uint256,uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new LDYStaking__userStakingInfoResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
      ),
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class GetRewardCall extends ethereum.Call {
  get inputs(): GetRewardCall__Inputs {
    return new GetRewardCall__Inputs(this);
  }

  get outputs(): GetRewardCall__Outputs {
    return new GetRewardCall__Outputs(this);
  }
}

export class GetRewardCall__Inputs {
  _call: GetRewardCall;

  constructor(call: GetRewardCall) {
    this._call = call;
  }

  get stakeIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class GetRewardCall__Outputs {
  _call: GetRewardCall;

  constructor(call: GetRewardCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get globalOwner_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get globalPause_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get globalBlacklist_(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get stakeRewardToken_(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get stakeDurationInfos_(): Array<InitializeCallStakeDurationInfos_Struct> {
    return this._call.inputValues[4].value.toTupleArray<InitializeCallStakeDurationInfos_Struct>();
  }

  get stakeDurationForPerks_(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get stakeAmountForPerks_(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class InitializeCallStakeDurationInfos_Struct extends ethereum.Tuple {
  get duration(): BigInt {
    return this[0].toBigInt();
  }

  get multiplier(): BigInt {
    return this[1].toBigInt();
  }
}

export class NotifyRewardAmountCall extends ethereum.Call {
  get inputs(): NotifyRewardAmountCall__Inputs {
    return new NotifyRewardAmountCall__Inputs(this);
  }

  get outputs(): NotifyRewardAmountCall__Outputs {
    return new NotifyRewardAmountCall__Outputs(this);
  }
}

export class NotifyRewardAmountCall__Inputs {
  _call: NotifyRewardAmountCall;

  constructor(call: NotifyRewardAmountCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class NotifyRewardAmountCall__Outputs {
  _call: NotifyRewardAmountCall;

  constructor(call: NotifyRewardAmountCall) {
    this._call = call;
  }
}

export class PushStakeDurationInfoCall extends ethereum.Call {
  get inputs(): PushStakeDurationInfoCall__Inputs {
    return new PushStakeDurationInfoCall__Inputs(this);
  }

  get outputs(): PushStakeDurationInfoCall__Outputs {
    return new PushStakeDurationInfoCall__Outputs(this);
  }
}

export class PushStakeDurationInfoCall__Inputs {
  _call: PushStakeDurationInfoCall;

  constructor(call: PushStakeDurationInfoCall) {
    this._call = call;
  }

  get durationInfo(): PushStakeDurationInfoCallDurationInfoStruct {
    return changetype<PushStakeDurationInfoCallDurationInfoStruct>(
      this._call.inputValues[0].value.toTuple(),
    );
  }
}

export class PushStakeDurationInfoCall__Outputs {
  _call: PushStakeDurationInfoCall;

  constructor(call: PushStakeDurationInfoCall) {
    this._call = call;
  }
}

export class PushStakeDurationInfoCallDurationInfoStruct extends ethereum.Tuple {
  get duration(): BigInt {
    return this[0].toBigInt();
  }

  get multiplier(): BigInt {
    return this[1].toBigInt();
  }
}

export class RecoverERC20Call extends ethereum.Call {
  get inputs(): RecoverERC20Call__Inputs {
    return new RecoverERC20Call__Inputs(this);
  }

  get outputs(): RecoverERC20Call__Outputs {
    return new RecoverERC20Call__Outputs(this);
  }
}

export class RecoverERC20Call__Inputs {
  _call: RecoverERC20Call;

  constructor(call: RecoverERC20Call) {
    this._call = call;
  }

  get tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RecoverERC20Call__Outputs {
  _call: RecoverERC20Call;

  constructor(call: RecoverERC20Call) {
    this._call = call;
  }
}

export class SetRewardsDurationCall extends ethereum.Call {
  get inputs(): SetRewardsDurationCall__Inputs {
    return new SetRewardsDurationCall__Inputs(this);
  }

  get outputs(): SetRewardsDurationCall__Outputs {
    return new SetRewardsDurationCall__Outputs(this);
  }
}

export class SetRewardsDurationCall__Inputs {
  _call: SetRewardsDurationCall;

  constructor(call: SetRewardsDurationCall) {
    this._call = call;
  }

  get duration(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetRewardsDurationCall__Outputs {
  _call: SetRewardsDurationCall;

  constructor(call: SetRewardsDurationCall) {
    this._call = call;
  }
}

export class SetStakeAmountForPerksCall extends ethereum.Call {
  get inputs(): SetStakeAmountForPerksCall__Inputs {
    return new SetStakeAmountForPerksCall__Inputs(this);
  }

  get outputs(): SetStakeAmountForPerksCall__Outputs {
    return new SetStakeAmountForPerksCall__Outputs(this);
  }
}

export class SetStakeAmountForPerksCall__Inputs {
  _call: SetStakeAmountForPerksCall;

  constructor(call: SetStakeAmountForPerksCall) {
    this._call = call;
  }

  get stakeAmountForPerks_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetStakeAmountForPerksCall__Outputs {
  _call: SetStakeAmountForPerksCall;

  constructor(call: SetStakeAmountForPerksCall) {
    this._call = call;
  }
}

export class SetStakeDurationForPerksCall extends ethereum.Call {
  get inputs(): SetStakeDurationForPerksCall__Inputs {
    return new SetStakeDurationForPerksCall__Inputs(this);
  }

  get outputs(): SetStakeDurationForPerksCall__Outputs {
    return new SetStakeDurationForPerksCall__Outputs(this);
  }
}

export class SetStakeDurationForPerksCall__Inputs {
  _call: SetStakeDurationForPerksCall;

  constructor(call: SetStakeDurationForPerksCall) {
    this._call = call;
  }

  get stakeDurationForPerks_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetStakeDurationForPerksCall__Outputs {
  _call: SetStakeDurationForPerksCall;

  constructor(call: SetStakeDurationForPerksCall) {
    this._call = call;
  }
}

export class StakeCall extends ethereum.Call {
  get inputs(): StakeCall__Inputs {
    return new StakeCall__Inputs(this);
  }

  get outputs(): StakeCall__Outputs {
    return new StakeCall__Outputs(this);
  }
}

export class StakeCall__Inputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get stakeDurationIndex(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class StakeCall__Outputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }
}

export class UnstakeCall extends ethereum.Call {
  get inputs(): UnstakeCall__Inputs {
    return new UnstakeCall__Inputs(this);
  }

  get outputs(): UnstakeCall__Outputs {
    return new UnstakeCall__Outputs(this);
  }
}

export class UnstakeCall__Inputs {
  _call: UnstakeCall;

  constructor(call: UnstakeCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get stakeIndex(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UnstakeCall__Outputs {
  _call: UnstakeCall;

  constructor(call: UnstakeCall) {
    this._call = call;
  }
}

export class UpgradeToCall extends ethereum.Call {
  get inputs(): UpgradeToCall__Inputs {
    return new UpgradeToCall__Inputs(this);
  }

  get outputs(): UpgradeToCall__Outputs {
    return new UpgradeToCall__Outputs(this);
  }
}

export class UpgradeToCall__Inputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpgradeToCall__Outputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }
}

export class UpgradeToAndCallCall extends ethereum.Call {
  get inputs(): UpgradeToAndCallCall__Inputs {
    return new UpgradeToAndCallCall__Inputs(this);
  }

  get outputs(): UpgradeToAndCallCall__Outputs {
    return new UpgradeToAndCallCall__Outputs(this);
  }
}

export class UpgradeToAndCallCall__Inputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpgradeToAndCallCall__Outputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }
}
