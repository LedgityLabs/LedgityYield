schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

type APRChange {
  id: ID!
  ltoken: LToken!
  timestamp: BigInt!
  apr: BigDecimal!
}

input APRChange_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  ltoken: String
  ltoken_not: String
  ltoken_gt: String
  ltoken_lt: String
  ltoken_gte: String
  ltoken_lte: String
  ltoken_in: [String!]
  ltoken_not_in: [String!]
  ltoken_contains: String
  ltoken_contains_nocase: String
  ltoken_not_contains: String
  ltoken_not_contains_nocase: String
  ltoken_starts_with: String
  ltoken_starts_with_nocase: String
  ltoken_not_starts_with: String
  ltoken_not_starts_with_nocase: String
  ltoken_ends_with: String
  ltoken_ends_with_nocase: String
  ltoken_not_ends_with: String
  ltoken_not_ends_with_nocase: String
  ltoken_: LToken_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  apr: BigDecimal
  apr_not: BigDecimal
  apr_gt: BigDecimal
  apr_lt: BigDecimal
  apr_gte: BigDecimal
  apr_lte: BigDecimal
  apr_in: [BigDecimal!]
  apr_not_in: [BigDecimal!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [APRChange_filter]
  or: [APRChange_filter]
}

enum APRChange_orderBy {
  id
  ltoken
  ltoken__id
  ltoken__symbol
  ltoken__decimals
  ltoken__totalMintedRewards
  timestamp
  apr
}

type Activity {
  id: ID!
  requestId: BigInt!
  ltoken: LToken!
  timestamp: BigInt!
  account: Bytes!
  action: ActivityAction!
  amount: BigDecimal!
  amountAfterFees: BigDecimal!
  status: ActivityStatus!
}

enum ActivityAction {
  Deposit
  Withdraw
}

enum ActivityStatus {
  Queued
  Cancelled
  Success
  Fulfilled
}

input Activity_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  requestId: BigInt
  requestId_not: BigInt
  requestId_gt: BigInt
  requestId_lt: BigInt
  requestId_gte: BigInt
  requestId_lte: BigInt
  requestId_in: [BigInt!]
  requestId_not_in: [BigInt!]
  ltoken: String
  ltoken_not: String
  ltoken_gt: String
  ltoken_lt: String
  ltoken_gte: String
  ltoken_lte: String
  ltoken_in: [String!]
  ltoken_not_in: [String!]
  ltoken_contains: String
  ltoken_contains_nocase: String
  ltoken_not_contains: String
  ltoken_not_contains_nocase: String
  ltoken_starts_with: String
  ltoken_starts_with_nocase: String
  ltoken_not_starts_with: String
  ltoken_not_starts_with_nocase: String
  ltoken_ends_with: String
  ltoken_ends_with_nocase: String
  ltoken_not_ends_with: String
  ltoken_not_ends_with_nocase: String
  ltoken_: LToken_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  account: Bytes
  account_not: Bytes
  account_gt: Bytes
  account_lt: Bytes
  account_gte: Bytes
  account_lte: Bytes
  account_in: [Bytes!]
  account_not_in: [Bytes!]
  account_contains: Bytes
  account_not_contains: Bytes
  action: ActivityAction
  action_not: ActivityAction
  action_in: [ActivityAction!]
  action_not_in: [ActivityAction!]
  amount: BigDecimal
  amount_not: BigDecimal
  amount_gt: BigDecimal
  amount_lt: BigDecimal
  amount_gte: BigDecimal
  amount_lte: BigDecimal
  amount_in: [BigDecimal!]
  amount_not_in: [BigDecimal!]
  amountAfterFees: BigDecimal
  amountAfterFees_not: BigDecimal
  amountAfterFees_gt: BigDecimal
  amountAfterFees_lt: BigDecimal
  amountAfterFees_gte: BigDecimal
  amountAfterFees_lte: BigDecimal
  amountAfterFees_in: [BigDecimal!]
  amountAfterFees_not_in: [BigDecimal!]
  status: ActivityStatus
  status_not: ActivityStatus
  status_in: [ActivityStatus!]
  status_not_in: [ActivityStatus!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Activity_filter]
  or: [Activity_filter]
}

enum Activity_orderBy {
  id
  requestId
  ltoken
  ltoken__id
  ltoken__symbol
  ltoken__decimals
  ltoken__totalMintedRewards
  timestamp
  account
  action
  amount
  amountAfterFees
  status
}

type AffiliateActivity {
  id: Bytes!
  affiliateCode: String!
  ltoken: LToken!
  action: ActivityAction!
  account: Bytes!
  amount: BigInt!
  amountAfterFees: BigInt!
  txHash: Bytes!
  logIndex: BigInt!
  timestamp: BigInt!
}

input AffiliateActivity_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  affiliateCode: String
  affiliateCode_not: String
  affiliateCode_gt: String
  affiliateCode_lt: String
  affiliateCode_gte: String
  affiliateCode_lte: String
  affiliateCode_in: [String!]
  affiliateCode_not_in: [String!]
  affiliateCode_contains: String
  affiliateCode_contains_nocase: String
  affiliateCode_not_contains: String
  affiliateCode_not_contains_nocase: String
  affiliateCode_starts_with: String
  affiliateCode_starts_with_nocase: String
  affiliateCode_not_starts_with: String
  affiliateCode_not_starts_with_nocase: String
  affiliateCode_ends_with: String
  affiliateCode_ends_with_nocase: String
  affiliateCode_not_ends_with: String
  affiliateCode_not_ends_with_nocase: String
  ltoken: String
  ltoken_not: String
  ltoken_gt: String
  ltoken_lt: String
  ltoken_gte: String
  ltoken_lte: String
  ltoken_in: [String!]
  ltoken_not_in: [String!]
  ltoken_contains: String
  ltoken_contains_nocase: String
  ltoken_not_contains: String
  ltoken_not_contains_nocase: String
  ltoken_starts_with: String
  ltoken_starts_with_nocase: String
  ltoken_not_starts_with: String
  ltoken_not_starts_with_nocase: String
  ltoken_ends_with: String
  ltoken_ends_with_nocase: String
  ltoken_not_ends_with: String
  ltoken_not_ends_with_nocase: String
  ltoken_: LToken_filter
  action: ActivityAction
  action_not: ActivityAction
  action_in: [ActivityAction!]
  action_not_in: [ActivityAction!]
  account: Bytes
  account_not: Bytes
  account_gt: Bytes
  account_lt: Bytes
  account_gte: Bytes
  account_lte: Bytes
  account_in: [Bytes!]
  account_not_in: [Bytes!]
  account_contains: Bytes
  account_not_contains: Bytes
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  amountAfterFees: BigInt
  amountAfterFees_not: BigInt
  amountAfterFees_gt: BigInt
  amountAfterFees_lt: BigInt
  amountAfterFees_gte: BigInt
  amountAfterFees_lte: BigInt
  amountAfterFees_in: [BigInt!]
  amountAfterFees_not_in: [BigInt!]
  txHash: Bytes
  txHash_not: Bytes
  txHash_gt: Bytes
  txHash_lt: Bytes
  txHash_gte: Bytes
  txHash_lte: Bytes
  txHash_in: [Bytes!]
  txHash_not_in: [Bytes!]
  txHash_contains: Bytes
  txHash_not_contains: Bytes
  logIndex: BigInt
  logIndex_not: BigInt
  logIndex_gt: BigInt
  logIndex_lt: BigInt
  logIndex_gte: BigInt
  logIndex_lte: BigInt
  logIndex_in: [BigInt!]
  logIndex_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [AffiliateActivity_filter]
  or: [AffiliateActivity_filter]
}

enum AffiliateActivity_orderBy {
  id
  affiliateCode
  ltoken
  ltoken__id
  ltoken__symbol
  ltoken__decimals
  ltoken__totalMintedRewards
  action
  account
  amount
  amountAfterFees
  txHash
  logIndex
  timestamp
}

type AffiliateUser {
  id: ID!
  walletAddress: Bytes!
  affiliateCode: String!
}

input AffiliateUser_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  walletAddress: Bytes
  walletAddress_not: Bytes
  walletAddress_gt: Bytes
  walletAddress_lt: Bytes
  walletAddress_gte: Bytes
  walletAddress_lte: Bytes
  walletAddress_in: [Bytes!]
  walletAddress_not_in: [Bytes!]
  walletAddress_contains: Bytes
  walletAddress_not_contains: Bytes
  affiliateCode: String
  affiliateCode_not: String
  affiliateCode_gt: String
  affiliateCode_lt: String
  affiliateCode_gte: String
  affiliateCode_lte: String
  affiliateCode_in: [String!]
  affiliateCode_not_in: [String!]
  affiliateCode_contains: String
  affiliateCode_contains_nocase: String
  affiliateCode_not_contains: String
  affiliateCode_not_contains_nocase: String
  affiliateCode_starts_with: String
  affiliateCode_starts_with_nocase: String
  affiliateCode_not_starts_with: String
  affiliateCode_not_starts_with_nocase: String
  affiliateCode_ends_with: String
  affiliateCode_ends_with_nocase: String
  affiliateCode_not_ends_with: String
  affiliateCode_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [AffiliateUser_filter]
  or: [AffiliateUser_filter]
}

enum AffiliateUser_orderBy {
  id
  walletAddress
  affiliateCode
}

enum Aggregation_interval {
  hour
  day
}

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

scalar Bytes

"""
8 bytes signed integer

"""
scalar Int8

type LToken {
  id: ID!
  symbol: String!
  decimals: Int!
  totalMintedRewards: BigDecimal!
  tvlUpdates(skip: Int = 0, first: Int = 100, orderBy: TVLChange_orderBy, orderDirection: OrderDirection, where: TVLChange_filter): [TVLChange!]
  aprUpdates(skip: Int = 0, first: Int = 100, orderBy: APRChange_orderBy, orderDirection: OrderDirection, where: APRChange_filter): [APRChange!]
  activities(skip: Int = 0, first: Int = 100, orderBy: Activity_orderBy, orderDirection: OrderDirection, where: Activity_filter): [Activity!]
  rewardsMints(skip: Int = 0, first: Int = 100, orderBy: RewardsMint_orderBy, orderDirection: OrderDirection, where: RewardsMint_filter): [RewardsMint!]
}

input LToken_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  symbol: String
  symbol_not: String
  symbol_gt: String
  symbol_lt: String
  symbol_gte: String
  symbol_lte: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_contains: String
  symbol_contains_nocase: String
  symbol_not_contains: String
  symbol_not_contains_nocase: String
  symbol_starts_with: String
  symbol_starts_with_nocase: String
  symbol_not_starts_with: String
  symbol_not_starts_with_nocase: String
  symbol_ends_with: String
  symbol_ends_with_nocase: String
  symbol_not_ends_with: String
  symbol_not_ends_with_nocase: String
  decimals: Int
  decimals_not: Int
  decimals_gt: Int
  decimals_lt: Int
  decimals_gte: Int
  decimals_lte: Int
  decimals_in: [Int!]
  decimals_not_in: [Int!]
  totalMintedRewards: BigDecimal
  totalMintedRewards_not: BigDecimal
  totalMintedRewards_gt: BigDecimal
  totalMintedRewards_lt: BigDecimal
  totalMintedRewards_gte: BigDecimal
  totalMintedRewards_lte: BigDecimal
  totalMintedRewards_in: [BigDecimal!]
  totalMintedRewards_not_in: [BigDecimal!]
  tvlUpdates_: TVLChange_filter
  aprUpdates_: APRChange_filter
  activities_: Activity_filter
  rewardsMints_: RewardsMint_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [LToken_filter]
  or: [LToken_filter]
}

enum LToken_orderBy {
  id
  symbol
  decimals
  totalMintedRewards
  tvlUpdates
  aprUpdates
  activities
  rewardsMints
}

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type PreMiningLock {
  id: ID!
  amount: BigDecimal!
  duration: Int!
}

input PreMiningLock_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  amount: BigDecimal
  amount_not: BigDecimal
  amount_gt: BigDecimal
  amount_lt: BigDecimal
  amount_gte: BigDecimal
  amount_lte: BigDecimal
  amount_in: [BigDecimal!]
  amount_not_in: [BigDecimal!]
  duration: Int
  duration_not: Int
  duration_gt: Int
  duration_lt: Int
  duration_gte: Int
  duration_lte: Int
  duration_in: [Int!]
  duration_not_in: [Int!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [PreMiningLock_filter]
  or: [PreMiningLock_filter]
}

enum PreMiningLock_orderBy {
  id
  amount
  duration
}

type Query {
  c42161_ltoken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LToken
  c42161_ltokens(
    skip: Int = 0
    first: Int = 100
    orderBy: LToken_orderBy
    orderDirection: OrderDirection
    where: LToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LToken!]!
  c42161_tvlchange(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TVLChange
  c42161_tvlchanges(
    skip: Int = 0
    first: Int = 100
    orderBy: TVLChange_orderBy
    orderDirection: OrderDirection
    where: TVLChange_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TVLChange!]!
  c42161_aprchange(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): APRChange
  c42161_aprchanges(
    skip: Int = 0
    first: Int = 100
    orderBy: APRChange_orderBy
    orderDirection: OrderDirection
    where: APRChange_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [APRChange!]!
  c42161_activity(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Activity
  c42161_activities(
    skip: Int = 0
    first: Int = 100
    orderBy: Activity_orderBy
    orderDirection: OrderDirection
    where: Activity_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Activity!]!
  c42161_rewardsMint(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): RewardsMint
  c42161_rewardsMints(
    skip: Int = 0
    first: Int = 100
    orderBy: RewardsMint_orderBy
    orderDirection: OrderDirection
    where: RewardsMint_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [RewardsMint!]!
  c42161_preMiningLock(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PreMiningLock
  c42161_preMiningLocks(
    skip: Int = 0
    first: Int = 100
    orderBy: PreMiningLock_orderBy
    orderDirection: OrderDirection
    where: PreMiningLock_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PreMiningLock!]!
  c42161_stakingUser(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): StakingUser
  c42161_stakingUsers(
    skip: Int = 0
    first: Int = 100
    orderBy: StakingUser_orderBy
    orderDirection: OrderDirection
    where: StakingUser_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [StakingUser!]!
  c42161_stakingAPRInfo(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): StakingAPRInfo
  c42161_stakingAPRInfos(
    skip: Int = 0
    first: Int = 100
    orderBy: StakingAPRInfo_orderBy
    orderDirection: OrderDirection
    where: StakingAPRInfo_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [StakingAPRInfo!]!
  c42161_affiliateUser(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AffiliateUser
  c42161_affiliateUsers(
    skip: Int = 0
    first: Int = 100
    orderBy: AffiliateUser_orderBy
    orderDirection: OrderDirection
    where: AffiliateUser_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AffiliateUser!]!
  c42161_affiliateActivity(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AffiliateActivity
  c42161_affiliateActivities(
    skip: Int = 0
    first: Int = 100
    orderBy: AffiliateActivity_orderBy
    orderDirection: OrderDirection
    where: AffiliateActivity_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AffiliateActivity!]!
  """Access to subgraph metadata"""
  c42161__meta(block: Block_height): _Meta_
}

type RewardsMint {
  id: ID!
  ltoken: LToken!
  timestamp: BigInt!
  account: Bytes!
  balanceBefore: BigDecimal!
  revenue: BigDecimal!
  growth: BigDecimal!
}

input RewardsMint_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  ltoken: String
  ltoken_not: String
  ltoken_gt: String
  ltoken_lt: String
  ltoken_gte: String
  ltoken_lte: String
  ltoken_in: [String!]
  ltoken_not_in: [String!]
  ltoken_contains: String
  ltoken_contains_nocase: String
  ltoken_not_contains: String
  ltoken_not_contains_nocase: String
  ltoken_starts_with: String
  ltoken_starts_with_nocase: String
  ltoken_not_starts_with: String
  ltoken_not_starts_with_nocase: String
  ltoken_ends_with: String
  ltoken_ends_with_nocase: String
  ltoken_not_ends_with: String
  ltoken_not_ends_with_nocase: String
  ltoken_: LToken_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  account: Bytes
  account_not: Bytes
  account_gt: Bytes
  account_lt: Bytes
  account_gte: Bytes
  account_lte: Bytes
  account_in: [Bytes!]
  account_not_in: [Bytes!]
  account_contains: Bytes
  account_not_contains: Bytes
  balanceBefore: BigDecimal
  balanceBefore_not: BigDecimal
  balanceBefore_gt: BigDecimal
  balanceBefore_lt: BigDecimal
  balanceBefore_gte: BigDecimal
  balanceBefore_lte: BigDecimal
  balanceBefore_in: [BigDecimal!]
  balanceBefore_not_in: [BigDecimal!]
  revenue: BigDecimal
  revenue_not: BigDecimal
  revenue_gt: BigDecimal
  revenue_lt: BigDecimal
  revenue_gte: BigDecimal
  revenue_lte: BigDecimal
  revenue_in: [BigDecimal!]
  revenue_not_in: [BigDecimal!]
  growth: BigDecimal
  growth_not: BigDecimal
  growth_gt: BigDecimal
  growth_lt: BigDecimal
  growth_gte: BigDecimal
  growth_lte: BigDecimal
  growth_in: [BigDecimal!]
  growth_not_in: [BigDecimal!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [RewardsMint_filter]
  or: [RewardsMint_filter]
}

enum RewardsMint_orderBy {
  id
  ltoken
  ltoken__id
  ltoken__symbol
  ltoken__decimals
  ltoken__totalMintedRewards
  timestamp
  account
  balanceBefore
  revenue
  growth
}

type StakingAPRInfo {
  id: ID!
  rewardPerSec: BigInt!
  totalStaked: BigInt!
  interestRate: BigDecimal!
}

input StakingAPRInfo_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  rewardPerSec: BigInt
  rewardPerSec_not: BigInt
  rewardPerSec_gt: BigInt
  rewardPerSec_lt: BigInt
  rewardPerSec_gte: BigInt
  rewardPerSec_lte: BigInt
  rewardPerSec_in: [BigInt!]
  rewardPerSec_not_in: [BigInt!]
  totalStaked: BigInt
  totalStaked_not: BigInt
  totalStaked_gt: BigInt
  totalStaked_lt: BigInt
  totalStaked_gte: BigInt
  totalStaked_lte: BigInt
  totalStaked_in: [BigInt!]
  totalStaked_not_in: [BigInt!]
  interestRate: BigDecimal
  interestRate_not: BigDecimal
  interestRate_gt: BigDecimal
  interestRate_lt: BigDecimal
  interestRate_gte: BigDecimal
  interestRate_lte: BigDecimal
  interestRate_in: [BigDecimal!]
  interestRate_not_in: [BigDecimal!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [StakingAPRInfo_filter]
  or: [StakingAPRInfo_filter]
}

enum StakingAPRInfo_orderBy {
  id
  rewardPerSec
  totalStaked
  interestRate
}

type StakingUser {
  id: ID!
  user: Bytes!
  stakeIndex: BigInt!
  stakedAmount: BigInt!
  earnedAmount: BigInt!
}

input StakingUser_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  user: Bytes
  user_not: Bytes
  user_gt: Bytes
  user_lt: Bytes
  user_gte: Bytes
  user_lte: Bytes
  user_in: [Bytes!]
  user_not_in: [Bytes!]
  user_contains: Bytes
  user_not_contains: Bytes
  stakeIndex: BigInt
  stakeIndex_not: BigInt
  stakeIndex_gt: BigInt
  stakeIndex_lt: BigInt
  stakeIndex_gte: BigInt
  stakeIndex_lte: BigInt
  stakeIndex_in: [BigInt!]
  stakeIndex_not_in: [BigInt!]
  stakedAmount: BigInt
  stakedAmount_not: BigInt
  stakedAmount_gt: BigInt
  stakedAmount_lt: BigInt
  stakedAmount_gte: BigInt
  stakedAmount_lte: BigInt
  stakedAmount_in: [BigInt!]
  stakedAmount_not_in: [BigInt!]
  earnedAmount: BigInt
  earnedAmount_not: BigInt
  earnedAmount_gt: BigInt
  earnedAmount_lt: BigInt
  earnedAmount_gte: BigInt
  earnedAmount_lte: BigInt
  earnedAmount_in: [BigInt!]
  earnedAmount_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [StakingUser_filter]
  or: [StakingUser_filter]
}

enum StakingUser_orderBy {
  id
  user
  stakeIndex
  stakedAmount
  earnedAmount
}

type Subscription {
  c42161_ltoken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LToken
  c42161_ltokens(
    skip: Int = 0
    first: Int = 100
    orderBy: LToken_orderBy
    orderDirection: OrderDirection
    where: LToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LToken!]!
  c42161_tvlchange(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TVLChange
  c42161_tvlchanges(
    skip: Int = 0
    first: Int = 100
    orderBy: TVLChange_orderBy
    orderDirection: OrderDirection
    where: TVLChange_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TVLChange!]!
  c42161_aprchange(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): APRChange
  c42161_aprchanges(
    skip: Int = 0
    first: Int = 100
    orderBy: APRChange_orderBy
    orderDirection: OrderDirection
    where: APRChange_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [APRChange!]!
  c42161_activity(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Activity
  c42161_activities(
    skip: Int = 0
    first: Int = 100
    orderBy: Activity_orderBy
    orderDirection: OrderDirection
    where: Activity_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Activity!]!
  c42161_rewardsMint(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): RewardsMint
  c42161_rewardsMints(
    skip: Int = 0
    first: Int = 100
    orderBy: RewardsMint_orderBy
    orderDirection: OrderDirection
    where: RewardsMint_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [RewardsMint!]!
  c42161_preMiningLock(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PreMiningLock
  c42161_preMiningLocks(
    skip: Int = 0
    first: Int = 100
    orderBy: PreMiningLock_orderBy
    orderDirection: OrderDirection
    where: PreMiningLock_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PreMiningLock!]!
  c42161_stakingUser(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): StakingUser
  c42161_stakingUsers(
    skip: Int = 0
    first: Int = 100
    orderBy: StakingUser_orderBy
    orderDirection: OrderDirection
    where: StakingUser_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [StakingUser!]!
  c42161_stakingAPRInfo(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): StakingAPRInfo
  c42161_stakingAPRInfos(
    skip: Int = 0
    first: Int = 100
    orderBy: StakingAPRInfo_orderBy
    orderDirection: OrderDirection
    where: StakingAPRInfo_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [StakingAPRInfo!]!
  c42161_affiliateUser(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AffiliateUser
  c42161_affiliateUsers(
    skip: Int = 0
    first: Int = 100
    orderBy: AffiliateUser_orderBy
    orderDirection: OrderDirection
    where: AffiliateUser_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AffiliateUser!]!
  c42161_affiliateActivity(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AffiliateActivity
  c42161_affiliateActivities(
    skip: Int = 0
    first: Int = 100
    orderBy: AffiliateActivity_orderBy
    orderDirection: OrderDirection
    where: AffiliateActivity_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AffiliateActivity!]!
  """Access to subgraph metadata"""
  c42161__meta(block: Block_height): _Meta_
}

type TVLChange {
  id: ID!
  ltoken: LToken!
  timestamp: BigInt!
  amount: BigDecimal!
}

input TVLChange_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  ltoken: String
  ltoken_not: String
  ltoken_gt: String
  ltoken_lt: String
  ltoken_gte: String
  ltoken_lte: String
  ltoken_in: [String!]
  ltoken_not_in: [String!]
  ltoken_contains: String
  ltoken_contains_nocase: String
  ltoken_not_contains: String
  ltoken_not_contains_nocase: String
  ltoken_starts_with: String
  ltoken_starts_with_nocase: String
  ltoken_not_starts_with: String
  ltoken_not_starts_with_nocase: String
  ltoken_ends_with: String
  ltoken_ends_with_nocase: String
  ltoken_not_ends_with: String
  ltoken_not_ends_with_nocase: String
  ltoken_: LToken_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  amount: BigDecimal
  amount_not: BigDecimal
  amount_gt: BigDecimal
  amount_lt: BigDecimal
  amount_gte: BigDecimal
  amount_lte: BigDecimal
  amount_in: [BigDecimal!]
  amount_not_in: [BigDecimal!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TVLChange_filter]
  or: [TVLChange_filter]
}

enum TVLChange_orderBy {
  id
  ltoken
  ltoken__id
  ltoken__symbol
  ltoken__decimals
  ltoken__totalMintedRewards
  timestamp
  amount
}

"""
A string representation of microseconds UNIX timestamp (16 digits)

"""
scalar Timestamp

type _Block_ {
  """The hash of the block"""
  hash: Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
  """The hash of the parent block"""
  parentHash: Bytes
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}