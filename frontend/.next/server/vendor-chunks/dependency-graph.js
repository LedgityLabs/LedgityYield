/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/dependency-graph";
exports.ids = ["vendor-chunks/dependency-graph"];
exports.modules = {

/***/ "(ssr)/../node_modules/dependency-graph/lib/dep_graph.js":
/*!*********************************************************!*\
  !*** ../node_modules/dependency-graph/lib/dep_graph.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/**\n * A simple dependency graph\n */\n\n/**\n * Helper for creating a Topological Sort using Depth-First-Search on a set of edges.\n *\n * Detects cycles and throws an Error if one is detected (unless the \"circular\"\n * parameter is \"true\" in which case it ignores them).\n *\n * @param edges The set of edges to DFS through\n * @param leavesOnly Whether to only return \"leaf\" nodes (ones who have no edges)\n * @param result An array in which the results will be populated\n * @param circular A boolean to allow circular dependencies\n */\nfunction createDFS(edges, leavesOnly, result, circular) {\n  var visited = {};\n  return function (start) {\n    if (visited[start]) {\n      return;\n    }\n    var inCurrentPath = {};\n    var currentPath = [];\n    var todo = []; // used as a stack\n    todo.push({ node: start, processed: false });\n    while (todo.length > 0) {\n      var current = todo[todo.length - 1]; // peek at the todo stack\n      var processed = current.processed;\n      var node = current.node;\n      if (!processed) {\n        // Haven't visited edges yet (visiting phase)\n        if (visited[node]) {\n          todo.pop();\n          continue;\n        } else if (inCurrentPath[node]) {\n          // It's not a DAG\n          if (circular) {\n            todo.pop();\n            // If we're tolerating cycles, don't revisit the node\n            continue;\n          }\n          currentPath.push(node);\n          throw new DepGraphCycleError(currentPath);\n        }\n\n        inCurrentPath[node] = true;\n        currentPath.push(node);\n        var nodeEdges = edges[node];\n        // (push edges onto the todo stack in reverse order to be order-compatible with the old DFS implementation)\n        for (var i = nodeEdges.length - 1; i >= 0; i--) {\n          todo.push({ node: nodeEdges[i], processed: false });\n        }\n        current.processed = true;\n      } else {\n        // Have visited edges (stack unrolling phase)\n        todo.pop();\n        currentPath.pop();\n        inCurrentPath[node] = false;\n        visited[node] = true;\n        if (!leavesOnly || edges[node].length === 0) {\n          result.push(node);\n        }\n      }\n    }\n  };\n}\n\n/**\n * Simple Dependency Graph\n */\nvar DepGraph = (exports.DepGraph = function DepGraph(opts) {\n  this.nodes = {}; // Node -> Node/Data (treated like a Set)\n  this.outgoingEdges = {}; // Node -> [Dependency Node]\n  this.incomingEdges = {}; // Node -> [Dependant Node]\n  this.circular = opts && !!opts.circular; // Allows circular deps\n});\nDepGraph.prototype = {\n  /**\n   * The number of nodes in the graph.\n   */\n  size: function () {\n    return Object.keys(this.nodes).length;\n  },\n  /**\n   * Add a node to the dependency graph. If a node already exists, this method will do nothing.\n   */\n  addNode: function (node, data) {\n    if (!this.hasNode(node)) {\n      // Checking the arguments length allows the user to add a node with undefined data\n      if (arguments.length === 2) {\n        this.nodes[node] = data;\n      } else {\n        this.nodes[node] = node;\n      }\n      this.outgoingEdges[node] = [];\n      this.incomingEdges[node] = [];\n    }\n  },\n  /**\n   * Remove a node from the dependency graph. If a node does not exist, this method will do nothing.\n   */\n  removeNode: function (node) {\n    if (this.hasNode(node)) {\n      delete this.nodes[node];\n      delete this.outgoingEdges[node];\n      delete this.incomingEdges[node];\n      [this.incomingEdges, this.outgoingEdges].forEach(function (edgeList) {\n        Object.keys(edgeList).forEach(function (key) {\n          var idx = edgeList[key].indexOf(node);\n          if (idx >= 0) {\n            edgeList[key].splice(idx, 1);\n          }\n        }, this);\n      });\n    }\n  },\n  /**\n   * Check if a node exists in the graph\n   */\n  hasNode: function (node) {\n    return this.nodes.hasOwnProperty(node);\n  },\n  /**\n   * Get the data associated with a node name\n   */\n  getNodeData: function (node) {\n    if (this.hasNode(node)) {\n      return this.nodes[node];\n    } else {\n      throw new Error(\"Node does not exist: \" + node);\n    }\n  },\n  /**\n   * Set the associated data for a given node name. If the node does not exist, this method will throw an error\n   */\n  setNodeData: function (node, data) {\n    if (this.hasNode(node)) {\n      this.nodes[node] = data;\n    } else {\n      throw new Error(\"Node does not exist: \" + node);\n    }\n  },\n  /**\n   * Add a dependency between two nodes. If either of the nodes does not exist,\n   * an Error will be thrown.\n   */\n  addDependency: function (from, to) {\n    if (!this.hasNode(from)) {\n      throw new Error(\"Node does not exist: \" + from);\n    }\n    if (!this.hasNode(to)) {\n      throw new Error(\"Node does not exist: \" + to);\n    }\n    if (this.outgoingEdges[from].indexOf(to) === -1) {\n      this.outgoingEdges[from].push(to);\n    }\n    if (this.incomingEdges[to].indexOf(from) === -1) {\n      this.incomingEdges[to].push(from);\n    }\n    return true;\n  },\n  /**\n   * Remove a dependency between two nodes.\n   */\n  removeDependency: function (from, to) {\n    var idx;\n    if (this.hasNode(from)) {\n      idx = this.outgoingEdges[from].indexOf(to);\n      if (idx >= 0) {\n        this.outgoingEdges[from].splice(idx, 1);\n      }\n    }\n\n    if (this.hasNode(to)) {\n      idx = this.incomingEdges[to].indexOf(from);\n      if (idx >= 0) {\n        this.incomingEdges[to].splice(idx, 1);\n      }\n    }\n  },\n  /**\n   * Return a clone of the dependency graph. If any custom data is attached\n   * to the nodes, it will only be shallow copied.\n   */\n  clone: function () {\n    var source = this;\n    var result = new DepGraph();\n    var keys = Object.keys(source.nodes);\n    keys.forEach(function (n) {\n      result.nodes[n] = source.nodes[n];\n      result.outgoingEdges[n] = source.outgoingEdges[n].slice(0);\n      result.incomingEdges[n] = source.incomingEdges[n].slice(0);\n    });\n    return result;\n  },\n  /**\n   * Get an array containing the direct dependencies of the specified node.\n   *\n   * Throws an Error if the specified node does not exist.\n   */\n  directDependenciesOf: function (node) {\n    if (this.hasNode(node)) {\n      return this.outgoingEdges[node].slice(0);\n    } else {\n      throw new Error(\"Node does not exist: \" + node);\n    }\n  },\n  /**\n   * Get an array containing the nodes that directly depend on the specified node.\n   *\n   * Throws an Error if the specified node does not exist.\n   */\n  directDependantsOf: function (node) {\n    if (this.hasNode(node)) {\n      return this.incomingEdges[node].slice(0);\n    } else {\n      throw new Error(\"Node does not exist: \" + node);\n    }\n  },\n  /**\n   * Get an array containing the nodes that the specified node depends on (transitively).\n   *\n   * Throws an Error if the graph has a cycle, or the specified node does not exist.\n   *\n   * If `leavesOnly` is true, only nodes that do not depend on any other nodes will be returned\n   * in the array.\n   */\n  dependenciesOf: function (node, leavesOnly) {\n    if (this.hasNode(node)) {\n      var result = [];\n      var DFS = createDFS(\n        this.outgoingEdges,\n        leavesOnly,\n        result,\n        this.circular\n      );\n      DFS(node);\n      var idx = result.indexOf(node);\n      if (idx >= 0) {\n        result.splice(idx, 1);\n      }\n      return result;\n    } else {\n      throw new Error(\"Node does not exist: \" + node);\n    }\n  },\n  /**\n   * get an array containing the nodes that depend on the specified node (transitively).\n   *\n   * Throws an Error if the graph has a cycle, or the specified node does not exist.\n   *\n   * If `leavesOnly` is true, only nodes that do not have any dependants will be returned in the array.\n   */\n  dependantsOf: function (node, leavesOnly) {\n    if (this.hasNode(node)) {\n      var result = [];\n      var DFS = createDFS(\n        this.incomingEdges,\n        leavesOnly,\n        result,\n        this.circular\n      );\n      DFS(node);\n      var idx = result.indexOf(node);\n      if (idx >= 0) {\n        result.splice(idx, 1);\n      }\n      return result;\n    } else {\n      throw new Error(\"Node does not exist: \" + node);\n    }\n  },\n  /**\n   * Construct the overall processing order for the dependency graph.\n   *\n   * Throws an Error if the graph has a cycle.\n   *\n   * If `leavesOnly` is true, only nodes that do not depend on any other nodes will be returned.\n   */\n  overallOrder: function (leavesOnly) {\n    var self = this;\n    var result = [];\n    var keys = Object.keys(this.nodes);\n    if (keys.length === 0) {\n      return result; // Empty graph\n    } else {\n      if (!this.circular) {\n        // Look for cycles - we run the DFS starting at all the nodes in case there\n        // are several disconnected subgraphs inside this dependency graph.\n        var CycleDFS = createDFS(this.outgoingEdges, false, [], this.circular);\n        keys.forEach(function (n) {\n          CycleDFS(n);\n        });\n      }\n\n      var DFS = createDFS(\n        this.outgoingEdges,\n        leavesOnly,\n        result,\n        this.circular\n      );\n      // Find all potential starting points (nodes with nothing depending on them) an\n      // run a DFS starting at these points to get the order\n      keys\n        .filter(function (node) {\n          return self.incomingEdges[node].length === 0;\n        })\n        .forEach(function (n) {\n          DFS(n);\n        });\n\n      // If we're allowing cycles - we need to run the DFS against any remaining\n      // nodes that did not end up in the initial result (as they are part of a\n      // subgraph that does not have a clear starting point)\n      if (this.circular) {\n        keys\n          .filter(function (node) {\n            return result.indexOf(node) === -1;\n          })\n          .forEach(function (n) {\n            DFS(n);\n          });\n      }\n\n      return result;\n    }\n  },\n  /**\n   * Get an array of nodes that have no dependants (i.e. nothing depends on them).\n   */\n  entryNodes: function () {\n    var self = this;\n    return Object.keys(this.nodes).filter(function (node) {\n      return self.incomingEdges[node].length === 0;\n    });\n  }\n};\n\n// Create some aliases\nDepGraph.prototype.directDependentsOf = DepGraph.prototype.directDependantsOf;\nDepGraph.prototype.dependentsOf = DepGraph.prototype.dependantsOf;\n\n/**\n * Cycle error, including the path of the cycle.\n */\nvar DepGraphCycleError = (exports.DepGraphCycleError = function (cyclePath) {\n  var message = \"Dependency Cycle Found: \" + cyclePath.join(\" -> \");\n  var instance = new Error(message);\n  instance.cyclePath = cyclePath;\n  Object.setPrototypeOf(instance, Object.getPrototypeOf(this));\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(instance, DepGraphCycleError);\n  }\n  return instance;\n});\nDepGraphCycleError.prototype = Object.create(Error.prototype, {\n  constructor: {\n    value: Error,\n    enumerable: false,\n    writable: true,\n    configurable: true\n  }\n});\nObject.setPrototypeOf(DepGraphCycleError, Error);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/dependency-graph/lib/dep_graph.js\n");

/***/ })

};
;