/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/urlpattern-polyfill";
exports.ids = ["vendor-chunks/urlpattern-polyfill"];
exports.modules = {

/***/ "(ssr)/../node_modules/urlpattern-polyfill/dist/urlpattern.cjs":
/*!***************************************************************!*\
  !*** ../node_modules/urlpattern-polyfill/dist/urlpattern.cjs ***!
  \***************************************************************/
/***/ ((module) => {

"use strict";
eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\n\n// src/url-pattern.ts\nvar url_pattern_exports = {};\n__export(url_pattern_exports, {\n  URLPattern: () => URLPattern\n});\nmodule.exports = __toCommonJS(url_pattern_exports);\n\n// src/path-to-regex-modified.ts\nvar Part = class {\n  constructor(type, name, prefix, value, suffix, modifier) {\n    this.type = 3 /* kFixed */;\n    this.name = \"\";\n    this.prefix = \"\";\n    this.value = \"\";\n    this.suffix = \"\";\n    this.modifier = 3 /* kNone */;\n    this.type = type;\n    this.name = name;\n    this.prefix = prefix;\n    this.value = value;\n    this.suffix = suffix;\n    this.modifier = modifier;\n  }\n  hasCustomName() {\n    return this.name !== \"\" && typeof this.name !== \"number\";\n  }\n};\nvar regexIdentifierStart = /[$_\\p{ID_Start}]/u;\nvar regexIdentifierPart = /[$_\\u200C\\u200D\\p{ID_Continue}]/u;\nvar kFullWildcardRegex = \".*\";\nfunction isASCII(str, extended) {\n  return (extended ? /^[\\x00-\\xFF]*$/ : /^[\\x00-\\x7F]*$/).test(str);\n}\nfunction lexer(str, lenient = false) {\n  const tokens = [];\n  let i = 0;\n  while (i < str.length) {\n    const char = str[i];\n    const ErrorOrInvalid = function(msg) {\n      if (!lenient)\n        throw new TypeError(msg);\n      tokens.push({ type: \"INVALID_CHAR\", index: i, value: str[i++] });\n    };\n    if (char === \"*\") {\n      tokens.push({ type: \"ASTERISK\", index: i, value: str[i++] });\n      continue;\n    }\n    if (char === \"+\" || char === \"?\") {\n      tokens.push({ type: \"OTHER_MODIFIER\", index: i, value: str[i++] });\n      continue;\n    }\n    if (char === \"\\\\\") {\n      tokens.push({ type: \"ESCAPED_CHAR\", index: i++, value: str[i++] });\n      continue;\n    }\n    if (char === \"{\") {\n      tokens.push({ type: \"OPEN\", index: i, value: str[i++] });\n      continue;\n    }\n    if (char === \"}\") {\n      tokens.push({ type: \"CLOSE\", index: i, value: str[i++] });\n      continue;\n    }\n    if (char === \":\") {\n      let name = \"\";\n      let j = i + 1;\n      while (j < str.length) {\n        const code = str.substr(j, 1);\n        if (j === i + 1 && regexIdentifierStart.test(code) || j !== i + 1 && regexIdentifierPart.test(code)) {\n          name += str[j++];\n          continue;\n        }\n        break;\n      }\n      if (!name) {\n        ErrorOrInvalid(`Missing parameter name at ${i}`);\n        continue;\n      }\n      tokens.push({ type: \"NAME\", index: i, value: name });\n      i = j;\n      continue;\n    }\n    if (char === \"(\") {\n      let count = 1;\n      let pattern = \"\";\n      let j = i + 1;\n      let error = false;\n      if (str[j] === \"?\") {\n        ErrorOrInvalid(`Pattern cannot start with \"?\" at ${j}`);\n        continue;\n      }\n      while (j < str.length) {\n        if (!isASCII(str[j], false)) {\n          ErrorOrInvalid(`Invalid character '${str[j]}' at ${j}.`);\n          error = true;\n          break;\n        }\n        if (str[j] === \"\\\\\") {\n          pattern += str[j++] + str[j++];\n          continue;\n        }\n        if (str[j] === \")\") {\n          count--;\n          if (count === 0) {\n            j++;\n            break;\n          }\n        } else if (str[j] === \"(\") {\n          count++;\n          if (str[j + 1] !== \"?\") {\n            ErrorOrInvalid(`Capturing groups are not allowed at ${j}`);\n            error = true;\n            break;\n          }\n        }\n        pattern += str[j++];\n      }\n      if (error) {\n        continue;\n      }\n      if (count) {\n        ErrorOrInvalid(`Unbalanced pattern at ${i}`);\n        continue;\n      }\n      if (!pattern) {\n        ErrorOrInvalid(`Missing pattern at ${i}`);\n        continue;\n      }\n      tokens.push({ type: \"REGEX\", index: i, value: pattern });\n      i = j;\n      continue;\n    }\n    tokens.push({ type: \"CHAR\", index: i, value: str[i++] });\n  }\n  tokens.push({ type: \"END\", index: i, value: \"\" });\n  return tokens;\n}\nfunction parse(str, options = {}) {\n  const tokens = lexer(str);\n  options.delimiter ?? (options.delimiter = \"/#?\");\n  options.prefixes ?? (options.prefixes = \"./\");\n  const segmentWildcardRegex = `[^${escapeString(options.delimiter)}]+?`;\n  const result = [];\n  let key = 0;\n  let i = 0;\n  let path = \"\";\n  let nameSet = /* @__PURE__ */ new Set();\n  const tryConsume = (type) => {\n    if (i < tokens.length && tokens[i].type === type)\n      return tokens[i++].value;\n  };\n  const tryConsumeModifier = () => {\n    return tryConsume(\"OTHER_MODIFIER\") ?? tryConsume(\"ASTERISK\");\n  };\n  const mustConsume = (type) => {\n    const value = tryConsume(type);\n    if (value !== void 0)\n      return value;\n    const { type: nextType, index } = tokens[i];\n    throw new TypeError(`Unexpected ${nextType} at ${index}, expected ${type}`);\n  };\n  const consumeText = () => {\n    let result2 = \"\";\n    let value;\n    while (value = tryConsume(\"CHAR\") ?? tryConsume(\"ESCAPED_CHAR\")) {\n      result2 += value;\n    }\n    return result2;\n  };\n  const DefaultEncodePart = (value) => {\n    return value;\n  };\n  const encodePart = options.encodePart || DefaultEncodePart;\n  let pendingFixedValue = \"\";\n  const appendToPendingFixedValue = (value) => {\n    pendingFixedValue += value;\n  };\n  const maybeAddPartFromPendingFixedValue = () => {\n    if (!pendingFixedValue.length) {\n      return;\n    }\n    result.push(new Part(3 /* kFixed */, \"\", \"\", encodePart(pendingFixedValue), \"\", 3 /* kNone */));\n    pendingFixedValue = \"\";\n  };\n  const addPart = (prefix, nameToken, regexOrWildcardToken, suffix, modifierToken) => {\n    let modifier = 3 /* kNone */;\n    switch (modifierToken) {\n      case \"?\":\n        modifier = 1 /* kOptional */;\n        break;\n      case \"*\":\n        modifier = 0 /* kZeroOrMore */;\n        break;\n      case \"+\":\n        modifier = 2 /* kOneOrMore */;\n        break;\n    }\n    if (!nameToken && !regexOrWildcardToken && modifier === 3 /* kNone */) {\n      appendToPendingFixedValue(prefix);\n      return;\n    }\n    maybeAddPartFromPendingFixedValue();\n    if (!nameToken && !regexOrWildcardToken) {\n      if (!prefix) {\n        return;\n      }\n      result.push(new Part(3 /* kFixed */, \"\", \"\", encodePart(prefix), \"\", modifier));\n      return;\n    }\n    let regexValue;\n    if (!regexOrWildcardToken) {\n      regexValue = segmentWildcardRegex;\n    } else if (regexOrWildcardToken === \"*\") {\n      regexValue = kFullWildcardRegex;\n    } else {\n      regexValue = regexOrWildcardToken;\n    }\n    let type = 2 /* kRegex */;\n    if (regexValue === segmentWildcardRegex) {\n      type = 1 /* kSegmentWildcard */;\n      regexValue = \"\";\n    } else if (regexValue === kFullWildcardRegex) {\n      type = 0 /* kFullWildcard */;\n      regexValue = \"\";\n    }\n    let name;\n    if (nameToken) {\n      name = nameToken;\n    } else if (regexOrWildcardToken) {\n      name = key++;\n    }\n    if (nameSet.has(name)) {\n      throw new TypeError(`Duplicate name '${name}'.`);\n    }\n    nameSet.add(name);\n    result.push(new Part(type, name, encodePart(prefix), regexValue, encodePart(suffix), modifier));\n  };\n  while (i < tokens.length) {\n    const charToken = tryConsume(\"CHAR\");\n    const nameToken = tryConsume(\"NAME\");\n    let regexOrWildcardToken = tryConsume(\"REGEX\");\n    if (!nameToken && !regexOrWildcardToken) {\n      regexOrWildcardToken = tryConsume(\"ASTERISK\");\n    }\n    if (nameToken || regexOrWildcardToken) {\n      let prefix = charToken ?? \"\";\n      if (options.prefixes.indexOf(prefix) === -1) {\n        appendToPendingFixedValue(prefix);\n        prefix = \"\";\n      }\n      maybeAddPartFromPendingFixedValue();\n      let modifierToken = tryConsumeModifier();\n      addPart(prefix, nameToken, regexOrWildcardToken, \"\", modifierToken);\n      continue;\n    }\n    const value = charToken ?? tryConsume(\"ESCAPED_CHAR\");\n    if (value) {\n      appendToPendingFixedValue(value);\n      continue;\n    }\n    const openToken = tryConsume(\"OPEN\");\n    if (openToken) {\n      const prefix = consumeText();\n      const nameToken2 = tryConsume(\"NAME\");\n      let regexOrWildcardToken2 = tryConsume(\"REGEX\");\n      if (!nameToken2 && !regexOrWildcardToken2) {\n        regexOrWildcardToken2 = tryConsume(\"ASTERISK\");\n      }\n      const suffix = consumeText();\n      mustConsume(\"CLOSE\");\n      const modifierToken = tryConsumeModifier();\n      addPart(prefix, nameToken2, regexOrWildcardToken2, suffix, modifierToken);\n      continue;\n    }\n    maybeAddPartFromPendingFixedValue();\n    mustConsume(\"END\");\n  }\n  return result;\n}\nfunction escapeString(str) {\n  return str.replace(/([.+*?^${}()[\\]|/\\\\])/g, \"\\\\$1\");\n}\nfunction flags(options) {\n  return options && options.ignoreCase ? \"ui\" : \"u\";\n}\nfunction stringToRegexp(path, names, options) {\n  return partsToRegexp(parse(path, options), names, options);\n}\nfunction modifierToString(modifier) {\n  switch (modifier) {\n    case 0 /* kZeroOrMore */:\n      return \"*\";\n    case 1 /* kOptional */:\n      return \"?\";\n    case 2 /* kOneOrMore */:\n      return \"+\";\n    case 3 /* kNone */:\n      return \"\";\n  }\n}\nfunction partsToRegexp(parts, names, options = {}) {\n  options.delimiter ?? (options.delimiter = \"/#?\");\n  options.prefixes ?? (options.prefixes = \"./\");\n  options.sensitive ?? (options.sensitive = false);\n  options.strict ?? (options.strict = false);\n  options.end ?? (options.end = true);\n  options.start ?? (options.start = true);\n  options.endsWith = \"\";\n  let result = options.start ? \"^\" : \"\";\n  for (const part of parts) {\n    if (part.type === 3 /* kFixed */) {\n      if (part.modifier === 3 /* kNone */) {\n        result += escapeString(part.value);\n      } else {\n        result += `(?:${escapeString(part.value)})${modifierToString(part.modifier)}`;\n      }\n      continue;\n    }\n    if (names)\n      names.push(part.name);\n    const segmentWildcardRegex = `[^${escapeString(options.delimiter)}]+?`;\n    let regexValue = part.value;\n    if (part.type === 1 /* kSegmentWildcard */)\n      regexValue = segmentWildcardRegex;\n    else if (part.type === 0 /* kFullWildcard */)\n      regexValue = kFullWildcardRegex;\n    if (!part.prefix.length && !part.suffix.length) {\n      if (part.modifier === 3 /* kNone */ || part.modifier === 1 /* kOptional */) {\n        result += `(${regexValue})${modifierToString(part.modifier)}`;\n      } else {\n        result += `((?:${regexValue})${modifierToString(part.modifier)})`;\n      }\n      continue;\n    }\n    if (part.modifier === 3 /* kNone */ || part.modifier === 1 /* kOptional */) {\n      result += `(?:${escapeString(part.prefix)}(${regexValue})${escapeString(part.suffix)})`;\n      result += modifierToString(part.modifier);\n      continue;\n    }\n    result += `(?:${escapeString(part.prefix)}`;\n    result += `((?:${regexValue})(?:`;\n    result += escapeString(part.suffix);\n    result += escapeString(part.prefix);\n    result += `(?:${regexValue}))*)${escapeString(part.suffix)})`;\n    if (part.modifier === 0 /* kZeroOrMore */) {\n      result += \"?\";\n    }\n  }\n  const endsWith = `[${escapeString(options.endsWith)}]|$`;\n  const delimiter = `[${escapeString(options.delimiter)}]`;\n  if (options.end) {\n    if (!options.strict) {\n      result += `${delimiter}?`;\n    }\n    if (!options.endsWith.length) {\n      result += \"$\";\n    } else {\n      result += `(?=${endsWith})`;\n    }\n    return new RegExp(result, flags(options));\n  }\n  if (!options.strict) {\n    result += `(?:${delimiter}(?=${endsWith}))?`;\n  }\n  let isEndDelimited = false;\n  if (parts.length) {\n    const lastPart = parts[parts.length - 1];\n    if (lastPart.type === 3 /* kFixed */ && lastPart.modifier === 3 /* kNone */) {\n      isEndDelimited = options.delimiter.indexOf(lastPart) > -1;\n    }\n  }\n  if (!isEndDelimited) {\n    result += `(?=${delimiter}|${endsWith})`;\n  }\n  return new RegExp(result, flags(options));\n}\n\n// src/url-utils.ts\nvar DEFAULT_OPTIONS = {\n  delimiter: \"\",\n  prefixes: \"\",\n  sensitive: true,\n  strict: true\n};\nvar HOSTNAME_OPTIONS = {\n  delimiter: \".\",\n  prefixes: \"\",\n  sensitive: true,\n  strict: true\n};\nvar PATHNAME_OPTIONS = {\n  delimiter: \"/\",\n  prefixes: \"/\",\n  sensitive: true,\n  strict: true\n};\nfunction isAbsolutePathname(pathname, isPattern) {\n  if (!pathname.length) {\n    return false;\n  }\n  if (pathname[0] === \"/\") {\n    return true;\n  }\n  if (!isPattern) {\n    return false;\n  }\n  if (pathname.length < 2) {\n    return false;\n  }\n  if ((pathname[0] == \"\\\\\" || pathname[0] == \"{\") && pathname[1] == \"/\") {\n    return true;\n  }\n  return false;\n}\nfunction maybeStripPrefix(value, prefix) {\n  if (value.startsWith(prefix)) {\n    return value.substring(prefix.length, value.length);\n  }\n  return value;\n}\nfunction maybeStripSuffix(value, suffix) {\n  if (value.endsWith(suffix)) {\n    return value.substr(0, value.length - suffix.length);\n  }\n  return value;\n}\nfunction treatAsIPv6Hostname(value) {\n  if (!value || value.length < 2) {\n    return false;\n  }\n  if (value[0] === \"[\") {\n    return true;\n  }\n  if ((value[0] === \"\\\\\" || value[0] === \"{\") && value[1] === \"[\") {\n    return true;\n  }\n  return false;\n}\nvar SPECIAL_SCHEMES = [\n  \"ftp\",\n  \"file\",\n  \"http\",\n  \"https\",\n  \"ws\",\n  \"wss\"\n];\nfunction isSpecialScheme(protocol_regexp) {\n  if (!protocol_regexp) {\n    return true;\n  }\n  for (const scheme of SPECIAL_SCHEMES) {\n    if (protocol_regexp.test(scheme)) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction canonicalizeHash(hash, isPattern) {\n  hash = maybeStripPrefix(hash, \"#\");\n  if (isPattern || hash === \"\") {\n    return hash;\n  }\n  const url = new URL(\"https://example.com\");\n  url.hash = hash;\n  return url.hash ? url.hash.substring(1, url.hash.length) : \"\";\n}\nfunction canonicalizeSearch(search, isPattern) {\n  search = maybeStripPrefix(search, \"?\");\n  if (isPattern || search === \"\") {\n    return search;\n  }\n  const url = new URL(\"https://example.com\");\n  url.search = search;\n  return url.search ? url.search.substring(1, url.search.length) : \"\";\n}\nfunction canonicalizeHostname(hostname, isPattern) {\n  if (isPattern || hostname === \"\") {\n    return hostname;\n  }\n  if (treatAsIPv6Hostname(hostname)) {\n    return ipv6HostnameEncodeCallback(hostname);\n  } else {\n    return hostnameEncodeCallback(hostname);\n  }\n}\nfunction canonicalizePassword(password, isPattern) {\n  if (isPattern || password === \"\") {\n    return password;\n  }\n  const url = new URL(\"https://example.com\");\n  url.password = password;\n  return url.password;\n}\nfunction canonicalizeUsername(username, isPattern) {\n  if (isPattern || username === \"\") {\n    return username;\n  }\n  const url = new URL(\"https://example.com\");\n  url.username = username;\n  return url.username;\n}\nfunction canonicalizePathname(pathname, protocol, isPattern) {\n  if (isPattern || pathname === \"\") {\n    return pathname;\n  }\n  if (protocol && !SPECIAL_SCHEMES.includes(protocol)) {\n    const url = new URL(`${protocol}:${pathname}`);\n    return url.pathname;\n  }\n  const leadingSlash = pathname[0] == \"/\";\n  pathname = new URL(\n    !leadingSlash ? \"/-\" + pathname : pathname,\n    \"https://example.com\"\n  ).pathname;\n  if (!leadingSlash) {\n    pathname = pathname.substring(2, pathname.length);\n  }\n  return pathname;\n}\nfunction canonicalizePort(port, protocol, isPattern) {\n  if (defaultPortForProtocol(protocol) === port) {\n    port = \"\";\n  }\n  if (isPattern || port === \"\") {\n    return port;\n  }\n  return portEncodeCallback(port);\n}\nfunction canonicalizeProtocol(protocol, isPattern) {\n  protocol = maybeStripSuffix(protocol, \":\");\n  if (isPattern || protocol === \"\") {\n    return protocol;\n  }\n  return protocolEncodeCallback(protocol);\n}\nfunction defaultPortForProtocol(protocol) {\n  switch (protocol) {\n    case \"ws\":\n    case \"http\":\n      return \"80\";\n    case \"wws\":\n    case \"https\":\n      return \"443\";\n    case \"ftp\":\n      return \"21\";\n    default:\n      return \"\";\n  }\n}\nfunction protocolEncodeCallback(input) {\n  if (input === \"\") {\n    return input;\n  }\n  if (/^[-+.A-Za-z0-9]*$/.test(input))\n    return input.toLowerCase();\n  throw new TypeError(`Invalid protocol '${input}'.`);\n}\nfunction usernameEncodeCallback(input) {\n  if (input === \"\") {\n    return input;\n  }\n  const url = new URL(\"https://example.com\");\n  url.username = input;\n  return url.username;\n}\nfunction passwordEncodeCallback(input) {\n  if (input === \"\") {\n    return input;\n  }\n  const url = new URL(\"https://example.com\");\n  url.password = input;\n  return url.password;\n}\nfunction hostnameEncodeCallback(input) {\n  if (input === \"\") {\n    return input;\n  }\n  if (/[\\t\\n\\r #%/:<>?@[\\]^\\\\|]/g.test(input)) {\n    throw new TypeError(`Invalid hostname '${input}'`);\n  }\n  const url = new URL(\"https://example.com\");\n  url.hostname = input;\n  return url.hostname;\n}\nfunction ipv6HostnameEncodeCallback(input) {\n  if (input === \"\") {\n    return input;\n  }\n  if (/[^0-9a-fA-F[\\]:]/g.test(input)) {\n    throw new TypeError(`Invalid IPv6 hostname '${input}'`);\n  }\n  return input.toLowerCase();\n}\nfunction portEncodeCallback(input) {\n  if (input === \"\") {\n    return input;\n  }\n  if (/^[0-9]*$/.test(input) && parseInt(input) <= 65535) {\n    return input;\n  }\n  throw new TypeError(`Invalid port '${input}'.`);\n}\nfunction standardURLPathnameEncodeCallback(input) {\n  if (input === \"\") {\n    return input;\n  }\n  const url = new URL(\"https://example.com\");\n  url.pathname = input[0] !== \"/\" ? \"/-\" + input : input;\n  if (input[0] !== \"/\") {\n    return url.pathname.substring(2, url.pathname.length);\n  }\n  return url.pathname;\n}\nfunction pathURLPathnameEncodeCallback(input) {\n  if (input === \"\") {\n    return input;\n  }\n  const url = new URL(`data:${input}`);\n  return url.pathname;\n}\nfunction searchEncodeCallback(input) {\n  if (input === \"\") {\n    return input;\n  }\n  const url = new URL(\"https://example.com\");\n  url.search = input;\n  return url.search.substring(1, url.search.length);\n}\nfunction hashEncodeCallback(input) {\n  if (input === \"\") {\n    return input;\n  }\n  const url = new URL(\"https://example.com\");\n  url.hash = input;\n  return url.hash.substring(1, url.hash.length);\n}\n\n// src/url-pattern-parser.ts\nvar Parser = class {\n  constructor(input) {\n    // The list of `LexToken`s produced by the path-to-regexp `lexer()` function\n    // when passed `input` with lenient mode enabled.\n    this.tokenList = [];\n    // As we parse the input string we populate a `URLPatternInit` dictionary\n    // with each component pattern.  This is then the final result of the parse.\n    this.internalResult = {};\n    // The index of the current `LexToken` being considered.\n    this.tokenIndex = 0;\n    // The value to add to `tokenIndex` on each turn through the parse loop.\n    // While typically this is `1`, it is also set to `0` at times for things\n    // like state transitions, etc.  It is automatically reset back to `1` at\n    // the top of the parse loop.\n    this.tokenIncrement = 1;\n    // The index of the first `LexToken` to include in the component string.\n    this.componentStart = 0;\n    // The current parse state.  This should only be changed via `changeState()`\n    // or `rewindAndSetState()`.\n    this.state = 0 /* INIT */;\n    // The current nest depth of `{ }` pattern groupings.\n    this.groupDepth = 0;\n    // The current nesting depth of `[ ]` in hostname patterns.\n    this.hostnameIPv6BracketDepth = 0;\n    // True if we should apply parse rules as if this is a \"standard\" URL.  If\n    // false then this is treated as a \"not a base URL\".\n    this.shouldTreatAsStandardURL = false;\n    this.input = input;\n  }\n  // Return the parse result.  The result is only available after the\n  // `parse()` method completes.\n  get result() {\n    return this.internalResult;\n  }\n  // Attempt to parse the input string used to construct the Parser object.\n  // This method may only be called once.  Any errors will be thrown as an\n  // exception.  Retrieve the parse result by accessing the `Parser.result`\n  // property getter.\n  parse() {\n    this.tokenList = lexer(\n      this.input,\n      /*lenient=*/\n      true\n    );\n    for (; this.tokenIndex < this.tokenList.length; this.tokenIndex += this.tokenIncrement) {\n      this.tokenIncrement = 1;\n      if (this.tokenList[this.tokenIndex].type === \"END\") {\n        if (this.state === 0 /* INIT */) {\n          this.rewind();\n          if (this.isHashPrefix()) {\n            this.changeState(\n              9 /* HASH */,\n              /*skip=*/\n              1\n            );\n          } else if (this.isSearchPrefix()) {\n            this.changeState(\n              8 /* SEARCH */,\n              /*skip=*/\n              1\n            );\n            this.internalResult.hash = \"\";\n          } else {\n            this.changeState(\n              7 /* PATHNAME */,\n              /*skip=*/\n              0\n            );\n            this.internalResult.search = \"\";\n            this.internalResult.hash = \"\";\n          }\n          continue;\n        } else if (this.state === 2 /* AUTHORITY */) {\n          this.rewindAndSetState(5 /* HOSTNAME */);\n          continue;\n        }\n        this.changeState(\n          10 /* DONE */,\n          /*skip=*/\n          0\n        );\n        break;\n      }\n      if (this.groupDepth > 0) {\n        if (this.isGroupClose()) {\n          this.groupDepth -= 1;\n        } else {\n          continue;\n        }\n      }\n      if (this.isGroupOpen()) {\n        this.groupDepth += 1;\n        continue;\n      }\n      switch (this.state) {\n        case 0 /* INIT */:\n          if (this.isProtocolSuffix()) {\n            this.internalResult.username = \"\";\n            this.internalResult.password = \"\";\n            this.internalResult.hostname = \"\";\n            this.internalResult.port = \"\";\n            this.internalResult.pathname = \"\";\n            this.internalResult.search = \"\";\n            this.internalResult.hash = \"\";\n            this.rewindAndSetState(1 /* PROTOCOL */);\n          }\n          break;\n        case 1 /* PROTOCOL */:\n          if (this.isProtocolSuffix()) {\n            this.computeShouldTreatAsStandardURL();\n            let nextState = 7 /* PATHNAME */;\n            let skip = 1;\n            if (this.shouldTreatAsStandardURL) {\n              this.internalResult.pathname = \"/\";\n            }\n            if (this.nextIsAuthoritySlashes()) {\n              nextState = 2 /* AUTHORITY */;\n              skip = 3;\n            } else if (this.shouldTreatAsStandardURL) {\n              nextState = 2 /* AUTHORITY */;\n            }\n            this.changeState(nextState, skip);\n          }\n          break;\n        case 2 /* AUTHORITY */:\n          if (this.isIdentityTerminator()) {\n            this.rewindAndSetState(3 /* USERNAME */);\n          } else if (this.isPathnameStart() || this.isSearchPrefix() || this.isHashPrefix()) {\n            this.rewindAndSetState(5 /* HOSTNAME */);\n          }\n          break;\n        case 3 /* USERNAME */:\n          if (this.isPasswordPrefix()) {\n            this.changeState(\n              4 /* PASSWORD */,\n              /*skip=*/\n              1\n            );\n          } else if (this.isIdentityTerminator()) {\n            this.changeState(\n              5 /* HOSTNAME */,\n              /*skip=*/\n              1\n            );\n          }\n          break;\n        case 4 /* PASSWORD */:\n          if (this.isIdentityTerminator()) {\n            this.changeState(\n              5 /* HOSTNAME */,\n              /*skip=*/\n              1\n            );\n          }\n          break;\n        case 5 /* HOSTNAME */:\n          if (this.isIPv6Open()) {\n            this.hostnameIPv6BracketDepth += 1;\n          } else if (this.isIPv6Close()) {\n            this.hostnameIPv6BracketDepth -= 1;\n          }\n          if (this.isPortPrefix() && !this.hostnameIPv6BracketDepth) {\n            this.changeState(\n              6 /* PORT */,\n              /*skip=*/\n              1\n            );\n          } else if (this.isPathnameStart()) {\n            this.changeState(\n              7 /* PATHNAME */,\n              /*skip=*/\n              0\n            );\n          } else if (this.isSearchPrefix()) {\n            this.changeState(\n              8 /* SEARCH */,\n              /*skip=*/\n              1\n            );\n          } else if (this.isHashPrefix()) {\n            this.changeState(\n              9 /* HASH */,\n              /*skip=*/\n              1\n            );\n          }\n          break;\n        case 6 /* PORT */:\n          if (this.isPathnameStart()) {\n            this.changeState(\n              7 /* PATHNAME */,\n              /*skip=*/\n              0\n            );\n          } else if (this.isSearchPrefix()) {\n            this.changeState(\n              8 /* SEARCH */,\n              /*skip=*/\n              1\n            );\n          } else if (this.isHashPrefix()) {\n            this.changeState(\n              9 /* HASH */,\n              /*skip=*/\n              1\n            );\n          }\n          break;\n        case 7 /* PATHNAME */:\n          if (this.isSearchPrefix()) {\n            this.changeState(\n              8 /* SEARCH */,\n              /*skip=*/\n              1\n            );\n          } else if (this.isHashPrefix()) {\n            this.changeState(\n              9 /* HASH */,\n              /*skip=*/\n              1\n            );\n          }\n          break;\n        case 8 /* SEARCH */:\n          if (this.isHashPrefix()) {\n            this.changeState(\n              9 /* HASH */,\n              /*skip=*/\n              1\n            );\n          }\n          break;\n        case 9 /* HASH */:\n          break;\n        case 10 /* DONE */:\n          break;\n      }\n    }\n  }\n  changeState(newState, skip) {\n    switch (this.state) {\n      case 0 /* INIT */:\n        break;\n      case 1 /* PROTOCOL */:\n        this.internalResult.protocol = this.makeComponentString();\n        break;\n      case 2 /* AUTHORITY */:\n        break;\n      case 3 /* USERNAME */:\n        this.internalResult.username = this.makeComponentString();\n        break;\n      case 4 /* PASSWORD */:\n        this.internalResult.password = this.makeComponentString();\n        break;\n      case 5 /* HOSTNAME */:\n        this.internalResult.hostname = this.makeComponentString();\n        break;\n      case 6 /* PORT */:\n        this.internalResult.port = this.makeComponentString();\n        break;\n      case 7 /* PATHNAME */:\n        this.internalResult.pathname = this.makeComponentString();\n        break;\n      case 8 /* SEARCH */:\n        this.internalResult.search = this.makeComponentString();\n        break;\n      case 9 /* HASH */:\n        this.internalResult.hash = this.makeComponentString();\n        break;\n      case 10 /* DONE */:\n        break;\n    }\n    this.changeStateWithoutSettingComponent(newState, skip);\n  }\n  changeStateWithoutSettingComponent(newState, skip) {\n    this.state = newState;\n    this.componentStart = this.tokenIndex + skip;\n    this.tokenIndex += skip;\n    this.tokenIncrement = 0;\n  }\n  rewind() {\n    this.tokenIndex = this.componentStart;\n    this.tokenIncrement = 0;\n  }\n  rewindAndSetState(newState) {\n    this.rewind();\n    this.state = newState;\n  }\n  safeToken(index) {\n    if (index < 0) {\n      index = this.tokenList.length - index;\n    }\n    if (index < this.tokenList.length) {\n      return this.tokenList[index];\n    }\n    return this.tokenList[this.tokenList.length - 1];\n  }\n  isNonSpecialPatternChar(index, value) {\n    const token = this.safeToken(index);\n    return token.value === value && (token.type === \"CHAR\" || token.type === \"ESCAPED_CHAR\" || token.type === \"INVALID_CHAR\");\n  }\n  isProtocolSuffix() {\n    return this.isNonSpecialPatternChar(this.tokenIndex, \":\");\n  }\n  nextIsAuthoritySlashes() {\n    return this.isNonSpecialPatternChar(this.tokenIndex + 1, \"/\") && this.isNonSpecialPatternChar(this.tokenIndex + 2, \"/\");\n  }\n  isIdentityTerminator() {\n    return this.isNonSpecialPatternChar(this.tokenIndex, \"@\");\n  }\n  isPasswordPrefix() {\n    return this.isNonSpecialPatternChar(this.tokenIndex, \":\");\n  }\n  isPortPrefix() {\n    return this.isNonSpecialPatternChar(this.tokenIndex, \":\");\n  }\n  isPathnameStart() {\n    return this.isNonSpecialPatternChar(this.tokenIndex, \"/\");\n  }\n  isSearchPrefix() {\n    if (this.isNonSpecialPatternChar(this.tokenIndex, \"?\")) {\n      return true;\n    }\n    if (this.tokenList[this.tokenIndex].value !== \"?\") {\n      return false;\n    }\n    const previousToken = this.safeToken(this.tokenIndex - 1);\n    return previousToken.type !== \"NAME\" && previousToken.type !== \"REGEX\" && previousToken.type !== \"CLOSE\" && previousToken.type !== \"ASTERISK\";\n  }\n  isHashPrefix() {\n    return this.isNonSpecialPatternChar(this.tokenIndex, \"#\");\n  }\n  isGroupOpen() {\n    return this.tokenList[this.tokenIndex].type == \"OPEN\";\n  }\n  isGroupClose() {\n    return this.tokenList[this.tokenIndex].type == \"CLOSE\";\n  }\n  isIPv6Open() {\n    return this.isNonSpecialPatternChar(this.tokenIndex, \"[\");\n  }\n  isIPv6Close() {\n    return this.isNonSpecialPatternChar(this.tokenIndex, \"]\");\n  }\n  makeComponentString() {\n    const token = this.tokenList[this.tokenIndex];\n    const componentCharStart = this.safeToken(this.componentStart).index;\n    return this.input.substring(componentCharStart, token.index);\n  }\n  computeShouldTreatAsStandardURL() {\n    const options = {};\n    Object.assign(options, DEFAULT_OPTIONS);\n    options.encodePart = protocolEncodeCallback;\n    const regexp = stringToRegexp(\n      this.makeComponentString(),\n      /*keys=*/\n      void 0,\n      options\n    );\n    this.shouldTreatAsStandardURL = isSpecialScheme(regexp);\n  }\n};\n\n// src/url-pattern.ts\nvar COMPONENTS = [\n  \"protocol\",\n  \"username\",\n  \"password\",\n  \"hostname\",\n  \"port\",\n  \"pathname\",\n  \"search\",\n  \"hash\"\n];\nvar DEFAULT_PATTERN = \"*\";\nfunction extractValues(url, baseURL) {\n  if (typeof url !== \"string\") {\n    throw new TypeError(`parameter 1 is not of type 'string'.`);\n  }\n  const o = new URL(url, baseURL);\n  return {\n    protocol: o.protocol.substring(0, o.protocol.length - 1),\n    username: o.username,\n    password: o.password,\n    hostname: o.hostname,\n    port: o.port,\n    pathname: o.pathname,\n    search: o.search !== \"\" ? o.search.substring(1, o.search.length) : void 0,\n    hash: o.hash !== \"\" ? o.hash.substring(1, o.hash.length) : void 0\n  };\n}\nfunction processBaseURLString(input, isPattern) {\n  if (!isPattern) {\n    return input;\n  }\n  return escapePatternString(input);\n}\nfunction applyInit(o, init, isPattern) {\n  let baseURL;\n  if (typeof init.baseURL === \"string\") {\n    try {\n      baseURL = new URL(init.baseURL);\n      o.protocol = processBaseURLString(baseURL.protocol.substring(0, baseURL.protocol.length - 1), isPattern);\n      o.username = processBaseURLString(baseURL.username, isPattern);\n      o.password = processBaseURLString(baseURL.password, isPattern);\n      o.hostname = processBaseURLString(baseURL.hostname, isPattern);\n      o.port = processBaseURLString(baseURL.port, isPattern);\n      o.pathname = processBaseURLString(baseURL.pathname, isPattern);\n      o.search = processBaseURLString(baseURL.search.substring(1, baseURL.search.length), isPattern);\n      o.hash = processBaseURLString(baseURL.hash.substring(1, baseURL.hash.length), isPattern);\n    } catch {\n      throw new TypeError(`invalid baseURL '${init.baseURL}'.`);\n    }\n  }\n  if (typeof init.protocol === \"string\") {\n    o.protocol = canonicalizeProtocol(init.protocol, isPattern);\n  }\n  if (typeof init.username === \"string\") {\n    o.username = canonicalizeUsername(init.username, isPattern);\n  }\n  if (typeof init.password === \"string\") {\n    o.password = canonicalizePassword(init.password, isPattern);\n  }\n  if (typeof init.hostname === \"string\") {\n    o.hostname = canonicalizeHostname(init.hostname, isPattern);\n  }\n  if (typeof init.port === \"string\") {\n    o.port = canonicalizePort(init.port, o.protocol, isPattern);\n  }\n  if (typeof init.pathname === \"string\") {\n    o.pathname = init.pathname;\n    if (baseURL && !isAbsolutePathname(o.pathname, isPattern)) {\n      const slashIndex = baseURL.pathname.lastIndexOf(\"/\");\n      if (slashIndex >= 0) {\n        o.pathname = processBaseURLString(baseURL.pathname.substring(0, slashIndex + 1), isPattern) + o.pathname;\n      }\n    }\n    o.pathname = canonicalizePathname(o.pathname, o.protocol, isPattern);\n  }\n  if (typeof init.search === \"string\") {\n    o.search = canonicalizeSearch(init.search, isPattern);\n  }\n  if (typeof init.hash === \"string\") {\n    o.hash = canonicalizeHash(init.hash, isPattern);\n  }\n  return o;\n}\nfunction escapePatternString(value) {\n  return value.replace(/([+*?:{}()\\\\])/g, \"\\\\$1\");\n}\nfunction escapeRegexpString(value) {\n  return value.replace(/([.+*?^${}()[\\]|/\\\\])/g, \"\\\\$1\");\n}\nfunction partsToPattern(parts, options) {\n  options.delimiter ?? (options.delimiter = \"/#?\");\n  options.prefixes ?? (options.prefixes = \"./\");\n  options.sensitive ?? (options.sensitive = false);\n  options.strict ?? (options.strict = false);\n  options.end ?? (options.end = true);\n  options.start ?? (options.start = true);\n  options.endsWith = \"\";\n  const kFullWildcardRegex2 = \".*\";\n  const segmentWildcardRegex = `[^${escapeRegexpString(options.delimiter)}]+?`;\n  const regexIdentifierPart2 = /[$_\\u200C\\u200D\\p{ID_Continue}]/u;\n  let result = \"\";\n  for (let i = 0; i < parts.length; ++i) {\n    const part = parts[i];\n    if (part.type === 3 /* kFixed */) {\n      if (part.modifier === 3 /* kNone */) {\n        result += escapePatternString(part.value);\n        continue;\n      }\n      result += `{${escapePatternString(part.value)}}${modifierToString(part.modifier)}`;\n      continue;\n    }\n    const customName = part.hasCustomName();\n    let needsGrouping = !!part.suffix.length || !!part.prefix.length && (part.prefix.length !== 1 || !options.prefixes.includes(part.prefix));\n    const lastPart = i > 0 ? parts[i - 1] : null;\n    const nextPart = i < parts.length - 1 ? parts[i + 1] : null;\n    if (!needsGrouping && customName && part.type === 1 /* kSegmentWildcard */ && part.modifier === 3 /* kNone */ && nextPart && !nextPart.prefix.length && !nextPart.suffix.length) {\n      if (nextPart.type === 3 /* kFixed */) {\n        const code = nextPart.value.length > 0 ? nextPart.value[0] : \"\";\n        needsGrouping = regexIdentifierPart2.test(code);\n      } else {\n        needsGrouping = !nextPart.hasCustomName();\n      }\n    }\n    if (!needsGrouping && !part.prefix.length && lastPart && lastPart.type === 3 /* kFixed */) {\n      const code = lastPart.value[lastPart.value.length - 1];\n      needsGrouping = options.prefixes.includes(code);\n    }\n    if (needsGrouping) {\n      result += \"{\";\n    }\n    result += escapePatternString(part.prefix);\n    if (customName) {\n      result += `:${part.name}`;\n    }\n    if (part.type === 2 /* kRegex */) {\n      result += `(${part.value})`;\n    } else if (part.type === 1 /* kSegmentWildcard */) {\n      if (!customName) {\n        result += `(${segmentWildcardRegex})`;\n      }\n    } else if (part.type === 0 /* kFullWildcard */) {\n      if (!customName && (!lastPart || lastPart.type === 3 /* kFixed */ || lastPart.modifier !== 3 /* kNone */ || needsGrouping || part.prefix !== \"\")) {\n        result += \"*\";\n      } else {\n        result += `(${kFullWildcardRegex2})`;\n      }\n    }\n    if (part.type === 1 /* kSegmentWildcard */ && customName && !!part.suffix.length) {\n      if (regexIdentifierPart2.test(part.suffix[0])) {\n        result += \"\\\\\";\n      }\n    }\n    result += escapePatternString(part.suffix);\n    if (needsGrouping) {\n      result += \"}\";\n    }\n    if (part.modifier !== 3 /* kNone */) {\n      result += modifierToString(part.modifier);\n    }\n  }\n  return result;\n}\nvar URLPattern = class {\n  constructor(init = {}, baseURLOrOptions, options) {\n    this.regexp = {};\n    this.names = {};\n    this.component_pattern = {};\n    this.parts = {};\n    try {\n      let baseURL = void 0;\n      if (typeof baseURLOrOptions === \"string\") {\n        baseURL = baseURLOrOptions;\n      } else {\n        options = baseURLOrOptions;\n      }\n      if (typeof init === \"string\") {\n        const parser = new Parser(init);\n        parser.parse();\n        init = parser.result;\n        if (baseURL === void 0 && typeof init.protocol !== \"string\") {\n          throw new TypeError(`A base URL must be provided for a relative constructor string.`);\n        }\n        init.baseURL = baseURL;\n      } else {\n        if (!init || typeof init !== \"object\") {\n          throw new TypeError(`parameter 1 is not of type 'string' and cannot convert to dictionary.`);\n        }\n        if (baseURL) {\n          throw new TypeError(`parameter 1 is not of type 'string'.`);\n        }\n      }\n      if (typeof options === \"undefined\") {\n        options = { ignoreCase: false };\n      }\n      const ignoreCaseOptions = { ignoreCase: options.ignoreCase === true };\n      const defaults = {\n        pathname: DEFAULT_PATTERN,\n        protocol: DEFAULT_PATTERN,\n        username: DEFAULT_PATTERN,\n        password: DEFAULT_PATTERN,\n        hostname: DEFAULT_PATTERN,\n        port: DEFAULT_PATTERN,\n        search: DEFAULT_PATTERN,\n        hash: DEFAULT_PATTERN\n      };\n      this.pattern = applyInit(defaults, init, true);\n      if (defaultPortForProtocol(this.pattern.protocol) === this.pattern.port) {\n        this.pattern.port = \"\";\n      }\n      let component;\n      for (component of COMPONENTS) {\n        if (!(component in this.pattern))\n          continue;\n        const options2 = {};\n        const pattern = this.pattern[component];\n        this.names[component] = [];\n        switch (component) {\n          case \"protocol\":\n            Object.assign(options2, DEFAULT_OPTIONS);\n            options2.encodePart = protocolEncodeCallback;\n            break;\n          case \"username\":\n            Object.assign(options2, DEFAULT_OPTIONS);\n            options2.encodePart = usernameEncodeCallback;\n            break;\n          case \"password\":\n            Object.assign(options2, DEFAULT_OPTIONS);\n            options2.encodePart = passwordEncodeCallback;\n            break;\n          case \"hostname\":\n            Object.assign(options2, HOSTNAME_OPTIONS);\n            if (treatAsIPv6Hostname(pattern)) {\n              options2.encodePart = ipv6HostnameEncodeCallback;\n            } else {\n              options2.encodePart = hostnameEncodeCallback;\n            }\n            break;\n          case \"port\":\n            Object.assign(options2, DEFAULT_OPTIONS);\n            options2.encodePart = portEncodeCallback;\n            break;\n          case \"pathname\":\n            if (isSpecialScheme(this.regexp.protocol)) {\n              Object.assign(options2, PATHNAME_OPTIONS, ignoreCaseOptions);\n              options2.encodePart = standardURLPathnameEncodeCallback;\n            } else {\n              Object.assign(options2, DEFAULT_OPTIONS, ignoreCaseOptions);\n              options2.encodePart = pathURLPathnameEncodeCallback;\n            }\n            break;\n          case \"search\":\n            Object.assign(options2, DEFAULT_OPTIONS, ignoreCaseOptions);\n            options2.encodePart = searchEncodeCallback;\n            break;\n          case \"hash\":\n            Object.assign(options2, DEFAULT_OPTIONS, ignoreCaseOptions);\n            options2.encodePart = hashEncodeCallback;\n            break;\n        }\n        try {\n          this.parts[component] = parse(pattern, options2);\n          this.regexp[component] = partsToRegexp(\n            this.parts[component],\n            /* out */\n            this.names[component],\n            options2\n          );\n          this.component_pattern[component] = partsToPattern(this.parts[component], options2);\n        } catch (err) {\n          throw new TypeError(`invalid ${component} pattern '${this.pattern[component]}'.`);\n        }\n      }\n    } catch (err) {\n      throw new TypeError(`Failed to construct 'URLPattern': ${err.message}`);\n    }\n  }\n  test(input = {}, baseURL) {\n    let values = {\n      pathname: \"\",\n      protocol: \"\",\n      username: \"\",\n      password: \"\",\n      hostname: \"\",\n      port: \"\",\n      search: \"\",\n      hash: \"\"\n    };\n    if (typeof input !== \"string\" && baseURL) {\n      throw new TypeError(`parameter 1 is not of type 'string'.`);\n    }\n    if (typeof input === \"undefined\") {\n      return false;\n    }\n    try {\n      if (typeof input === \"object\") {\n        values = applyInit(values, input, false);\n      } else {\n        values = applyInit(values, extractValues(input, baseURL), false);\n      }\n    } catch (err) {\n      return false;\n    }\n    let component;\n    for (component of COMPONENTS) {\n      if (!this.regexp[component].exec(values[component])) {\n        return false;\n      }\n    }\n    return true;\n  }\n  exec(input = {}, baseURL) {\n    let values = {\n      pathname: \"\",\n      protocol: \"\",\n      username: \"\",\n      password: \"\",\n      hostname: \"\",\n      port: \"\",\n      search: \"\",\n      hash: \"\"\n    };\n    if (typeof input !== \"string\" && baseURL) {\n      throw new TypeError(`parameter 1 is not of type 'string'.`);\n    }\n    if (typeof input === \"undefined\") {\n      return;\n    }\n    try {\n      if (typeof input === \"object\") {\n        values = applyInit(values, input, false);\n      } else {\n        values = applyInit(values, extractValues(input, baseURL), false);\n      }\n    } catch (err) {\n      return null;\n    }\n    let result = {};\n    if (baseURL) {\n      result.inputs = [input, baseURL];\n    } else {\n      result.inputs = [input];\n    }\n    let component;\n    for (component of COMPONENTS) {\n      let match = this.regexp[component].exec(values[component]);\n      if (!match) {\n        return null;\n      }\n      let groups = {};\n      for (let [i, name] of this.names[component].entries()) {\n        if (typeof name === \"string\" || typeof name === \"number\") {\n          let value = match[i + 1];\n          groups[name] = value;\n        }\n      }\n      result[component] = {\n        input: values[component] ?? \"\",\n        groups\n      };\n    }\n    return result;\n  }\n  static compareComponent(component, left, right) {\n    const comparePart = (left2, right2) => {\n      for (let attr of [\"type\", \"modifier\", \"prefix\", \"value\", \"suffix\"]) {\n        if (left2[attr] < right2[attr])\n          return -1;\n        else if (left2[attr] === right2[attr])\n          continue;\n        else\n          return 1;\n      }\n      return 0;\n    };\n    const emptyFixedPart = new Part(3 /* kFixed */, \"\", \"\", \"\", \"\", 3 /* kNone */);\n    const wildcardOnlyPart = new Part(0 /* kFullWildcard */, \"\", \"\", \"\", \"\", 3 /* kNone */);\n    const comparePartList = (left2, right2) => {\n      let i = 0;\n      for (; i < Math.min(left2.length, right2.length); ++i) {\n        let result = comparePart(left2[i], right2[i]);\n        if (result)\n          return result;\n      }\n      if (left2.length === right2.length) {\n        return 0;\n      }\n      return comparePart(left2[i] ?? emptyFixedPart, right2[i] ?? emptyFixedPart);\n    };\n    if (!left.component_pattern[component] && !right.component_pattern[component]) {\n      return 0;\n    }\n    if (left.component_pattern[component] && !right.component_pattern[component]) {\n      return comparePartList(left.parts[component], [wildcardOnlyPart]);\n    }\n    if (!left.component_pattern[component] && right.component_pattern[component]) {\n      return comparePartList([wildcardOnlyPart], right.parts[component]);\n    }\n    return comparePartList(left.parts[component], right.parts[component]);\n  }\n  get protocol() {\n    return this.component_pattern.protocol;\n  }\n  get username() {\n    return this.component_pattern.username;\n  }\n  get password() {\n    return this.component_pattern.password;\n  }\n  get hostname() {\n    return this.component_pattern.hostname;\n  }\n  get port() {\n    return this.component_pattern.port;\n  }\n  get pathname() {\n    return this.component_pattern.pathname;\n  }\n  get search() {\n    return this.component_pattern.search;\n  }\n  get hash() {\n    return this.component_pattern.hash;\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/urlpattern-polyfill/dist/urlpattern.cjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/urlpattern-polyfill/index.cjs":
/*!*****************************************************!*\
  !*** ../node_modules/urlpattern-polyfill/index.cjs ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const { URLPattern } = __webpack_require__(/*! ./dist/urlpattern.cjs */ \"(ssr)/../node_modules/urlpattern-polyfill/dist/urlpattern.cjs\");\n\nmodule.exports = { URLPattern };\n\nif (!globalThis.URLPattern) {\n  globalThis.URLPattern = URLPattern;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL3VybHBhdHRlcm4tcG9seWZpbGwvaW5kZXguY2pzIiwibWFwcGluZ3MiOiJBQUFBLFFBQVEsYUFBYSxFQUFFLG1CQUFPLENBQUMsNEZBQXVCOztBQUV0RCxtQkFBbUI7O0FBRW5CO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2xlZGdpdHkteWllbGQtZnJvbnRlbmQvLi4vbm9kZV9tb2R1bGVzL3VybHBhdHRlcm4tcG9seWZpbGwvaW5kZXguY2pzPzBkYTEiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgeyBVUkxQYXR0ZXJuIH0gPSByZXF1aXJlKFwiLi9kaXN0L3VybHBhdHRlcm4uY2pzXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHsgVVJMUGF0dGVybiB9O1xuXG5pZiAoIWdsb2JhbFRoaXMuVVJMUGF0dGVybikge1xuICBnbG9iYWxUaGlzLlVSTFBhdHRlcm4gPSBVUkxQYXR0ZXJuO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/urlpattern-polyfill/index.cjs\n");

/***/ })

};
;