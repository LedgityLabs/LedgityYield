"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/json-schema-ref-resolver";
exports.ids = ["vendor-chunks/json-schema-ref-resolver"];
exports.modules = {

/***/ "(ssr)/../node_modules/json-schema-ref-resolver/index.js":
/*!*********************************************************!*\
  !*** ../node_modules/json-schema-ref-resolver/index.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nconst deepEqual = __webpack_require__(/*! fast-deep-equal */ \"(ssr)/../node_modules/fast-deep-equal/index.js\")\n\nconst jsonSchemaRefSymbol = Symbol.for('json-schema-ref')\n\nclass RefResolver {\n  #schemas\n  #derefSchemas\n  #insertRefSymbol\n  #allowEqualDuplicates\n  #cloneSchemaWithoutRefs\n\n  constructor (opts = {}) {\n    this.#schemas = {}\n    this.#derefSchemas = {}\n    this.#insertRefSymbol = opts.insertRefSymbol ?? false\n    this.#allowEqualDuplicates = opts.allowEqualDuplicates ?? true\n    this.#cloneSchemaWithoutRefs = opts.cloneSchemaWithoutRefs ?? false\n  }\n\n  addSchema (schema, schemaId) {\n    if (schema.$id !== undefined && schema.$id.charAt(0) !== '#') {\n      // Schema has an $id that is not an anchor\n      schemaId = schema.$id\n    } else {\n      // Schema has no $id or $id is an anchor\n      this.#insertSchemaBySchemaId(schema, schemaId)\n    }\n    this.#addSchema(schema, schemaId)\n  }\n\n  getSchema (schemaId, jsonPointer = '#') {\n    const schema = this.#schemas[schemaId]\n    if (schema === undefined) {\n      throw new Error(\n        `Cannot resolve ref \"${schemaId}${jsonPointer}\". Schema with id \"${schemaId}\" is not found.`\n      )\n    }\n    if (schema.anchors[jsonPointer] !== undefined) {\n      return schema.anchors[jsonPointer]\n    }\n    return getDataByJSONPointer(schema.schema, jsonPointer)\n  }\n\n  hasSchema (schemaId) {\n    return this.#schemas[schemaId] !== undefined\n  }\n\n  getSchemaRefs (schemaId) {\n    const schema = this.#schemas[schemaId]\n    if (schema === undefined) {\n      throw new Error(`Schema with id \"${schemaId}\" is not found.`)\n    }\n    return schema.refs\n  }\n\n  getSchemaDependencies (schemaId, dependencies = {}) {\n    const schema = this.#schemas[schemaId]\n\n    for (const ref of schema.refs) {\n      const dependencySchemaId = ref.schemaId\n      if (dependencies[dependencySchemaId] !== undefined) continue\n      dependencies[dependencySchemaId] = this.getSchema(dependencySchemaId)\n      this.getSchemaDependencies(dependencySchemaId, dependencies)\n    }\n\n    return dependencies\n  }\n\n  derefSchema (schemaId) {\n    if (this.#derefSchemas[schemaId] !== undefined) return\n\n    const schema = this.#schemas[schemaId]\n    if (schema === undefined) {\n      throw new Error(`Schema with id \"${schemaId}\" is not found.`)\n    }\n\n    if (!this.#cloneSchemaWithoutRefs && schema.refs.length === 0) {\n      this.#derefSchemas[schemaId] = {\n        schema: schema.schema,\n        anchors: schema.anchors\n      }\n    }\n\n    const refs = []\n    this.#addDerefSchema(schema.schema, schemaId, refs)\n\n    const dependencies = this.getSchemaDependencies(schemaId)\n    for (const schemaId in dependencies) {\n      const schema = dependencies[schemaId]\n      this.#addDerefSchema(schema, schemaId, refs)\n    }\n\n    for (const ref of refs) {\n      const {\n        refSchemaId,\n        refJsonPointer\n      } = this.#parseSchemaRef(ref.ref, ref.sourceSchemaId)\n\n      const targetSchema = this.getDerefSchema(refSchemaId, refJsonPointer)\n      if (targetSchema === null) {\n        throw new Error(\n          `Cannot resolve ref \"${ref.ref}\". Ref \"${refJsonPointer}\" is not found in schema \"${refSchemaId}\".`\n        )\n      }\n\n      ref.targetSchema = targetSchema\n      ref.targetSchemaId = refSchemaId\n    }\n\n    for (const ref of refs) {\n      this.#resolveRef(ref, refs)\n    }\n  }\n\n  getDerefSchema (schemaId, jsonPointer = '#') {\n    let derefSchema = this.#derefSchemas[schemaId]\n    if (derefSchema === undefined) {\n      this.derefSchema(schemaId)\n      derefSchema = this.#derefSchemas[schemaId]\n    }\n    if (derefSchema.anchors[jsonPointer] !== undefined) {\n      return derefSchema.anchors[jsonPointer]\n    }\n    return getDataByJSONPointer(derefSchema.schema, jsonPointer)\n  }\n\n  #parseSchemaRef (ref, schemaId) {\n    const sharpIndex = ref.indexOf('#')\n    if (sharpIndex === -1) {\n      return { refSchemaId: ref, refJsonPointer: '#' }\n    }\n    if (sharpIndex === 0) {\n      return { refSchemaId: schemaId, refJsonPointer: ref }\n    }\n    return {\n      refSchemaId: ref.slice(0, sharpIndex),\n      refJsonPointer: ref.slice(sharpIndex)\n    }\n  }\n\n  #addSchema (schema, rootSchemaId) {\n    const schemaId = schema.$id\n    if (schemaId !== undefined && typeof schemaId === 'string') {\n      if (schemaId.charAt(0) === '#') {\n        this.#insertSchemaByAnchor(schema, rootSchemaId, schemaId)\n      } else {\n        this.#insertSchemaBySchemaId(schema, schemaId)\n        rootSchemaId = schemaId\n      }\n    }\n\n    const ref = schema.$ref\n    if (ref !== undefined && typeof ref === 'string') {\n      const { refSchemaId, refJsonPointer } = this.#parseSchemaRef(ref, rootSchemaId)\n      this.#schemas[rootSchemaId].refs.push({\n        schemaId: refSchemaId,\n        jsonPointer: refJsonPointer\n      })\n    }\n\n    for (const key in schema) {\n      if (typeof schema[key] === 'object' && schema[key] !== null) {\n        this.#addSchema(schema[key], rootSchemaId)\n      }\n    }\n  }\n\n  #addDerefSchema (schema, rootSchemaId, refs = []) {\n    const derefSchema = Array.isArray(schema) ? [...schema] : { ...schema }\n\n    const schemaId = derefSchema.$id\n    if (schemaId !== undefined && typeof schemaId === 'string') {\n      if (schemaId.charAt(0) === '#') {\n        this.#insertDerefSchemaByAnchor(derefSchema, rootSchemaId, schemaId)\n      } else {\n        this.#insertDerefSchemaBySchemaId(derefSchema, schemaId)\n        rootSchemaId = schemaId\n      }\n    }\n\n    if (derefSchema.$ref !== undefined) {\n      refs.push({\n        ref: derefSchema.$ref,\n        sourceSchemaId: rootSchemaId,\n        sourceSchema: derefSchema\n      })\n    }\n\n    for (const key in derefSchema) {\n      const value = derefSchema[key]\n      if (typeof value === 'object' && value !== null) {\n        derefSchema[key] = this.#addDerefSchema(value, rootSchemaId, refs)\n      }\n    }\n\n    return derefSchema\n  }\n\n  #resolveRef (ref, refs) {\n    const { sourceSchema, targetSchema } = ref\n\n    if (!sourceSchema.$ref) return\n    if (this.#insertRefSymbol) {\n      sourceSchema[jsonSchemaRefSymbol] = sourceSchema.$ref\n    }\n\n    delete sourceSchema.$ref\n\n    if (targetSchema.$ref) {\n      const targetSchemaRef = refs.find(ref => ref.sourceSchema === targetSchema)\n      this.#resolveRef(targetSchemaRef, refs)\n    }\n    for (const key in targetSchema) {\n      if (key === '$id') continue\n      if (sourceSchema[key] !== undefined) {\n        if (deepEqual(sourceSchema[key], targetSchema[key])) continue\n        throw new Error(\n          `Cannot resolve ref \"${ref.ref}\". Property \"${key}\" is already exist in schema \"${ref.sourceSchemaId}\".`\n        )\n      }\n      sourceSchema[key] = targetSchema[key]\n    }\n    ref.isResolved = true\n  }\n\n  #insertSchemaBySchemaId (schema, schemaId) {\n    const foundSchema = this.#schemas[schemaId]\n    if (foundSchema !== undefined) {\n      if (this.#allowEqualDuplicates && deepEqual(schema, foundSchema.schema)) return\n      throw new Error(`There is already another schema with id \"${schemaId}\".`)\n    }\n    this.#schemas[schemaId] = { schema, anchors: {}, refs: [] }\n  }\n\n  #insertSchemaByAnchor (schema, schemaId, anchor) {\n    const { anchors } = this.#schemas[schemaId]\n    if (anchors[anchor] !== undefined) {\n      throw new Error(`There is already another anchor \"${anchor}\" in a schema \"${schemaId}\".`)\n    }\n    anchors[anchor] = schema\n  }\n\n  #insertDerefSchemaBySchemaId (schema, schemaId) {\n    const foundSchema = this.#derefSchemas[schemaId]\n    if (foundSchema !== undefined) return\n\n    this.#derefSchemas[schemaId] = { schema, anchors: {} }\n  }\n\n  #insertDerefSchemaByAnchor (schema, schemaId, anchor) {\n    const { anchors } = this.#derefSchemas[schemaId]\n    anchors[anchor] = schema\n  }\n}\n\nfunction getDataByJSONPointer (data, jsonPointer) {\n  const parts = jsonPointer.split('/')\n  let current = data\n  for (const part of parts) {\n    if (part === '' || part === '#') continue\n    if (typeof current !== 'object' || current === null) {\n      return null\n    }\n    current = current[part]\n  }\n  return current ?? null\n}\n\nmodule.exports = { RefResolver }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/json-schema-ref-resolver/index.js\n");

/***/ })

};
;