"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/busboy";
exports.ids = ["vendor-chunks/busboy"];
exports.modules = {

/***/ "(ssr)/../node_modules/busboy/lib/index.js":
/*!*******************************************!*\
  !*** ../node_modules/busboy/lib/index.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nconst { parseContentType } = __webpack_require__(/*! ./utils.js */ \"(ssr)/../node_modules/busboy/lib/utils.js\");\n\nfunction getInstance(cfg) {\n  const headers = cfg.headers;\n  const conType = parseContentType(headers['content-type']);\n  if (!conType)\n    throw new Error('Malformed content type');\n\n  for (const type of TYPES) {\n    const matched = type.detect(conType);\n    if (!matched)\n      continue;\n\n    const instanceCfg = {\n      limits: cfg.limits,\n      headers,\n      conType,\n      highWaterMark: undefined,\n      fileHwm: undefined,\n      defCharset: undefined,\n      defParamCharset: undefined,\n      preservePath: false,\n    };\n    if (cfg.highWaterMark)\n      instanceCfg.highWaterMark = cfg.highWaterMark;\n    if (cfg.fileHwm)\n      instanceCfg.fileHwm = cfg.fileHwm;\n    instanceCfg.defCharset = cfg.defCharset;\n    instanceCfg.defParamCharset = cfg.defParamCharset;\n    instanceCfg.preservePath = cfg.preservePath;\n    return new type(instanceCfg);\n  }\n\n  throw new Error(`Unsupported content type: ${headers['content-type']}`);\n}\n\n// Note: types are explicitly listed here for easier bundling\n// See: https://github.com/mscdex/busboy/issues/121\nconst TYPES = [\n  __webpack_require__(/*! ./types/multipart */ \"(ssr)/../node_modules/busboy/lib/types/multipart.js\"),\n  __webpack_require__(/*! ./types/urlencoded */ \"(ssr)/../node_modules/busboy/lib/types/urlencoded.js\"),\n].filter(function(typemod) { return typeof typemod.detect === 'function'; });\n\nmodule.exports = (cfg) => {\n  if (typeof cfg !== 'object' || cfg === null)\n    cfg = {};\n\n  if (typeof cfg.headers !== 'object'\n      || cfg.headers === null\n      || typeof cfg.headers['content-type'] !== 'string') {\n    throw new Error('Missing Content-Type');\n  }\n\n  return getInstance(cfg);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL2J1c2JveS9saWIvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsUUFBUSxtQkFBbUIsRUFBRSxtQkFBTyxDQUFDLDZEQUFZOztBQUVqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLCtDQUErQyx3QkFBd0I7QUFDdkU7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsRUFBRSxtQkFBTyxDQUFDLDhFQUFtQjtBQUM3QixFQUFFLG1CQUFPLENBQUMsZ0ZBQW9CO0FBQzlCLDZCQUE2Qiw4Q0FBOEM7O0FBRTNFO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9sZWRnaXR5LXlpZWxkLWZyb250ZW5kLy4uL25vZGVfbW9kdWxlcy9idXNib3kvbGliL2luZGV4LmpzP2Y5ODMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCB7IHBhcnNlQ29udGVudFR5cGUgfSA9IHJlcXVpcmUoJy4vdXRpbHMuanMnKTtcblxuZnVuY3Rpb24gZ2V0SW5zdGFuY2UoY2ZnKSB7XG4gIGNvbnN0IGhlYWRlcnMgPSBjZmcuaGVhZGVycztcbiAgY29uc3QgY29uVHlwZSA9IHBhcnNlQ29udGVudFR5cGUoaGVhZGVyc1snY29udGVudC10eXBlJ10pO1xuICBpZiAoIWNvblR5cGUpXG4gICAgdGhyb3cgbmV3IEVycm9yKCdNYWxmb3JtZWQgY29udGVudCB0eXBlJyk7XG5cbiAgZm9yIChjb25zdCB0eXBlIG9mIFRZUEVTKSB7XG4gICAgY29uc3QgbWF0Y2hlZCA9IHR5cGUuZGV0ZWN0KGNvblR5cGUpO1xuICAgIGlmICghbWF0Y2hlZClcbiAgICAgIGNvbnRpbnVlO1xuXG4gICAgY29uc3QgaW5zdGFuY2VDZmcgPSB7XG4gICAgICBsaW1pdHM6IGNmZy5saW1pdHMsXG4gICAgICBoZWFkZXJzLFxuICAgICAgY29uVHlwZSxcbiAgICAgIGhpZ2hXYXRlck1hcms6IHVuZGVmaW5lZCxcbiAgICAgIGZpbGVId206IHVuZGVmaW5lZCxcbiAgICAgIGRlZkNoYXJzZXQ6IHVuZGVmaW5lZCxcbiAgICAgIGRlZlBhcmFtQ2hhcnNldDogdW5kZWZpbmVkLFxuICAgICAgcHJlc2VydmVQYXRoOiBmYWxzZSxcbiAgICB9O1xuICAgIGlmIChjZmcuaGlnaFdhdGVyTWFyaylcbiAgICAgIGluc3RhbmNlQ2ZnLmhpZ2hXYXRlck1hcmsgPSBjZmcuaGlnaFdhdGVyTWFyaztcbiAgICBpZiAoY2ZnLmZpbGVId20pXG4gICAgICBpbnN0YW5jZUNmZy5maWxlSHdtID0gY2ZnLmZpbGVId207XG4gICAgaW5zdGFuY2VDZmcuZGVmQ2hhcnNldCA9IGNmZy5kZWZDaGFyc2V0O1xuICAgIGluc3RhbmNlQ2ZnLmRlZlBhcmFtQ2hhcnNldCA9IGNmZy5kZWZQYXJhbUNoYXJzZXQ7XG4gICAgaW5zdGFuY2VDZmcucHJlc2VydmVQYXRoID0gY2ZnLnByZXNlcnZlUGF0aDtcbiAgICByZXR1cm4gbmV3IHR5cGUoaW5zdGFuY2VDZmcpO1xuICB9XG5cbiAgdGhyb3cgbmV3IEVycm9yKGBVbnN1cHBvcnRlZCBjb250ZW50IHR5cGU6ICR7aGVhZGVyc1snY29udGVudC10eXBlJ119YCk7XG59XG5cbi8vIE5vdGU6IHR5cGVzIGFyZSBleHBsaWNpdGx5IGxpc3RlZCBoZXJlIGZvciBlYXNpZXIgYnVuZGxpbmdcbi8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL21zY2RleC9idXNib3kvaXNzdWVzLzEyMVxuY29uc3QgVFlQRVMgPSBbXG4gIHJlcXVpcmUoJy4vdHlwZXMvbXVsdGlwYXJ0JyksXG4gIHJlcXVpcmUoJy4vdHlwZXMvdXJsZW5jb2RlZCcpLFxuXS5maWx0ZXIoZnVuY3Rpb24odHlwZW1vZCkgeyByZXR1cm4gdHlwZW9mIHR5cGVtb2QuZGV0ZWN0ID09PSAnZnVuY3Rpb24nOyB9KTtcblxubW9kdWxlLmV4cG9ydHMgPSAoY2ZnKSA9PiB7XG4gIGlmICh0eXBlb2YgY2ZnICE9PSAnb2JqZWN0JyB8fCBjZmcgPT09IG51bGwpXG4gICAgY2ZnID0ge307XG5cbiAgaWYgKHR5cGVvZiBjZmcuaGVhZGVycyAhPT0gJ29iamVjdCdcbiAgICAgIHx8IGNmZy5oZWFkZXJzID09PSBudWxsXG4gICAgICB8fCB0eXBlb2YgY2ZnLmhlYWRlcnNbJ2NvbnRlbnQtdHlwZSddICE9PSAnc3RyaW5nJykge1xuICAgIHRocm93IG5ldyBFcnJvcignTWlzc2luZyBDb250ZW50LVR5cGUnKTtcbiAgfVxuXG4gIHJldHVybiBnZXRJbnN0YW5jZShjZmcpO1xufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/busboy/lib/index.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/busboy/lib/types/multipart.js":
/*!*****************************************************!*\
  !*** ../node_modules/busboy/lib/types/multipart.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nconst { Readable, Writable } = __webpack_require__(/*! stream */ \"stream\");\n\nconst StreamSearch = __webpack_require__(/*! streamsearch */ \"(ssr)/../node_modules/streamsearch/lib/sbmh.js\");\n\nconst {\n  basename,\n  convertToUTF8,\n  getDecoder,\n  parseContentType,\n  parseDisposition,\n} = __webpack_require__(/*! ../utils.js */ \"(ssr)/../node_modules/busboy/lib/utils.js\");\n\nconst BUF_CRLF = Buffer.from('\\r\\n');\nconst BUF_CR = Buffer.from('\\r');\nconst BUF_DASH = Buffer.from('-');\n\nfunction noop() {}\n\nconst MAX_HEADER_PAIRS = 2000; // From node\nconst MAX_HEADER_SIZE = 16 * 1024; // From node (its default value)\n\nconst HPARSER_NAME = 0;\nconst HPARSER_PRE_OWS = 1;\nconst HPARSER_VALUE = 2;\nclass HeaderParser {\n  constructor(cb) {\n    this.header = Object.create(null);\n    this.pairCount = 0;\n    this.byteCount = 0;\n    this.state = HPARSER_NAME;\n    this.name = '';\n    this.value = '';\n    this.crlf = 0;\n    this.cb = cb;\n  }\n\n  reset() {\n    this.header = Object.create(null);\n    this.pairCount = 0;\n    this.byteCount = 0;\n    this.state = HPARSER_NAME;\n    this.name = '';\n    this.value = '';\n    this.crlf = 0;\n  }\n\n  push(chunk, pos, end) {\n    let start = pos;\n    while (pos < end) {\n      switch (this.state) {\n        case HPARSER_NAME: {\n          let done = false;\n          for (; pos < end; ++pos) {\n            if (this.byteCount === MAX_HEADER_SIZE)\n              return -1;\n            ++this.byteCount;\n            const code = chunk[pos];\n            if (TOKEN[code] !== 1) {\n              if (code !== 58/* ':' */)\n                return -1;\n              this.name += chunk.latin1Slice(start, pos);\n              if (this.name.length === 0)\n                return -1;\n              ++pos;\n              done = true;\n              this.state = HPARSER_PRE_OWS;\n              break;\n            }\n          }\n          if (!done) {\n            this.name += chunk.latin1Slice(start, pos);\n            break;\n          }\n          // FALLTHROUGH\n        }\n        case HPARSER_PRE_OWS: {\n          // Skip optional whitespace\n          let done = false;\n          for (; pos < end; ++pos) {\n            if (this.byteCount === MAX_HEADER_SIZE)\n              return -1;\n            ++this.byteCount;\n            const code = chunk[pos];\n            if (code !== 32/* ' ' */ && code !== 9/* '\\t' */) {\n              start = pos;\n              done = true;\n              this.state = HPARSER_VALUE;\n              break;\n            }\n          }\n          if (!done)\n            break;\n          // FALLTHROUGH\n        }\n        case HPARSER_VALUE:\n          switch (this.crlf) {\n            case 0: // Nothing yet\n              for (; pos < end; ++pos) {\n                if (this.byteCount === MAX_HEADER_SIZE)\n                  return -1;\n                ++this.byteCount;\n                const code = chunk[pos];\n                if (FIELD_VCHAR[code] !== 1) {\n                  if (code !== 13/* '\\r' */)\n                    return -1;\n                  ++this.crlf;\n                  break;\n                }\n              }\n              this.value += chunk.latin1Slice(start, pos++);\n              break;\n            case 1: // Received CR\n              if (this.byteCount === MAX_HEADER_SIZE)\n                return -1;\n              ++this.byteCount;\n              if (chunk[pos++] !== 10/* '\\n' */)\n                return -1;\n              ++this.crlf;\n              break;\n            case 2: { // Received CR LF\n              if (this.byteCount === MAX_HEADER_SIZE)\n                return -1;\n              ++this.byteCount;\n              const code = chunk[pos];\n              if (code === 32/* ' ' */ || code === 9/* '\\t' */) {\n                // Folded value\n                start = pos;\n                this.crlf = 0;\n              } else {\n                if (++this.pairCount < MAX_HEADER_PAIRS) {\n                  this.name = this.name.toLowerCase();\n                  if (this.header[this.name] === undefined)\n                    this.header[this.name] = [this.value];\n                  else\n                    this.header[this.name].push(this.value);\n                }\n                if (code === 13/* '\\r' */) {\n                  ++this.crlf;\n                  ++pos;\n                } else {\n                  // Assume start of next header field name\n                  start = pos;\n                  this.crlf = 0;\n                  this.state = HPARSER_NAME;\n                  this.name = '';\n                  this.value = '';\n                }\n              }\n              break;\n            }\n            case 3: { // Received CR LF CR\n              if (this.byteCount === MAX_HEADER_SIZE)\n                return -1;\n              ++this.byteCount;\n              if (chunk[pos++] !== 10/* '\\n' */)\n                return -1;\n              // End of header\n              const header = this.header;\n              this.reset();\n              this.cb(header);\n              return pos;\n            }\n          }\n          break;\n      }\n    }\n\n    return pos;\n  }\n}\n\nclass FileStream extends Readable {\n  constructor(opts, owner) {\n    super(opts);\n    this.truncated = false;\n    this._readcb = null;\n    this.once('end', () => {\n      // We need to make sure that we call any outstanding _writecb() that is\n      // associated with this file so that processing of the rest of the form\n      // can continue. This may not happen if the file stream ends right after\n      // backpressure kicks in, so we force it here.\n      this._read();\n      if (--owner._fileEndsLeft === 0 && owner._finalcb) {\n        const cb = owner._finalcb;\n        owner._finalcb = null;\n        // Make sure other 'end' event handlers get a chance to be executed\n        // before busboy's 'finish' event is emitted\n        process.nextTick(cb);\n      }\n    });\n  }\n  _read(n) {\n    const cb = this._readcb;\n    if (cb) {\n      this._readcb = null;\n      cb();\n    }\n  }\n}\n\nconst ignoreData = {\n  push: (chunk, pos) => {},\n  destroy: () => {},\n};\n\nfunction callAndUnsetCb(self, err) {\n  const cb = self._writecb;\n  self._writecb = null;\n  if (err)\n    self.destroy(err);\n  else if (cb)\n    cb();\n}\n\nfunction nullDecoder(val, hint) {\n  return val;\n}\n\nclass Multipart extends Writable {\n  constructor(cfg) {\n    const streamOpts = {\n      autoDestroy: true,\n      emitClose: true,\n      highWaterMark: (typeof cfg.highWaterMark === 'number'\n                      ? cfg.highWaterMark\n                      : undefined),\n    };\n    super(streamOpts);\n\n    if (!cfg.conType.params || typeof cfg.conType.params.boundary !== 'string')\n      throw new Error('Multipart: Boundary not found');\n\n    const boundary = cfg.conType.params.boundary;\n    const paramDecoder = (typeof cfg.defParamCharset === 'string'\n                            && cfg.defParamCharset\n                          ? getDecoder(cfg.defParamCharset)\n                          : nullDecoder);\n    const defCharset = (cfg.defCharset || 'utf8');\n    const preservePath = cfg.preservePath;\n    const fileOpts = {\n      autoDestroy: true,\n      emitClose: true,\n      highWaterMark: (typeof cfg.fileHwm === 'number'\n                      ? cfg.fileHwm\n                      : undefined),\n    };\n\n    const limits = cfg.limits;\n    const fieldSizeLimit = (limits && typeof limits.fieldSize === 'number'\n                            ? limits.fieldSize\n                            : 1 * 1024 * 1024);\n    const fileSizeLimit = (limits && typeof limits.fileSize === 'number'\n                           ? limits.fileSize\n                           : Infinity);\n    const filesLimit = (limits && typeof limits.files === 'number'\n                        ? limits.files\n                        : Infinity);\n    const fieldsLimit = (limits && typeof limits.fields === 'number'\n                         ? limits.fields\n                         : Infinity);\n    const partsLimit = (limits && typeof limits.parts === 'number'\n                        ? limits.parts\n                        : Infinity);\n\n    let parts = -1; // Account for initial boundary\n    let fields = 0;\n    let files = 0;\n    let skipPart = false;\n\n    this._fileEndsLeft = 0;\n    this._fileStream = undefined;\n    this._complete = false;\n    let fileSize = 0;\n\n    let field;\n    let fieldSize = 0;\n    let partCharset;\n    let partEncoding;\n    let partType;\n    let partName;\n    let partTruncated = false;\n\n    let hitFilesLimit = false;\n    let hitFieldsLimit = false;\n\n    this._hparser = null;\n    const hparser = new HeaderParser((header) => {\n      this._hparser = null;\n      skipPart = false;\n\n      partType = 'text/plain';\n      partCharset = defCharset;\n      partEncoding = '7bit';\n      partName = undefined;\n      partTruncated = false;\n\n      let filename;\n      if (!header['content-disposition']) {\n        skipPart = true;\n        return;\n      }\n\n      const disp = parseDisposition(header['content-disposition'][0],\n                                    paramDecoder);\n      if (!disp || disp.type !== 'form-data') {\n        skipPart = true;\n        return;\n      }\n\n      if (disp.params) {\n        if (disp.params.name)\n          partName = disp.params.name;\n\n        if (disp.params['filename*'])\n          filename = disp.params['filename*'];\n        else if (disp.params.filename)\n          filename = disp.params.filename;\n\n        if (filename !== undefined && !preservePath)\n          filename = basename(filename);\n      }\n\n      if (header['content-type']) {\n        const conType = parseContentType(header['content-type'][0]);\n        if (conType) {\n          partType = `${conType.type}/${conType.subtype}`;\n          if (conType.params && typeof conType.params.charset === 'string')\n            partCharset = conType.params.charset.toLowerCase();\n        }\n      }\n\n      if (header['content-transfer-encoding'])\n        partEncoding = header['content-transfer-encoding'][0].toLowerCase();\n\n      if (partType === 'application/octet-stream' || filename !== undefined) {\n        // File\n\n        if (files === filesLimit) {\n          if (!hitFilesLimit) {\n            hitFilesLimit = true;\n            this.emit('filesLimit');\n          }\n          skipPart = true;\n          return;\n        }\n        ++files;\n\n        if (this.listenerCount('file') === 0) {\n          skipPart = true;\n          return;\n        }\n\n        fileSize = 0;\n        this._fileStream = new FileStream(fileOpts, this);\n        ++this._fileEndsLeft;\n        this.emit(\n          'file',\n          partName,\n          this._fileStream,\n          { filename,\n            encoding: partEncoding,\n            mimeType: partType }\n        );\n      } else {\n        // Non-file\n\n        if (fields === fieldsLimit) {\n          if (!hitFieldsLimit) {\n            hitFieldsLimit = true;\n            this.emit('fieldsLimit');\n          }\n          skipPart = true;\n          return;\n        }\n        ++fields;\n\n        if (this.listenerCount('field') === 0) {\n          skipPart = true;\n          return;\n        }\n\n        field = [];\n        fieldSize = 0;\n      }\n    });\n\n    let matchPostBoundary = 0;\n    const ssCb = (isMatch, data, start, end, isDataSafe) => {\nretrydata:\n      while (data) {\n        if (this._hparser !== null) {\n          const ret = this._hparser.push(data, start, end);\n          if (ret === -1) {\n            this._hparser = null;\n            hparser.reset();\n            this.emit('error', new Error('Malformed part header'));\n            break;\n          }\n          start = ret;\n        }\n\n        if (start === end)\n          break;\n\n        if (matchPostBoundary !== 0) {\n          if (matchPostBoundary === 1) {\n            switch (data[start]) {\n              case 45: // '-'\n                // Try matching '--' after boundary\n                matchPostBoundary = 2;\n                ++start;\n                break;\n              case 13: // '\\r'\n                // Try matching CR LF before header\n                matchPostBoundary = 3;\n                ++start;\n                break;\n              default:\n                matchPostBoundary = 0;\n            }\n            if (start === end)\n              return;\n          }\n\n          if (matchPostBoundary === 2) {\n            matchPostBoundary = 0;\n            if (data[start] === 45/* '-' */) {\n              // End of multipart data\n              this._complete = true;\n              this._bparser = ignoreData;\n              return;\n            }\n            // We saw something other than '-', so put the dash we consumed\n            // \"back\"\n            const writecb = this._writecb;\n            this._writecb = noop;\n            ssCb(false, BUF_DASH, 0, 1, false);\n            this._writecb = writecb;\n          } else if (matchPostBoundary === 3) {\n            matchPostBoundary = 0;\n            if (data[start] === 10/* '\\n' */) {\n              ++start;\n              if (parts >= partsLimit)\n                break;\n              // Prepare the header parser\n              this._hparser = hparser;\n              if (start === end)\n                break;\n              // Process the remaining data as a header\n              continue retrydata;\n            } else {\n              // We saw something other than LF, so put the CR we consumed\n              // \"back\"\n              const writecb = this._writecb;\n              this._writecb = noop;\n              ssCb(false, BUF_CR, 0, 1, false);\n              this._writecb = writecb;\n            }\n          }\n        }\n\n        if (!skipPart) {\n          if (this._fileStream) {\n            let chunk;\n            const actualLen = Math.min(end - start, fileSizeLimit - fileSize);\n            if (!isDataSafe) {\n              chunk = Buffer.allocUnsafe(actualLen);\n              data.copy(chunk, 0, start, start + actualLen);\n            } else {\n              chunk = data.slice(start, start + actualLen);\n            }\n\n            fileSize += chunk.length;\n            if (fileSize === fileSizeLimit) {\n              if (chunk.length > 0)\n                this._fileStream.push(chunk);\n              this._fileStream.emit('limit');\n              this._fileStream.truncated = true;\n              skipPart = true;\n            } else if (!this._fileStream.push(chunk)) {\n              if (this._writecb)\n                this._fileStream._readcb = this._writecb;\n              this._writecb = null;\n            }\n          } else if (field !== undefined) {\n            let chunk;\n            const actualLen = Math.min(\n              end - start,\n              fieldSizeLimit - fieldSize\n            );\n            if (!isDataSafe) {\n              chunk = Buffer.allocUnsafe(actualLen);\n              data.copy(chunk, 0, start, start + actualLen);\n            } else {\n              chunk = data.slice(start, start + actualLen);\n            }\n\n            fieldSize += actualLen;\n            field.push(chunk);\n            if (fieldSize === fieldSizeLimit) {\n              skipPart = true;\n              partTruncated = true;\n            }\n          }\n        }\n\n        break;\n      }\n\n      if (isMatch) {\n        matchPostBoundary = 1;\n\n        if (this._fileStream) {\n          // End the active file stream if the previous part was a file\n          this._fileStream.push(null);\n          this._fileStream = null;\n        } else if (field !== undefined) {\n          let data;\n          switch (field.length) {\n            case 0:\n              data = '';\n              break;\n            case 1:\n              data = convertToUTF8(field[0], partCharset, 0);\n              break;\n            default:\n              data = convertToUTF8(\n                Buffer.concat(field, fieldSize),\n                partCharset,\n                0\n              );\n          }\n          field = undefined;\n          fieldSize = 0;\n          this.emit(\n            'field',\n            partName,\n            data,\n            { nameTruncated: false,\n              valueTruncated: partTruncated,\n              encoding: partEncoding,\n              mimeType: partType }\n          );\n        }\n\n        if (++parts === partsLimit)\n          this.emit('partsLimit');\n      }\n    };\n    this._bparser = new StreamSearch(`\\r\\n--${boundary}`, ssCb);\n\n    this._writecb = null;\n    this._finalcb = null;\n\n    // Just in case there is no preamble\n    this.write(BUF_CRLF);\n  }\n\n  static detect(conType) {\n    return (conType.type === 'multipart' && conType.subtype === 'form-data');\n  }\n\n  _write(chunk, enc, cb) {\n    this._writecb = cb;\n    this._bparser.push(chunk, 0);\n    if (this._writecb)\n      callAndUnsetCb(this);\n  }\n\n  _destroy(err, cb) {\n    this._hparser = null;\n    this._bparser = ignoreData;\n    if (!err)\n      err = checkEndState(this);\n    const fileStream = this._fileStream;\n    if (fileStream) {\n      this._fileStream = null;\n      fileStream.destroy(err);\n    }\n    cb(err);\n  }\n\n  _final(cb) {\n    this._bparser.destroy();\n    if (!this._complete)\n      return cb(new Error('Unexpected end of form'));\n    if (this._fileEndsLeft)\n      this._finalcb = finalcb.bind(null, this, cb);\n    else\n      finalcb(this, cb);\n  }\n}\n\nfunction finalcb(self, cb, err) {\n  if (err)\n    return cb(err);\n  err = checkEndState(self);\n  cb(err);\n}\n\nfunction checkEndState(self) {\n  if (self._hparser)\n    return new Error('Malformed part header');\n  const fileStream = self._fileStream;\n  if (fileStream) {\n    self._fileStream = null;\n    fileStream.destroy(new Error('Unexpected end of file'));\n  }\n  if (!self._complete)\n    return new Error('Unexpected end of form');\n}\n\nconst TOKEN = [\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0,\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,\n  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1,\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n];\n\nconst FIELD_VCHAR = [\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n];\n\nmodule.exports = Multipart;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL2J1c2JveS9saWIvdHlwZXMvbXVsdGlwYXJ0LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLFFBQVEscUJBQXFCLEVBQUUsbUJBQU8sQ0FBQyxzQkFBUTs7QUFFL0MscUJBQXFCLG1CQUFPLENBQUMsb0VBQWM7O0FBRTNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUUsRUFBRSxtQkFBTyxDQUFDLDhEQUFhOztBQUV6QjtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsK0JBQStCO0FBQy9CLG1DQUFtQzs7QUFFbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLFdBQVc7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsV0FBVztBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsV0FBVztBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSwwQkFBMEI7QUFDMUIsbUJBQW1CO0FBQ25COztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixhQUFhLEdBQUcsZ0JBQWdCO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDLFNBQVM7O0FBRXZEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9sZWRnaXR5LXlpZWxkLWZyb250ZW5kLy4uL25vZGVfbW9kdWxlcy9idXNib3kvbGliL3R5cGVzL211bHRpcGFydC5qcz8yOWIxIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgeyBSZWFkYWJsZSwgV3JpdGFibGUgfSA9IHJlcXVpcmUoJ3N0cmVhbScpO1xuXG5jb25zdCBTdHJlYW1TZWFyY2ggPSByZXF1aXJlKCdzdHJlYW1zZWFyY2gnKTtcblxuY29uc3Qge1xuICBiYXNlbmFtZSxcbiAgY29udmVydFRvVVRGOCxcbiAgZ2V0RGVjb2RlcixcbiAgcGFyc2VDb250ZW50VHlwZSxcbiAgcGFyc2VEaXNwb3NpdGlvbixcbn0gPSByZXF1aXJlKCcuLi91dGlscy5qcycpO1xuXG5jb25zdCBCVUZfQ1JMRiA9IEJ1ZmZlci5mcm9tKCdcXHJcXG4nKTtcbmNvbnN0IEJVRl9DUiA9IEJ1ZmZlci5mcm9tKCdcXHInKTtcbmNvbnN0IEJVRl9EQVNIID0gQnVmZmVyLmZyb20oJy0nKTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbmNvbnN0IE1BWF9IRUFERVJfUEFJUlMgPSAyMDAwOyAvLyBGcm9tIG5vZGVcbmNvbnN0IE1BWF9IRUFERVJfU0laRSA9IDE2ICogMTAyNDsgLy8gRnJvbSBub2RlIChpdHMgZGVmYXVsdCB2YWx1ZSlcblxuY29uc3QgSFBBUlNFUl9OQU1FID0gMDtcbmNvbnN0IEhQQVJTRVJfUFJFX09XUyA9IDE7XG5jb25zdCBIUEFSU0VSX1ZBTFVFID0gMjtcbmNsYXNzIEhlYWRlclBhcnNlciB7XG4gIGNvbnN0cnVjdG9yKGNiKSB7XG4gICAgdGhpcy5oZWFkZXIgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMucGFpckNvdW50ID0gMDtcbiAgICB0aGlzLmJ5dGVDb3VudCA9IDA7XG4gICAgdGhpcy5zdGF0ZSA9IEhQQVJTRVJfTkFNRTtcbiAgICB0aGlzLm5hbWUgPSAnJztcbiAgICB0aGlzLnZhbHVlID0gJyc7XG4gICAgdGhpcy5jcmxmID0gMDtcbiAgICB0aGlzLmNiID0gY2I7XG4gIH1cblxuICByZXNldCgpIHtcbiAgICB0aGlzLmhlYWRlciA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdGhpcy5wYWlyQ291bnQgPSAwO1xuICAgIHRoaXMuYnl0ZUNvdW50ID0gMDtcbiAgICB0aGlzLnN0YXRlID0gSFBBUlNFUl9OQU1FO1xuICAgIHRoaXMubmFtZSA9ICcnO1xuICAgIHRoaXMudmFsdWUgPSAnJztcbiAgICB0aGlzLmNybGYgPSAwO1xuICB9XG5cbiAgcHVzaChjaHVuaywgcG9zLCBlbmQpIHtcbiAgICBsZXQgc3RhcnQgPSBwb3M7XG4gICAgd2hpbGUgKHBvcyA8IGVuZCkge1xuICAgICAgc3dpdGNoICh0aGlzLnN0YXRlKSB7XG4gICAgICAgIGNhc2UgSFBBUlNFUl9OQU1FOiB7XG4gICAgICAgICAgbGV0IGRvbmUgPSBmYWxzZTtcbiAgICAgICAgICBmb3IgKDsgcG9zIDwgZW5kOyArK3Bvcykge1xuICAgICAgICAgICAgaWYgKHRoaXMuYnl0ZUNvdW50ID09PSBNQVhfSEVBREVSX1NJWkUpXG4gICAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICAgICsrdGhpcy5ieXRlQ291bnQ7XG4gICAgICAgICAgICBjb25zdCBjb2RlID0gY2h1bmtbcG9zXTtcbiAgICAgICAgICAgIGlmIChUT0tFTltjb2RlXSAhPT0gMSkge1xuICAgICAgICAgICAgICBpZiAoY29kZSAhPT0gNTgvKiAnOicgKi8pXG4gICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICAgICAgICB0aGlzLm5hbWUgKz0gY2h1bmsubGF0aW4xU2xpY2Uoc3RhcnQsIHBvcyk7XG4gICAgICAgICAgICAgIGlmICh0aGlzLm5hbWUubGVuZ3RoID09PSAwKVxuICAgICAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICAgICAgKytwb3M7XG4gICAgICAgICAgICAgIGRvbmUgPSB0cnVlO1xuICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gSFBBUlNFUl9QUkVfT1dTO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCFkb25lKSB7XG4gICAgICAgICAgICB0aGlzLm5hbWUgKz0gY2h1bmsubGF0aW4xU2xpY2Uoc3RhcnQsIHBvcyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gRkFMTFRIUk9VR0hcbiAgICAgICAgfVxuICAgICAgICBjYXNlIEhQQVJTRVJfUFJFX09XUzoge1xuICAgICAgICAgIC8vIFNraXAgb3B0aW9uYWwgd2hpdGVzcGFjZVxuICAgICAgICAgIGxldCBkb25lID0gZmFsc2U7XG4gICAgICAgICAgZm9yICg7IHBvcyA8IGVuZDsgKytwb3MpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmJ5dGVDb3VudCA9PT0gTUFYX0hFQURFUl9TSVpFKVxuICAgICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgICAgICArK3RoaXMuYnl0ZUNvdW50O1xuICAgICAgICAgICAgY29uc3QgY29kZSA9IGNodW5rW3Bvc107XG4gICAgICAgICAgICBpZiAoY29kZSAhPT0gMzIvKiAnICcgKi8gJiYgY29kZSAhPT0gOS8qICdcXHQnICovKSB7XG4gICAgICAgICAgICAgIHN0YXJ0ID0gcG9zO1xuICAgICAgICAgICAgICBkb25lID0gdHJ1ZTtcbiAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IEhQQVJTRVJfVkFMVUU7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIWRvbmUpXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAvLyBGQUxMVEhST1VHSFxuICAgICAgICB9XG4gICAgICAgIGNhc2UgSFBBUlNFUl9WQUxVRTpcbiAgICAgICAgICBzd2l0Y2ggKHRoaXMuY3JsZikge1xuICAgICAgICAgICAgY2FzZSAwOiAvLyBOb3RoaW5nIHlldFxuICAgICAgICAgICAgICBmb3IgKDsgcG9zIDwgZW5kOyArK3Bvcykge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmJ5dGVDb3VudCA9PT0gTUFYX0hFQURFUl9TSVpFKVxuICAgICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICAgICAgICAgICsrdGhpcy5ieXRlQ291bnQ7XG4gICAgICAgICAgICAgICAgY29uc3QgY29kZSA9IGNodW5rW3Bvc107XG4gICAgICAgICAgICAgICAgaWYgKEZJRUxEX1ZDSEFSW2NvZGVdICE9PSAxKSB7XG4gICAgICAgICAgICAgICAgICBpZiAoY29kZSAhPT0gMTMvKiAnXFxyJyAqLylcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICAgICAgICAgICAgKyt0aGlzLmNybGY7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgdGhpcy52YWx1ZSArPSBjaHVuay5sYXRpbjFTbGljZShzdGFydCwgcG9zKyspO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMTogLy8gUmVjZWl2ZWQgQ1JcbiAgICAgICAgICAgICAgaWYgKHRoaXMuYnl0ZUNvdW50ID09PSBNQVhfSEVBREVSX1NJWkUpXG4gICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICAgICAgICArK3RoaXMuYnl0ZUNvdW50O1xuICAgICAgICAgICAgICBpZiAoY2h1bmtbcG9zKytdICE9PSAxMC8qICdcXG4nICovKVxuICAgICAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICAgICAgKyt0aGlzLmNybGY7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAyOiB7IC8vIFJlY2VpdmVkIENSIExGXG4gICAgICAgICAgICAgIGlmICh0aGlzLmJ5dGVDb3VudCA9PT0gTUFYX0hFQURFUl9TSVpFKVxuICAgICAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICAgICAgKyt0aGlzLmJ5dGVDb3VudDtcbiAgICAgICAgICAgICAgY29uc3QgY29kZSA9IGNodW5rW3Bvc107XG4gICAgICAgICAgICAgIGlmIChjb2RlID09PSAzMi8qICcgJyAqLyB8fCBjb2RlID09PSA5LyogJ1xcdCcgKi8pIHtcbiAgICAgICAgICAgICAgICAvLyBGb2xkZWQgdmFsdWVcbiAgICAgICAgICAgICAgICBzdGFydCA9IHBvcztcbiAgICAgICAgICAgICAgICB0aGlzLmNybGYgPSAwO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICgrK3RoaXMucGFpckNvdW50IDwgTUFYX0hFQURFUl9QQUlSUykge1xuICAgICAgICAgICAgICAgICAgdGhpcy5uYW1lID0gdGhpcy5uYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgICBpZiAodGhpcy5oZWFkZXJbdGhpcy5uYW1lXSA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmhlYWRlclt0aGlzLm5hbWVdID0gW3RoaXMudmFsdWVdO1xuICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmhlYWRlclt0aGlzLm5hbWVdLnB1c2godGhpcy52YWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChjb2RlID09PSAxMy8qICdcXHInICovKSB7XG4gICAgICAgICAgICAgICAgICArK3RoaXMuY3JsZjtcbiAgICAgICAgICAgICAgICAgICsrcG9zO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAvLyBBc3N1bWUgc3RhcnQgb2YgbmV4dCBoZWFkZXIgZmllbGQgbmFtZVxuICAgICAgICAgICAgICAgICAgc3RhcnQgPSBwb3M7XG4gICAgICAgICAgICAgICAgICB0aGlzLmNybGYgPSAwO1xuICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IEhQQVJTRVJfTkFNRTtcbiAgICAgICAgICAgICAgICAgIHRoaXMubmFtZSA9ICcnO1xuICAgICAgICAgICAgICAgICAgdGhpcy52YWx1ZSA9ICcnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgMzogeyAvLyBSZWNlaXZlZCBDUiBMRiBDUlxuICAgICAgICAgICAgICBpZiAodGhpcy5ieXRlQ291bnQgPT09IE1BWF9IRUFERVJfU0laRSlcbiAgICAgICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgICAgICAgICsrdGhpcy5ieXRlQ291bnQ7XG4gICAgICAgICAgICAgIGlmIChjaHVua1twb3MrK10gIT09IDEwLyogJ1xcbicgKi8pXG4gICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICAgICAgICAvLyBFbmQgb2YgaGVhZGVyXG4gICAgICAgICAgICAgIGNvbnN0IGhlYWRlciA9IHRoaXMuaGVhZGVyO1xuICAgICAgICAgICAgICB0aGlzLnJlc2V0KCk7XG4gICAgICAgICAgICAgIHRoaXMuY2IoaGVhZGVyKTtcbiAgICAgICAgICAgICAgcmV0dXJuIHBvcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHBvcztcbiAgfVxufVxuXG5jbGFzcyBGaWxlU3RyZWFtIGV4dGVuZHMgUmVhZGFibGUge1xuICBjb25zdHJ1Y3RvcihvcHRzLCBvd25lcikge1xuICAgIHN1cGVyKG9wdHMpO1xuICAgIHRoaXMudHJ1bmNhdGVkID0gZmFsc2U7XG4gICAgdGhpcy5fcmVhZGNiID0gbnVsbDtcbiAgICB0aGlzLm9uY2UoJ2VuZCcsICgpID0+IHtcbiAgICAgIC8vIFdlIG5lZWQgdG8gbWFrZSBzdXJlIHRoYXQgd2UgY2FsbCBhbnkgb3V0c3RhbmRpbmcgX3dyaXRlY2IoKSB0aGF0IGlzXG4gICAgICAvLyBhc3NvY2lhdGVkIHdpdGggdGhpcyBmaWxlIHNvIHRoYXQgcHJvY2Vzc2luZyBvZiB0aGUgcmVzdCBvZiB0aGUgZm9ybVxuICAgICAgLy8gY2FuIGNvbnRpbnVlLiBUaGlzIG1heSBub3QgaGFwcGVuIGlmIHRoZSBmaWxlIHN0cmVhbSBlbmRzIHJpZ2h0IGFmdGVyXG4gICAgICAvLyBiYWNrcHJlc3N1cmUga2lja3MgaW4sIHNvIHdlIGZvcmNlIGl0IGhlcmUuXG4gICAgICB0aGlzLl9yZWFkKCk7XG4gICAgICBpZiAoLS1vd25lci5fZmlsZUVuZHNMZWZ0ID09PSAwICYmIG93bmVyLl9maW5hbGNiKSB7XG4gICAgICAgIGNvbnN0IGNiID0gb3duZXIuX2ZpbmFsY2I7XG4gICAgICAgIG93bmVyLl9maW5hbGNiID0gbnVsbDtcbiAgICAgICAgLy8gTWFrZSBzdXJlIG90aGVyICdlbmQnIGV2ZW50IGhhbmRsZXJzIGdldCBhIGNoYW5jZSB0byBiZSBleGVjdXRlZFxuICAgICAgICAvLyBiZWZvcmUgYnVzYm95J3MgJ2ZpbmlzaCcgZXZlbnQgaXMgZW1pdHRlZFxuICAgICAgICBwcm9jZXNzLm5leHRUaWNrKGNiKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBfcmVhZChuKSB7XG4gICAgY29uc3QgY2IgPSB0aGlzLl9yZWFkY2I7XG4gICAgaWYgKGNiKSB7XG4gICAgICB0aGlzLl9yZWFkY2IgPSBudWxsO1xuICAgICAgY2IoKTtcbiAgICB9XG4gIH1cbn1cblxuY29uc3QgaWdub3JlRGF0YSA9IHtcbiAgcHVzaDogKGNodW5rLCBwb3MpID0+IHt9LFxuICBkZXN0cm95OiAoKSA9PiB7fSxcbn07XG5cbmZ1bmN0aW9uIGNhbGxBbmRVbnNldENiKHNlbGYsIGVycikge1xuICBjb25zdCBjYiA9IHNlbGYuX3dyaXRlY2I7XG4gIHNlbGYuX3dyaXRlY2IgPSBudWxsO1xuICBpZiAoZXJyKVxuICAgIHNlbGYuZGVzdHJveShlcnIpO1xuICBlbHNlIGlmIChjYilcbiAgICBjYigpO1xufVxuXG5mdW5jdGlvbiBudWxsRGVjb2Rlcih2YWwsIGhpbnQpIHtcbiAgcmV0dXJuIHZhbDtcbn1cblxuY2xhc3MgTXVsdGlwYXJ0IGV4dGVuZHMgV3JpdGFibGUge1xuICBjb25zdHJ1Y3RvcihjZmcpIHtcbiAgICBjb25zdCBzdHJlYW1PcHRzID0ge1xuICAgICAgYXV0b0Rlc3Ryb3k6IHRydWUsXG4gICAgICBlbWl0Q2xvc2U6IHRydWUsXG4gICAgICBoaWdoV2F0ZXJNYXJrOiAodHlwZW9mIGNmZy5oaWdoV2F0ZXJNYXJrID09PSAnbnVtYmVyJ1xuICAgICAgICAgICAgICAgICAgICAgID8gY2ZnLmhpZ2hXYXRlck1hcmtcbiAgICAgICAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCksXG4gICAgfTtcbiAgICBzdXBlcihzdHJlYW1PcHRzKTtcblxuICAgIGlmICghY2ZnLmNvblR5cGUucGFyYW1zIHx8IHR5cGVvZiBjZmcuY29uVHlwZS5wYXJhbXMuYm91bmRhcnkgIT09ICdzdHJpbmcnKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdNdWx0aXBhcnQ6IEJvdW5kYXJ5IG5vdCBmb3VuZCcpO1xuXG4gICAgY29uc3QgYm91bmRhcnkgPSBjZmcuY29uVHlwZS5wYXJhbXMuYm91bmRhcnk7XG4gICAgY29uc3QgcGFyYW1EZWNvZGVyID0gKHR5cGVvZiBjZmcuZGVmUGFyYW1DaGFyc2V0ID09PSAnc3RyaW5nJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICYmIGNmZy5kZWZQYXJhbUNoYXJzZXRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPyBnZXREZWNvZGVyKGNmZy5kZWZQYXJhbUNoYXJzZXQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDogbnVsbERlY29kZXIpO1xuICAgIGNvbnN0IGRlZkNoYXJzZXQgPSAoY2ZnLmRlZkNoYXJzZXQgfHwgJ3V0ZjgnKTtcbiAgICBjb25zdCBwcmVzZXJ2ZVBhdGggPSBjZmcucHJlc2VydmVQYXRoO1xuICAgIGNvbnN0IGZpbGVPcHRzID0ge1xuICAgICAgYXV0b0Rlc3Ryb3k6IHRydWUsXG4gICAgICBlbWl0Q2xvc2U6IHRydWUsXG4gICAgICBoaWdoV2F0ZXJNYXJrOiAodHlwZW9mIGNmZy5maWxlSHdtID09PSAnbnVtYmVyJ1xuICAgICAgICAgICAgICAgICAgICAgID8gY2ZnLmZpbGVId21cbiAgICAgICAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCksXG4gICAgfTtcblxuICAgIGNvbnN0IGxpbWl0cyA9IGNmZy5saW1pdHM7XG4gICAgY29uc3QgZmllbGRTaXplTGltaXQgPSAobGltaXRzICYmIHR5cGVvZiBsaW1pdHMuZmllbGRTaXplID09PSAnbnVtYmVyJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gbGltaXRzLmZpZWxkU2l6ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogMSAqIDEwMjQgKiAxMDI0KTtcbiAgICBjb25zdCBmaWxlU2l6ZUxpbWl0ID0gKGxpbWl0cyAmJiB0eXBlb2YgbGltaXRzLmZpbGVTaXplID09PSAnbnVtYmVyJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBsaW1pdHMuZmlsZVNpemVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIDogSW5maW5pdHkpO1xuICAgIGNvbnN0IGZpbGVzTGltaXQgPSAobGltaXRzICYmIHR5cGVvZiBsaW1pdHMuZmlsZXMgPT09ICdudW1iZXInXG4gICAgICAgICAgICAgICAgICAgICAgICA/IGxpbWl0cy5maWxlc1xuICAgICAgICAgICAgICAgICAgICAgICAgOiBJbmZpbml0eSk7XG4gICAgY29uc3QgZmllbGRzTGltaXQgPSAobGltaXRzICYmIHR5cGVvZiBsaW1pdHMuZmllbGRzID09PSAnbnVtYmVyJ1xuICAgICAgICAgICAgICAgICAgICAgICAgID8gbGltaXRzLmZpZWxkc1xuICAgICAgICAgICAgICAgICAgICAgICAgIDogSW5maW5pdHkpO1xuICAgIGNvbnN0IHBhcnRzTGltaXQgPSAobGltaXRzICYmIHR5cGVvZiBsaW1pdHMucGFydHMgPT09ICdudW1iZXInXG4gICAgICAgICAgICAgICAgICAgICAgICA/IGxpbWl0cy5wYXJ0c1xuICAgICAgICAgICAgICAgICAgICAgICAgOiBJbmZpbml0eSk7XG5cbiAgICBsZXQgcGFydHMgPSAtMTsgLy8gQWNjb3VudCBmb3IgaW5pdGlhbCBib3VuZGFyeVxuICAgIGxldCBmaWVsZHMgPSAwO1xuICAgIGxldCBmaWxlcyA9IDA7XG4gICAgbGV0IHNraXBQYXJ0ID0gZmFsc2U7XG5cbiAgICB0aGlzLl9maWxlRW5kc0xlZnQgPSAwO1xuICAgIHRoaXMuX2ZpbGVTdHJlYW0gPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fY29tcGxldGUgPSBmYWxzZTtcbiAgICBsZXQgZmlsZVNpemUgPSAwO1xuXG4gICAgbGV0IGZpZWxkO1xuICAgIGxldCBmaWVsZFNpemUgPSAwO1xuICAgIGxldCBwYXJ0Q2hhcnNldDtcbiAgICBsZXQgcGFydEVuY29kaW5nO1xuICAgIGxldCBwYXJ0VHlwZTtcbiAgICBsZXQgcGFydE5hbWU7XG4gICAgbGV0IHBhcnRUcnVuY2F0ZWQgPSBmYWxzZTtcblxuICAgIGxldCBoaXRGaWxlc0xpbWl0ID0gZmFsc2U7XG4gICAgbGV0IGhpdEZpZWxkc0xpbWl0ID0gZmFsc2U7XG5cbiAgICB0aGlzLl9ocGFyc2VyID0gbnVsbDtcbiAgICBjb25zdCBocGFyc2VyID0gbmV3IEhlYWRlclBhcnNlcigoaGVhZGVyKSA9PiB7XG4gICAgICB0aGlzLl9ocGFyc2VyID0gbnVsbDtcbiAgICAgIHNraXBQYXJ0ID0gZmFsc2U7XG5cbiAgICAgIHBhcnRUeXBlID0gJ3RleHQvcGxhaW4nO1xuICAgICAgcGFydENoYXJzZXQgPSBkZWZDaGFyc2V0O1xuICAgICAgcGFydEVuY29kaW5nID0gJzdiaXQnO1xuICAgICAgcGFydE5hbWUgPSB1bmRlZmluZWQ7XG4gICAgICBwYXJ0VHJ1bmNhdGVkID0gZmFsc2U7XG5cbiAgICAgIGxldCBmaWxlbmFtZTtcbiAgICAgIGlmICghaGVhZGVyWydjb250ZW50LWRpc3Bvc2l0aW9uJ10pIHtcbiAgICAgICAgc2tpcFBhcnQgPSB0cnVlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGRpc3AgPSBwYXJzZURpc3Bvc2l0aW9uKGhlYWRlclsnY29udGVudC1kaXNwb3NpdGlvbiddWzBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1EZWNvZGVyKTtcbiAgICAgIGlmICghZGlzcCB8fCBkaXNwLnR5cGUgIT09ICdmb3JtLWRhdGEnKSB7XG4gICAgICAgIHNraXBQYXJ0ID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoZGlzcC5wYXJhbXMpIHtcbiAgICAgICAgaWYgKGRpc3AucGFyYW1zLm5hbWUpXG4gICAgICAgICAgcGFydE5hbWUgPSBkaXNwLnBhcmFtcy5uYW1lO1xuXG4gICAgICAgIGlmIChkaXNwLnBhcmFtc1snZmlsZW5hbWUqJ10pXG4gICAgICAgICAgZmlsZW5hbWUgPSBkaXNwLnBhcmFtc1snZmlsZW5hbWUqJ107XG4gICAgICAgIGVsc2UgaWYgKGRpc3AucGFyYW1zLmZpbGVuYW1lKVxuICAgICAgICAgIGZpbGVuYW1lID0gZGlzcC5wYXJhbXMuZmlsZW5hbWU7XG5cbiAgICAgICAgaWYgKGZpbGVuYW1lICE9PSB1bmRlZmluZWQgJiYgIXByZXNlcnZlUGF0aClcbiAgICAgICAgICBmaWxlbmFtZSA9IGJhc2VuYW1lKGZpbGVuYW1lKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGhlYWRlclsnY29udGVudC10eXBlJ10pIHtcbiAgICAgICAgY29uc3QgY29uVHlwZSA9IHBhcnNlQ29udGVudFR5cGUoaGVhZGVyWydjb250ZW50LXR5cGUnXVswXSk7XG4gICAgICAgIGlmIChjb25UeXBlKSB7XG4gICAgICAgICAgcGFydFR5cGUgPSBgJHtjb25UeXBlLnR5cGV9LyR7Y29uVHlwZS5zdWJ0eXBlfWA7XG4gICAgICAgICAgaWYgKGNvblR5cGUucGFyYW1zICYmIHR5cGVvZiBjb25UeXBlLnBhcmFtcy5jaGFyc2V0ID09PSAnc3RyaW5nJylcbiAgICAgICAgICAgIHBhcnRDaGFyc2V0ID0gY29uVHlwZS5wYXJhbXMuY2hhcnNldC50b0xvd2VyQ2FzZSgpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChoZWFkZXJbJ2NvbnRlbnQtdHJhbnNmZXItZW5jb2RpbmcnXSlcbiAgICAgICAgcGFydEVuY29kaW5nID0gaGVhZGVyWydjb250ZW50LXRyYW5zZmVyLWVuY29kaW5nJ11bMF0udG9Mb3dlckNhc2UoKTtcblxuICAgICAgaWYgKHBhcnRUeXBlID09PSAnYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtJyB8fCBmaWxlbmFtZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIC8vIEZpbGVcblxuICAgICAgICBpZiAoZmlsZXMgPT09IGZpbGVzTGltaXQpIHtcbiAgICAgICAgICBpZiAoIWhpdEZpbGVzTGltaXQpIHtcbiAgICAgICAgICAgIGhpdEZpbGVzTGltaXQgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5lbWl0KCdmaWxlc0xpbWl0Jyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHNraXBQYXJ0ID0gdHJ1ZTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgKytmaWxlcztcblxuICAgICAgICBpZiAodGhpcy5saXN0ZW5lckNvdW50KCdmaWxlJykgPT09IDApIHtcbiAgICAgICAgICBza2lwUGFydCA9IHRydWU7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgZmlsZVNpemUgPSAwO1xuICAgICAgICB0aGlzLl9maWxlU3RyZWFtID0gbmV3IEZpbGVTdHJlYW0oZmlsZU9wdHMsIHRoaXMpO1xuICAgICAgICArK3RoaXMuX2ZpbGVFbmRzTGVmdDtcbiAgICAgICAgdGhpcy5lbWl0KFxuICAgICAgICAgICdmaWxlJyxcbiAgICAgICAgICBwYXJ0TmFtZSxcbiAgICAgICAgICB0aGlzLl9maWxlU3RyZWFtLFxuICAgICAgICAgIHsgZmlsZW5hbWUsXG4gICAgICAgICAgICBlbmNvZGluZzogcGFydEVuY29kaW5nLFxuICAgICAgICAgICAgbWltZVR5cGU6IHBhcnRUeXBlIH1cbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIE5vbi1maWxlXG5cbiAgICAgICAgaWYgKGZpZWxkcyA9PT0gZmllbGRzTGltaXQpIHtcbiAgICAgICAgICBpZiAoIWhpdEZpZWxkc0xpbWl0KSB7XG4gICAgICAgICAgICBoaXRGaWVsZHNMaW1pdCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLmVtaXQoJ2ZpZWxkc0xpbWl0Jyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHNraXBQYXJ0ID0gdHJ1ZTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgKytmaWVsZHM7XG5cbiAgICAgICAgaWYgKHRoaXMubGlzdGVuZXJDb3VudCgnZmllbGQnKSA9PT0gMCkge1xuICAgICAgICAgIHNraXBQYXJ0ID0gdHJ1ZTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBmaWVsZCA9IFtdO1xuICAgICAgICBmaWVsZFNpemUgPSAwO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgbGV0IG1hdGNoUG9zdEJvdW5kYXJ5ID0gMDtcbiAgICBjb25zdCBzc0NiID0gKGlzTWF0Y2gsIGRhdGEsIHN0YXJ0LCBlbmQsIGlzRGF0YVNhZmUpID0+IHtcbnJldHJ5ZGF0YTpcbiAgICAgIHdoaWxlIChkYXRhKSB7XG4gICAgICAgIGlmICh0aGlzLl9ocGFyc2VyICE9PSBudWxsKSB7XG4gICAgICAgICAgY29uc3QgcmV0ID0gdGhpcy5faHBhcnNlci5wdXNoKGRhdGEsIHN0YXJ0LCBlbmQpO1xuICAgICAgICAgIGlmIChyZXQgPT09IC0xKSB7XG4gICAgICAgICAgICB0aGlzLl9ocGFyc2VyID0gbnVsbDtcbiAgICAgICAgICAgIGhwYXJzZXIucmVzZXQoKTtcbiAgICAgICAgICAgIHRoaXMuZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ01hbGZvcm1lZCBwYXJ0IGhlYWRlcicpKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzdGFydCA9IHJldDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzdGFydCA9PT0gZW5kKVxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGlmIChtYXRjaFBvc3RCb3VuZGFyeSAhPT0gMCkge1xuICAgICAgICAgIGlmIChtYXRjaFBvc3RCb3VuZGFyeSA9PT0gMSkge1xuICAgICAgICAgICAgc3dpdGNoIChkYXRhW3N0YXJ0XSkge1xuICAgICAgICAgICAgICBjYXNlIDQ1OiAvLyAnLSdcbiAgICAgICAgICAgICAgICAvLyBUcnkgbWF0Y2hpbmcgJy0tJyBhZnRlciBib3VuZGFyeVxuICAgICAgICAgICAgICAgIG1hdGNoUG9zdEJvdW5kYXJ5ID0gMjtcbiAgICAgICAgICAgICAgICArK3N0YXJ0O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIDEzOiAvLyAnXFxyJ1xuICAgICAgICAgICAgICAgIC8vIFRyeSBtYXRjaGluZyBDUiBMRiBiZWZvcmUgaGVhZGVyXG4gICAgICAgICAgICAgICAgbWF0Y2hQb3N0Qm91bmRhcnkgPSAzO1xuICAgICAgICAgICAgICAgICsrc3RhcnQ7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgbWF0Y2hQb3N0Qm91bmRhcnkgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHN0YXJ0ID09PSBlbmQpXG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAobWF0Y2hQb3N0Qm91bmRhcnkgPT09IDIpIHtcbiAgICAgICAgICAgIG1hdGNoUG9zdEJvdW5kYXJ5ID0gMDtcbiAgICAgICAgICAgIGlmIChkYXRhW3N0YXJ0XSA9PT0gNDUvKiAnLScgKi8pIHtcbiAgICAgICAgICAgICAgLy8gRW5kIG9mIG11bHRpcGFydCBkYXRhXG4gICAgICAgICAgICAgIHRoaXMuX2NvbXBsZXRlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgdGhpcy5fYnBhcnNlciA9IGlnbm9yZURhdGE7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFdlIHNhdyBzb21ldGhpbmcgb3RoZXIgdGhhbiAnLScsIHNvIHB1dCB0aGUgZGFzaCB3ZSBjb25zdW1lZFxuICAgICAgICAgICAgLy8gXCJiYWNrXCJcbiAgICAgICAgICAgIGNvbnN0IHdyaXRlY2IgPSB0aGlzLl93cml0ZWNiO1xuICAgICAgICAgICAgdGhpcy5fd3JpdGVjYiA9IG5vb3A7XG4gICAgICAgICAgICBzc0NiKGZhbHNlLCBCVUZfREFTSCwgMCwgMSwgZmFsc2UpO1xuICAgICAgICAgICAgdGhpcy5fd3JpdGVjYiA9IHdyaXRlY2I7XG4gICAgICAgICAgfSBlbHNlIGlmIChtYXRjaFBvc3RCb3VuZGFyeSA9PT0gMykge1xuICAgICAgICAgICAgbWF0Y2hQb3N0Qm91bmRhcnkgPSAwO1xuICAgICAgICAgICAgaWYgKGRhdGFbc3RhcnRdID09PSAxMC8qICdcXG4nICovKSB7XG4gICAgICAgICAgICAgICsrc3RhcnQ7XG4gICAgICAgICAgICAgIGlmIChwYXJ0cyA+PSBwYXJ0c0xpbWl0KVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAvLyBQcmVwYXJlIHRoZSBoZWFkZXIgcGFyc2VyXG4gICAgICAgICAgICAgIHRoaXMuX2hwYXJzZXIgPSBocGFyc2VyO1xuICAgICAgICAgICAgICBpZiAoc3RhcnQgPT09IGVuZClcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgLy8gUHJvY2VzcyB0aGUgcmVtYWluaW5nIGRhdGEgYXMgYSBoZWFkZXJcbiAgICAgICAgICAgICAgY29udGludWUgcmV0cnlkYXRhO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgLy8gV2Ugc2F3IHNvbWV0aGluZyBvdGhlciB0aGFuIExGLCBzbyBwdXQgdGhlIENSIHdlIGNvbnN1bWVkXG4gICAgICAgICAgICAgIC8vIFwiYmFja1wiXG4gICAgICAgICAgICAgIGNvbnN0IHdyaXRlY2IgPSB0aGlzLl93cml0ZWNiO1xuICAgICAgICAgICAgICB0aGlzLl93cml0ZWNiID0gbm9vcDtcbiAgICAgICAgICAgICAgc3NDYihmYWxzZSwgQlVGX0NSLCAwLCAxLCBmYWxzZSk7XG4gICAgICAgICAgICAgIHRoaXMuX3dyaXRlY2IgPSB3cml0ZWNiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghc2tpcFBhcnQpIHtcbiAgICAgICAgICBpZiAodGhpcy5fZmlsZVN0cmVhbSkge1xuICAgICAgICAgICAgbGV0IGNodW5rO1xuICAgICAgICAgICAgY29uc3QgYWN0dWFsTGVuID0gTWF0aC5taW4oZW5kIC0gc3RhcnQsIGZpbGVTaXplTGltaXQgLSBmaWxlU2l6ZSk7XG4gICAgICAgICAgICBpZiAoIWlzRGF0YVNhZmUpIHtcbiAgICAgICAgICAgICAgY2h1bmsgPSBCdWZmZXIuYWxsb2NVbnNhZmUoYWN0dWFsTGVuKTtcbiAgICAgICAgICAgICAgZGF0YS5jb3B5KGNodW5rLCAwLCBzdGFydCwgc3RhcnQgKyBhY3R1YWxMZW4pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgY2h1bmsgPSBkYXRhLnNsaWNlKHN0YXJ0LCBzdGFydCArIGFjdHVhbExlbik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZpbGVTaXplICs9IGNodW5rLmxlbmd0aDtcbiAgICAgICAgICAgIGlmIChmaWxlU2l6ZSA9PT0gZmlsZVNpemVMaW1pdCkge1xuICAgICAgICAgICAgICBpZiAoY2h1bmsubGVuZ3RoID4gMClcbiAgICAgICAgICAgICAgICB0aGlzLl9maWxlU3RyZWFtLnB1c2goY2h1bmspO1xuICAgICAgICAgICAgICB0aGlzLl9maWxlU3RyZWFtLmVtaXQoJ2xpbWl0Jyk7XG4gICAgICAgICAgICAgIHRoaXMuX2ZpbGVTdHJlYW0udHJ1bmNhdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgc2tpcFBhcnQgPSB0cnVlO1xuICAgICAgICAgICAgfSBlbHNlIGlmICghdGhpcy5fZmlsZVN0cmVhbS5wdXNoKGNodW5rKSkge1xuICAgICAgICAgICAgICBpZiAodGhpcy5fd3JpdGVjYilcbiAgICAgICAgICAgICAgICB0aGlzLl9maWxlU3RyZWFtLl9yZWFkY2IgPSB0aGlzLl93cml0ZWNiO1xuICAgICAgICAgICAgICB0aGlzLl93cml0ZWNiID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKGZpZWxkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGxldCBjaHVuaztcbiAgICAgICAgICAgIGNvbnN0IGFjdHVhbExlbiA9IE1hdGgubWluKFxuICAgICAgICAgICAgICBlbmQgLSBzdGFydCxcbiAgICAgICAgICAgICAgZmllbGRTaXplTGltaXQgLSBmaWVsZFNpemVcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBpZiAoIWlzRGF0YVNhZmUpIHtcbiAgICAgICAgICAgICAgY2h1bmsgPSBCdWZmZXIuYWxsb2NVbnNhZmUoYWN0dWFsTGVuKTtcbiAgICAgICAgICAgICAgZGF0YS5jb3B5KGNodW5rLCAwLCBzdGFydCwgc3RhcnQgKyBhY3R1YWxMZW4pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgY2h1bmsgPSBkYXRhLnNsaWNlKHN0YXJ0LCBzdGFydCArIGFjdHVhbExlbik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZpZWxkU2l6ZSArPSBhY3R1YWxMZW47XG4gICAgICAgICAgICBmaWVsZC5wdXNoKGNodW5rKTtcbiAgICAgICAgICAgIGlmIChmaWVsZFNpemUgPT09IGZpZWxkU2l6ZUxpbWl0KSB7XG4gICAgICAgICAgICAgIHNraXBQYXJ0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgcGFydFRydW5jYXRlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc01hdGNoKSB7XG4gICAgICAgIG1hdGNoUG9zdEJvdW5kYXJ5ID0gMTtcblxuICAgICAgICBpZiAodGhpcy5fZmlsZVN0cmVhbSkge1xuICAgICAgICAgIC8vIEVuZCB0aGUgYWN0aXZlIGZpbGUgc3RyZWFtIGlmIHRoZSBwcmV2aW91cyBwYXJ0IHdhcyBhIGZpbGVcbiAgICAgICAgICB0aGlzLl9maWxlU3RyZWFtLnB1c2gobnVsbCk7XG4gICAgICAgICAgdGhpcy5fZmlsZVN0cmVhbSA9IG51bGw7XG4gICAgICAgIH0gZWxzZSBpZiAoZmllbGQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGxldCBkYXRhO1xuICAgICAgICAgIHN3aXRjaCAoZmllbGQubGVuZ3RoKSB7XG4gICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgIGRhdGEgPSAnJztcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgIGRhdGEgPSBjb252ZXJ0VG9VVEY4KGZpZWxkWzBdLCBwYXJ0Q2hhcnNldCwgMCk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgZGF0YSA9IGNvbnZlcnRUb1VURjgoXG4gICAgICAgICAgICAgICAgQnVmZmVyLmNvbmNhdChmaWVsZCwgZmllbGRTaXplKSxcbiAgICAgICAgICAgICAgICBwYXJ0Q2hhcnNldCxcbiAgICAgICAgICAgICAgICAwXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZpZWxkID0gdW5kZWZpbmVkO1xuICAgICAgICAgIGZpZWxkU2l6ZSA9IDA7XG4gICAgICAgICAgdGhpcy5lbWl0KFxuICAgICAgICAgICAgJ2ZpZWxkJyxcbiAgICAgICAgICAgIHBhcnROYW1lLFxuICAgICAgICAgICAgZGF0YSxcbiAgICAgICAgICAgIHsgbmFtZVRydW5jYXRlZDogZmFsc2UsXG4gICAgICAgICAgICAgIHZhbHVlVHJ1bmNhdGVkOiBwYXJ0VHJ1bmNhdGVkLFxuICAgICAgICAgICAgICBlbmNvZGluZzogcGFydEVuY29kaW5nLFxuICAgICAgICAgICAgICBtaW1lVHlwZTogcGFydFR5cGUgfVxuICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoKytwYXJ0cyA9PT0gcGFydHNMaW1pdClcbiAgICAgICAgICB0aGlzLmVtaXQoJ3BhcnRzTGltaXQnKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHRoaXMuX2JwYXJzZXIgPSBuZXcgU3RyZWFtU2VhcmNoKGBcXHJcXG4tLSR7Ym91bmRhcnl9YCwgc3NDYik7XG5cbiAgICB0aGlzLl93cml0ZWNiID0gbnVsbDtcbiAgICB0aGlzLl9maW5hbGNiID0gbnVsbDtcblxuICAgIC8vIEp1c3QgaW4gY2FzZSB0aGVyZSBpcyBubyBwcmVhbWJsZVxuICAgIHRoaXMud3JpdGUoQlVGX0NSTEYpO1xuICB9XG5cbiAgc3RhdGljIGRldGVjdChjb25UeXBlKSB7XG4gICAgcmV0dXJuIChjb25UeXBlLnR5cGUgPT09ICdtdWx0aXBhcnQnICYmIGNvblR5cGUuc3VidHlwZSA9PT0gJ2Zvcm0tZGF0YScpO1xuICB9XG5cbiAgX3dyaXRlKGNodW5rLCBlbmMsIGNiKSB7XG4gICAgdGhpcy5fd3JpdGVjYiA9IGNiO1xuICAgIHRoaXMuX2JwYXJzZXIucHVzaChjaHVuaywgMCk7XG4gICAgaWYgKHRoaXMuX3dyaXRlY2IpXG4gICAgICBjYWxsQW5kVW5zZXRDYih0aGlzKTtcbiAgfVxuXG4gIF9kZXN0cm95KGVyciwgY2IpIHtcbiAgICB0aGlzLl9ocGFyc2VyID0gbnVsbDtcbiAgICB0aGlzLl9icGFyc2VyID0gaWdub3JlRGF0YTtcbiAgICBpZiAoIWVycilcbiAgICAgIGVyciA9IGNoZWNrRW5kU3RhdGUodGhpcyk7XG4gICAgY29uc3QgZmlsZVN0cmVhbSA9IHRoaXMuX2ZpbGVTdHJlYW07XG4gICAgaWYgKGZpbGVTdHJlYW0pIHtcbiAgICAgIHRoaXMuX2ZpbGVTdHJlYW0gPSBudWxsO1xuICAgICAgZmlsZVN0cmVhbS5kZXN0cm95KGVycik7XG4gICAgfVxuICAgIGNiKGVycik7XG4gIH1cblxuICBfZmluYWwoY2IpIHtcbiAgICB0aGlzLl9icGFyc2VyLmRlc3Ryb3koKTtcbiAgICBpZiAoIXRoaXMuX2NvbXBsZXRlKVxuICAgICAgcmV0dXJuIGNiKG5ldyBFcnJvcignVW5leHBlY3RlZCBlbmQgb2YgZm9ybScpKTtcbiAgICBpZiAodGhpcy5fZmlsZUVuZHNMZWZ0KVxuICAgICAgdGhpcy5fZmluYWxjYiA9IGZpbmFsY2IuYmluZChudWxsLCB0aGlzLCBjYik7XG4gICAgZWxzZVxuICAgICAgZmluYWxjYih0aGlzLCBjYik7XG4gIH1cbn1cblxuZnVuY3Rpb24gZmluYWxjYihzZWxmLCBjYiwgZXJyKSB7XG4gIGlmIChlcnIpXG4gICAgcmV0dXJuIGNiKGVycik7XG4gIGVyciA9IGNoZWNrRW5kU3RhdGUoc2VsZik7XG4gIGNiKGVycik7XG59XG5cbmZ1bmN0aW9uIGNoZWNrRW5kU3RhdGUoc2VsZikge1xuICBpZiAoc2VsZi5faHBhcnNlcilcbiAgICByZXR1cm4gbmV3IEVycm9yKCdNYWxmb3JtZWQgcGFydCBoZWFkZXInKTtcbiAgY29uc3QgZmlsZVN0cmVhbSA9IHNlbGYuX2ZpbGVTdHJlYW07XG4gIGlmIChmaWxlU3RyZWFtKSB7XG4gICAgc2VsZi5fZmlsZVN0cmVhbSA9IG51bGw7XG4gICAgZmlsZVN0cmVhbS5kZXN0cm95KG5ldyBFcnJvcignVW5leHBlY3RlZCBlbmQgb2YgZmlsZScpKTtcbiAgfVxuICBpZiAoIXNlbGYuX2NvbXBsZXRlKVxuICAgIHJldHVybiBuZXcgRXJyb3IoJ1VuZXhwZWN0ZWQgZW5kIG9mIGZvcm0nKTtcbn1cblxuY29uc3QgVE9LRU4gPSBbXG4gIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsXG4gIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsXG4gIDAsIDEsIDAsIDEsIDEsIDEsIDEsIDEsIDAsIDAsIDEsIDEsIDAsIDEsIDEsIDAsXG4gIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDAsIDAsIDAsIDAsIDAsIDAsXG4gIDAsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsXG4gIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDAsIDAsIDAsIDEsIDEsXG4gIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsXG4gIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDAsIDEsIDAsIDEsIDAsXG4gIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsXG4gIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsXG4gIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsXG4gIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsXG4gIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsXG4gIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsXG4gIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsXG4gIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsXG5dO1xuXG5jb25zdCBGSUVMRF9WQ0hBUiA9IFtcbiAgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMSwgMCwgMCwgMCwgMCwgMCwgMCxcbiAgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCxcbiAgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSxcbiAgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSxcbiAgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSxcbiAgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSxcbiAgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSxcbiAgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMCxcbiAgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSxcbiAgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSxcbiAgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSxcbiAgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSxcbiAgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSxcbiAgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSxcbiAgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSxcbiAgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSxcbl07XG5cbm1vZHVsZS5leHBvcnRzID0gTXVsdGlwYXJ0O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/busboy/lib/types/multipart.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/busboy/lib/types/urlencoded.js":
/*!******************************************************!*\
  !*** ../node_modules/busboy/lib/types/urlencoded.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nconst { Writable } = __webpack_require__(/*! stream */ \"stream\");\n\nconst { getDecoder } = __webpack_require__(/*! ../utils.js */ \"(ssr)/../node_modules/busboy/lib/utils.js\");\n\nclass URLEncoded extends Writable {\n  constructor(cfg) {\n    const streamOpts = {\n      autoDestroy: true,\n      emitClose: true,\n      highWaterMark: (typeof cfg.highWaterMark === 'number'\n                      ? cfg.highWaterMark\n                      : undefined),\n    };\n    super(streamOpts);\n\n    let charset = (cfg.defCharset || 'utf8');\n    if (cfg.conType.params && typeof cfg.conType.params.charset === 'string')\n      charset = cfg.conType.params.charset;\n\n    this.charset = charset;\n\n    const limits = cfg.limits;\n    this.fieldSizeLimit = (limits && typeof limits.fieldSize === 'number'\n                           ? limits.fieldSize\n                           : 1 * 1024 * 1024);\n    this.fieldsLimit = (limits && typeof limits.fields === 'number'\n                        ? limits.fields\n                        : Infinity);\n    this.fieldNameSizeLimit = (\n      limits && typeof limits.fieldNameSize === 'number'\n      ? limits.fieldNameSize\n      : 100\n    );\n\n    this._inKey = true;\n    this._keyTrunc = false;\n    this._valTrunc = false;\n    this._bytesKey = 0;\n    this._bytesVal = 0;\n    this._fields = 0;\n    this._key = '';\n    this._val = '';\n    this._byte = -2;\n    this._lastPos = 0;\n    this._encode = 0;\n    this._decoder = getDecoder(charset);\n  }\n\n  static detect(conType) {\n    return (conType.type === 'application'\n            && conType.subtype === 'x-www-form-urlencoded');\n  }\n\n  _write(chunk, enc, cb) {\n    if (this._fields >= this.fieldsLimit)\n      return cb();\n\n    let i = 0;\n    const len = chunk.length;\n    this._lastPos = 0;\n\n    // Check if we last ended mid-percent-encoded byte\n    if (this._byte !== -2) {\n      i = readPctEnc(this, chunk, i, len);\n      if (i === -1)\n        return cb(new Error('Malformed urlencoded form'));\n      if (i >= len)\n        return cb();\n      if (this._inKey)\n        ++this._bytesKey;\n      else\n        ++this._bytesVal;\n    }\n\nmain:\n    while (i < len) {\n      if (this._inKey) {\n        // Parsing key\n\n        i = skipKeyBytes(this, chunk, i, len);\n\n        while (i < len) {\n          switch (chunk[i]) {\n            case 61: // '='\n              if (this._lastPos < i)\n                this._key += chunk.latin1Slice(this._lastPos, i);\n              this._lastPos = ++i;\n              this._key = this._decoder(this._key, this._encode);\n              this._encode = 0;\n              this._inKey = false;\n              continue main;\n            case 38: // '&'\n              if (this._lastPos < i)\n                this._key += chunk.latin1Slice(this._lastPos, i);\n              this._lastPos = ++i;\n              this._key = this._decoder(this._key, this._encode);\n              this._encode = 0;\n              if (this._bytesKey > 0) {\n                this.emit(\n                  'field',\n                  this._key,\n                  '',\n                  { nameTruncated: this._keyTrunc,\n                    valueTruncated: false,\n                    encoding: this.charset,\n                    mimeType: 'text/plain' }\n                );\n              }\n              this._key = '';\n              this._val = '';\n              this._keyTrunc = false;\n              this._valTrunc = false;\n              this._bytesKey = 0;\n              this._bytesVal = 0;\n              if (++this._fields >= this.fieldsLimit) {\n                this.emit('fieldsLimit');\n                return cb();\n              }\n              continue;\n            case 43: // '+'\n              if (this._lastPos < i)\n                this._key += chunk.latin1Slice(this._lastPos, i);\n              this._key += ' ';\n              this._lastPos = i + 1;\n              break;\n            case 37: // '%'\n              if (this._encode === 0)\n                this._encode = 1;\n              if (this._lastPos < i)\n                this._key += chunk.latin1Slice(this._lastPos, i);\n              this._lastPos = i + 1;\n              this._byte = -1;\n              i = readPctEnc(this, chunk, i + 1, len);\n              if (i === -1)\n                return cb(new Error('Malformed urlencoded form'));\n              if (i >= len)\n                return cb();\n              ++this._bytesKey;\n              i = skipKeyBytes(this, chunk, i, len);\n              continue;\n          }\n          ++i;\n          ++this._bytesKey;\n          i = skipKeyBytes(this, chunk, i, len);\n        }\n        if (this._lastPos < i)\n          this._key += chunk.latin1Slice(this._lastPos, i);\n      } else {\n        // Parsing value\n\n        i = skipValBytes(this, chunk, i, len);\n\n        while (i < len) {\n          switch (chunk[i]) {\n            case 38: // '&'\n              if (this._lastPos < i)\n                this._val += chunk.latin1Slice(this._lastPos, i);\n              this._lastPos = ++i;\n              this._inKey = true;\n              this._val = this._decoder(this._val, this._encode);\n              this._encode = 0;\n              if (this._bytesKey > 0 || this._bytesVal > 0) {\n                this.emit(\n                  'field',\n                  this._key,\n                  this._val,\n                  { nameTruncated: this._keyTrunc,\n                    valueTruncated: this._valTrunc,\n                    encoding: this.charset,\n                    mimeType: 'text/plain' }\n                );\n              }\n              this._key = '';\n              this._val = '';\n              this._keyTrunc = false;\n              this._valTrunc = false;\n              this._bytesKey = 0;\n              this._bytesVal = 0;\n              if (++this._fields >= this.fieldsLimit) {\n                this.emit('fieldsLimit');\n                return cb();\n              }\n              continue main;\n            case 43: // '+'\n              if (this._lastPos < i)\n                this._val += chunk.latin1Slice(this._lastPos, i);\n              this._val += ' ';\n              this._lastPos = i + 1;\n              break;\n            case 37: // '%'\n              if (this._encode === 0)\n                this._encode = 1;\n              if (this._lastPos < i)\n                this._val += chunk.latin1Slice(this._lastPos, i);\n              this._lastPos = i + 1;\n              this._byte = -1;\n              i = readPctEnc(this, chunk, i + 1, len);\n              if (i === -1)\n                return cb(new Error('Malformed urlencoded form'));\n              if (i >= len)\n                return cb();\n              ++this._bytesVal;\n              i = skipValBytes(this, chunk, i, len);\n              continue;\n          }\n          ++i;\n          ++this._bytesVal;\n          i = skipValBytes(this, chunk, i, len);\n        }\n        if (this._lastPos < i)\n          this._val += chunk.latin1Slice(this._lastPos, i);\n      }\n    }\n\n    cb();\n  }\n\n  _final(cb) {\n    if (this._byte !== -2)\n      return cb(new Error('Malformed urlencoded form'));\n    if (!this._inKey || this._bytesKey > 0 || this._bytesVal > 0) {\n      if (this._inKey)\n        this._key = this._decoder(this._key, this._encode);\n      else\n        this._val = this._decoder(this._val, this._encode);\n      this.emit(\n        'field',\n        this._key,\n        this._val,\n        { nameTruncated: this._keyTrunc,\n          valueTruncated: this._valTrunc,\n          encoding: this.charset,\n          mimeType: 'text/plain' }\n      );\n    }\n    cb();\n  }\n}\n\nfunction readPctEnc(self, chunk, pos, len) {\n  if (pos >= len)\n    return len;\n\n  if (self._byte === -1) {\n    // We saw a '%' but no hex characters yet\n    const hexUpper = HEX_VALUES[chunk[pos++]];\n    if (hexUpper === -1)\n      return -1;\n\n    if (hexUpper >= 8)\n      self._encode = 2; // Indicate high bits detected\n\n    if (pos < len) {\n      // Both hex characters are in this chunk\n      const hexLower = HEX_VALUES[chunk[pos++]];\n      if (hexLower === -1)\n        return -1;\n\n      if (self._inKey)\n        self._key += String.fromCharCode((hexUpper << 4) + hexLower);\n      else\n        self._val += String.fromCharCode((hexUpper << 4) + hexLower);\n\n      self._byte = -2;\n      self._lastPos = pos;\n    } else {\n      // Only one hex character was available in this chunk\n      self._byte = hexUpper;\n    }\n  } else {\n    // We saw only one hex character so far\n    const hexLower = HEX_VALUES[chunk[pos++]];\n    if (hexLower === -1)\n      return -1;\n\n    if (self._inKey)\n      self._key += String.fromCharCode((self._byte << 4) + hexLower);\n    else\n      self._val += String.fromCharCode((self._byte << 4) + hexLower);\n\n    self._byte = -2;\n    self._lastPos = pos;\n  }\n\n  return pos;\n}\n\nfunction skipKeyBytes(self, chunk, pos, len) {\n  // Skip bytes if we've truncated\n  if (self._bytesKey > self.fieldNameSizeLimit) {\n    if (!self._keyTrunc) {\n      if (self._lastPos < pos)\n        self._key += chunk.latin1Slice(self._lastPos, pos - 1);\n    }\n    self._keyTrunc = true;\n    for (; pos < len; ++pos) {\n      const code = chunk[pos];\n      if (code === 61/* '=' */ || code === 38/* '&' */)\n        break;\n      ++self._bytesKey;\n    }\n    self._lastPos = pos;\n  }\n\n  return pos;\n}\n\nfunction skipValBytes(self, chunk, pos, len) {\n  // Skip bytes if we've truncated\n  if (self._bytesVal > self.fieldSizeLimit) {\n    if (!self._valTrunc) {\n      if (self._lastPos < pos)\n        self._val += chunk.latin1Slice(self._lastPos, pos - 1);\n    }\n    self._valTrunc = true;\n    for (; pos < len; ++pos) {\n      if (chunk[pos] === 38/* '&' */)\n        break;\n      ++self._bytesVal;\n    }\n    self._lastPos = pos;\n  }\n\n  return pos;\n}\n\n/* eslint-disable no-multi-spaces */\nconst HEX_VALUES = [\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n   0,  1,  2,  3,  4,  5,  6,  7,  8,  9, -1, -1, -1, -1, -1, -1,\n  -1, 10, 11, 12, 13, 14, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, 10, 11, 12, 13, 14, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n];\n/* eslint-enable no-multi-spaces */\n\nmodule.exports = URLEncoded;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/busboy/lib/types/urlencoded.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/busboy/lib/utils.js":
/*!*******************************************!*\
  !*** ../node_modules/busboy/lib/utils.js ***!
  \*******************************************/
/***/ (function(module) {

eval("\n\nfunction parseContentType(str) {\n  if (str.length === 0)\n    return;\n\n  const params = Object.create(null);\n  let i = 0;\n\n  // Parse type\n  for (; i < str.length; ++i) {\n    const code = str.charCodeAt(i);\n    if (TOKEN[code] !== 1) {\n      if (code !== 47/* '/' */ || i === 0)\n        return;\n      break;\n    }\n  }\n  // Check for type without subtype\n  if (i === str.length)\n    return;\n\n  const type = str.slice(0, i).toLowerCase();\n\n  // Parse subtype\n  const subtypeStart = ++i;\n  for (; i < str.length; ++i) {\n    const code = str.charCodeAt(i);\n    if (TOKEN[code] !== 1) {\n      // Make sure we have a subtype\n      if (i === subtypeStart)\n        return;\n\n      if (parseContentTypeParams(str, i, params) === undefined)\n        return;\n      break;\n    }\n  }\n  // Make sure we have a subtype\n  if (i === subtypeStart)\n    return;\n\n  const subtype = str.slice(subtypeStart, i).toLowerCase();\n\n  return { type, subtype, params };\n}\n\nfunction parseContentTypeParams(str, i, params) {\n  while (i < str.length) {\n    // Consume whitespace\n    for (; i < str.length; ++i) {\n      const code = str.charCodeAt(i);\n      if (code !== 32/* ' ' */ && code !== 9/* '\\t' */)\n        break;\n    }\n\n    // Ended on whitespace\n    if (i === str.length)\n      break;\n\n    // Check for malformed parameter\n    if (str.charCodeAt(i++) !== 59/* ';' */)\n      return;\n\n    // Consume whitespace\n    for (; i < str.length; ++i) {\n      const code = str.charCodeAt(i);\n      if (code !== 32/* ' ' */ && code !== 9/* '\\t' */)\n        break;\n    }\n\n    // Ended on whitespace (malformed)\n    if (i === str.length)\n      return;\n\n    let name;\n    const nameStart = i;\n    // Parse parameter name\n    for (; i < str.length; ++i) {\n      const code = str.charCodeAt(i);\n      if (TOKEN[code] !== 1) {\n        if (code !== 61/* '=' */)\n          return;\n        break;\n      }\n    }\n\n    // No value (malformed)\n    if (i === str.length)\n      return;\n\n    name = str.slice(nameStart, i);\n    ++i; // Skip over '='\n\n    // No value (malformed)\n    if (i === str.length)\n      return;\n\n    let value = '';\n    let valueStart;\n    if (str.charCodeAt(i) === 34/* '\"' */) {\n      valueStart = ++i;\n      let escaping = false;\n      // Parse quoted value\n      for (; i < str.length; ++i) {\n        const code = str.charCodeAt(i);\n        if (code === 92/* '\\\\' */) {\n          if (escaping) {\n            valueStart = i;\n            escaping = false;\n          } else {\n            value += str.slice(valueStart, i);\n            escaping = true;\n          }\n          continue;\n        }\n        if (code === 34/* '\"' */) {\n          if (escaping) {\n            valueStart = i;\n            escaping = false;\n            continue;\n          }\n          value += str.slice(valueStart, i);\n          break;\n        }\n        if (escaping) {\n          valueStart = i - 1;\n          escaping = false;\n        }\n        // Invalid unescaped quoted character (malformed)\n        if (QDTEXT[code] !== 1)\n          return;\n      }\n\n      // No end quote (malformed)\n      if (i === str.length)\n        return;\n\n      ++i; // Skip over double quote\n    } else {\n      valueStart = i;\n      // Parse unquoted value\n      for (; i < str.length; ++i) {\n        const code = str.charCodeAt(i);\n        if (TOKEN[code] !== 1) {\n          // No value (malformed)\n          if (i === valueStart)\n            return;\n          break;\n        }\n      }\n      value = str.slice(valueStart, i);\n    }\n\n    name = name.toLowerCase();\n    if (params[name] === undefined)\n      params[name] = value;\n  }\n\n  return params;\n}\n\nfunction parseDisposition(str, defDecoder) {\n  if (str.length === 0)\n    return;\n\n  const params = Object.create(null);\n  let i = 0;\n\n  for (; i < str.length; ++i) {\n    const code = str.charCodeAt(i);\n    if (TOKEN[code] !== 1) {\n      if (parseDispositionParams(str, i, params, defDecoder) === undefined)\n        return;\n      break;\n    }\n  }\n\n  const type = str.slice(0, i).toLowerCase();\n\n  return { type, params };\n}\n\nfunction parseDispositionParams(str, i, params, defDecoder) {\n  while (i < str.length) {\n    // Consume whitespace\n    for (; i < str.length; ++i) {\n      const code = str.charCodeAt(i);\n      if (code !== 32/* ' ' */ && code !== 9/* '\\t' */)\n        break;\n    }\n\n    // Ended on whitespace\n    if (i === str.length)\n      break;\n\n    // Check for malformed parameter\n    if (str.charCodeAt(i++) !== 59/* ';' */)\n      return;\n\n    // Consume whitespace\n    for (; i < str.length; ++i) {\n      const code = str.charCodeAt(i);\n      if (code !== 32/* ' ' */ && code !== 9/* '\\t' */)\n        break;\n    }\n\n    // Ended on whitespace (malformed)\n    if (i === str.length)\n      return;\n\n    let name;\n    const nameStart = i;\n    // Parse parameter name\n    for (; i < str.length; ++i) {\n      const code = str.charCodeAt(i);\n      if (TOKEN[code] !== 1) {\n        if (code === 61/* '=' */)\n          break;\n        return;\n      }\n    }\n\n    // No value (malformed)\n    if (i === str.length)\n      return;\n\n    let value = '';\n    let valueStart;\n    let charset;\n    //~ let lang;\n    name = str.slice(nameStart, i);\n    if (name.charCodeAt(name.length - 1) === 42/* '*' */) {\n      // Extended value\n\n      const charsetStart = ++i;\n      // Parse charset name\n      for (; i < str.length; ++i) {\n        const code = str.charCodeAt(i);\n        if (CHARSET[code] !== 1) {\n          if (code !== 39/* '\\'' */)\n            return;\n          break;\n        }\n      }\n\n      // Incomplete charset (malformed)\n      if (i === str.length)\n        return;\n\n      charset = str.slice(charsetStart, i);\n      ++i; // Skip over the '\\''\n\n      //~ const langStart = ++i;\n      // Parse language name\n      for (; i < str.length; ++i) {\n        const code = str.charCodeAt(i);\n        if (code === 39/* '\\'' */)\n          break;\n      }\n\n      // Incomplete language (malformed)\n      if (i === str.length)\n        return;\n\n      //~ lang = str.slice(langStart, i);\n      ++i; // Skip over the '\\''\n\n      // No value (malformed)\n      if (i === str.length)\n        return;\n\n      valueStart = i;\n\n      let encode = 0;\n      // Parse value\n      for (; i < str.length; ++i) {\n        const code = str.charCodeAt(i);\n        if (EXTENDED_VALUE[code] !== 1) {\n          if (code === 37/* '%' */) {\n            let hexUpper;\n            let hexLower;\n            if (i + 2 < str.length\n                && (hexUpper = HEX_VALUES[str.charCodeAt(i + 1)]) !== -1\n                && (hexLower = HEX_VALUES[str.charCodeAt(i + 2)]) !== -1) {\n              const byteVal = (hexUpper << 4) + hexLower;\n              value += str.slice(valueStart, i);\n              value += String.fromCharCode(byteVal);\n              i += 2;\n              valueStart = i + 1;\n              if (byteVal >= 128)\n                encode = 2;\n              else if (encode === 0)\n                encode = 1;\n              continue;\n            }\n            // '%' disallowed in non-percent encoded contexts (malformed)\n            return;\n          }\n          break;\n        }\n      }\n\n      value += str.slice(valueStart, i);\n      value = convertToUTF8(value, charset, encode);\n      if (value === undefined)\n        return;\n    } else {\n      // Non-extended value\n\n      ++i; // Skip over '='\n\n      // No value (malformed)\n      if (i === str.length)\n        return;\n\n      if (str.charCodeAt(i) === 34/* '\"' */) {\n        valueStart = ++i;\n        let escaping = false;\n        // Parse quoted value\n        for (; i < str.length; ++i) {\n          const code = str.charCodeAt(i);\n          if (code === 92/* '\\\\' */) {\n            if (escaping) {\n              valueStart = i;\n              escaping = false;\n            } else {\n              value += str.slice(valueStart, i);\n              escaping = true;\n            }\n            continue;\n          }\n          if (code === 34/* '\"' */) {\n            if (escaping) {\n              valueStart = i;\n              escaping = false;\n              continue;\n            }\n            value += str.slice(valueStart, i);\n            break;\n          }\n          if (escaping) {\n            valueStart = i - 1;\n            escaping = false;\n          }\n          // Invalid unescaped quoted character (malformed)\n          if (QDTEXT[code] !== 1)\n            return;\n        }\n\n        // No end quote (malformed)\n        if (i === str.length)\n          return;\n\n        ++i; // Skip over double quote\n      } else {\n        valueStart = i;\n        // Parse unquoted value\n        for (; i < str.length; ++i) {\n          const code = str.charCodeAt(i);\n          if (TOKEN[code] !== 1) {\n            // No value (malformed)\n            if (i === valueStart)\n              return;\n            break;\n          }\n        }\n        value = str.slice(valueStart, i);\n      }\n\n      value = defDecoder(value, 2);\n      if (value === undefined)\n        return;\n    }\n\n    name = name.toLowerCase();\n    if (params[name] === undefined)\n      params[name] = value;\n  }\n\n  return params;\n}\n\nfunction getDecoder(charset) {\n  let lc;\n  while (true) {\n    switch (charset) {\n      case 'utf-8':\n      case 'utf8':\n        return decoders.utf8;\n      case 'latin1':\n      case 'ascii': // TODO: Make these a separate, strict decoder?\n      case 'us-ascii':\n      case 'iso-8859-1':\n      case 'iso8859-1':\n      case 'iso88591':\n      case 'iso_8859-1':\n      case 'windows-1252':\n      case 'iso_8859-1:1987':\n      case 'cp1252':\n      case 'x-cp1252':\n        return decoders.latin1;\n      case 'utf16le':\n      case 'utf-16le':\n      case 'ucs2':\n      case 'ucs-2':\n        return decoders.utf16le;\n      case 'base64':\n        return decoders.base64;\n      default:\n        if (lc === undefined) {\n          lc = true;\n          charset = charset.toLowerCase();\n          continue;\n        }\n        return decoders.other.bind(charset);\n    }\n  }\n}\n\nconst decoders = {\n  utf8: (data, hint) => {\n    if (data.length === 0)\n      return '';\n    if (typeof data === 'string') {\n      // If `data` never had any percent-encoded bytes or never had any that\n      // were outside of the ASCII range, then we can safely just return the\n      // input since UTF-8 is ASCII compatible\n      if (hint < 2)\n        return data;\n\n      data = Buffer.from(data, 'latin1');\n    }\n    return data.utf8Slice(0, data.length);\n  },\n\n  latin1: (data, hint) => {\n    if (data.length === 0)\n      return '';\n    if (typeof data === 'string')\n      return data;\n    return data.latin1Slice(0, data.length);\n  },\n\n  utf16le: (data, hint) => {\n    if (data.length === 0)\n      return '';\n    if (typeof data === 'string')\n      data = Buffer.from(data, 'latin1');\n    return data.ucs2Slice(0, data.length);\n  },\n\n  base64: (data, hint) => {\n    if (data.length === 0)\n      return '';\n    if (typeof data === 'string')\n      data = Buffer.from(data, 'latin1');\n    return data.base64Slice(0, data.length);\n  },\n\n  other: (data, hint) => {\n    if (data.length === 0)\n      return '';\n    if (typeof data === 'string')\n      data = Buffer.from(data, 'latin1');\n    try {\n      const decoder = new TextDecoder(this);\n      return decoder.decode(data);\n    } catch {}\n  },\n};\n\nfunction convertToUTF8(data, charset, hint) {\n  const decode = getDecoder(charset);\n  if (decode)\n    return decode(data, hint);\n}\n\nfunction basename(path) {\n  if (typeof path !== 'string')\n    return '';\n  for (let i = path.length - 1; i >= 0; --i) {\n    switch (path.charCodeAt(i)) {\n      case 0x2F: // '/'\n      case 0x5C: // '\\'\n        path = path.slice(i + 1);\n        return (path === '..' || path === '.' ? '' : path);\n    }\n  }\n  return (path === '..' || path === '.' ? '' : path);\n}\n\nconst TOKEN = [\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0,\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,\n  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1,\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n];\n\nconst QDTEXT = [\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1,\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n];\n\nconst CHARSET = [\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0,\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,\n  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1,\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n];\n\nconst EXTENDED_VALUE = [\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0,\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,\n  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1,\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n];\n\n/* eslint-disable no-multi-spaces */\nconst HEX_VALUES = [\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n   0,  1,  2,  3,  4,  5,  6,  7,  8,  9, -1, -1, -1, -1, -1, -1,\n  -1, 10, 11, 12, 13, 14, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, 10, 11, 12, 13, 14, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n];\n/* eslint-enable no-multi-spaces */\n\nmodule.exports = {\n  basename,\n  convertToUTF8,\n  getDecoder,\n  parseContentType,\n  parseDisposition,\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/busboy/lib/utils.js\n");

/***/ })

};
;