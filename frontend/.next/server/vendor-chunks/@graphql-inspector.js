/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@graphql-inspector";
exports.ids = ["vendor-chunks/@graphql-inspector"];
exports.modules = {

/***/ "(ssr)/../node_modules/@graphql-inspector/core/node_modules/object-inspect/index.js":
/*!************************************************************************************!*\
  !*** ../node_modules/@graphql-inspector/core/node_modules/object-inspect/index.js ***!
  \************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var hasMap = typeof Map === 'function' && Map.prototype;\nvar mapSizeDescriptor = Object.getOwnPropertyDescriptor && hasMap ? Object.getOwnPropertyDescriptor(Map.prototype, 'size') : null;\nvar mapSize = hasMap && mapSizeDescriptor && typeof mapSizeDescriptor.get === 'function' ? mapSizeDescriptor.get : null;\nvar mapForEach = hasMap && Map.prototype.forEach;\nvar hasSet = typeof Set === 'function' && Set.prototype;\nvar setSizeDescriptor = Object.getOwnPropertyDescriptor && hasSet ? Object.getOwnPropertyDescriptor(Set.prototype, 'size') : null;\nvar setSize = hasSet && setSizeDescriptor && typeof setSizeDescriptor.get === 'function' ? setSizeDescriptor.get : null;\nvar setForEach = hasSet && Set.prototype.forEach;\nvar hasWeakMap = typeof WeakMap === 'function' && WeakMap.prototype;\nvar weakMapHas = hasWeakMap ? WeakMap.prototype.has : null;\nvar hasWeakSet = typeof WeakSet === 'function' && WeakSet.prototype;\nvar weakSetHas = hasWeakSet ? WeakSet.prototype.has : null;\nvar hasWeakRef = typeof WeakRef === 'function' && WeakRef.prototype;\nvar weakRefDeref = hasWeakRef ? WeakRef.prototype.deref : null;\nvar booleanValueOf = Boolean.prototype.valueOf;\nvar objectToString = Object.prototype.toString;\nvar functionToString = Function.prototype.toString;\nvar match = String.prototype.match;\nvar bigIntValueOf = typeof BigInt === 'function' ? BigInt.prototype.valueOf : null;\nvar gOPS = Object.getOwnPropertySymbols;\nvar symToString = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? Symbol.prototype.toString : null;\nvar hasShammedSymbols = typeof Symbol === 'function' && typeof Symbol.iterator === 'object';\nvar isEnumerable = Object.prototype.propertyIsEnumerable;\n\nvar gPO = (typeof Reflect === 'function' ? Reflect.getPrototypeOf : Object.getPrototypeOf) || (\n    [].__proto__ === Array.prototype // eslint-disable-line no-proto\n        ? function (O) {\n            return O.__proto__; // eslint-disable-line no-proto\n        }\n        : null\n);\n\nvar inspectCustom = (__webpack_require__(/*! ./util.inspect */ \"(ssr)/../node_modules/@graphql-inspector/core/node_modules/object-inspect/util.inspect.js\").custom);\nvar inspectSymbol = inspectCustom && isSymbol(inspectCustom) ? inspectCustom : null;\nvar toStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag !== 'undefined' ? Symbol.toStringTag : null;\n\nmodule.exports = function inspect_(obj, options, depth, seen) {\n    var opts = options || {};\n\n    if (has(opts, 'quoteStyle') && (opts.quoteStyle !== 'single' && opts.quoteStyle !== 'double')) {\n        throw new TypeError('option \"quoteStyle\" must be \"single\" or \"double\"');\n    }\n    if (\n        has(opts, 'maxStringLength') && (typeof opts.maxStringLength === 'number'\n            ? opts.maxStringLength < 0 && opts.maxStringLength !== Infinity\n            : opts.maxStringLength !== null\n        )\n    ) {\n        throw new TypeError('option \"maxStringLength\", if provided, must be a positive integer, Infinity, or `null`');\n    }\n    var customInspect = has(opts, 'customInspect') ? opts.customInspect : true;\n    if (typeof customInspect !== 'boolean') {\n        throw new TypeError('option \"customInspect\", if provided, must be `true` or `false`');\n    }\n\n    if (\n        has(opts, 'indent')\n        && opts.indent !== null\n        && opts.indent !== '\\t'\n        && !(parseInt(opts.indent, 10) === opts.indent && opts.indent > 0)\n    ) {\n        throw new TypeError('options \"indent\" must be \"\\\\t\", an integer > 0, or `null`');\n    }\n\n    if (typeof obj === 'undefined') {\n        return 'undefined';\n    }\n    if (obj === null) {\n        return 'null';\n    }\n    if (typeof obj === 'boolean') {\n        return obj ? 'true' : 'false';\n    }\n\n    if (typeof obj === 'string') {\n        return inspectString(obj, opts);\n    }\n    if (typeof obj === 'number') {\n        if (obj === 0) {\n            return Infinity / obj > 0 ? '0' : '-0';\n        }\n        return String(obj);\n    }\n    if (typeof obj === 'bigint') {\n        return String(obj) + 'n';\n    }\n\n    var maxDepth = typeof opts.depth === 'undefined' ? 5 : opts.depth;\n    if (typeof depth === 'undefined') { depth = 0; }\n    if (depth >= maxDepth && maxDepth > 0 && typeof obj === 'object') {\n        return isArray(obj) ? '[Array]' : '[Object]';\n    }\n\n    var indent = getIndent(opts, depth);\n\n    if (typeof seen === 'undefined') {\n        seen = [];\n    } else if (indexOf(seen, obj) >= 0) {\n        return '[Circular]';\n    }\n\n    function inspect(value, from, noIndent) {\n        if (from) {\n            seen = seen.slice();\n            seen.push(from);\n        }\n        if (noIndent) {\n            var newOpts = {\n                depth: opts.depth\n            };\n            if (has(opts, 'quoteStyle')) {\n                newOpts.quoteStyle = opts.quoteStyle;\n            }\n            return inspect_(value, newOpts, depth + 1, seen);\n        }\n        return inspect_(value, opts, depth + 1, seen);\n    }\n\n    if (typeof obj === 'function') {\n        var name = nameOf(obj);\n        var keys = arrObjKeys(obj, inspect);\n        return '[Function' + (name ? ': ' + name : ' (anonymous)') + ']' + (keys.length > 0 ? ' { ' + keys.join(', ') + ' }' : '');\n    }\n    if (isSymbol(obj)) {\n        var symString = hasShammedSymbols ? String(obj).replace(/^(Symbol\\(.*\\))_[^)]*$/, '$1') : symToString.call(obj);\n        return typeof obj === 'object' && !hasShammedSymbols ? markBoxed(symString) : symString;\n    }\n    if (isElement(obj)) {\n        var s = '<' + String(obj.nodeName).toLowerCase();\n        var attrs = obj.attributes || [];\n        for (var i = 0; i < attrs.length; i++) {\n            s += ' ' + attrs[i].name + '=' + wrapQuotes(quote(attrs[i].value), 'double', opts);\n        }\n        s += '>';\n        if (obj.childNodes && obj.childNodes.length) { s += '...'; }\n        s += '</' + String(obj.nodeName).toLowerCase() + '>';\n        return s;\n    }\n    if (isArray(obj)) {\n        if (obj.length === 0) { return '[]'; }\n        var xs = arrObjKeys(obj, inspect);\n        if (indent && !singleLineValues(xs)) {\n            return '[' + indentedJoin(xs, indent) + ']';\n        }\n        return '[ ' + xs.join(', ') + ' ]';\n    }\n    if (isError(obj)) {\n        var parts = arrObjKeys(obj, inspect);\n        if (parts.length === 0) { return '[' + String(obj) + ']'; }\n        return '{ [' + String(obj) + '] ' + parts.join(', ') + ' }';\n    }\n    if (typeof obj === 'object' && customInspect) {\n        if (inspectSymbol && typeof obj[inspectSymbol] === 'function') {\n            return obj[inspectSymbol]();\n        } else if (typeof obj.inspect === 'function') {\n            return obj.inspect();\n        }\n    }\n    if (isMap(obj)) {\n        var mapParts = [];\n        mapForEach.call(obj, function (value, key) {\n            mapParts.push(inspect(key, obj, true) + ' => ' + inspect(value, obj));\n        });\n        return collectionOf('Map', mapSize.call(obj), mapParts, indent);\n    }\n    if (isSet(obj)) {\n        var setParts = [];\n        setForEach.call(obj, function (value) {\n            setParts.push(inspect(value, obj));\n        });\n        return collectionOf('Set', setSize.call(obj), setParts, indent);\n    }\n    if (isWeakMap(obj)) {\n        return weakCollectionOf('WeakMap');\n    }\n    if (isWeakSet(obj)) {\n        return weakCollectionOf('WeakSet');\n    }\n    if (isWeakRef(obj)) {\n        return weakCollectionOf('WeakRef');\n    }\n    if (isNumber(obj)) {\n        return markBoxed(inspect(Number(obj)));\n    }\n    if (isBigInt(obj)) {\n        return markBoxed(inspect(bigIntValueOf.call(obj)));\n    }\n    if (isBoolean(obj)) {\n        return markBoxed(booleanValueOf.call(obj));\n    }\n    if (isString(obj)) {\n        return markBoxed(inspect(String(obj)));\n    }\n    if (!isDate(obj) && !isRegExp(obj)) {\n        var ys = arrObjKeys(obj, inspect);\n        var isPlainObject = gPO ? gPO(obj) === Object.prototype : obj instanceof Object || obj.constructor === Object;\n        var protoTag = obj instanceof Object ? '' : 'null prototype';\n        var stringTag = !isPlainObject && toStringTag && Object(obj) === obj && toStringTag in obj ? toStr(obj).slice(8, -1) : protoTag ? 'Object' : '';\n        var constructorTag = isPlainObject || typeof obj.constructor !== 'function' ? '' : obj.constructor.name ? obj.constructor.name + ' ' : '';\n        var tag = constructorTag + (stringTag || protoTag ? '[' + [].concat(stringTag || [], protoTag || []).join(': ') + '] ' : '');\n        if (ys.length === 0) { return tag + '{}'; }\n        if (indent) {\n            return tag + '{' + indentedJoin(ys, indent) + '}';\n        }\n        return tag + '{ ' + ys.join(', ') + ' }';\n    }\n    return String(obj);\n};\n\nfunction wrapQuotes(s, defaultStyle, opts) {\n    var quoteChar = (opts.quoteStyle || defaultStyle) === 'double' ? '\"' : \"'\";\n    return quoteChar + s + quoteChar;\n}\n\nfunction quote(s) {\n    return String(s).replace(/\"/g, '&quot;');\n}\n\nfunction isArray(obj) { return toStr(obj) === '[object Array]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }\nfunction isDate(obj) { return toStr(obj) === '[object Date]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }\nfunction isRegExp(obj) { return toStr(obj) === '[object RegExp]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }\nfunction isError(obj) { return toStr(obj) === '[object Error]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }\nfunction isString(obj) { return toStr(obj) === '[object String]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }\nfunction isNumber(obj) { return toStr(obj) === '[object Number]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }\nfunction isBoolean(obj) { return toStr(obj) === '[object Boolean]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }\n\n// Symbol and BigInt do have Symbol.toStringTag by spec, so that can't be used to eliminate false positives\nfunction isSymbol(obj) {\n    if (hasShammedSymbols) {\n        return obj && typeof obj === 'object' && obj instanceof Symbol;\n    }\n    if (typeof obj === 'symbol') {\n        return true;\n    }\n    if (!obj || typeof obj !== 'object' || !symToString) {\n        return false;\n    }\n    try {\n        symToString.call(obj);\n        return true;\n    } catch (e) {}\n    return false;\n}\n\nfunction isBigInt(obj) {\n    if (!obj || typeof obj !== 'object' || !bigIntValueOf) {\n        return false;\n    }\n    try {\n        bigIntValueOf.call(obj);\n        return true;\n    } catch (e) {}\n    return false;\n}\n\nvar hasOwn = Object.prototype.hasOwnProperty || function (key) { return key in this; };\nfunction has(obj, key) {\n    return hasOwn.call(obj, key);\n}\n\nfunction toStr(obj) {\n    return objectToString.call(obj);\n}\n\nfunction nameOf(f) {\n    if (f.name) { return f.name; }\n    var m = match.call(functionToString.call(f), /^function\\s*([\\w$]+)/);\n    if (m) { return m[1]; }\n    return null;\n}\n\nfunction indexOf(xs, x) {\n    if (xs.indexOf) { return xs.indexOf(x); }\n    for (var i = 0, l = xs.length; i < l; i++) {\n        if (xs[i] === x) { return i; }\n    }\n    return -1;\n}\n\nfunction isMap(x) {\n    if (!mapSize || !x || typeof x !== 'object') {\n        return false;\n    }\n    try {\n        mapSize.call(x);\n        try {\n            setSize.call(x);\n        } catch (s) {\n            return true;\n        }\n        return x instanceof Map; // core-js workaround, pre-v2.5.0\n    } catch (e) {}\n    return false;\n}\n\nfunction isWeakMap(x) {\n    if (!weakMapHas || !x || typeof x !== 'object') {\n        return false;\n    }\n    try {\n        weakMapHas.call(x, weakMapHas);\n        try {\n            weakSetHas.call(x, weakSetHas);\n        } catch (s) {\n            return true;\n        }\n        return x instanceof WeakMap; // core-js workaround, pre-v2.5.0\n    } catch (e) {}\n    return false;\n}\n\nfunction isWeakRef(x) {\n    if (!weakRefDeref || !x || typeof x !== 'object') {\n        return false;\n    }\n    try {\n        weakRefDeref.call(x);\n        return true;\n    } catch (e) {}\n    return false;\n}\n\nfunction isSet(x) {\n    if (!setSize || !x || typeof x !== 'object') {\n        return false;\n    }\n    try {\n        setSize.call(x);\n        try {\n            mapSize.call(x);\n        } catch (m) {\n            return true;\n        }\n        return x instanceof Set; // core-js workaround, pre-v2.5.0\n    } catch (e) {}\n    return false;\n}\n\nfunction isWeakSet(x) {\n    if (!weakSetHas || !x || typeof x !== 'object') {\n        return false;\n    }\n    try {\n        weakSetHas.call(x, weakSetHas);\n        try {\n            weakMapHas.call(x, weakMapHas);\n        } catch (s) {\n            return true;\n        }\n        return x instanceof WeakSet; // core-js workaround, pre-v2.5.0\n    } catch (e) {}\n    return false;\n}\n\nfunction isElement(x) {\n    if (!x || typeof x !== 'object') { return false; }\n    if (typeof HTMLElement !== 'undefined' && x instanceof HTMLElement) {\n        return true;\n    }\n    return typeof x.nodeName === 'string' && typeof x.getAttribute === 'function';\n}\n\nfunction inspectString(str, opts) {\n    if (str.length > opts.maxStringLength) {\n        var remaining = str.length - opts.maxStringLength;\n        var trailer = '... ' + remaining + ' more character' + (remaining > 1 ? 's' : '');\n        return inspectString(str.slice(0, opts.maxStringLength), opts) + trailer;\n    }\n    // eslint-disable-next-line no-control-regex\n    var s = str.replace(/(['\\\\])/g, '\\\\$1').replace(/[\\x00-\\x1f]/g, lowbyte);\n    return wrapQuotes(s, 'single', opts);\n}\n\nfunction lowbyte(c) {\n    var n = c.charCodeAt(0);\n    var x = {\n        8: 'b',\n        9: 't',\n        10: 'n',\n        12: 'f',\n        13: 'r'\n    }[n];\n    if (x) { return '\\\\' + x; }\n    return '\\\\x' + (n < 0x10 ? '0' : '') + n.toString(16).toUpperCase();\n}\n\nfunction markBoxed(str) {\n    return 'Object(' + str + ')';\n}\n\nfunction weakCollectionOf(type) {\n    return type + ' { ? }';\n}\n\nfunction collectionOf(type, size, entries, indent) {\n    var joinedEntries = indent ? indentedJoin(entries, indent) : entries.join(', ');\n    return type + ' (' + size + ') {' + joinedEntries + '}';\n}\n\nfunction singleLineValues(xs) {\n    for (var i = 0; i < xs.length; i++) {\n        if (indexOf(xs[i], '\\n') >= 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction getIndent(opts, depth) {\n    var baseIndent;\n    if (opts.indent === '\\t') {\n        baseIndent = '\\t';\n    } else if (typeof opts.indent === 'number' && opts.indent > 0) {\n        baseIndent = Array(opts.indent + 1).join(' ');\n    } else {\n        return null;\n    }\n    return {\n        base: baseIndent,\n        prev: Array(depth + 1).join(baseIndent)\n    };\n}\n\nfunction indentedJoin(xs, indent) {\n    if (xs.length === 0) { return ''; }\n    var lineJoiner = '\\n' + indent.prev + indent.base;\n    return lineJoiner + xs.join(',' + lineJoiner) + '\\n' + indent.prev;\n}\n\nfunction arrObjKeys(obj, inspect) {\n    var isArr = isArray(obj);\n    var xs = [];\n    if (isArr) {\n        xs.length = obj.length;\n        for (var i = 0; i < obj.length; i++) {\n            xs[i] = has(obj, i) ? inspect(obj[i], obj) : '';\n        }\n    }\n    var syms = typeof gOPS === 'function' ? gOPS(obj) : [];\n    var symMap;\n    if (hasShammedSymbols) {\n        symMap = {};\n        for (var k = 0; k < syms.length; k++) {\n            symMap['$' + syms[k]] = syms[k];\n        }\n    }\n\n    for (var key in obj) { // eslint-disable-line no-restricted-syntax\n        if (!has(obj, key)) { continue; } // eslint-disable-line no-restricted-syntax, no-continue\n        if (isArr && String(Number(key)) === key && key < obj.length) { continue; } // eslint-disable-line no-restricted-syntax, no-continue\n        if (hasShammedSymbols && symMap['$' + key] instanceof Symbol) {\n            // this is to prevent shammed Symbols, which are stored as strings, from being included in the string key section\n            continue; // eslint-disable-line no-restricted-syntax, no-continue\n        } else if ((/[^\\w$]/).test(key)) {\n            xs.push(inspect(key, obj) + ': ' + inspect(obj[key], obj));\n        } else {\n            xs.push(key + ': ' + inspect(obj[key], obj));\n        }\n    }\n    if (typeof gOPS === 'function') {\n        for (var j = 0; j < syms.length; j++) {\n            if (isEnumerable.call(obj, syms[j])) {\n                xs.push('[' + inspect(syms[j]) + ']: ' + inspect(obj[syms[j]], obj));\n            }\n        }\n    }\n    return xs;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@graphql-inspector/core/node_modules/object-inspect/index.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/@graphql-inspector/core/node_modules/object-inspect/util.inspect.js":
/*!*******************************************************************************************!*\
  !*** ../node_modules/@graphql-inspector/core/node_modules/object-inspect/util.inspect.js ***!
  \*******************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__(/*! util */ \"util\").inspect;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0BncmFwaHFsLWluc3BlY3Rvci9jb3JlL25vZGVfbW9kdWxlcy9vYmplY3QtaW5zcGVjdC91dGlsLmluc3BlY3QuanMiLCJtYXBwaW5ncyI6IkFBQUEsZ0VBQXdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGVkZ2l0eS15aWVsZC1mcm9udGVuZC8uLi9ub2RlX21vZHVsZXMvQGdyYXBocWwtaW5zcGVjdG9yL2NvcmUvbm9kZV9tb2R1bGVzL29iamVjdC1pbnNwZWN0L3V0aWwuaW5zcGVjdC5qcz84MTdlIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgndXRpbCcpLmluc3BlY3Q7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@graphql-inspector/core/node_modules/object-inspect/util.inspect.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/@graphql-inspector/core/index.mjs":
/*!*********************************************************!*\
  !*** ../node_modules/@graphql-inspector/core/index.mjs ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChangeType: () => (/* binding */ ChangeType),\n/* harmony export */   CriticalityLevel: () => (/* binding */ CriticalityLevel),\n/* harmony export */   DiffRule: () => (/* binding */ DiffRule),\n/* harmony export */   coverage: () => (/* binding */ coverage),\n/* harmony export */   diff: () => (/* binding */ diff),\n/* harmony export */   getTypePrefix: () => (/* binding */ getTypePrefix),\n/* harmony export */   similar: () => (/* binding */ similar),\n/* harmony export */   validate: () => (/* binding */ validate)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! tslib */ \"(ssr)/../node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! graphql */ \"(ssr)/../node_modules/graphql/type/definition.mjs\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! graphql */ \"(ssr)/../node_modules/graphql/language/kinds.mjs\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! graphql */ \"(ssr)/../node_modules/graphql/utilities/TypeInfo.mjs\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! graphql */ \"(ssr)/../node_modules/graphql/language/visitor.mjs\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! graphql */ \"(ssr)/../node_modules/graphql/error/GraphQLError.mjs\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! graphql */ \"(ssr)/../node_modules/graphql/language/parser.mjs\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! graphql */ \"(ssr)/../node_modules/graphql/utilities/extendSchema.mjs\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! graphql */ \"(ssr)/../node_modules/graphql/language/printer.mjs\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! graphql */ \"(ssr)/../node_modules/graphql/validation/validate.mjs\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! graphql */ \"(ssr)/../node_modules/graphql/utilities/printSchema.mjs\");\n/* harmony import */ var object_inspect__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! object-inspect */ \"(ssr)/../node_modules/@graphql-inspector/core/node_modules/object-inspect/index.js\");\n/* harmony import */ var dependency_graph__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! dependency-graph */ \"(ssr)/../node_modules/dependency-graph/lib/dep_graph.js\");\n\n\n\n\n\nfunction keyMap(list, keyFn) {\n    return list.reduce((map, item) => {\n        map[keyFn(item)] = item;\n        return map;\n    }, Object.create(null));\n}\nfunction isEqual(a, b) {\n    if (Array.isArray(a) && Array.isArray(b)) {\n        if (a.length !== b.length)\n            return false;\n        for (var index = 0; index < a.length; index++) {\n            if (!isEqual(a[index], b[index])) {\n                return false;\n            }\n        }\n        return true;\n    }\n    if (a && b && typeof a === 'object' && typeof b === 'object') {\n        const aRecord = a;\n        const bRecord = b;\n        const aKeys = Object.keys(aRecord);\n        const bKeys = Object.keys(bRecord);\n        if (aKeys.length !== bKeys.length)\n            return false;\n        for (const key of aKeys) {\n            if (!isEqual(aRecord[key], bRecord[key])) {\n                return false;\n            }\n        }\n        return true;\n    }\n    return a === b || (!a && !b);\n}\nfunction isNotEqual(a, b) {\n    return !isEqual(a, b);\n}\nfunction isVoid(a) {\n    return typeof a === 'undefined' || a === null;\n}\nfunction diffArrays(a, b) {\n    return a.filter((c) => !b.some((d) => isEqual(d, c)));\n}\nfunction compareLists(oldList, newList, callbacks) {\n    const oldMap = keyMap(oldList, ({ name }) => name);\n    const newMap = keyMap(newList, ({ name }) => name);\n    const added = [];\n    const removed = [];\n    const mutual = [];\n    for (const oldItem of oldList) {\n        const newItem = newMap[oldItem.name];\n        if (newItem === undefined) {\n            removed.push(oldItem);\n        }\n        else {\n            mutual.push({\n                newVersion: newItem,\n                oldVersion: oldItem,\n            });\n        }\n    }\n    for (const newItem of newList) {\n        if (oldMap[newItem.name] === undefined) {\n            added.push(newItem);\n        }\n    }\n    if (callbacks) {\n        if (callbacks.onAdded) {\n            added.forEach(callbacks.onAdded);\n        }\n        if (callbacks.onRemoved) {\n            removed.forEach(callbacks.onRemoved);\n        }\n        if (callbacks.onMutual) {\n            mutual.forEach(callbacks.onMutual);\n        }\n    }\n    return {\n        added,\n        removed,\n        mutual,\n    };\n}\n\nfunction isDeprecated(fieldOrEnumValue) {\n    var _a, _b;\n    if ('isDeprecated' in fieldOrEnumValue) {\n        return fieldOrEnumValue['isDeprecated'];\n    }\n    if (fieldOrEnumValue.deprecationReason != null) {\n        return true;\n    }\n    if ((_b = (_a = fieldOrEnumValue.astNode) === null || _a === void 0 ? void 0 : _a.directives) === null || _b === void 0 ? void 0 : _b.some((directive) => directive.name.value === 'deprecated')) {\n        return true;\n    }\n    return false;\n}\n\nfunction safeChangeForField(oldType, newType) {\n    if (!(0,graphql__WEBPACK_IMPORTED_MODULE_2__.isWrappingType)(oldType) && !(0,graphql__WEBPACK_IMPORTED_MODULE_2__.isWrappingType)(newType)) {\n        return oldType.toString() === newType.toString();\n    }\n    if ((0,graphql__WEBPACK_IMPORTED_MODULE_2__.isNonNullType)(newType)) {\n        const ofType = (0,graphql__WEBPACK_IMPORTED_MODULE_2__.isNonNullType)(oldType) ? oldType.ofType : oldType;\n        return safeChangeForField(ofType, newType.ofType);\n    }\n    if ((0,graphql__WEBPACK_IMPORTED_MODULE_2__.isListType)(oldType)) {\n        return (((0,graphql__WEBPACK_IMPORTED_MODULE_2__.isListType)(newType) &&\n            safeChangeForField(oldType.ofType, newType.ofType)) ||\n            ((0,graphql__WEBPACK_IMPORTED_MODULE_2__.isNonNullType)(newType) && safeChangeForField(oldType, newType.ofType)));\n    }\n    return false;\n}\nfunction safeChangeForInputValue(oldType, newType) {\n    if (!(0,graphql__WEBPACK_IMPORTED_MODULE_2__.isWrappingType)(oldType) && !(0,graphql__WEBPACK_IMPORTED_MODULE_2__.isWrappingType)(newType)) {\n        return oldType.toString() === newType.toString();\n    }\n    if ((0,graphql__WEBPACK_IMPORTED_MODULE_2__.isListType)(oldType) && (0,graphql__WEBPACK_IMPORTED_MODULE_2__.isListType)(newType)) {\n        return safeChangeForInputValue(oldType.ofType, newType.ofType);\n    }\n    if ((0,graphql__WEBPACK_IMPORTED_MODULE_2__.isNonNullType)(oldType)) {\n        const ofType = (0,graphql__WEBPACK_IMPORTED_MODULE_2__.isNonNullType)(newType) ? newType.ofType : newType;\n        return safeChangeForInputValue(oldType.ofType, ofType);\n    }\n    return false;\n}\nfunction getKind(type) {\n    const node = type.astNode;\n    return (node && node.kind) || '';\n}\nfunction getTypePrefix(type) {\n    const kind = getKind(type);\n    const kindsMap = {\n        [graphql__WEBPACK_IMPORTED_MODULE_3__.Kind.SCALAR_TYPE_DEFINITION]: 'scalar',\n        [graphql__WEBPACK_IMPORTED_MODULE_3__.Kind.OBJECT_TYPE_DEFINITION]: 'type',\n        [graphql__WEBPACK_IMPORTED_MODULE_3__.Kind.INTERFACE_TYPE_DEFINITION]: 'interface',\n        [graphql__WEBPACK_IMPORTED_MODULE_3__.Kind.UNION_TYPE_DEFINITION]: 'union',\n        [graphql__WEBPACK_IMPORTED_MODULE_3__.Kind.ENUM_TYPE_DEFINITION]: 'enum',\n        [graphql__WEBPACK_IMPORTED_MODULE_3__.Kind.INPUT_OBJECT_TYPE_DEFINITION]: 'input',\n    };\n    return kindsMap[kind.toString()];\n}\nfunction isPrimitive(type) {\n    return (['String', 'Int', 'Float', 'Boolean', 'ID'].indexOf(typeof type === 'string' ? type : type.name) !== -1);\n}\nfunction isForIntrospection(type) {\n    return ([\n        '__Schema',\n        '__Type',\n        '__TypeKind',\n        '__Field',\n        '__InputValue',\n        '__EnumValue',\n        '__Directive',\n        '__DirectiveLocation',\n    ].indexOf(typeof type === 'string' ? type : type.name) !== -1);\n}\nfunction findDeprecatedUsages(schema, ast) {\n    const errors = [];\n    const typeInfo = new graphql__WEBPACK_IMPORTED_MODULE_4__.TypeInfo(schema);\n    (0,graphql__WEBPACK_IMPORTED_MODULE_5__.visit)(ast, (0,graphql__WEBPACK_IMPORTED_MODULE_4__.visitWithTypeInfo)(typeInfo, {\n        Argument(node) {\n            const argument = typeInfo.getArgument();\n            if (argument) {\n                const reason = argument.deprecationReason;\n                if (reason) {\n                    const fieldDef = typeInfo.getFieldDef();\n                    if (fieldDef) {\n                        errors.push(new graphql__WEBPACK_IMPORTED_MODULE_6__.GraphQLError(`The argument '${argument === null || argument === void 0 ? void 0 : argument.name}' of '${fieldDef.name}' is deprecated. ${reason}`, [node]));\n                    }\n                }\n            }\n        },\n        Field(node) {\n            const fieldDef = typeInfo.getFieldDef();\n            if (fieldDef && isDeprecated(fieldDef)) {\n                const parentType = typeInfo.getParentType();\n                if (parentType) {\n                    const reason = fieldDef.deprecationReason;\n                    errors.push(new graphql__WEBPACK_IMPORTED_MODULE_6__.GraphQLError(`The field '${parentType.name}.${fieldDef.name}' is deprecated.${reason ? ' ' + reason : ''}`, [node]));\n                }\n            }\n        },\n        EnumValue(node) {\n            const enumVal = typeInfo.getEnumValue();\n            if (enumVal && isDeprecated(enumVal)) {\n                const type = (0,graphql__WEBPACK_IMPORTED_MODULE_2__.getNamedType)(typeInfo.getInputType());\n                if (type) {\n                    const reason = enumVal.deprecationReason;\n                    errors.push(new graphql__WEBPACK_IMPORTED_MODULE_6__.GraphQLError(`The enum value '${type.name}.${enumVal.name}' is deprecated.${reason ? ' ' + reason : ''}`, [node]));\n                }\n            }\n        },\n    }));\n    return errors;\n}\nfunction removeFieldIfDirectives(node, directiveNames) {\n    if (node.directives) {\n        if (node.directives.some((d) => directiveNames.indexOf(d.name.value) !== -1)) {\n            return null;\n        }\n    }\n    return node;\n}\nfunction removeDirectives(node, directiveNames) {\n    if (node.directives) {\n        return Object.assign(Object.assign({}, node), { directives: node.directives.filter((d) => directiveNames.indexOf(d.name.value) === -1) });\n    }\n    return node;\n}\nfunction getReachableTypes(schema) {\n    const reachableTypes = new Set();\n    const collect = (type) => {\n        const typeName = type.name;\n        if (reachableTypes.has(typeName)) {\n            return;\n        }\n        reachableTypes.add(typeName);\n        if ((0,graphql__WEBPACK_IMPORTED_MODULE_2__.isScalarType)(type)) {\n            return;\n        }\n        else if ((0,graphql__WEBPACK_IMPORTED_MODULE_2__.isInterfaceType)(type) || (0,graphql__WEBPACK_IMPORTED_MODULE_2__.isObjectType)(type)) {\n            if ((0,graphql__WEBPACK_IMPORTED_MODULE_2__.isInterfaceType)(type)) {\n                const { objects, interfaces } = schema.getImplementations(type);\n                for (const child of objects) {\n                    collect(child);\n                }\n                for (const child of interfaces) {\n                    collect(child);\n                }\n            }\n            const fields = type.getFields();\n            for (const fieldName in fields) {\n                const field = fields[fieldName];\n                collect(resolveOutputType(field.type));\n                const args = field.args;\n                for (const argName in args) {\n                    const arg = args[argName];\n                    collect(resolveInputType(arg.type));\n                }\n            }\n        }\n        else if ((0,graphql__WEBPACK_IMPORTED_MODULE_2__.isUnionType)(type)) {\n            const types = type.getTypes();\n            for (const child of types) {\n                collect(child);\n            }\n        }\n        else if ((0,graphql__WEBPACK_IMPORTED_MODULE_2__.isInputObjectType)(type)) {\n            const fields = type.getFields();\n            for (const fieldName in fields) {\n                const field = fields[fieldName];\n                collect(resolveInputType(field.type));\n            }\n        }\n    };\n    for (const type of [\n        schema.getQueryType(),\n        schema.getMutationType(),\n        schema.getSubscriptionType(),\n    ]) {\n        if (type) {\n            collect(type);\n        }\n    }\n    return reachableTypes;\n}\nfunction resolveOutputType(output) {\n    if ((0,graphql__WEBPACK_IMPORTED_MODULE_2__.isListType)(output) || (0,graphql__WEBPACK_IMPORTED_MODULE_2__.isNonNullType)(output)) {\n        return resolveOutputType(output.ofType);\n    }\n    return output;\n}\nfunction resolveInputType(input) {\n    if ((0,graphql__WEBPACK_IMPORTED_MODULE_2__.isListType)(input) || (0,graphql__WEBPACK_IMPORTED_MODULE_2__.isNonNullType)(input)) {\n        return resolveInputType(input.ofType);\n    }\n    return input;\n}\n\nvar ChangeType;\n(function (ChangeType) {\n    // Argument\n    ChangeType[\"FieldArgumentDescriptionChanged\"] = \"FIELD_ARGUMENT_DESCRIPTION_CHANGED\";\n    ChangeType[\"FieldArgumentDefaultChanged\"] = \"FIELD_ARGUMENT_DEFAULT_CHANGED\";\n    ChangeType[\"FieldArgumentTypeChanged\"] = \"FIELD_ARGUMENT_TYPE_CHANGED\";\n    // Directive\n    ChangeType[\"DirectiveRemoved\"] = \"DIRECTIVE_REMOVED\";\n    ChangeType[\"DirectiveAdded\"] = \"DIRECTIVE_ADDED\";\n    ChangeType[\"DirectiveDescriptionChanged\"] = \"DIRECTIVE_DESCRIPTION_CHANGED\";\n    ChangeType[\"DirectiveLocationAdded\"] = \"DIRECTIVE_LOCATION_ADDED\";\n    ChangeType[\"DirectiveLocationRemoved\"] = \"DIRECTIVE_LOCATION_REMOVED\";\n    ChangeType[\"DirectiveArgumentAdded\"] = \"DIRECTIVE_ARGUMENT_ADDED\";\n    ChangeType[\"DirectiveArgumentRemoved\"] = \"DIRECTIVE_ARGUMENT_REMOVED\";\n    ChangeType[\"DirectiveArgumentDescriptionChanged\"] = \"DIRECTIVE_ARGUMENT_DESCRIPTION_CHANGED\";\n    ChangeType[\"DirectiveArgumentDefaultValueChanged\"] = \"DIRECTIVE_ARGUMENT_DEFAULT_VALUE_CHANGED\";\n    ChangeType[\"DirectiveArgumentTypeChanged\"] = \"DIRECTIVE_ARGUMENT_TYPE_CHANGED\";\n    // Enum\n    ChangeType[\"EnumValueRemoved\"] = \"ENUM_VALUE_REMOVED\";\n    ChangeType[\"EnumValueAdded\"] = \"ENUM_VALUE_ADDED\";\n    ChangeType[\"EnumValueDescriptionChanged\"] = \"ENUM_VALUE_DESCRIPTION_CHANGED\";\n    ChangeType[\"EnumValueDeprecationReasonChanged\"] = \"ENUM_VALUE_DEPRECATION_REASON_CHANGED\";\n    ChangeType[\"EnumValueDeprecationReasonAdded\"] = \"ENUM_VALUE_DEPRECATION_REASON_ADDED\";\n    ChangeType[\"EnumValueDeprecationReasonRemoved\"] = \"ENUM_VALUE_DEPRECATION_REASON_REMOVED\";\n    // Field\n    ChangeType[\"FieldRemoved\"] = \"FIELD_REMOVED\";\n    ChangeType[\"FieldAdded\"] = \"FIELD_ADDED\";\n    ChangeType[\"FieldDescriptionChanged\"] = \"FIELD_DESCRIPTION_CHANGED\";\n    ChangeType[\"FieldDescriptionAdded\"] = \"FIELD_DESCRIPTION_ADDED\";\n    ChangeType[\"FieldDescriptionRemoved\"] = \"FIELD_DESCRIPTION_REMOVED\";\n    ChangeType[\"FieldDeprecationAdded\"] = \"FIELD_DEPRECATION_ADDED\";\n    ChangeType[\"FieldDeprecationRemoved\"] = \"FIELD_DEPRECATION_REMOVED\";\n    ChangeType[\"FieldDeprecationReasonChanged\"] = \"FIELD_DEPRECATION_REASON_CHANGED\";\n    ChangeType[\"FieldDeprecationReasonAdded\"] = \"FIELD_DEPRECATION_REASON_ADDED\";\n    ChangeType[\"FieldDeprecationReasonRemoved\"] = \"FIELD_DEPRECATION_REASON_REMOVED\";\n    ChangeType[\"FieldTypeChanged\"] = \"FIELD_TYPE_CHANGED\";\n    ChangeType[\"FieldArgumentAdded\"] = \"FIELD_ARGUMENT_ADDED\";\n    ChangeType[\"FieldArgumentRemoved\"] = \"FIELD_ARGUMENT_REMOVED\";\n    // Input\n    ChangeType[\"InputFieldRemoved\"] = \"INPUT_FIELD_REMOVED\";\n    ChangeType[\"InputFieldAdded\"] = \"INPUT_FIELD_ADDED\";\n    ChangeType[\"InputFieldDescriptionAdded\"] = \"INPUT_FIELD_DESCRIPTION_ADDED\";\n    ChangeType[\"InputFieldDescriptionRemoved\"] = \"INPUT_FIELD_DESCRIPTION_REMOVED\";\n    ChangeType[\"InputFieldDescriptionChanged\"] = \"INPUT_FIELD_DESCRIPTION_CHANGED\";\n    ChangeType[\"InputFieldDefaultValueChanged\"] = \"INPUT_FIELD_DEFAULT_VALUE_CHANGED\";\n    ChangeType[\"InputFieldTypeChanged\"] = \"INPUT_FIELD_TYPE_CHANGED\";\n    // Type\n    ChangeType[\"ObjectTypeInterfaceAdded\"] = \"OBJECT_TYPE_INTERFACE_ADDED\";\n    ChangeType[\"ObjectTypeInterfaceRemoved\"] = \"OBJECT_TYPE_INTERFACE_REMOVED\";\n    // Schema\n    ChangeType[\"SchemaQueryTypeChanged\"] = \"SCHEMA_QUERY_TYPE_CHANGED\";\n    ChangeType[\"SchemaMutationTypeChanged\"] = \"SCHEMA_MUTATION_TYPE_CHANGED\";\n    ChangeType[\"SchemaSubscriptionTypeChanged\"] = \"SCHEMA_SUBSCRIPTION_TYPE_CHANGED\";\n    // Type\n    ChangeType[\"TypeRemoved\"] = \"TYPE_REMOVED\";\n    ChangeType[\"TypeAdded\"] = \"TYPE_ADDED\";\n    ChangeType[\"TypeKindChanged\"] = \"TYPE_KIND_CHANGED\";\n    ChangeType[\"TypeDescriptionChanged\"] = \"TYPE_DESCRIPTION_CHANGED\";\n    // TODO\n    ChangeType[\"TypeDescriptionRemoved\"] = \"TYPE_DESCRIPTION_REMOVED\";\n    // TODO\n    ChangeType[\"TypeDescriptionAdded\"] = \"TYPE_DESCRIPTION_ADDED\";\n    // Union\n    ChangeType[\"UnionMemberRemoved\"] = \"UNION_MEMBER_REMOVED\";\n    ChangeType[\"UnionMemberAdded\"] = \"UNION_MEMBER_ADDED\";\n})(ChangeType || (ChangeType = {}));\nvar CriticalityLevel;\n(function (CriticalityLevel) {\n    CriticalityLevel[\"Breaking\"] = \"BREAKING\";\n    CriticalityLevel[\"NonBreaking\"] = \"NON_BREAKING\";\n    CriticalityLevel[\"Dangerous\"] = \"DANGEROUS\";\n})(CriticalityLevel || (CriticalityLevel = {}));\n\nfunction schemaQueryTypeChanged(oldSchema, newSchema) {\n    const oldName = (oldSchema.getQueryType() || {}).name || 'unknown';\n    const newName = (newSchema.getQueryType() || {}).name || 'unknown';\n    return {\n        criticality: {\n            level: CriticalityLevel.Breaking,\n        },\n        type: ChangeType.SchemaQueryTypeChanged,\n        message: `Schema query root has changed from '${oldName}' to '${newName}'`,\n    };\n}\nfunction schemaMutationTypeChanged(oldSchema, newSchema) {\n    const oldName = (oldSchema.getMutationType() || {}).name || 'unknown';\n    const newName = (newSchema.getMutationType() || {}).name || 'unknown';\n    return {\n        criticality: {\n            level: CriticalityLevel.Breaking,\n        },\n        type: ChangeType.SchemaMutationTypeChanged,\n        message: `Schema mutation root has changed from '${oldName}' to '${newName}'`,\n    };\n}\nfunction schemaSubscriptionTypeChanged(oldSchema, newSchema) {\n    const oldName = (oldSchema.getSubscriptionType() || {}).name || 'unknown';\n    const newName = (newSchema.getSubscriptionType() || {}).name || 'unknown';\n    return {\n        criticality: {\n            level: CriticalityLevel.Breaking,\n        },\n        type: ChangeType.SchemaSubscriptionTypeChanged,\n        message: `Schema subscription root has changed from '${oldName}' to '${newName}'`,\n    };\n}\n\nfunction typeRemoved(type) {\n    return {\n        criticality: {\n            level: CriticalityLevel.Breaking,\n        },\n        type: ChangeType.TypeRemoved,\n        message: `Type '${type.name}' was removed`,\n        path: type.name,\n    };\n}\nfunction typeAdded(type) {\n    return {\n        criticality: {\n            level: CriticalityLevel.NonBreaking,\n        },\n        type: ChangeType.TypeAdded,\n        message: `Type '${type.name}' was added`,\n        path: type.name,\n    };\n}\nfunction typeKindChanged(oldType, newType) {\n    return {\n        criticality: {\n            level: CriticalityLevel.Breaking,\n            reason: `Changing the kind of a type is a breaking change because it can cause existing queries to error. For example, turning an object type to a scalar type would break queries that define a selection set for this type.`,\n        },\n        type: ChangeType.TypeKindChanged,\n        message: `'${oldType.name}' kind changed from '${getKind(oldType)}' to '${getKind(newType)}'`,\n        path: oldType.name,\n    };\n}\nfunction typeDescriptionChanged(oldType, newType) {\n    return {\n        criticality: {\n            level: CriticalityLevel.NonBreaking,\n        },\n        type: ChangeType.TypeDescriptionChanged,\n        message: `Description '${oldType.description}' on type '${oldType.name}' has changed to '${newType.description}'`,\n        path: oldType.name,\n    };\n}\nfunction typeDescriptionRemoved(type) {\n    return {\n        criticality: {\n            level: CriticalityLevel.NonBreaking,\n        },\n        type: ChangeType.TypeDescriptionRemoved,\n        message: `Description '${type.description}' was removed from object type '${type.name}'`,\n        path: type.name,\n    };\n}\nfunction typeDescriptionAdded(type) {\n    return {\n        criticality: {\n            level: CriticalityLevel.NonBreaking,\n        },\n        type: ChangeType.TypeDescriptionAdded,\n        message: `Object type '${type.name}' has description '${type.description}'`,\n        path: type.name,\n    };\n}\n\nfunction directiveRemoved(directive) {\n    return {\n        criticality: {\n            level: CriticalityLevel.Breaking,\n        },\n        type: ChangeType.DirectiveRemoved,\n        message: `Directive '${directive.name}' was removed`,\n        path: `@${directive.name}`,\n    };\n}\nfunction directiveAdded(directive) {\n    return {\n        criticality: {\n            level: CriticalityLevel.NonBreaking,\n        },\n        type: ChangeType.DirectiveAdded,\n        message: `Directive '${directive.name}' was added`,\n        path: `@${directive.name}`,\n    };\n}\nfunction directiveDescriptionChanged(oldDirective, newDirective) {\n    return {\n        criticality: {\n            level: CriticalityLevel.NonBreaking,\n        },\n        type: ChangeType.DirectiveDescriptionChanged,\n        message: `Directive '${oldDirective.name}' description changed from '${oldDirective.description}' to '${newDirective.description}'`,\n        path: `@${oldDirective.name}`,\n    };\n}\nfunction directiveLocationAdded(directive, location) {\n    return {\n        criticality: {\n            level: CriticalityLevel.NonBreaking,\n        },\n        type: ChangeType.DirectiveLocationAdded,\n        message: `Location '${location}' was added to directive '${directive.name}'`,\n        path: `@${directive.name}`,\n    };\n}\nfunction directiveLocationRemoved(directive, location) {\n    return {\n        criticality: {\n            level: CriticalityLevel.Breaking,\n        },\n        type: ChangeType.DirectiveLocationRemoved,\n        message: `Location '${location}' was removed from directive '${directive.name}'`,\n        path: `@${directive.name}`,\n    };\n}\nfunction directiveArgumentAdded(directive, arg) {\n    return {\n        criticality: {\n            level: (0,graphql__WEBPACK_IMPORTED_MODULE_2__.isNonNullType)(arg.type)\n                ? CriticalityLevel.Breaking\n                : CriticalityLevel.NonBreaking,\n        },\n        type: ChangeType.DirectiveArgumentAdded,\n        message: `Argument '${arg.name}' was added to directive '${directive.name}'`,\n        path: `@${directive.name}`,\n    };\n}\nfunction directiveArgumentRemoved(directive, arg) {\n    return {\n        criticality: {\n            level: CriticalityLevel.Breaking,\n        },\n        type: ChangeType.DirectiveArgumentRemoved,\n        message: `Argument '${arg.name}' was removed from directive '${directive.name}'`,\n        path: `@${directive.name}.${arg.name}`,\n    };\n}\nfunction directiveArgumentDescriptionChanged(directive, oldArg, newArg) {\n    return {\n        criticality: {\n            level: CriticalityLevel.NonBreaking,\n        },\n        type: ChangeType.DirectiveArgumentDescriptionChanged,\n        message: `Description for argument '${oldArg.name}' on directive '${directive.name}' changed from '${oldArg.description}' to '${newArg.description}'`,\n        path: `@${directive.name}.${oldArg.name}`,\n    };\n}\nfunction directiveArgumentDefaultValueChanged(directive, oldArg, newArg) {\n    return {\n        criticality: {\n            level: CriticalityLevel.Dangerous,\n            reason: 'Changing the default value for an argument may change the runtime behaviour of a field if it was never provided.',\n        },\n        type: ChangeType.DirectiveArgumentDefaultValueChanged,\n        message: typeof oldArg.defaultValue === 'undefined'\n            ? `Default value '${newArg.defaultValue}' was added to argument '${newArg.name}' on directive '${directive.name}'`\n            : `Default value for argument '${oldArg.name}' on directive '${directive.name}' changed from '${oldArg.defaultValue}' to '${newArg.defaultValue}'`,\n        path: `@${directive.name}.${oldArg.name}`,\n    };\n}\nfunction directiveArgumentTypeChanged(directive, oldArg, newArg) {\n    return {\n        criticality: safeChangeForInputValue(oldArg.type, newArg.type)\n            ? {\n                level: CriticalityLevel.NonBreaking,\n                reason: 'Changing an input field from non-null to null is considered non-breaking.',\n            }\n            : {\n                level: CriticalityLevel.Breaking,\n            },\n        type: ChangeType.DirectiveArgumentTypeChanged,\n        message: `Type for argument '${oldArg.name}' on directive '${directive.name}' changed from '${oldArg.type}' to '${newArg.type}'`,\n        path: `@${directive.name}.${oldArg.name}`,\n    };\n}\n\nfunction enumValueRemoved(oldEnum, value) {\n    return {\n        criticality: {\n            level: CriticalityLevel.Breaking,\n            reason: `Removing an enum value will cause existing queries that use this enum value to error.`,\n        },\n        type: ChangeType.EnumValueRemoved,\n        message: `Enum value '${value.name}' ${isDeprecated(value) ? '(deprecated) ' : ''}was removed from enum '${oldEnum.name}'`,\n        path: [oldEnum.name, value.name].join('.'),\n    };\n}\nfunction enumValueAdded(newEnum, value) {\n    return {\n        criticality: {\n            level: CriticalityLevel.Dangerous,\n            reason: `Adding an enum value may break existing clients that were not programming defensively against an added case when querying an enum.`,\n        },\n        type: ChangeType.EnumValueAdded,\n        message: `Enum value '${value.name}' was added to enum '${newEnum.name}'`,\n        path: [newEnum.name, value.name].join('.'),\n    };\n}\nfunction enumValueDescriptionChanged(newEnum, oldValue, newValue) {\n    return {\n        criticality: {\n            level: CriticalityLevel.NonBreaking,\n        },\n        type: ChangeType.EnumValueDescriptionChanged,\n        message: typeof oldValue.description === 'undefined'\n            ? `Description '${newValue.description}' was added to enum value '${newEnum.name}.${newValue.name}'`\n            : `Description for enum value '${newEnum.name}.${newValue.name}' changed from '${oldValue.description}' to '${newValue.description}'`,\n        path: [newEnum.name, oldValue.name].join('.'),\n    };\n}\nfunction enumValueDeprecationReasonChanged(newEnum, oldValue, newValue) {\n    return {\n        criticality: {\n            level: CriticalityLevel.NonBreaking,\n        },\n        type: ChangeType.EnumValueDeprecationReasonChanged,\n        message: `Enum value '${newEnum.name}.${newValue.name}' deprecation reason changed from '${oldValue.deprecationReason}' to '${newValue.deprecationReason}'`,\n        path: [newEnum.name, oldValue.name].join('.'),\n    };\n}\nfunction enumValueDeprecationReasonAdded(newEnum, oldValue, newValue) {\n    return {\n        criticality: {\n            level: CriticalityLevel.NonBreaking,\n        },\n        type: ChangeType.EnumValueDeprecationReasonAdded,\n        message: `Enum value '${newEnum.name}.${newValue.name}' was deprecated with reason '${newValue.deprecationReason}'`,\n        path: [newEnum.name, oldValue.name].join('.'),\n    };\n}\nfunction enumValueDeprecationReasonRemoved(newEnum, oldValue, newValue) {\n    return {\n        criticality: {\n            level: CriticalityLevel.NonBreaking,\n        },\n        type: ChangeType.EnumValueDeprecationReasonRemoved,\n        message: `Deprecation reason was removed from enum value '${newEnum.name}.${newValue.name}'`,\n        path: [newEnum.name, oldValue.name].join('.'),\n    };\n}\n\nfunction changesInEnum(oldEnum, newEnum, addChange) {\n    compareLists(oldEnum.getValues(), newEnum.getValues(), {\n        onAdded(value) {\n            addChange(enumValueAdded(newEnum, value));\n        },\n        onRemoved(value) {\n            addChange(enumValueRemoved(oldEnum, value));\n        },\n        onMutual(value) {\n            const oldValue = value.oldVersion;\n            const newValue = value.newVersion;\n            if (isNotEqual(oldValue.description, newValue.description)) {\n                addChange(enumValueDescriptionChanged(newEnum, oldValue, newValue));\n            }\n            if (isNotEqual(oldValue.deprecationReason, newValue.deprecationReason)) {\n                if (isVoid(oldValue.deprecationReason)) {\n                    addChange(enumValueDeprecationReasonAdded(newEnum, oldValue, newValue));\n                }\n                else if (isVoid(newValue.deprecationReason)) {\n                    addChange(enumValueDeprecationReasonRemoved(newEnum, oldValue, newValue));\n                }\n                else {\n                    addChange(enumValueDeprecationReasonChanged(newEnum, oldValue, newValue));\n                }\n            }\n        },\n    });\n}\n\nfunction unionMemberRemoved(union, type) {\n    return {\n        criticality: {\n            level: CriticalityLevel.Breaking,\n            reason: 'Removing a union member from a union can cause existing queries that use this union member in a fragment spread to error.',\n        },\n        type: ChangeType.UnionMemberRemoved,\n        message: `Member '${type.name}' was removed from Union type '${union.name}'`,\n        path: union.name,\n    };\n}\nfunction unionMemberAdded(union, type) {\n    return {\n        criticality: {\n            level: CriticalityLevel.Dangerous,\n            reason: 'Adding a possible type to Unions may break existing clients that were not programming defensively against a new possible type.',\n        },\n        type: ChangeType.UnionMemberAdded,\n        message: `Member '${type.name}' was added to Union type '${union.name}'`,\n        path: union.name,\n    };\n}\n\nfunction changesInUnion(oldUnion, newUnion, addChange) {\n    const oldTypes = oldUnion.getTypes();\n    const newTypes = newUnion.getTypes();\n    compareLists(oldTypes, newTypes, {\n        onAdded(t) {\n            addChange(unionMemberAdded(newUnion, t));\n        },\n        onRemoved(t) {\n            addChange(unionMemberRemoved(oldUnion, t));\n        },\n    });\n}\n\nfunction compareTwoStrings(str1, str2) {\n    if (!str1.length && !str2.length)\n        return 1;\n    if (!str1.length || !str2.length)\n        return 0;\n    if (str1.toUpperCase() === str2.toUpperCase())\n        return 1;\n    if (str1.length === 1 && str2.length === 1)\n        return 0;\n    const pairs1 = wordLetterPairs(str1);\n    const pairs2 = wordLetterPairs(str2);\n    const union = pairs1.length + pairs2.length;\n    let intersection = 0;\n    pairs1.forEach((pair1) => {\n        for (let i = 0, pair2; (pair2 = pairs2[i]); i++) {\n            if (pair1 !== pair2)\n                continue;\n            intersection++;\n            pairs2.splice(i, 1);\n            break;\n        }\n    });\n    return (intersection * 2) / union;\n}\nfunction findBestMatch(mainString, targetStrings) {\n    if (!areArgsValid(mainString, targetStrings))\n        throw new Error('Bad arguments: First argument should be a string, second should be an array of strings');\n    const ratings = targetStrings.map((target) => ({\n        target,\n        rating: compareTwoStrings(mainString, target.value),\n    }));\n    const bestMatch = Array.from(ratings).sort((a, b) => b.rating - a.rating)[0];\n    return { ratings, bestMatch };\n}\nfunction flattenDeep(arr) {\n    return Array.isArray(arr)\n        ? arr.reduce((a, b) => a.concat(flattenDeep(b)), [])\n        : [arr];\n}\nfunction areArgsValid(mainString, targetStrings) {\n    if (typeof mainString !== 'string')\n        return false;\n    if (!Array.isArray(targetStrings))\n        return false;\n    if (!targetStrings.length)\n        return false;\n    if (targetStrings.find((s) => typeof s.value !== 'string'))\n        return false;\n    return true;\n}\nfunction letterPairs(str) {\n    const pairs = [];\n    for (let i = 0, max = str.length - 1; i < max; i++)\n        pairs[i] = str.substring(i, i + 2);\n    return pairs;\n}\nfunction wordLetterPairs(str) {\n    const pairs = str.toUpperCase().split(' ').map(letterPairs);\n    return flattenDeep(pairs);\n}\nfunction safeString(obj) {\n    return object_inspect__WEBPACK_IMPORTED_MODULE_0__(obj).replace(/\\[Object\\: null prototype\\] /g, '').replace(/(^')|('$)/g, '');\n}\n\nfunction inputFieldRemoved(input, field) {\n    return {\n        criticality: {\n            level: CriticalityLevel.Breaking,\n            reason: 'Removing an input field will cause existing queries that use this input field to error.',\n        },\n        type: ChangeType.InputFieldRemoved,\n        message: `Input field '${field.name}' ${isDeprecated(field) ? '(deprecated) ' : ''}was removed from input object type '${input.name}'`,\n        path: [input.name, field.name].join('.'),\n    };\n}\nfunction inputFieldAdded(input, field) {\n    return {\n        criticality: (0,graphql__WEBPACK_IMPORTED_MODULE_2__.isNonNullType)(field.type)\n            ? {\n                level: CriticalityLevel.Breaking,\n                reason: 'Adding a required input field to an existing input object type is a breaking change because it will cause existing uses of this input object type to error.',\n            }\n            : {\n                level: CriticalityLevel.Dangerous,\n            },\n        type: ChangeType.InputFieldAdded,\n        message: `Input field '${field.name}' was added to input object type '${input.name}'`,\n        path: [input.name, field.name].join('.'),\n    };\n}\nfunction inputFieldDescriptionAdded(type, field) {\n    return {\n        criticality: {\n            level: CriticalityLevel.NonBreaking,\n        },\n        type: ChangeType.InputFieldDescriptionAdded,\n        message: `Input field '${type.name}.${field.name}' has description '${field.description}'`,\n        path: [type.name, field.name].join('.'),\n    };\n}\nfunction inputFieldDescriptionRemoved(type, field) {\n    return {\n        criticality: {\n            level: CriticalityLevel.NonBreaking,\n        },\n        type: ChangeType.InputFieldDescriptionRemoved,\n        message: `Description was removed from input field '${type.name}.${field.name}'`,\n        path: [type.name, field.name].join('.'),\n    };\n}\nfunction inputFieldDescriptionChanged(input, oldField, newField) {\n    return {\n        criticality: {\n            level: CriticalityLevel.NonBreaking,\n        },\n        type: ChangeType.InputFieldDescriptionChanged,\n        message: `Input field '${input.name}.${oldField.name}' description changed from '${oldField.description}' to '${newField.description}'`,\n        path: [input.name, oldField.name].join('.'),\n    };\n}\nfunction inputFieldDefaultValueChanged(input, oldField, newField) {\n    return {\n        criticality: {\n            level: CriticalityLevel.Dangerous,\n            reason: 'Changing the default value for an argument may change the runtime behavior of a field if it was never provided.',\n        },\n        type: ChangeType.InputFieldDefaultValueChanged,\n        message: `Input field '${input.name}.${oldField.name}' default value changed from '${safeString(oldField.defaultValue)}' to '${safeString(newField.defaultValue)}'`,\n        path: [input.name, oldField.name].join('.'),\n    };\n}\nfunction inputFieldTypeChanged(input, oldField, newField) {\n    return {\n        criticality: safeChangeForInputValue(oldField.type, newField.type)\n            ? {\n                level: CriticalityLevel.NonBreaking,\n                reason: 'Changing an input field from non-null to null is considered non-breaking.',\n            }\n            : {\n                level: CriticalityLevel.Breaking,\n                reason: 'Changing the type of an input field can cause existing queries that use this field to error.',\n            },\n        type: ChangeType.InputFieldTypeChanged,\n        message: `Input field '${input.name}.${oldField.name}' changed type from '${oldField.type.toString()}' to '${newField.type.toString()}'`,\n        path: [input.name, oldField.name].join('.'),\n    };\n}\n\nfunction changesInInputObject(oldInput, newInput, addChange) {\n    const oldFields = oldInput.getFields();\n    const newFields = newInput.getFields();\n    compareLists(Object.values(oldFields), Object.values(newFields), {\n        onAdded(field) {\n            addChange(inputFieldAdded(newInput, field));\n        },\n        onRemoved(field) {\n            addChange(inputFieldRemoved(oldInput, field));\n        },\n        onMutual(field) {\n            changesInInputField(oldInput, field.oldVersion, field.newVersion, addChange);\n        },\n    });\n}\nfunction changesInInputField(input, oldField, newField, addChange) {\n    if (isNotEqual(oldField.description, newField.description)) {\n        if (isVoid(oldField.description)) {\n            addChange(inputFieldDescriptionAdded(input, newField));\n        }\n        else if (isVoid(newField.description)) {\n            addChange(inputFieldDescriptionRemoved(input, oldField));\n        }\n        else {\n            addChange(inputFieldDescriptionChanged(input, oldField, newField));\n        }\n    }\n    if (isNotEqual(oldField.defaultValue, newField.defaultValue)) {\n        if (Array.isArray(oldField.defaultValue) &&\n            Array.isArray(newField.defaultValue)) {\n            if (diffArrays(oldField.defaultValue, newField.defaultValue).length > 0) {\n                addChange(inputFieldDefaultValueChanged(input, oldField, newField));\n            }\n        }\n        else if (JSON.stringify(oldField.defaultValue) !==\n            JSON.stringify(newField.defaultValue)) {\n            addChange(inputFieldDefaultValueChanged(input, oldField, newField));\n        }\n    }\n    if (isNotEqual(oldField.type.toString(), newField.type.toString())) {\n        addChange(inputFieldTypeChanged(input, oldField, newField));\n    }\n}\n\nfunction objectTypeInterfaceAdded(iface, type) {\n    return {\n        criticality: {\n            level: CriticalityLevel.Dangerous,\n            reason: 'Adding an interface to an object type may break existing clients that were not programming defensively against a new possible type.',\n        },\n        type: ChangeType.ObjectTypeInterfaceAdded,\n        message: `'${type.name}' object implements '${iface.name}' interface`,\n        path: type.name,\n    };\n}\nfunction objectTypeInterfaceRemoved(iface, type) {\n    return {\n        criticality: {\n            level: CriticalityLevel.Breaking,\n            reason: 'Removing an interface from an object type can cause existing queries that use this in a fragment spread to error.',\n        },\n        type: ChangeType.ObjectTypeInterfaceRemoved,\n        message: `'${type.name}' object type no longer implements '${iface.name}' interface`,\n        path: type.name,\n    };\n}\n\nfunction fieldRemoved(type, field) {\n    const entity = (0,graphql__WEBPACK_IMPORTED_MODULE_2__.isInterfaceType)(type) ? 'interface' : 'object type';\n    return {\n        criticality: {\n            level: CriticalityLevel.Breaking,\n            reason: field.deprecationReason\n                ? `Removing a deprecated field is a breaking change. Before removing it, you may want to look at the field's usage to see the impact of removing the field.`\n                : `Removing a field is a breaking change. It is preferable to deprecate the field before removing it.`,\n        },\n        type: ChangeType.FieldRemoved,\n        message: `Field '${field.name}' ${isDeprecated(field) ? '(deprecated) ' : ''}was removed from ${entity} '${type.name}'`,\n        path: [type.name, field.name].join('.'),\n    };\n}\nfunction fieldAdded(type, field) {\n    const entity = (0,graphql__WEBPACK_IMPORTED_MODULE_2__.isInterfaceType)(type) ? 'interface' : 'object type';\n    return {\n        criticality: {\n            level: CriticalityLevel.NonBreaking,\n        },\n        type: ChangeType.FieldAdded,\n        message: `Field '${field.name}' was added to ${entity} '${type.name}'`,\n        path: [type.name, field.name].join('.'),\n    };\n}\nfunction fieldDescriptionChanged(type, oldField, newField) {\n    return {\n        criticality: {\n            level: CriticalityLevel.NonBreaking,\n        },\n        type: ChangeType.FieldDescriptionChanged,\n        message: `Field '${type.name}.${oldField.name}' description changed from '${oldField.description}' to '${newField.description}'`,\n        path: [type.name, oldField.name].join('.'),\n    };\n}\nfunction fieldDescriptionAdded(type, field) {\n    return {\n        criticality: {\n            level: CriticalityLevel.NonBreaking,\n        },\n        type: ChangeType.FieldDescriptionAdded,\n        message: `Field '${type.name}.${field.name}' has description '${field.description}'`,\n        path: [type.name, field.name].join('.'),\n    };\n}\nfunction fieldDescriptionRemoved(type, field) {\n    return {\n        criticality: {\n            level: CriticalityLevel.NonBreaking,\n        },\n        type: ChangeType.FieldDescriptionRemoved,\n        message: `Description was removed from field '${type.name}.${field.name}'`,\n        path: [type.name, field.name].join('.'),\n    };\n}\nfunction fieldDeprecationAdded(type, field) {\n    return {\n        criticality: {\n            level: CriticalityLevel.NonBreaking,\n        },\n        type: ChangeType.FieldDeprecationAdded,\n        message: `Field '${type.name}.${field.name}' is deprecated`,\n        path: [type.name, field.name].join('.'),\n    };\n}\nfunction fieldDeprecationRemoved(type, field) {\n    return {\n        criticality: {\n            level: CriticalityLevel.Dangerous,\n        },\n        type: ChangeType.FieldDeprecationRemoved,\n        message: `Field '${type.name}.${field.name}' is no longer deprecated`,\n        path: [type.name, field.name].join('.'),\n    };\n}\nfunction fieldDeprecationReasonChanged(type, oldField, newField) {\n    return {\n        criticality: {\n            level: CriticalityLevel.NonBreaking,\n        },\n        type: ChangeType.FieldDeprecationReasonChanged,\n        message: `Deprecation reason on field '${type.name}.${newField.name}' has changed from '${oldField.deprecationReason}' to '${newField.deprecationReason}'`,\n        path: [type.name, oldField.name].join('.'),\n    };\n}\nfunction fieldDeprecationReasonAdded(type, field) {\n    return {\n        criticality: {\n            level: CriticalityLevel.NonBreaking,\n        },\n        type: ChangeType.FieldDeprecationReasonAdded,\n        message: `Field '${type.name}.${field.name}' has deprecation reason '${field.deprecationReason}'`,\n        path: [type.name, field.name].join('.'),\n    };\n}\nfunction fieldDeprecationReasonRemoved(type, field) {\n    return {\n        criticality: {\n            level: CriticalityLevel.NonBreaking,\n        },\n        type: ChangeType.FieldDeprecationReasonRemoved,\n        message: `Deprecation reason was removed from field '${type.name}.${field.name}'`,\n        path: [type.name, field.name].join('.'),\n    };\n}\nfunction fieldTypeChanged(type, oldField, newField) {\n    return {\n        criticality: {\n            level: safeChangeForField(oldField.type, newField.type)\n                ? CriticalityLevel.NonBreaking\n                : CriticalityLevel.Breaking,\n        },\n        type: ChangeType.FieldTypeChanged,\n        message: `Field '${type}.${oldField.name}' changed type from '${oldField.type}' to '${newField.type}'`,\n        path: [type.name, oldField.name].join('.'),\n    };\n}\nfunction fieldArgumentAdded(type, field, arg) {\n    const isBreaking = (0,graphql__WEBPACK_IMPORTED_MODULE_2__.isNonNullType)(arg.type) && typeof arg.defaultValue === 'undefined';\n    const defaultValueMsg = typeof arg.defaultValue !== 'undefined' ? ' (with default value) ' : ' ';\n    return {\n        criticality: isBreaking\n            ? {\n                level: CriticalityLevel.Breaking,\n                reason: `Adding a required argument to an existing field is a breaking change because it will cause existing uses of this field to error.`,\n            }\n            : {\n                level: CriticalityLevel.Dangerous,\n                reason: `Adding a new argument to an existing field may involve a change in resolve function logic that potentially may cause some side effects.`,\n            },\n        type: ChangeType.FieldArgumentAdded,\n        message: `Argument '${arg.name}: ${arg.type}'${defaultValueMsg}added to field '${type.name}.${field.name}'`,\n        path: [type.name, field.name, arg.name].join('.'),\n    };\n}\nfunction fieldArgumentRemoved(type, field, arg) {\n    return {\n        criticality: {\n            level: CriticalityLevel.Breaking,\n            reason: `Removing a field argument is a breaking change because it will cause existing queries that use this argument to error.`,\n        },\n        type: ChangeType.FieldArgumentRemoved,\n        message: `Argument '${arg.name}: ${arg.type}' was removed from field '${type.name}.${field.name}'`,\n        path: [type.name, field.name, arg.name].join('.'),\n    };\n}\n\nfunction fieldArgumentDescriptionChanged(type, field, oldArg, newArg) {\n    return {\n        criticality: {\n            level: CriticalityLevel.NonBreaking,\n        },\n        type: ChangeType.FieldArgumentDescriptionChanged,\n        message: `Description for argument '${newArg.name}' on field '${type.name}.${field.name}' changed from '${oldArg.description}' to '${newArg.description}'`,\n        path: [type.name, field.name, oldArg.name].join('.'),\n    };\n}\nfunction fieldArgumentDefaultChanged(type, field, oldArg, newArg) {\n    return {\n        criticality: {\n            level: CriticalityLevel.Dangerous,\n            reason: 'Changing the default value for an argument may change the runtime behaviour of a field if it was never provided.',\n        },\n        type: ChangeType.FieldArgumentDefaultChanged,\n        message: typeof oldArg.defaultValue === 'undefined'\n            ? `Default value '${safeString(newArg.defaultValue)}' was added to argument '${newArg.name}' on field '${type.name}.${field.name}'`\n            : `Default value for argument '${newArg.name}' on field '${type.name}.${field.name}' changed from '${safeString(oldArg.defaultValue)}' to '${safeString(newArg.defaultValue)}'`,\n        path: [type.name, field.name, oldArg.name].join('.'),\n    };\n}\nfunction fieldArgumentTypeChanged(type, field, oldArg, newArg) {\n    return {\n        criticality: safeChangeForInputValue(oldArg.type, newArg.type)\n            ? {\n                level: CriticalityLevel.NonBreaking,\n                reason: `Changing an input field from non-null to null is considered non-breaking.`,\n            }\n            : {\n                level: CriticalityLevel.Breaking,\n                reason: `Changing the type of a field's argument can cause existing queries that use this argument to error.`,\n            },\n        type: ChangeType.FieldArgumentTypeChanged,\n        message: `Type for argument '${newArg.name}' on field '${type.name}.${field.name}' changed from '${oldArg.type}' to '${newArg.type}'`,\n        path: [type.name, field.name, oldArg.name].join('.'),\n    };\n}\n\nfunction changesInArgument(type, field, oldArg, newArg, addChange) {\n    if (isNotEqual(oldArg.description, newArg.description)) {\n        addChange(fieldArgumentDescriptionChanged(type, field, oldArg, newArg));\n    }\n    if (isNotEqual(oldArg.defaultValue, newArg.defaultValue)) {\n        if (Array.isArray(oldArg.defaultValue) &&\n            Array.isArray(newArg.defaultValue)) {\n            const diff = diffArrays(oldArg.defaultValue, newArg.defaultValue);\n            if (diff.length > 0) {\n                addChange(fieldArgumentDefaultChanged(type, field, oldArg, newArg));\n            }\n        }\n        else if (JSON.stringify(oldArg.defaultValue) !==\n            JSON.stringify(newArg.defaultValue)) {\n            addChange(fieldArgumentDefaultChanged(type, field, oldArg, newArg));\n        }\n    }\n    if (isNotEqual(oldArg.type.toString(), newArg.type.toString())) {\n        addChange(fieldArgumentTypeChanged(type, field, oldArg, newArg));\n    }\n}\n\nfunction changesInField(type, oldField, newField, addChange) {\n    if (isNotEqual(oldField.description, newField.description)) {\n        if (isVoid(oldField.description)) {\n            addChange(fieldDescriptionAdded(type, newField));\n        }\n        else if (isVoid(newField.description)) {\n            addChange(fieldDescriptionRemoved(type, oldField));\n        }\n        else {\n            addChange(fieldDescriptionChanged(type, oldField, newField));\n        }\n    }\n    if (isNotEqual(isDeprecated(oldField), isDeprecated(newField))) {\n        if (isDeprecated(newField)) {\n            addChange(fieldDeprecationAdded(type, newField));\n        }\n        else {\n            addChange(fieldDeprecationRemoved(type, oldField));\n        }\n    }\n    if (isNotEqual(oldField.deprecationReason, newField.deprecationReason)) {\n        if (isVoid(oldField.deprecationReason)) {\n            addChange(fieldDeprecationReasonAdded(type, newField));\n        }\n        else if (isVoid(newField.deprecationReason)) {\n            addChange(fieldDeprecationReasonRemoved(type, oldField));\n        }\n        else {\n            addChange(fieldDeprecationReasonChanged(type, oldField, newField));\n        }\n    }\n    if (isNotEqual(oldField.type.toString(), newField.type.toString())) {\n        addChange(fieldTypeChanged(type, oldField, newField));\n    }\n    compareLists(oldField.args, newField.args, {\n        onAdded(arg) {\n            addChange(fieldArgumentAdded(type, newField, arg));\n        },\n        onRemoved(arg) {\n            addChange(fieldArgumentRemoved(type, oldField, arg));\n        },\n        onMutual(arg) {\n            changesInArgument(type, oldField, arg.oldVersion, arg.newVersion, addChange);\n        },\n    });\n}\n\nfunction changesInObject(oldType, newType, addChange) {\n    const oldInterfaces = oldType.getInterfaces();\n    const newInterfaces = newType.getInterfaces();\n    const oldFields = oldType.getFields();\n    const newFields = newType.getFields();\n    compareLists(oldInterfaces, newInterfaces, {\n        onAdded(i) {\n            addChange(objectTypeInterfaceAdded(i, newType));\n        },\n        onRemoved(i) {\n            addChange(objectTypeInterfaceRemoved(i, oldType));\n        },\n    });\n    compareLists(Object.values(oldFields), Object.values(newFields), {\n        onAdded(f) {\n            addChange(fieldAdded(newType, f));\n        },\n        onRemoved(f) {\n            addChange(fieldRemoved(oldType, f));\n        },\n        onMutual(f) {\n            changesInField(oldType, f.oldVersion, f.newVersion, addChange);\n        },\n    });\n}\n\nfunction changesInInterface(oldInterface, newInterface, addChange) {\n    compareLists(Object.values(oldInterface.getFields()), Object.values(newInterface.getFields()), {\n        onAdded(field) {\n            addChange(fieldAdded(newInterface, field));\n        },\n        onRemoved(field) {\n            addChange(fieldRemoved(oldInterface, field));\n        },\n        onMutual(field) {\n            changesInField(oldInterface, field.oldVersion, field.newVersion, addChange);\n        },\n    });\n}\n\nfunction changesInDirective(oldDirective, newDirective, addChange) {\n    if (isNotEqual(oldDirective.description, newDirective.description)) {\n        addChange(directiveDescriptionChanged(oldDirective, newDirective));\n    }\n    const locations = {\n        added: diffArrays(newDirective.locations, oldDirective.locations),\n        removed: diffArrays(oldDirective.locations, newDirective.locations),\n    };\n    // locations added\n    locations.added.forEach((location) => addChange(directiveLocationAdded(newDirective, location)));\n    // locations removed\n    locations.removed.forEach((location) => addChange(directiveLocationRemoved(oldDirective, location)));\n    compareLists(oldDirective.args, newDirective.args, {\n        onAdded(arg) {\n            addChange(directiveArgumentAdded(newDirective, arg));\n        },\n        onRemoved(arg) {\n            addChange(directiveArgumentRemoved(oldDirective, arg));\n        },\n        onMutual(arg) {\n            changesInDirectiveArgument(oldDirective, arg.oldVersion, arg.newVersion, addChange);\n        },\n    });\n}\nfunction changesInDirectiveArgument(directive, oldArg, newArg, addChange) {\n    if (isNotEqual(oldArg.description, newArg.description)) {\n        addChange(directiveArgumentDescriptionChanged(directive, oldArg, newArg));\n    }\n    if (isNotEqual(oldArg.defaultValue, newArg.defaultValue)) {\n        addChange(directiveArgumentDefaultValueChanged(directive, oldArg, newArg));\n    }\n    if (isNotEqual(oldArg.type.toString(), newArg.type.toString())) {\n        addChange(directiveArgumentTypeChanged(directive, oldArg, newArg));\n    }\n}\n\nfunction diffSchema(oldSchema, newSchema) {\n    const changes = [];\n    function addChange(change) {\n        changes.push(change);\n    }\n    changesInSchema(oldSchema, newSchema, addChange);\n    compareLists(Object.values(oldSchema.getTypeMap()).filter((t) => !isPrimitive(t)), Object.values(newSchema.getTypeMap()).filter((t) => !isPrimitive(t)), {\n        onAdded(type) {\n            addChange(typeAdded(type));\n        },\n        onRemoved(type) {\n            addChange(typeRemoved(type));\n        },\n        onMutual(type) {\n            changesInType(type.oldVersion, type.newVersion, addChange);\n        },\n    });\n    compareLists(oldSchema.getDirectives(), newSchema.getDirectives(), {\n        onAdded(directive) {\n            addChange(directiveAdded(directive));\n        },\n        onRemoved(directive) {\n            addChange(directiveRemoved(directive));\n        },\n        onMutual(directive) {\n            changesInDirective(directive.oldVersion, directive.newVersion, addChange);\n        },\n    });\n    return changes;\n}\nfunction changesInSchema(oldSchema, newSchema, addChange) {\n    var _a, _b, _c, _d, _e, _f;\n    const defaultNames = {\n        query: 'Query',\n        mutation: 'Mutation',\n        subscription: 'Subscription',\n    };\n    const oldRoot = {\n        query: (_a = (oldSchema.getQueryType() || {}).name) !== null && _a !== void 0 ? _a : defaultNames.query,\n        mutation: (_b = (oldSchema.getMutationType() || {}).name) !== null && _b !== void 0 ? _b : defaultNames.mutation,\n        subscription: (_c = (oldSchema.getSubscriptionType() || {}).name) !== null && _c !== void 0 ? _c : defaultNames.subscription,\n    };\n    const newRoot = {\n        query: (_d = (newSchema.getQueryType() || {}).name) !== null && _d !== void 0 ? _d : defaultNames.query,\n        mutation: (_e = (newSchema.getMutationType() || {}).name) !== null && _e !== void 0 ? _e : defaultNames.mutation,\n        subscription: (_f = (newSchema.getSubscriptionType() || {}).name) !== null && _f !== void 0 ? _f : defaultNames.subscription,\n    };\n    if (isNotEqual(oldRoot.query, newRoot.query)) {\n        addChange(schemaQueryTypeChanged(oldSchema, newSchema));\n    }\n    if (isNotEqual(oldRoot.mutation, newRoot.mutation)) {\n        addChange(schemaMutationTypeChanged(oldSchema, newSchema));\n    }\n    if (isNotEqual(oldRoot.subscription, newRoot.subscription)) {\n        addChange(schemaSubscriptionTypeChanged(oldSchema, newSchema));\n    }\n}\nfunction changesInType(oldType, newType, addChange) {\n    if ((0,graphql__WEBPACK_IMPORTED_MODULE_2__.isEnumType)(oldType) && (0,graphql__WEBPACK_IMPORTED_MODULE_2__.isEnumType)(newType)) {\n        changesInEnum(oldType, newType, addChange);\n    }\n    else if ((0,graphql__WEBPACK_IMPORTED_MODULE_2__.isUnionType)(oldType) && (0,graphql__WEBPACK_IMPORTED_MODULE_2__.isUnionType)(newType)) {\n        changesInUnion(oldType, newType, addChange);\n    }\n    else if ((0,graphql__WEBPACK_IMPORTED_MODULE_2__.isInputObjectType)(oldType) && (0,graphql__WEBPACK_IMPORTED_MODULE_2__.isInputObjectType)(newType)) {\n        changesInInputObject(oldType, newType, addChange);\n    }\n    else if ((0,graphql__WEBPACK_IMPORTED_MODULE_2__.isObjectType)(oldType) && (0,graphql__WEBPACK_IMPORTED_MODULE_2__.isObjectType)(newType)) {\n        changesInObject(oldType, newType, addChange);\n    }\n    else if ((0,graphql__WEBPACK_IMPORTED_MODULE_2__.isInterfaceType)(oldType) && (0,graphql__WEBPACK_IMPORTED_MODULE_2__.isInterfaceType)(newType)) {\n        changesInInterface(oldType, newType, addChange);\n    }\n    else if ((0,graphql__WEBPACK_IMPORTED_MODULE_2__.isScalarType)(oldType) && (0,graphql__WEBPACK_IMPORTED_MODULE_2__.isScalarType)(newType)) ;\n    else {\n        addChange(typeKindChanged(oldType, newType));\n    }\n    if (isNotEqual(oldType.description, newType.description)) {\n        if (isVoid(oldType.description)) {\n            addChange(typeDescriptionAdded(newType));\n        }\n        else if (isVoid(newType.description)) {\n            addChange(typeDescriptionRemoved(oldType));\n        }\n        else {\n            addChange(typeDescriptionChanged(oldType, newType));\n        }\n    }\n}\n\nconst dangerousBreaking = ({ changes }) => {\n    return changes.map((change) => {\n        if (change.criticality.level === CriticalityLevel.Dangerous) {\n            return Object.assign(Object.assign({}, change), { criticality: Object.assign(Object.assign({}, change.criticality), { level: CriticalityLevel.Breaking }) });\n        }\n        return change;\n    });\n};\n\nfunction parsePath(path) {\n    return path.split('.');\n}\n\nconst suppressRemovalOfDeprecatedField = ({ changes, oldSchema, }) => {\n    return changes.map((change) => {\n        if (change.type === ChangeType.FieldRemoved &&\n            change.criticality.level === CriticalityLevel.Breaking &&\n            change.path) {\n            const [typeName, fieldName] = parsePath(change.path);\n            const type = oldSchema.getType(typeName);\n            if ((0,graphql__WEBPACK_IMPORTED_MODULE_2__.isObjectType)(type) || (0,graphql__WEBPACK_IMPORTED_MODULE_2__.isInterfaceType)(type)) {\n                const field = type.getFields()[fieldName];\n                if (isDeprecated(field)) {\n                    return Object.assign(Object.assign({}, change), { criticality: Object.assign(Object.assign({}, change.criticality), { level: CriticalityLevel.Dangerous }) });\n                }\n            }\n        }\n        if (change.type === ChangeType.EnumValueRemoved &&\n            change.criticality.level === CriticalityLevel.Breaking &&\n            change.path) {\n            const [enumName, enumItem] = parsePath(change.path);\n            const type = oldSchema.getType(enumName);\n            if ((0,graphql__WEBPACK_IMPORTED_MODULE_2__.isEnumType)(type)) {\n                const item = type.getValue(enumItem);\n                if (item && isDeprecated(item)) {\n                    return Object.assign(Object.assign({}, change), { criticality: Object.assign(Object.assign({}, change.criticality), { level: CriticalityLevel.Dangerous }) });\n                }\n            }\n        }\n        if (change.type === ChangeType.InputFieldRemoved &&\n            change.criticality.level === CriticalityLevel.Breaking &&\n            change.path) {\n            const [inputName, inputItem] = parsePath(change.path);\n            const type = oldSchema.getType(inputName);\n            if ((0,graphql__WEBPACK_IMPORTED_MODULE_2__.isInputObjectType)(type)) {\n                const item = type.getFields()[inputItem];\n                if (item && isDeprecated(item)) {\n                    return Object.assign(Object.assign({}, change), { criticality: Object.assign(Object.assign({}, change.criticality), { level: CriticalityLevel.Dangerous }) });\n                }\n            }\n        }\n        return change;\n    });\n};\n\nconst descriptionChangeTypes = [\n    ChangeType.FieldArgumentDescriptionChanged,\n    ChangeType.DirectiveDescriptionChanged,\n    ChangeType.DirectiveArgumentDescriptionChanged,\n    ChangeType.EnumValueDescriptionChanged,\n    ChangeType.FieldDescriptionChanged,\n    ChangeType.FieldDescriptionAdded,\n    ChangeType.FieldDescriptionRemoved,\n    ChangeType.InputFieldDescriptionAdded,\n    ChangeType.InputFieldDescriptionRemoved,\n    ChangeType.InputFieldDescriptionChanged,\n    ChangeType.TypeDescriptionChanged,\n];\nconst ignoreDescriptionChanges = ({ changes }) => {\n    return changes.filter((change) => descriptionChangeTypes.indexOf(change.type) === -1);\n};\n\nconst considerUsage = ({ changes, config, }) => (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__awaiter)(void 0, void 0, void 0, function* () {\n    if (!config) {\n        throw new Error(`considerUsage rule is missing config`);\n    }\n    const collectedBreakingField = [];\n    changes.forEach((change) => {\n        if (change.criticality.level === CriticalityLevel.Breaking && change.path) {\n            const [typeName, fieldName, argumentName] = parsePath(change.path);\n            collectedBreakingField.push({\n                type: typeName,\n                field: fieldName,\n                argument: argumentName,\n            });\n        }\n    });\n    // True if safe to break, false otherwise\n    const usageList = yield config.checkUsage(collectedBreakingField);\n    // turns an array of booleans into an array of `Type.Field` strings\n    // includes only those that are safe to break the api\n    const suppressedPaths = collectedBreakingField\n        .filter((_, i) => usageList[i] === true)\n        .map(({ type, field, argument }) => [type, field, argument].filter(Boolean).join('.'));\n    return changes.map((change) => {\n        // Turns those \"safe to break\" changes into \"dangerous\"\n        if (change.criticality.level === CriticalityLevel.Breaking &&\n            change.path &&\n            suppressedPaths.some((p) => change.path.startsWith(p))) {\n            return Object.assign(Object.assign({}, change), { criticality: Object.assign(Object.assign({}, change.criticality), { level: CriticalityLevel.Dangerous }), message: `${change.message} (non-breaking based on usage)` });\n        }\n        return change;\n    });\n});\n\nconst safeUnreachable = ({ changes, oldSchema }) => {\n    const reachable = getReachableTypes(oldSchema);\n    return changes.map((change) => {\n        if (change.criticality.level === CriticalityLevel.Breaking && change.path) {\n            const [typeName] = parsePath(change.path);\n            if (!reachable.has(typeName)) {\n                return Object.assign(Object.assign({}, change), { criticality: Object.assign(Object.assign({}, change.criticality), { level: CriticalityLevel.NonBreaking }), message: 'Unreachable from root' });\n            }\n        }\n        return change;\n    });\n};\n\nconst rules = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    dangerousBreaking: dangerousBreaking,\n    suppressRemovalOfDeprecatedField: suppressRemovalOfDeprecatedField,\n    ignoreDescriptionChanges: ignoreDescriptionChanges,\n    considerUsage: considerUsage,\n    safeUnreachable: safeUnreachable\n});\n\nconst DiffRule = rules;\nfunction diff(oldSchema, newSchema, rules = [], config) {\n    const changes = diffSchema(oldSchema, newSchema);\n    return rules.reduce((prev, rule) => (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__awaiter)(this, void 0, void 0, function* () {\n        const prevChanges = yield prev;\n        return rule({\n            changes: prevChanges,\n            oldSchema,\n            newSchema,\n            config,\n        });\n    }), Promise.resolve(changes));\n}\n\nfunction readDocument(source) {\n    const result = {\n        source,\n        fragments: [],\n        operations: [],\n        hasFragments: false,\n        hasOperations: false,\n    };\n    const documentNode = (0,graphql__WEBPACK_IMPORTED_MODULE_8__.parse)(source.body);\n    const filepath = source.name;\n    const definitions = documentNode.definitions || [];\n    definitions.forEach((node) => {\n        if (isOperation(node)) {\n            result.operations.push({\n                node,\n                source: filepath,\n            });\n        }\n        else if (isFragment(node)) {\n            result.fragments.push({\n                node,\n                source: filepath,\n            });\n        }\n    });\n    result.hasFragments = result.fragments.length > 0;\n    result.hasOperations = result.operations.length > 0;\n    return result;\n}\nfunction isOperation(node) {\n    return node.kind === graphql__WEBPACK_IMPORTED_MODULE_3__.Kind.OPERATION_DEFINITION;\n}\nfunction isFragment(node) {\n    return node.kind === graphql__WEBPACK_IMPORTED_MODULE_3__.Kind.FRAGMENT_DEFINITION;\n}\n\nfunction validateQueryDepth({ source, doc, maxDepth, fragmentGraph, }) {\n    try {\n        calculateDepth({\n            node: doc,\n            currentDepth: 0,\n            maxDepth,\n            getFragment(name) {\n                return fragmentGraph.getNodeData(name);\n            },\n        });\n    }\n    catch (errorOrNode) {\n        if (errorOrNode instanceof Error) {\n            throw errorOrNode;\n        }\n        const node = errorOrNode;\n        return new graphql__WEBPACK_IMPORTED_MODULE_6__.GraphQLError(`Query exceeds maximum depth of ${maxDepth}`, node, source, node.loc && node.loc.start ? [node.loc.start] : undefined);\n    }\n}\nfunction calculateDepth({ node, currentDepth, maxDepth, getFragment, }) {\n    if (maxDepth && currentDepth > maxDepth) {\n        throw node;\n    }\n    switch (node.kind) {\n        case graphql__WEBPACK_IMPORTED_MODULE_3__.Kind.FIELD: {\n            if (node.name.value.startsWith('__') || !node.selectionSet) {\n                return 0;\n            }\n            const maxInnerDepth = calculateDepth({\n                node: node.selectionSet,\n                currentDepth: currentDepth + 1,\n                maxDepth,\n                getFragment,\n            });\n            return 1 + maxInnerDepth;\n        }\n        case graphql__WEBPACK_IMPORTED_MODULE_3__.Kind.SELECTION_SET: {\n            return Math.max(...node.selections.map((selection) => {\n                return calculateDepth({\n                    node: selection,\n                    currentDepth: currentDepth,\n                    maxDepth,\n                    getFragment,\n                });\n            }));\n        }\n        case graphql__WEBPACK_IMPORTED_MODULE_3__.Kind.DOCUMENT: {\n            return Math.max(...node.definitions.map((def) => {\n                return calculateDepth({\n                    node: def,\n                    currentDepth: currentDepth,\n                    maxDepth,\n                    getFragment,\n                });\n            }));\n        }\n        case graphql__WEBPACK_IMPORTED_MODULE_3__.Kind.OPERATION_DEFINITION:\n        case graphql__WEBPACK_IMPORTED_MODULE_3__.Kind.INLINE_FRAGMENT:\n        case graphql__WEBPACK_IMPORTED_MODULE_3__.Kind.FRAGMENT_DEFINITION: {\n            return Math.max(...node.selectionSet.selections.map((selection) => {\n                return calculateDepth({\n                    node: selection,\n                    currentDepth,\n                    maxDepth,\n                    getFragment,\n                });\n            }));\n        }\n        case graphql__WEBPACK_IMPORTED_MODULE_3__.Kind.FRAGMENT_SPREAD:\n            return calculateDepth({\n                node: getFragment(node.name.value),\n                currentDepth,\n                maxDepth,\n                getFragment,\n            });\n        default: {\n            throw new Error(`Couldn't handle ${node.kind}`);\n        }\n    }\n}\n\nfunction transformDocumentWithApollo(doc, { keepClientFields }) {\n    return (0,graphql__WEBPACK_IMPORTED_MODULE_5__.visit)(doc, {\n        Field(node) {\n            return keepClientFields\n                ? removeDirectives(node, ['client'])\n                : removeFieldIfDirectives(node, ['client']);\n        },\n    });\n}\nfunction transformSchemaWithApollo(schema) {\n    return (0,graphql__WEBPACK_IMPORTED_MODULE_9__.extendSchema)(schema, (0,graphql__WEBPACK_IMPORTED_MODULE_8__.parse)(/* GraphQL */ `\n      directive @connection(key: String!, filter: [String]) on FIELD\n    `));\n}\n\nfunction validate(schema, sources, options) {\n    const config = Object.assign({ strictDeprecated: true, strictFragments: true, keepClientFields: false, apollo: false }, options);\n    const invalidDocuments = [];\n    // read documents\n    const documents = sources.map(readDocument);\n    // keep all named fragments\n    const fragments = [];\n    const fragmentNames = [];\n    const graph = new dependency_graph__WEBPACK_IMPORTED_MODULE_1__.DepGraph({ circular: true });\n    documents.forEach((doc) => {\n        doc.fragments.forEach((fragment) => {\n            fragmentNames.push(fragment.node.name.value);\n            fragments.push(fragment);\n            graph.addNode(fragment.node.name.value, fragment.node);\n        });\n    });\n    fragments.forEach((fragment) => {\n        const depends = extractFragments((0,graphql__WEBPACK_IMPORTED_MODULE_10__.print)(fragment.node));\n        if (depends) {\n            depends.forEach((name) => {\n                graph.addDependency(fragment.node.name.value, name);\n            });\n        }\n    });\n    documents\n        // since we include fragments, validate only operations\n        .filter((doc) => doc.hasOperations)\n        .forEach((doc) => {\n        const docWithOperations = {\n            kind: graphql__WEBPACK_IMPORTED_MODULE_3__.Kind.DOCUMENT,\n            definitions: doc.operations.map((d) => d.node),\n        };\n        const extractedFragments = (extractFragments((0,graphql__WEBPACK_IMPORTED_MODULE_10__.print)(docWithOperations)) || [])\n            // resolve all nested fragments\n            .map((fragmentName) => resolveFragment(graph.getNodeData(fragmentName), graph))\n            // flatten arrays\n            .reduce((list, current) => list.concat(current), [])\n            // remove duplicates\n            .filter((def, i, all) => all.findIndex((item) => item.name.value === def.name.value) === i);\n        const merged = {\n            kind: graphql__WEBPACK_IMPORTED_MODULE_3__.Kind.DOCUMENT,\n            definitions: [...docWithOperations.definitions, ...extractedFragments],\n        };\n        let transformedSchema = config.apollo\n            ? transformSchemaWithApollo(schema)\n            : schema;\n        const transformedDoc = config.apollo\n            ? transformDocumentWithApollo(merged, {\n                keepClientFields: config.keepClientFields,\n            })\n            : merged;\n        const errors = (0,graphql__WEBPACK_IMPORTED_MODULE_11__.validate)(transformedSchema, transformedDoc) || [];\n        if (config.maxDepth) {\n            const depthError = validateQueryDepth({\n                source: doc.source,\n                doc: transformedDoc,\n                maxDepth: config.maxDepth,\n                fragmentGraph: graph,\n            });\n            if (depthError) {\n                errors.push(depthError);\n            }\n        }\n        const deprecated = config.strictDeprecated\n            ? findDeprecatedUsages(transformedSchema, transformedDoc)\n            : [];\n        const duplicatedFragments = config.strictFragments\n            ? findDuplicatedFragments(fragmentNames)\n            : [];\n        if (sumLengths(errors, duplicatedFragments, deprecated) > 0) {\n            invalidDocuments.push({\n                source: doc.source,\n                errors: [...errors, ...duplicatedFragments],\n                deprecated,\n            });\n        }\n    });\n    return invalidDocuments;\n}\nfunction findDuplicatedFragments(fragmentNames) {\n    return fragmentNames\n        .filter((name, i, all) => all.indexOf(name) !== i)\n        .map((name) => new graphql__WEBPACK_IMPORTED_MODULE_6__.GraphQLError(`Name of '${name}' fragment is not unique`));\n}\n//\n// PostInfo -> AuthorInfo\n// AuthorInfo -> None\n//\nfunction resolveFragment(fragment, graph) {\n    return graph\n        .dependenciesOf(fragment.name.value)\n        .reduce((list, current) => [\n        ...list,\n        ...resolveFragment(graph.getNodeData(current), graph),\n    ], [fragment]);\n}\nfunction extractFragments(document) {\n    return (document.match(/[\\.]{3}[a-z0-9\\_]+\\b/gi) || []).map((name) => name.replace('...', ''));\n}\nfunction sumLengths(...arrays) {\n    return arrays.reduce((sum, { length }) => sum + length, 0);\n}\n\nfunction similar(schema, typeName, threshold = 0.4) {\n    const typeMap = schema.getTypeMap();\n    const targets = Object.keys(schema.getTypeMap())\n        .filter((name) => !isPrimitive(name) && !isForIntrospection(name))\n        .map((name) => ({\n        typeId: name,\n        value: stripType(typeMap[name]),\n    }));\n    const results = {};\n    if (typeof typeName !== 'undefined' &&\n        !targets.some((t) => t.typeId === typeName)) {\n        throw new Error(`Type '${typeName}' doesn't exist`);\n    }\n    (typeName ? [{ typeId: typeName, value: '' }] : targets).forEach((source) => {\n        const sourceType = schema.getType(source.typeId);\n        const matchWith = targets.filter((target) => schema.getType(target.typeId).astNode.kind ===\n            sourceType.astNode.kind && target.typeId !== source.typeId);\n        if (matchWith.length > 0) {\n            const found = similarTo(sourceType, matchWith, threshold);\n            if (found) {\n                results[source.typeId] = found;\n            }\n        }\n    });\n    return results;\n}\nfunction similarTo(type, targets, threshold) {\n    const types = targets.filter((target) => target.typeId !== type.name);\n    const result = findBestMatch(stripType(type), types);\n    if (result.bestMatch.rating < threshold) {\n        return;\n    }\n    return {\n        bestMatch: result.bestMatch,\n        ratings: result.ratings\n            .filter((r) => r.rating >= threshold && r.target !== result.bestMatch.target)\n            .sort((a, b) => a.rating - b.rating)\n            .reverse(),\n    };\n}\nfunction stripType(type) {\n    return (0,graphql__WEBPACK_IMPORTED_MODULE_12__.printType)(type)\n        .trim()\n        .replace(/^[a-z]+ [^\\{]+\\{/g, '')\n        .replace(/\\}$/g, '')\n        .trim()\n        .split('\\n')\n        .map((s) => s.trim())\n        .sort((a, b) => a.localeCompare(b))\n        .join(' ');\n}\n\nfunction coverage(schema, sources) {\n    const coverage = {\n        sources,\n        types: {},\n    };\n    const typeMap = schema.getTypeMap();\n    const typeInfo = new graphql__WEBPACK_IMPORTED_MODULE_4__.TypeInfo(schema);\n    const visitor = (source) => ({\n        Field(node) {\n            const fieldDef = typeInfo.getFieldDef();\n            const parent = typeInfo.getParentType();\n            if (parent &&\n                parent.name &&\n                !isForIntrospection(parent.name) &&\n                fieldDef &&\n                fieldDef.name &&\n                fieldDef.name !== '__typename' &&\n                fieldDef.name !== '__schema') {\n                const sourceName = source.name;\n                const typeCoverage = coverage.types[parent.name];\n                const fieldCoverage = typeCoverage.children[fieldDef.name];\n                const locations = fieldCoverage.locations[sourceName];\n                typeCoverage.hits++;\n                fieldCoverage.hits++;\n                if (node.loc) {\n                    fieldCoverage.locations[sourceName] = [\n                        node.loc,\n                        ...(locations || []),\n                    ];\n                }\n                if (node.arguments) {\n                    for (const argNode of node.arguments) {\n                        const argCoverage = fieldCoverage.children[argNode.name.value];\n                        argCoverage.hits++;\n                        if (argNode.loc) {\n                            argCoverage.locations[sourceName] = [\n                                argNode.loc,\n                                ...(argCoverage.locations[sourceName] || []),\n                            ];\n                        }\n                    }\n                }\n            }\n        },\n    });\n    for (const typename in typeMap) {\n        if (!isForIntrospection(typename) && !isPrimitive(typename)) {\n            const type = typeMap[typename];\n            if ((0,graphql__WEBPACK_IMPORTED_MODULE_2__.isObjectType)(type) || (0,graphql__WEBPACK_IMPORTED_MODULE_2__.isInterfaceType)(type)) {\n                const typeCoverage = {\n                    hits: 0,\n                    type,\n                    children: {},\n                };\n                const fieldMap = type.getFields();\n                for (const fieldname in fieldMap) {\n                    const field = fieldMap[fieldname];\n                    typeCoverage.children[field.name] = {\n                        hits: 0,\n                        locations: {},\n                        children: {},\n                    };\n                    for (const arg of field.args) {\n                        typeCoverage.children[field.name].children[arg.name] = {\n                            hits: 0,\n                            locations: {},\n                        };\n                    }\n                }\n                coverage.types[type.name] = typeCoverage;\n            }\n        }\n    }\n    const documents = coverage.sources.map(readDocument);\n    documents.forEach((doc, i) => {\n        const source = coverage.sources[i];\n        doc.operations.forEach((op) => {\n            (0,graphql__WEBPACK_IMPORTED_MODULE_5__.visit)(op.node, (0,graphql__WEBPACK_IMPORTED_MODULE_4__.visitWithTypeInfo)(typeInfo, visitor(source)));\n        });\n        doc.fragments.forEach((fr) => {\n            (0,graphql__WEBPACK_IMPORTED_MODULE_5__.visit)(fr.node, (0,graphql__WEBPACK_IMPORTED_MODULE_4__.visitWithTypeInfo)(typeInfo, visitor(source)));\n        });\n    });\n    return coverage;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@graphql-inspector/core/index.mjs\n");

/***/ })

};
;