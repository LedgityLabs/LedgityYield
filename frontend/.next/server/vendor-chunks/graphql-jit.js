"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/graphql-jit";
exports.ids = ["vendor-chunks/graphql-jit"];
exports.modules = {

/***/ "(ssr)/../node_modules/graphql-jit/dist/esm/ast.js":
/*!***************************************************!*\
  !*** ../node_modules/graphql-jit/dist/esm/ast.js ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.joinSkipIncludePath = exports.serializeObjectPathForSkipInclude = exports.flattenPath = exports.addPath = exports.computeLocations = exports.valueFromAST = exports.getArgumentDefs = exports.collectSubfields = exports.resolveFieldDef = exports.collectFields = void 0;\nconst generate_function_1 = __importDefault(__webpack_require__(/*! generate-function */ \"(ssr)/../node_modules/generate-function/index.js\"));\nconst graphql_1 = __webpack_require__(/*! graphql */ \"(ssr)/../node_modules/graphql/index.mjs\");\nconst language_1 = __webpack_require__(/*! graphql/language */ \"(ssr)/../node_modules/graphql/language/index.js\");\nconst type_1 = __webpack_require__(/*! graphql/type */ \"(ssr)/../node_modules/graphql/type/index.js\");\nconst execution_1 = __webpack_require__(/*! ./execution */ \"(ssr)/../node_modules/graphql-jit/dist/esm/execution.js\");\nconst inspect_1 = __importDefault(__webpack_require__(/*! ./inspect */ \"(ssr)/../node_modules/graphql-jit/dist/esm/inspect.js\"));\nconst compat_1 = __webpack_require__(/*! ./compat */ \"(ssr)/../node_modules/graphql-jit/dist/esm/compat.js\");\nObject.defineProperty(exports, \"resolveFieldDef\", ({ enumerable: true, get: function () { return compat_1.resolveFieldDef; } }));\nconst inspect = (0, inspect_1.default)();\n/**\n * Given a selectionSet, adds all of the fields in that selection to\n * the passed in map of fields, and returns it at the end.\n *\n * CollectFields requires the \"runtime type\" of an object. For a field which\n * returns an Interface or Union type, the \"runtime type\" will be the actual\n * Object type returned by that field.\n */\nfunction collectFields(compilationContext, runtimeType, selectionSet, fields, visitedFragmentNames, parentResponsePath) {\n    return collectFieldsImpl(compilationContext, runtimeType, selectionSet, fields, visitedFragmentNames, undefined, serializeObjectPathForSkipInclude(parentResponsePath));\n}\nexports.collectFields = collectFields;\n/**\n * Implementation of collectFields defined above with extra parameters\n * used for recursion and need not be exposed publically\n */\nfunction collectFieldsImpl(compilationContext, runtimeType, selectionSet, fields, visitedFragmentNames, previousShouldInclude = \"\", parentResponsePath = \"\") {\n    for (const selection of selectionSet.selections) {\n        switch (selection.kind) {\n            case language_1.Kind.FIELD: {\n                const name = getFieldEntryKey(selection);\n                if (!fields[name]) {\n                    fields[name] = [];\n                }\n                const fieldNode = selection;\n                // the current path of the field\n                // This is used to generate per path skip/include code\n                // because the same field can be reached from different paths (e.g. fragment reuse)\n                const currentPath = joinSkipIncludePath(parentResponsePath, \n                // use alias(instead of selection.name.value) if available as the responsePath used for lookup uses alias\n                name);\n                // `should include`s generated for the current fieldNode\n                const compiledSkipInclude = compileSkipInclude(compilationContext, selection);\n                /**\n                 * Carry over fragment's skip and include code\n                 *\n                 * fieldNode.__internalShouldInclude\n                 * ---------------------------------\n                 * When the parent field has a skip or include, the current one\n                 * should be skipped if the parent is skipped in the path.\n                 *\n                 * previousShouldInclude\n                 * ---------------------\n                 * `should include`s from fragment spread and inline fragments\n                 *\n                 * compileSkipInclude(selection)\n                 * -----------------------------\n                 * `should include`s generated for the current fieldNode\n                 */\n                if (compilationContext.options.useExperimentalPathBasedSkipInclude) {\n                    if (!fieldNode.__internalShouldIncludePath)\n                        fieldNode.__internalShouldIncludePath = {};\n                    fieldNode.__internalShouldIncludePath[currentPath] =\n                        joinShouldIncludeCompilations(fieldNode.__internalShouldIncludePath?.[currentPath] ?? \"\", previousShouldInclude, compiledSkipInclude);\n                }\n                else {\n                    // @deprecated\n                    fieldNode.__internalShouldInclude = joinShouldIncludeCompilations(fieldNode.__internalShouldInclude ?? \"\", previousShouldInclude, compiledSkipInclude);\n                }\n                /**\n                 * We augment the entire subtree as the parent object's skip/include\n                 * directives influence the child even if the child doesn't have\n                 * skip/include on it's own.\n                 *\n                 * Refer the function definition for example.\n                 */\n                augmentFieldNodeTree(compilationContext, fieldNode, currentPath);\n                fields[name].push(fieldNode);\n                break;\n            }\n            case language_1.Kind.INLINE_FRAGMENT: {\n                if (!doesFragmentConditionMatch(compilationContext, selection, runtimeType)) {\n                    continue;\n                }\n                // current fragment's shouldInclude\n                const compiledSkipInclude = compileSkipInclude(compilationContext, selection);\n                // recurse\n                collectFieldsImpl(compilationContext, runtimeType, selection.selectionSet, fields, visitedFragmentNames, joinShouldIncludeCompilations(\n                // `should include`s from previous fragments\n                previousShouldInclude, \n                // current fragment's shouldInclude\n                compiledSkipInclude), parentResponsePath);\n                break;\n            }\n            case language_1.Kind.FRAGMENT_SPREAD: {\n                const fragName = selection.name.value;\n                if (visitedFragmentNames[fragName]) {\n                    continue;\n                }\n                visitedFragmentNames[fragName] = true;\n                const fragment = compilationContext.fragments[fragName];\n                if (!fragment ||\n                    !doesFragmentConditionMatch(compilationContext, fragment, runtimeType)) {\n                    continue;\n                }\n                // current fragment's shouldInclude\n                const compiledSkipInclude = compileSkipInclude(compilationContext, selection);\n                // recurse\n                collectFieldsImpl(compilationContext, runtimeType, fragment.selectionSet, fields, visitedFragmentNames, joinShouldIncludeCompilations(\n                // `should include`s from previous fragments\n                previousShouldInclude, \n                // current fragment's shouldInclude\n                compiledSkipInclude), parentResponsePath);\n                break;\n            }\n        }\n    }\n    return fields;\n}\n/**\n * Augment __internalShouldInclude code for all sub-fields in the\n * tree with @param rootfieldNode as the root.\n *\n * This is required to handle cases where there are multiple paths to\n * the same node. And each of those paths contain different skip/include\n * values.\n *\n * For example,\n *\n * ```\n * {\n *   foo @skip(if: $c1) {\n *     bar @skip(if: $c2)\n *   }\n *   ... {\n *     foo @skip(if: $c3) {\n *       bar\n *     }\n *   }\n * }\n * ```\n *\n * We decide shouldInclude at runtime per fieldNode. When we handle the\n * field `foo`, the logic is straight forward - it requires one of $c1 or $c3\n * to be false.\n *\n * But, when we handle the field `bar`, and we are in the context of the fieldNode,\n * not enough information is available. This is because, if we only included $c2\n * to decide if bar is included, consider the case -\n *\n * $c1: true, $c2: true, $c3: false\n *\n * If we considered only $c2, we would have skipped bar. But the correct implementation\n * is to include bar, because foo($c3) { bar } is not skipped. The entire sub-tree's\n * logic is required to handle bar.\n *\n * So, to handle this case, we augment the tree at each point to consider the\n * skip/include logic from the parent as well.\n *\n * @param compilationContext {CompilationContext} Required for getFragment by\n * name to handle fragment spread operation.\n *\n * @param rootFieldNode {JitFieldNode} The root field to traverse from for\n * adding __internalShouldInclude to all sub field nodes.\n *\n * @param parentResponsePath {string} The response path of the parent field.\n */\nfunction augmentFieldNodeTree(compilationContext, rootFieldNode, parentResponsePath) {\n    for (const selection of rootFieldNode.selectionSet?.selections ?? []) {\n        handle(rootFieldNode, selection, false, parentResponsePath);\n    }\n    /**\n     * Recursively traverse through sub-selection and combine `shouldInclude`s\n     * from parent and current ones.\n     */\n    function handle(parentFieldNode, selection, comesFromFragmentSpread = false, parentResponsePath) {\n        switch (selection.kind) {\n            case language_1.Kind.FIELD: {\n                const jitFieldNode = selection;\n                const currentPath = joinSkipIncludePath(parentResponsePath, \n                // use alias(instead of selection.name.value) if available as the responsePath used for lookup uses alias\n                getFieldEntryKey(jitFieldNode));\n                if (!comesFromFragmentSpread) {\n                    if (compilationContext.options.useExperimentalPathBasedSkipInclude) {\n                        if (!jitFieldNode.__internalShouldIncludePath)\n                            jitFieldNode.__internalShouldIncludePath = {};\n                        jitFieldNode.__internalShouldIncludePath[currentPath] =\n                            joinShouldIncludeCompilations(parentFieldNode.__internalShouldIncludePath?.[parentResponsePath] ?? \"\", jitFieldNode.__internalShouldIncludePath?.[currentPath] ?? \"\");\n                    }\n                    else {\n                        // @deprecated\n                        jitFieldNode.__internalShouldInclude =\n                            joinShouldIncludeCompilations(parentFieldNode.__internalShouldInclude ?? \"\", jitFieldNode.__internalShouldInclude ?? \"\");\n                    }\n                }\n                // go further down the query tree\n                for (const selection of jitFieldNode.selectionSet?.selections ?? []) {\n                    handle(jitFieldNode, selection, false, currentPath);\n                }\n                break;\n            }\n            case language_1.Kind.INLINE_FRAGMENT: {\n                for (const subSelection of selection.selectionSet.selections) {\n                    handle(parentFieldNode, subSelection, true, parentResponsePath);\n                }\n                break;\n            }\n            case language_1.Kind.FRAGMENT_SPREAD: {\n                const fragment = compilationContext.fragments[selection.name.value];\n                for (const subSelection of fragment.selectionSet.selections) {\n                    handle(parentFieldNode, subSelection, true, parentResponsePath);\n                }\n            }\n        }\n    }\n}\n/**\n * Joins a list of shouldInclude compiled code into a single logical\n * statement.\n *\n * The operation is `&&` because, it is used to join parent->child\n * relations in the query tree. Note: parent can be either parent field\n * or fragment.\n *\n * For example,\n * {\n *   foo @skip(if: $c1) {\n *     ... @skip(if: $c2) {\n *       bar @skip(if: $c3)\n *     }\n *   }\n * }\n *\n * Only when a parent is included, the child is included. So, we use `&&`.\n *\n * compilationFor($c1) && compilationFor($c2) && compilationFor($c3)\n *\n * @param compilations\n */\nfunction joinShouldIncludeCompilations(...compilations) {\n    // remove \"true\" since we are joining with '&&' as `true && X` = `X`\n    // This prevents an explosion of `&& true` which could break\n    // V8's internal size limit for string.\n    //\n    // Note: the `true` appears if a field does not have a skip/include directive\n    // So, the more nested the query is, the more of unnecessary `&& true`\n    // we get.\n    //\n    // Failing to do this results in [RangeError: invalid array length]\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_array_length\n    // remove empty strings\n    let filteredCompilations = compilations.filter((it) => it);\n    // Split conditions by && and flatten it\n    filteredCompilations = [].concat(...filteredCompilations.map((e) => e.split(\" && \").map((it) => it.trim())));\n    // Deduplicate items\n    filteredCompilations = Array.from(new Set(filteredCompilations));\n    return filteredCompilations.join(\" && \");\n}\n/**\n * Compiles directives `skip` and `include` and generates the compilation\n * code based on GraphQL specification.\n *\n * @param node {SelectionNode} The selection node (field/fragment/inline-fragment)\n * for which we generate the compiled skipInclude.\n */\nfunction compileSkipInclude(compilationContext, node) {\n    const gen = (0, generate_function_1.default)();\n    const { skipValue, includeValue } = compileSkipIncludeDirectiveValues(compilationContext, node);\n    /**\n     * Spec: https://spec.graphql.org/June2018/#sec--include\n     *\n     * Neither @skip nor @include has precedence over the other.\n     * In the case that both the @skip and @include directives\n     * are provided in on the same the field or fragment, it must\n     * be queried only if the @skip condition is false and the\n     * @include condition is true. Stated conversely, the field\n     * or fragment must not be queried if either the @skip\n     * condition is true or the @include condition is false.\n     */\n    if (skipValue != null && includeValue != null) {\n        gen(`${skipValue} === false && ${includeValue} === true`);\n    }\n    else if (skipValue != null) {\n        gen(`(${skipValue} === false)`);\n    }\n    else if (includeValue != null) {\n        gen(`(${includeValue} === true)`);\n    }\n    else {\n        gen(`true`);\n    }\n    return gen.toString();\n}\n/**\n * Compile skip or include directive values into JIT compatible\n * runtime code.\n *\n * @param node {SelectionNode}\n */\nfunction compileSkipIncludeDirectiveValues(compilationContext, node) {\n    const skipDirective = node.directives?.find((it) => it.name.value === graphql_1.GraphQLSkipDirective.name);\n    const includeDirective = node.directives?.find((it) => it.name.value === graphql_1.GraphQLIncludeDirective.name);\n    const skipValue = skipDirective\n        ? compileSkipIncludeDirective(compilationContext, skipDirective)\n        : // The null here indicates the absense of the directive\n            // which is later used to determine if both skip and include\n            // are present\n            null;\n    const includeValue = includeDirective\n        ? compileSkipIncludeDirective(compilationContext, includeDirective)\n        : // The null here indicates the absense of the directive\n            // which is later used to determine if both skip and include\n            // are present\n            null;\n    return { skipValue, includeValue };\n}\n/**\n * Compile the skip/include directive node. Resolve variables to it's\n * path from context, resolve scalars to their respective values.\n *\n * @param directive {DirectiveNode}\n */\nfunction compileSkipIncludeDirective(compilationContext, directive) {\n    const ifNode = directive.arguments?.find((it) => it.name.value === \"if\");\n    if (ifNode == null) {\n        throw new graphql_1.GraphQLError(`Directive '${directive.name.value}' is missing required arguments: 'if'`, (0, compat_1.getGraphQLErrorOptions)([directive]));\n    }\n    switch (ifNode.value.kind) {\n        case language_1.Kind.VARIABLE:\n            validateSkipIncludeVariableType(compilationContext, ifNode.value);\n            return `${execution_1.GLOBAL_VARIABLES_NAME}[\"${ifNode.value.name.value}\"]`;\n        case language_1.Kind.BOOLEAN:\n            return `${ifNode.value.value.toString()}`;\n        default:\n            throw new graphql_1.GraphQLError(`Argument 'if' on Directive '${directive.name.value}' has an invalid value (${(0, graphql_1.valueFromASTUntyped)(ifNode.value)}). Expected type 'Boolean!'`, (0, compat_1.getGraphQLErrorOptions)([ifNode]));\n    }\n}\n/**\n * Validate the skip and include directive's argument values at compile time.\n *\n * This validation step is required as these directives are part of an\n * implicit schema in GraphQL.\n *\n * @param compilationContext {CompilationContext}\n * @param variable {VariableNode} the variable used in 'if' argument of the skip/include directive\n */\nfunction validateSkipIncludeVariableType(compilationContext, variable) {\n    const variableDefinition = compilationContext.operation.variableDefinitions?.find((it) => it.variable.name.value === variable.name.value);\n    if (variableDefinition == null) {\n        throw new graphql_1.GraphQLError(`Variable '${variable.name.value}' is not defined`, (0, compat_1.getGraphQLErrorOptions)([variable]));\n    }\n    // Part of Spec text: https://spec.graphql.org/June2018/#sec-All-Variable-Usages-are-Allowed\n    if (!(\n    // The variable defintion is a Non-nullable Boolean type\n    ((variableDefinition.type.kind === language_1.Kind.NON_NULL_TYPE &&\n        variableDefinition.type.type.kind === language_1.Kind.NAMED_TYPE &&\n        variableDefinition.type.type.name.value === \"Boolean\") ||\n        // or the variable definition is a nullable Boolean type with a default value\n        (variableDefinition.type.kind === language_1.Kind.NAMED_TYPE &&\n            variableDefinition.type.name.value === \"Boolean\" &&\n            variableDefinition.defaultValue != null)))) {\n        throw new graphql_1.GraphQLError(`Variable '${variable.name.value}' of type '${typeNodeToString(variableDefinition.type)}' used in position expecting type 'Boolean!'`, (0, compat_1.getGraphQLErrorOptions)([variableDefinition]));\n    }\n}\n/**\n * Print the string representation of the TypeNode for error messages\n *\n * @param type {TypeNode} type node to be converted to string representation\n */\nfunction typeNodeToString(type) {\n    switch (type.kind) {\n        case language_1.Kind.NAMED_TYPE:\n            return type.name.value;\n        case language_1.Kind.NON_NULL_TYPE:\n            return `${typeNodeToString(type.type)}!`;\n        case language_1.Kind.LIST_TYPE:\n            return `[${typeNodeToString(type.type)}]`;\n    }\n}\n/**\n * Determines if a fragment is applicable to the given type.\n */\nfunction doesFragmentConditionMatch(compilationContext, fragment, type) {\n    const typeConditionNode = fragment.typeCondition;\n    if (!typeConditionNode) {\n        return true;\n    }\n    const conditionalType = (0, graphql_1.typeFromAST)(compilationContext.schema, typeConditionNode);\n    if (conditionalType === type) {\n        return true;\n    }\n    if (!conditionalType) {\n        return false;\n    }\n    if ((0, type_1.isAbstractType)(conditionalType)) {\n        return compilationContext.schema.isSubType(conditionalType, type);\n    }\n    return false;\n}\n/**\n * Implements the logic to compute the key of a given field's entry\n */\nfunction getFieldEntryKey(node) {\n    return node.alias ? node.alias.value : node.name.value;\n}\nfunction collectSubfields(compilationContext, returnType, fieldNodes, parentResponsePath) {\n    let subFieldNodes = Object.create(null);\n    const visitedFragmentNames = Object.create(null);\n    for (const fieldNode of fieldNodes) {\n        const selectionSet = fieldNode.selectionSet;\n        if (selectionSet) {\n            subFieldNodes = collectFields(compilationContext, returnType, selectionSet, subFieldNodes, visitedFragmentNames, parentResponsePath);\n        }\n    }\n    return subFieldNodes;\n}\nexports.collectSubfields = collectSubfields;\n/**\n * Prepares an object map of argument values given a list of argument\n * definitions and list of argument AST nodes.\n *\n * Note: The returned value is a plain Object with a prototype, since it is\n * exposed to user code. Care should be taken to not pull values from the\n * Object prototype.\n */\nfunction getArgumentDefs(def, node) {\n    const values = {};\n    const missing = [];\n    const argDefs = def.args;\n    const argNodes = node.arguments || [];\n    const argNodeMap = keyMap(argNodes, (arg) => arg.name.value);\n    for (const argDef of argDefs) {\n        const name = argDef.name;\n        if (argDef.defaultValue !== undefined) {\n            // Set the coerced value to the default\n            values[name] = argDef.defaultValue;\n        }\n        const argType = argDef.type;\n        const argumentNode = argNodeMap[name];\n        let hasVariables = false;\n        if (argumentNode && argumentNode.value.kind === language_1.Kind.VARIABLE) {\n            hasVariables = true;\n            missing.push({\n                valueNode: argumentNode.value,\n                path: addPath(undefined, name, \"literal\"),\n                argument: { definition: argDef, node: argumentNode }\n            });\n        }\n        else if (argumentNode) {\n            const coercedValue = valueFromAST(argumentNode.value, argType);\n            if (coercedValue === undefined) {\n                // Note: ValuesOfCorrectType validation should catch this before\n                // execution. This is a runtime check to ensure execution does not\n                // continue with an invalid argument value.\n                throw new graphql_1.GraphQLError(`Argument \"${name}\" of type \"${argType}\" has invalid value ${(0, graphql_1.print)(argumentNode.value)}.`, (0, compat_1.getGraphQLErrorOptions)(argumentNode.value));\n            }\n            if (isASTValueWithVariables(coercedValue)) {\n                missing.push(...coercedValue.variables.map(({ valueNode, path }) => ({\n                    valueNode,\n                    path: addPath(path, name, \"literal\")\n                })));\n            }\n            values[name] = coercedValue.value;\n        }\n        if ((0, graphql_1.isNonNullType)(argType) && values[name] === undefined && !hasVariables) {\n            // If no value or a nullish value was provided to a variable with a\n            // non-null type (required), produce an error.\n            throw new graphql_1.GraphQLError(argumentNode\n                ? `Argument \"${name}\" of non-null type ` +\n                    `\"${argType}\" must not be null.`\n                : `Argument \"${name}\" of required type ` +\n                    `\"${argType}\" was not provided.`, (0, compat_1.getGraphQLErrorOptions)(node));\n        }\n    }\n    return { values, missing };\n}\nexports.getArgumentDefs = getArgumentDefs;\nfunction isASTValueWithVariables(x) {\n    return !!x.variables;\n}\nfunction valueFromAST(valueNode, type) {\n    if ((0, graphql_1.isNonNullType)(type)) {\n        if (valueNode.kind === language_1.Kind.NULL) {\n            return; // Invalid: intentionally return no value.\n        }\n        return valueFromAST(valueNode, type.ofType);\n    }\n    if (valueNode.kind === language_1.Kind.NULL) {\n        // This is explicitly returning the value null.\n        return {\n            value: null\n        };\n    }\n    if (valueNode.kind === language_1.Kind.VARIABLE) {\n        return { value: null, variables: [{ valueNode, path: undefined }] };\n    }\n    if ((0, graphql_1.isListType)(type)) {\n        const itemType = type.ofType;\n        if (valueNode.kind === language_1.Kind.LIST) {\n            const coercedValues = [];\n            const variables = [];\n            const itemNodes = valueNode.values;\n            for (let i = 0; i < itemNodes.length; i++) {\n                const itemNode = itemNodes[i];\n                if (itemNode.kind === language_1.Kind.VARIABLE) {\n                    coercedValues.push(null);\n                    variables.push({\n                        valueNode: itemNode,\n                        path: addPath(undefined, i.toString(), \"literal\")\n                    });\n                }\n                else {\n                    const itemValue = valueFromAST(itemNode, itemType);\n                    if (!itemValue) {\n                        return; // Invalid: intentionally return no value.\n                    }\n                    coercedValues.push(itemValue.value);\n                    if (isASTValueWithVariables(itemValue)) {\n                        variables.push(...itemValue.variables.map(({ valueNode, path }) => ({\n                            valueNode,\n                            path: addPath(path, i.toString(), \"literal\")\n                        })));\n                    }\n                }\n            }\n            return { value: coercedValues, variables };\n        }\n        // Single item which will be coerced to a list\n        const coercedValue = valueFromAST(valueNode, itemType);\n        if (coercedValue === undefined) {\n            return; // Invalid: intentionally return no value.\n        }\n        if (isASTValueWithVariables(coercedValue)) {\n            return {\n                value: [coercedValue.value],\n                variables: coercedValue.variables.map(({ valueNode, path }) => ({\n                    valueNode,\n                    path: addPath(path, \"0\", \"literal\")\n                }))\n            };\n        }\n        return { value: [coercedValue.value] };\n    }\n    if ((0, graphql_1.isInputObjectType)(type)) {\n        if (valueNode.kind !== language_1.Kind.OBJECT) {\n            return; // Invalid: intentionally return no value.\n        }\n        const coercedObj = Object.create(null);\n        const variables = [];\n        const fieldNodes = keyMap(valueNode.fields, (field) => field.name.value);\n        const fields = Object.values(type.getFields());\n        for (const field of fields) {\n            if (field.defaultValue !== undefined) {\n                coercedObj[field.name] = field.defaultValue;\n            }\n            const fieldNode = fieldNodes[field.name];\n            if (!fieldNode) {\n                continue;\n            }\n            const fieldValue = valueFromAST(fieldNode.value, field.type);\n            if (!fieldValue) {\n                return; // Invalid: intentionally return no value.\n            }\n            if (isASTValueWithVariables(fieldValue)) {\n                variables.push(...fieldValue.variables.map(({ valueNode, path }) => ({\n                    valueNode,\n                    path: addPath(path, field.name, \"literal\")\n                })));\n            }\n            coercedObj[field.name] = fieldValue.value;\n        }\n        return { value: coercedObj, variables };\n    }\n    if ((0, graphql_1.isEnumType)(type)) {\n        if (valueNode.kind !== language_1.Kind.ENUM) {\n            return; // Invalid: intentionally return no value.\n        }\n        const enumValue = type.getValue(valueNode.value);\n        if (!enumValue) {\n            return; // Invalid: intentionally return no value.\n        }\n        return { value: enumValue.value };\n    }\n    if ((0, graphql_1.isScalarType)(type)) {\n        // Scalars fulfill parsing a literal value via parseLiteral().\n        // Invalid values represent a failure to parse correctly, in which case\n        // no value is returned.\n        let result;\n        try {\n            if (type.parseLiteral.length > 1) {\n                // eslint-disable-next-line\n                console.error(\"Scalar with variable inputs detected for parsing AST literals. This is not supported.\");\n            }\n            result = type.parseLiteral(valueNode, {});\n        }\n        catch (error) {\n            return; // Invalid: intentionally return no value.\n        }\n        if (isInvalid(result)) {\n            return; // Invalid: intentionally return no value.\n        }\n        return { value: result };\n    }\n    // Not reachable. All possible input types have been considered.\n    /* istanbul ignore next */\n    throw new Error(`Unexpected input type: \"${inspect(type)}\".`);\n}\nexports.valueFromAST = valueFromAST;\n/**\n * Creates a keyed JS object from an array, given a function to produce the keys\n * for each value in the array.\n *\n * This provides a convenient lookup for the array items if the key function\n * produces unique results.\n *\n *     const phoneBook = [\n *       { name: 'Jon', num: '555-1234' },\n *       { name: 'Jenny', num: '867-5309' }\n *     ]\n *\n *     // { Jon: { name: 'Jon', num: '555-1234' },\n *     //   Jenny: { name: 'Jenny', num: '867-5309' } }\n *     const entriesByName = keyMap(\n *       phoneBook,\n *       entry => entry.name\n *     )\n *\n *     // { name: 'Jenny', num: '857-6309' }\n *     const jennyEntry = entriesByName['Jenny']\n *\n */\nfunction keyMap(list, keyFn) {\n    return list.reduce(\n    // eslint-disable-next-line no-sequences\n    (map, item) => ((map[keyFn(item)] = item), map), Object.create(null));\n}\nfunction computeLocations(nodes) {\n    return nodes.reduce((list, node) => {\n        if (node.loc) {\n            list.push((0, graphql_1.getLocation)(node.loc.source, node.loc.start));\n        }\n        return list;\n    }, []);\n}\nexports.computeLocations = computeLocations;\nfunction addPath(responsePath, key, type = \"literal\") {\n    return { prev: responsePath, key, type };\n}\nexports.addPath = addPath;\nfunction flattenPath(path) {\n    const flattened = [];\n    let curr = path;\n    while (curr) {\n        flattened.push({ key: curr.key, type: curr.type });\n        curr = curr.prev;\n    }\n    return flattened;\n}\nexports.flattenPath = flattenPath;\n/**\n * Serialize a path for use in the skip/include directives.\n *\n * @param path The path to serialize\n * @returns The path serialized as a string, with the root path first.\n */\nfunction serializeObjectPathForSkipInclude(path) {\n    let serialized = \"\";\n    let curr = path;\n    while (curr) {\n        if (curr.type === \"literal\") {\n            serialized = joinSkipIncludePath(curr.key, serialized);\n        }\n        curr = curr.prev;\n    }\n    return serialized;\n}\nexports.serializeObjectPathForSkipInclude = serializeObjectPathForSkipInclude;\n/**\n * join two path segments to a dot notation, handling empty strings\n *\n * @param a path segment\n * @param b path segment\n * @returns combined path in dot notation\n */\nfunction joinSkipIncludePath(a, b) {\n    if (a) {\n        if (b) {\n            return `${a}.${b}`;\n        }\n        return a;\n    }\n    return b;\n}\nexports.joinSkipIncludePath = joinSkipIncludePath;\nfunction isInvalid(value) {\n    // eslint-disable-next-line no-self-compare\n    return value === undefined || value !== value;\n}\n//# sourceMappingURL=ast.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/graphql-jit/dist/esm/ast.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/graphql-jit/dist/esm/compat.js":
/*!******************************************************!*\
  !*** ../node_modules/graphql-jit/dist/esm/compat.js ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.resolveFieldDef = exports.getGraphQLErrorOptions = exports.formatError = exports.getOperationRootType = void 0;\nconst graphql_1 = __webpack_require__(/*! graphql */ \"(ssr)/../node_modules/graphql/index.mjs\");\nconst errorUtilities = __importStar(__webpack_require__(/*! graphql/error */ \"(ssr)/../node_modules/graphql/error/index.js\"));\nconst utilities = __importStar(__webpack_require__(/*! graphql/utilities */ \"(ssr)/../node_modules/graphql/utilities/index.js\"));\nconst execute = __importStar(__webpack_require__(/*! graphql/execution/execute */ \"(ssr)/../node_modules/graphql/execution/execute.js\"));\n/**\n * A helper file to support backward compatibility for different versions of graphql-js.\n */\n/**\n * v15 does not have schema.getRootType\n * v16 has both\n * v17 will not have getOperationRootType\n *\n * To support all these 3 versions of graphql-js, at least for migration, this helper\n * would be useful.\n *\n * This can be removed once we drop support for v15.\n *\n * GraphQL v17 would remove getOperationRootType.\n */\nfunction getOperationRootType(schema, operation) {\n    if (graphql_1.versionInfo.major < 16) {\n        return utilities.getOperationRootType(schema, operation);\n    }\n    const type = schema.getRootType(operation.operation);\n    if (!type) {\n        throw new Error(`No root type for operation ${operation.operation}`);\n    }\n    return type;\n}\nexports.getOperationRootType = getOperationRootType;\n/**\n * v16 and lower versions don't have .toJSON method on GraphQLError\n * v17 does have .toJSON and doesn't have \"formatError\" export anymore\n */\nfunction formatError(error) {\n    if (graphql_1.versionInfo.major < 16) {\n        return errorUtilities.formatError(error);\n    }\n    return error.toJSON();\n}\nexports.formatError = formatError;\n/**\n * v17 dropped support for positional arguments in GraphQLError constructor\n * https://github.com/graphql/graphql-js/pull/3577\n */\nfunction getGraphQLErrorOptions(nodes) {\n    if (graphql_1.versionInfo.major < 16) {\n        return nodes;\n    }\n    return { nodes };\n}\nexports.getGraphQLErrorOptions = getGraphQLErrorOptions;\n/**\n * Resolves the field on the given source object. In particular, this\n * figures out the value that the field returns by calling its resolve function,\n * then calls completeValue to complete promises, serialize scalars, or execute\n * the sub-selection-set for objects.\n *\n * v15 has getFieldDef that accepts field name\n * v16 has getFieldDef that accepts field node\n * v17 drops getFieldDef support and adds getField method\n */\nfunction resolveFieldDef(compilationContext, parentType, fieldNodes) {\n    const fieldNode = fieldNodes[0];\n    if (graphql_1.versionInfo.major < 16) {\n        const fieldName = fieldNode.name.value;\n        return execute.getFieldDef(compilationContext.schema, parentType, fieldName);\n    }\n    if (graphql_1.versionInfo.major < 17) {\n        return execute.getFieldDef(compilationContext.schema, parentType, fieldNode);\n    }\n    return compilationContext.schema.getField(parentType, fieldNode.name.value);\n}\nexports.resolveFieldDef = resolveFieldDef;\n//# sourceMappingURL=compat.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL2dyYXBocWwtaml0L2Rpc3QvZXNtL2NvbXBhdC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxvQ0FBb0M7QUFDbkQ7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EsMENBQTBDLDRCQUE0QjtBQUN0RSxDQUFDO0FBQ0Q7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsdUJBQXVCLEdBQUcsOEJBQThCLEdBQUcsbUJBQW1CLEdBQUcsNEJBQTRCO0FBQzdHLGtCQUFrQixtQkFBTyxDQUFDLHdEQUFTO0FBQ25DLG9DQUFvQyxtQkFBTyxDQUFDLG1FQUFlO0FBQzNELCtCQUErQixtQkFBTyxDQUFDLDJFQUFtQjtBQUMxRCw2QkFBNkIsbUJBQU8sQ0FBQyxxRkFBMkI7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0RBQXNELG9CQUFvQjtBQUMxRTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEI7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLDhCQUE4QjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9sZWRnaXR5LXlpZWxkLWZyb250ZW5kLy4uL25vZGVfbW9kdWxlcy9ncmFwaHFsLWppdC9kaXN0L2VzbS9jb21wYXQuanM/MWY4MSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX3NldE1vZHVsZURlZmF1bHQpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XG59KTtcbnZhciBfX2ltcG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0U3RhcikgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcbiAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xuICAgIHJldHVybiByZXN1bHQ7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5yZXNvbHZlRmllbGREZWYgPSBleHBvcnRzLmdldEdyYXBoUUxFcnJvck9wdGlvbnMgPSBleHBvcnRzLmZvcm1hdEVycm9yID0gZXhwb3J0cy5nZXRPcGVyYXRpb25Sb290VHlwZSA9IHZvaWQgMDtcbmNvbnN0IGdyYXBocWxfMSA9IHJlcXVpcmUoXCJncmFwaHFsXCIpO1xuY29uc3QgZXJyb3JVdGlsaXRpZXMgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcImdyYXBocWwvZXJyb3JcIikpO1xuY29uc3QgdXRpbGl0aWVzID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCJncmFwaHFsL3V0aWxpdGllc1wiKSk7XG5jb25zdCBleGVjdXRlID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCJncmFwaHFsL2V4ZWN1dGlvbi9leGVjdXRlXCIpKTtcbi8qKlxuICogQSBoZWxwZXIgZmlsZSB0byBzdXBwb3J0IGJhY2t3YXJkIGNvbXBhdGliaWxpdHkgZm9yIGRpZmZlcmVudCB2ZXJzaW9ucyBvZiBncmFwaHFsLWpzLlxuICovXG4vKipcbiAqIHYxNSBkb2VzIG5vdCBoYXZlIHNjaGVtYS5nZXRSb290VHlwZVxuICogdjE2IGhhcyBib3RoXG4gKiB2MTcgd2lsbCBub3QgaGF2ZSBnZXRPcGVyYXRpb25Sb290VHlwZVxuICpcbiAqIFRvIHN1cHBvcnQgYWxsIHRoZXNlIDMgdmVyc2lvbnMgb2YgZ3JhcGhxbC1qcywgYXQgbGVhc3QgZm9yIG1pZ3JhdGlvbiwgdGhpcyBoZWxwZXJcbiAqIHdvdWxkIGJlIHVzZWZ1bC5cbiAqXG4gKiBUaGlzIGNhbiBiZSByZW1vdmVkIG9uY2Ugd2UgZHJvcCBzdXBwb3J0IGZvciB2MTUuXG4gKlxuICogR3JhcGhRTCB2MTcgd291bGQgcmVtb3ZlIGdldE9wZXJhdGlvblJvb3RUeXBlLlxuICovXG5mdW5jdGlvbiBnZXRPcGVyYXRpb25Sb290VHlwZShzY2hlbWEsIG9wZXJhdGlvbikge1xuICAgIGlmIChncmFwaHFsXzEudmVyc2lvbkluZm8ubWFqb3IgPCAxNikge1xuICAgICAgICByZXR1cm4gdXRpbGl0aWVzLmdldE9wZXJhdGlvblJvb3RUeXBlKHNjaGVtYSwgb3BlcmF0aW9uKTtcbiAgICB9XG4gICAgY29uc3QgdHlwZSA9IHNjaGVtYS5nZXRSb290VHlwZShvcGVyYXRpb24ub3BlcmF0aW9uKTtcbiAgICBpZiAoIXR5cGUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBObyByb290IHR5cGUgZm9yIG9wZXJhdGlvbiAke29wZXJhdGlvbi5vcGVyYXRpb259YCk7XG4gICAgfVxuICAgIHJldHVybiB0eXBlO1xufVxuZXhwb3J0cy5nZXRPcGVyYXRpb25Sb290VHlwZSA9IGdldE9wZXJhdGlvblJvb3RUeXBlO1xuLyoqXG4gKiB2MTYgYW5kIGxvd2VyIHZlcnNpb25zIGRvbid0IGhhdmUgLnRvSlNPTiBtZXRob2Qgb24gR3JhcGhRTEVycm9yXG4gKiB2MTcgZG9lcyBoYXZlIC50b0pTT04gYW5kIGRvZXNuJ3QgaGF2ZSBcImZvcm1hdEVycm9yXCIgZXhwb3J0IGFueW1vcmVcbiAqL1xuZnVuY3Rpb24gZm9ybWF0RXJyb3IoZXJyb3IpIHtcbiAgICBpZiAoZ3JhcGhxbF8xLnZlcnNpb25JbmZvLm1ham9yIDwgMTYpIHtcbiAgICAgICAgcmV0dXJuIGVycm9yVXRpbGl0aWVzLmZvcm1hdEVycm9yKGVycm9yKTtcbiAgICB9XG4gICAgcmV0dXJuIGVycm9yLnRvSlNPTigpO1xufVxuZXhwb3J0cy5mb3JtYXRFcnJvciA9IGZvcm1hdEVycm9yO1xuLyoqXG4gKiB2MTcgZHJvcHBlZCBzdXBwb3J0IGZvciBwb3NpdGlvbmFsIGFyZ3VtZW50cyBpbiBHcmFwaFFMRXJyb3IgY29uc3RydWN0b3JcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9ncmFwaHFsL2dyYXBocWwtanMvcHVsbC8zNTc3XG4gKi9cbmZ1bmN0aW9uIGdldEdyYXBoUUxFcnJvck9wdGlvbnMobm9kZXMpIHtcbiAgICBpZiAoZ3JhcGhxbF8xLnZlcnNpb25JbmZvLm1ham9yIDwgMTYpIHtcbiAgICAgICAgcmV0dXJuIG5vZGVzO1xuICAgIH1cbiAgICByZXR1cm4geyBub2RlcyB9O1xufVxuZXhwb3J0cy5nZXRHcmFwaFFMRXJyb3JPcHRpb25zID0gZ2V0R3JhcGhRTEVycm9yT3B0aW9ucztcbi8qKlxuICogUmVzb2x2ZXMgdGhlIGZpZWxkIG9uIHRoZSBnaXZlbiBzb3VyY2Ugb2JqZWN0LiBJbiBwYXJ0aWN1bGFyLCB0aGlzXG4gKiBmaWd1cmVzIG91dCB0aGUgdmFsdWUgdGhhdCB0aGUgZmllbGQgcmV0dXJucyBieSBjYWxsaW5nIGl0cyByZXNvbHZlIGZ1bmN0aW9uLFxuICogdGhlbiBjYWxscyBjb21wbGV0ZVZhbHVlIHRvIGNvbXBsZXRlIHByb21pc2VzLCBzZXJpYWxpemUgc2NhbGFycywgb3IgZXhlY3V0ZVxuICogdGhlIHN1Yi1zZWxlY3Rpb24tc2V0IGZvciBvYmplY3RzLlxuICpcbiAqIHYxNSBoYXMgZ2V0RmllbGREZWYgdGhhdCBhY2NlcHRzIGZpZWxkIG5hbWVcbiAqIHYxNiBoYXMgZ2V0RmllbGREZWYgdGhhdCBhY2NlcHRzIGZpZWxkIG5vZGVcbiAqIHYxNyBkcm9wcyBnZXRGaWVsZERlZiBzdXBwb3J0IGFuZCBhZGRzIGdldEZpZWxkIG1ldGhvZFxuICovXG5mdW5jdGlvbiByZXNvbHZlRmllbGREZWYoY29tcGlsYXRpb25Db250ZXh0LCBwYXJlbnRUeXBlLCBmaWVsZE5vZGVzKSB7XG4gICAgY29uc3QgZmllbGROb2RlID0gZmllbGROb2Rlc1swXTtcbiAgICBpZiAoZ3JhcGhxbF8xLnZlcnNpb25JbmZvLm1ham9yIDwgMTYpIHtcbiAgICAgICAgY29uc3QgZmllbGROYW1lID0gZmllbGROb2RlLm5hbWUudmFsdWU7XG4gICAgICAgIHJldHVybiBleGVjdXRlLmdldEZpZWxkRGVmKGNvbXBpbGF0aW9uQ29udGV4dC5zY2hlbWEsIHBhcmVudFR5cGUsIGZpZWxkTmFtZSk7XG4gICAgfVxuICAgIGlmIChncmFwaHFsXzEudmVyc2lvbkluZm8ubWFqb3IgPCAxNykge1xuICAgICAgICByZXR1cm4gZXhlY3V0ZS5nZXRGaWVsZERlZihjb21waWxhdGlvbkNvbnRleHQuc2NoZW1hLCBwYXJlbnRUeXBlLCBmaWVsZE5vZGUpO1xuICAgIH1cbiAgICByZXR1cm4gY29tcGlsYXRpb25Db250ZXh0LnNjaGVtYS5nZXRGaWVsZChwYXJlbnRUeXBlLCBmaWVsZE5vZGUubmFtZS52YWx1ZSk7XG59XG5leHBvcnRzLnJlc29sdmVGaWVsZERlZiA9IHJlc29sdmVGaWVsZERlZjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbXBhdC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/graphql-jit/dist/esm/compat.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/graphql-jit/dist/esm/error.js":
/*!*****************************************************!*\
  !*** ../node_modules/graphql-jit/dist/esm/error.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Based on https://github.com/graphql/graphql-js/blob/master/src/error/GraphQLError.js\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GraphQLError = void 0;\nconst graphql_1 = __webpack_require__(/*! graphql */ \"(ssr)/../node_modules/graphql/index.mjs\");\nfunction GraphQLError(message, locations, path, originalError, skipStackCapturing) {\n    const extensions = originalError && originalError.extensions;\n    Object.defineProperties(this, {\n        message: {\n            value: message,\n            enumerable: true\n        },\n        locations: {\n            value: locations || undefined,\n            enumerable: locations && locations.length > 0\n        },\n        path: {\n            value: path || undefined,\n            enumerable: Boolean(path)\n        },\n        originalError: {\n            value: originalError\n        },\n        extensions: {\n            // Coercing falsey values to undefined ensures they will not be included\n            // in JSON.stringify() when not provided.\n            value: extensions || undefined,\n            enumerable: Boolean(extensions)\n        }\n    });\n    // Include (non-enumerable) stack trace.\n    if (originalError && originalError.stack) {\n        Object.defineProperty(this, \"stack\", {\n            value: originalError.stack,\n            writable: true,\n            configurable: true\n        });\n    }\n    else if (!skipStackCapturing) {\n        if (Error.captureStackTrace) {\n            Error.captureStackTrace(this, GraphQLError);\n        }\n        else {\n            Object.defineProperty(this, \"stack\", {\n                value: Error().stack,\n                writable: true,\n                configurable: true\n            });\n        }\n    }\n}\nexports.GraphQLError = GraphQLError;\nGraphQLError.prototype = Object.create(graphql_1.GraphQLError.prototype, {\n    constructor: { value: GraphQLError },\n    name: { value: \"GraphQLError\" }\n});\n//# sourceMappingURL=error.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL2dyYXBocWwtaml0L2Rpc3QvZXNtL2Vycm9yLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG9CQUFvQjtBQUNwQixrQkFBa0IsbUJBQU8sQ0FBQyx3REFBUztBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0EsbUJBQW1CLHFCQUFxQjtBQUN4QyxZQUFZO0FBQ1osQ0FBQztBQUNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGVkZ2l0eS15aWVsZC1mcm9udGVuZC8uLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC1qaXQvZGlzdC9lc20vZXJyb3IuanM/Yjk3MSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL2dyYXBocWwvZ3JhcGhxbC1qcy9ibG9iL21hc3Rlci9zcmMvZXJyb3IvR3JhcGhRTEVycm9yLmpzXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuR3JhcGhRTEVycm9yID0gdm9pZCAwO1xuY29uc3QgZ3JhcGhxbF8xID0gcmVxdWlyZShcImdyYXBocWxcIik7XG5mdW5jdGlvbiBHcmFwaFFMRXJyb3IobWVzc2FnZSwgbG9jYXRpb25zLCBwYXRoLCBvcmlnaW5hbEVycm9yLCBza2lwU3RhY2tDYXB0dXJpbmcpIHtcbiAgICBjb25zdCBleHRlbnNpb25zID0gb3JpZ2luYWxFcnJvciAmJiBvcmlnaW5hbEVycm9yLmV4dGVuc2lvbnM7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGhpcywge1xuICAgICAgICBtZXNzYWdlOiB7XG4gICAgICAgICAgICB2YWx1ZTogbWVzc2FnZSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAgbG9jYXRpb25zOiB7XG4gICAgICAgICAgICB2YWx1ZTogbG9jYXRpb25zIHx8IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IGxvY2F0aW9ucyAmJiBsb2NhdGlvbnMubGVuZ3RoID4gMFxuICAgICAgICB9LFxuICAgICAgICBwYXRoOiB7XG4gICAgICAgICAgICB2YWx1ZTogcGF0aCB8fCB1bmRlZmluZWQsXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiBCb29sZWFuKHBhdGgpXG4gICAgICAgIH0sXG4gICAgICAgIG9yaWdpbmFsRXJyb3I6IHtcbiAgICAgICAgICAgIHZhbHVlOiBvcmlnaW5hbEVycm9yXG4gICAgICAgIH0sXG4gICAgICAgIGV4dGVuc2lvbnM6IHtcbiAgICAgICAgICAgIC8vIENvZXJjaW5nIGZhbHNleSB2YWx1ZXMgdG8gdW5kZWZpbmVkIGVuc3VyZXMgdGhleSB3aWxsIG5vdCBiZSBpbmNsdWRlZFxuICAgICAgICAgICAgLy8gaW4gSlNPTi5zdHJpbmdpZnkoKSB3aGVuIG5vdCBwcm92aWRlZC5cbiAgICAgICAgICAgIHZhbHVlOiBleHRlbnNpb25zIHx8IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IEJvb2xlYW4oZXh0ZW5zaW9ucylcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIC8vIEluY2x1ZGUgKG5vbi1lbnVtZXJhYmxlKSBzdGFjayB0cmFjZS5cbiAgICBpZiAob3JpZ2luYWxFcnJvciAmJiBvcmlnaW5hbEVycm9yLnN0YWNrKSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInN0YWNrXCIsIHtcbiAgICAgICAgICAgIHZhbHVlOiBvcmlnaW5hbEVycm9yLnN0YWNrLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKCFza2lwU3RhY2tDYXB0dXJpbmcpIHtcbiAgICAgICAgaWYgKEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKSB7XG4gICAgICAgICAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCBHcmFwaFFMRXJyb3IpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwic3RhY2tcIiwge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBFcnJvcigpLnN0YWNrLFxuICAgICAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLkdyYXBoUUxFcnJvciA9IEdyYXBoUUxFcnJvcjtcbkdyYXBoUUxFcnJvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKGdyYXBocWxfMS5HcmFwaFFMRXJyb3IucHJvdG90eXBlLCB7XG4gICAgY29uc3RydWN0b3I6IHsgdmFsdWU6IEdyYXBoUUxFcnJvciB9LFxuICAgIG5hbWU6IHsgdmFsdWU6IFwiR3JhcGhRTEVycm9yXCIgfVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lcnJvci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/graphql-jit/dist/esm/error.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/graphql-jit/dist/esm/execution.js":
/*!*********************************************************!*\
  !*** ../node_modules/graphql-jit/dist/esm/execution.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.isAsyncIterable = exports.isPromiseInliner = exports.isPromise = exports.createBoundQuery = exports.isCompiledQuery = exports.compileQuery = exports.GLOBAL_VARIABLES_NAME = void 0;\nconst fast_json_stringify_1 = __importDefault(__webpack_require__(/*! fast-json-stringify */ \"(ssr)/../node_modules/fast-json-stringify/index.js\"));\nconst generate_function_1 = __importDefault(__webpack_require__(/*! generate-function */ \"(ssr)/../node_modules/generate-function/index.js\"));\nconst graphql_1 = __webpack_require__(/*! graphql */ \"(ssr)/../node_modules/graphql/index.mjs\");\nconst Path_1 = __webpack_require__(/*! graphql/jsutils/Path */ \"(ssr)/../node_modules/graphql/jsutils/Path.js\");\nconst ast_1 = __webpack_require__(/*! ./ast */ \"(ssr)/../node_modules/graphql-jit/dist/esm/ast.js\");\nconst error_1 = __webpack_require__(/*! ./error */ \"(ssr)/../node_modules/graphql-jit/dist/esm/error.js\");\nconst inspect_1 = __importDefault(__webpack_require__(/*! ./inspect */ \"(ssr)/../node_modules/graphql-jit/dist/esm/inspect.js\"));\nconst json_1 = __webpack_require__(/*! ./json */ \"(ssr)/../node_modules/graphql-jit/dist/esm/json.js\");\nconst non_null_1 = __webpack_require__(/*! ./non-null */ \"(ssr)/../node_modules/graphql-jit/dist/esm/non-null.js\");\nconst resolve_info_1 = __webpack_require__(/*! ./resolve-info */ \"(ssr)/../node_modules/graphql-jit/dist/esm/resolve-info.js\");\nconst variables_1 = __webpack_require__(/*! ./variables */ \"(ssr)/../node_modules/graphql-jit/dist/esm/variables.js\");\nconst compat_1 = __webpack_require__(/*! ./compat */ \"(ssr)/../node_modules/graphql-jit/dist/esm/compat.js\");\nconst inspect = (0, inspect_1.default)();\n// prefix for the variable used ot cache validation results\nconst SAFETY_CHECK_PREFIX = \"__validNode\";\nconst GLOBAL_DATA_NAME = \"__context.data\";\nconst GLOBAL_ERRORS_NAME = \"__context.errors\";\nconst GLOBAL_NULL_ERRORS_NAME = \"__context.nullErrors\";\nconst GLOBAL_ROOT_NAME = \"__context.rootValue\";\nexports.GLOBAL_VARIABLES_NAME = \"__context.variables\";\nconst GLOBAL_CONTEXT_NAME = \"__context.context\";\nconst GLOBAL_EXECUTION_CONTEXT = \"__context\";\nconst GLOBAL_PROMISE_COUNTER = \"__context.promiseCounter\";\nconst GLOBAL_INSPECT_NAME = \"__context.inspect\";\nconst GLOBAL_SAFE_MAP_NAME = \"__context.safeMap\";\nconst GRAPHQL_ERROR = \"__context.GraphQLError\";\nconst GLOBAL_RESOLVE = \"__context.resolve\";\nconst GLOBAL_PARENT_NAME = \"__parent\";\nconst LOCAL_JS_FIELD_NAME_PREFIX = \"__field\";\n/**\n * It compiles a GraphQL query to an executable function\n * @param {GraphQLSchema} schema GraphQL schema\n * @param {DocumentNode} document Query being submitted\n * @param {string} operationName name of the operation\n * @param partialOptions compilation options to tune the compiler features\n * @returns {CompiledQuery} the cacheable result\n */\nfunction compileQuery(schema, document, operationName, partialOptions) {\n    if (!schema) {\n        throw new Error(`Expected ${schema} to be a GraphQL schema.`);\n    }\n    if (!document) {\n        throw new Error(\"Must provide document.\");\n    }\n    if (partialOptions &&\n        partialOptions.resolverInfoEnricher &&\n        typeof partialOptions.resolverInfoEnricher !== \"function\") {\n        throw new Error(\"resolverInfoEnricher must be a function\");\n    }\n    try {\n        const options = {\n            disablingCapturingStackErrors: false,\n            customJSONSerializer: false,\n            disableLeafSerialization: false,\n            customSerializers: {},\n            useExperimentalPathBasedSkipInclude: false,\n            ...partialOptions\n        };\n        // If a valid context cannot be created due to incorrect arguments,\n        // a \"Response\" with only errors is returned.\n        const context = buildCompilationContext(schema, document, options, operationName);\n        let stringify;\n        if (options.customJSONSerializer) {\n            const jsonSchema = (0, json_1.queryToJSONSchema)(context);\n            stringify = (0, fast_json_stringify_1.default)(jsonSchema);\n        }\n        else {\n            stringify = JSON.stringify;\n        }\n        const getVariables = (0, variables_1.compileVariableParsing)(schema, context.operation.variableDefinitions || []);\n        const type = (0, compat_1.getOperationRootType)(context.schema, context.operation);\n        const fieldMap = (0, ast_1.collectFields)(context, type, context.operation.selectionSet, Object.create(null), Object.create(null));\n        const functionBody = compileOperation(context, type, fieldMap);\n        const compiledQuery = {\n            query: createBoundQuery(context, document, \n            // eslint-disable-next-line no-new-func\n            new Function(\"return \" + functionBody)(), getVariables, context.operation.name != null\n                ? context.operation.name.value\n                : undefined),\n            stringify\n        };\n        if (context.operation.operation === \"subscription\") {\n            compiledQuery.subscribe = createBoundSubscribe(context, document, compileSubscriptionOperation(context, type, fieldMap, compiledQuery.query), getVariables, context.operation.name != null\n                ? context.operation.name.value\n                : undefined);\n        }\n        if (options.debug) {\n            // result of the compilation useful for debugging issues\n            // and visualization tools like try-jit.\n            compiledQuery.__DO_NOT_USE_THIS_OR_YOU_WILL_BE_FIRED_compilation =\n                functionBody;\n        }\n        return compiledQuery;\n    }\n    catch (err) {\n        return {\n            errors: normalizeErrors(err)\n        };\n    }\n}\nexports.compileQuery = compileQuery;\nfunction isCompiledQuery(query) {\n    return \"query\" in query && typeof query.query === \"function\";\n}\nexports.isCompiledQuery = isCompiledQuery;\n// Exported only for an error test\nfunction createBoundQuery(compilationContext, document, func, getVariableValues, operationName) {\n    const { resolvers, typeResolvers, isTypeOfs, serializers, resolveInfos } = compilationContext;\n    const trimmer = (0, non_null_1.createNullTrimmer)(compilationContext);\n    const fnName = operationName || \"query\";\n    /* eslint-disable */\n    /**\n     * In-order to assign a debuggable name to the bound query function,\n     * we create an intermediate object with a method named as the\n     * intended function name. This is because Function.prototype.name\n     * is not writeable.\n     *\n     * http://www.ecma-international.org/ecma-262/6.0/#sec-method-definitions-runtime-semantics-propertydefinitionevaluation\n     *\n     * section: 14.3.9.3 - calls SetFunctionName\n     */\n    /* eslint-enable */\n    const ret = {\n        [fnName](rootValue, context, variables) {\n            // this can be shared across in a batch request\n            const parsedVariables = getVariableValues(variables || {});\n            // Return early errors if variable coercing failed.\n            if ((0, variables_1.failToParseVariables)(parsedVariables)) {\n                return { errors: parsedVariables.errors };\n            }\n            const executionContext = {\n                rootValue,\n                context,\n                variables: parsedVariables.coerced,\n                safeMap,\n                inspect,\n                GraphQLError: error_1.GraphQLError,\n                resolvers,\n                typeResolvers,\n                isTypeOfs,\n                serializers,\n                resolveInfos,\n                trimmer,\n                promiseCounter: 0,\n                data: {},\n                nullErrors: [],\n                errors: []\n            };\n            // eslint-disable-next-line no-useless-call\n            const result = func.call(null, executionContext);\n            if (isPromise(result)) {\n                return result.then(postProcessResult);\n            }\n            return postProcessResult(executionContext);\n        }\n    };\n    return ret[fnName];\n}\nexports.createBoundQuery = createBoundQuery;\nfunction postProcessResult({ data, nullErrors, errors, trimmer }) {\n    if (nullErrors.length > 0) {\n        const trimmed = trimmer(data, nullErrors);\n        return {\n            data: trimmed.data,\n            errors: errors.concat(trimmed.errors)\n        };\n    }\n    else if (errors.length > 0) {\n        return {\n            data,\n            errors\n        };\n    }\n    return { data };\n}\n/**\n * Create the main function body.\n *\n * Implements the \"Evaluating operations\" section of the spec.\n *\n * It defers all top level field for consistency and protection for null root values,\n * all the fields are deferred regardless of presence of resolver or not.\n *\n * @param {CompilationContext} context compilation context with the execution context\n * @returns {string} a function body to be instantiated together with the header, footer\n */\nfunction compileOperation(context, type, fieldMap) {\n    const serialExecution = context.operation.operation === \"mutation\";\n    const topLevel = compileObjectType(context, type, [], [GLOBAL_ROOT_NAME], [GLOBAL_DATA_NAME], undefined, GLOBAL_ERRORS_NAME, fieldMap, true);\n    let body = `function query (${GLOBAL_EXECUTION_CONTEXT}) {\n  \"use strict\";\n`;\n    if (serialExecution) {\n        body += `${GLOBAL_EXECUTION_CONTEXT}.queue = [];`;\n    }\n    body += generateUniqueDeclarations(context, true);\n    body += `${GLOBAL_DATA_NAME} = ${topLevel}\\n`;\n    if (serialExecution) {\n        body += compileDeferredFieldsSerially(context);\n        body += `\n    ${GLOBAL_EXECUTION_CONTEXT}.finalResolve = () => {};\n    ${GLOBAL_RESOLVE} = (context) => {\n      if (context.jobCounter >= context.queue.length) {\n        // All mutations have finished\n        context.finalResolve(context);\n        return;\n      }\n      context.queue[context.jobCounter++](context);\n    };\n    // There might not be a job to run due to invalid queries\n    if (${GLOBAL_EXECUTION_CONTEXT}.queue.length > 0) {\n      ${GLOBAL_EXECUTION_CONTEXT}.jobCounter = 1; // since the first one will be run manually\n      ${GLOBAL_EXECUTION_CONTEXT}.queue[0](${GLOBAL_EXECUTION_CONTEXT});\n    }\n    // Promises have been scheduled so a new promise is returned\n    // that will be resolved once every promise is done\n    if (${GLOBAL_PROMISE_COUNTER} > 0) {\n      return new Promise(resolve => ${GLOBAL_EXECUTION_CONTEXT}.finalResolve = resolve);\n    }\n  `;\n    }\n    else {\n        body += compileDeferredFields(context);\n        body += `\n    // Promises have been scheduled so a new promise is returned\n    // that will be resolved once every promise is done\n    if (${GLOBAL_PROMISE_COUNTER} > 0) {\n      return new Promise(resolve => ${GLOBAL_RESOLVE} = resolve);\n    }`;\n    }\n    body += `\n  // sync execution, the results are ready\n  return undefined;\n  }`;\n    body += context.hoistedFunctions.join(\"\\n\");\n    return body;\n}\n/**\n * Processes the deferred node list in the compilation context.\n *\n * Each deferred node get a copy of the compilation context with\n * a new empty list for deferred nodes to properly scope the nodes.\n * @param {CompilationContext} context compilation context\n * @returns {string} compiled transformations all of deferred nodes\n */\nfunction compileDeferredFields(context) {\n    let body = \"\";\n    context.deferred.forEach((deferredField, index) => {\n        body += `\n      if (${SAFETY_CHECK_PREFIX}${index}) {\n        ${compileDeferredField(context, deferredField)}\n      }`;\n    });\n    return body;\n}\nfunction compileDeferredField(context, deferredField, appendix) {\n    const { name, originPaths, destinationPaths, fieldNodes, fieldType, fieldName, jsFieldName, responsePath, parentType, args } = deferredField;\n    const subContext = createSubCompilationContext(context);\n    const nodeBody = compileType(subContext, parentType, fieldType, fieldNodes, [jsFieldName], [`${GLOBAL_PARENT_NAME}.${name}`], responsePath);\n    const parentIndexes = getParentArgIndexes(context);\n    const resolverName = getResolverName(parentType.name, fieldName);\n    const resolverHandler = getHoistedFunctionName(context, `${name}${resolverName}Handler`);\n    const topLevelArgs = getArgumentsName(resolverName);\n    const validArgs = getValidArgumentsVarName(resolverName);\n    const executionError = createErrorObject(context, fieldNodes, responsePath, \"err.message != null ? err.message : err\", \"err\");\n    const executionInfo = getExecutionInfo(subContext, parentType, fieldType, fieldName, fieldNodes, responsePath);\n    const emptyError = createErrorObject(context, fieldNodes, responsePath, '\"\"');\n    const resolverParentPath = originPaths.join(\".\");\n    const resolverCall = `${GLOBAL_EXECUTION_CONTEXT}.resolvers.${resolverName}(\n          ${resolverParentPath},${topLevelArgs},${GLOBAL_CONTEXT_NAME}, ${executionInfo})`;\n    const resultParentPath = destinationPaths.join(\".\");\n    const compiledArgs = compileArguments(subContext, args, topLevelArgs, validArgs, fieldType, responsePath);\n    const body = `\n    ${compiledArgs}\n    if (${validArgs} === true) {\n      var __value = null;\n      try {\n        __value = ${resolverCall};\n      } catch (err) {\n        ${getErrorDestination(fieldType)}.push(${executionError});\n      }\n      if (${isPromiseInliner(\"__value\")}) {\n      ${promiseStarted()}\n       __value.then(result => {\n        ${resolverHandler}(${GLOBAL_EXECUTION_CONTEXT}, ${resultParentPath}, result, ${parentIndexes});\n        ${promiseDone()}\n       }, err => {\n        if (err) {\n          ${getErrorDestination(fieldType)}.push(${executionError});\n        } else {\n          ${getErrorDestination(fieldType)}.push(${emptyError});\n        }\n        ${promiseDone()}\n       });\n      } else {\n        ${resolverHandler}(${GLOBAL_EXECUTION_CONTEXT}, ${resultParentPath}, __value, ${parentIndexes});\n      }\n    }`;\n    context.hoistedFunctions.push(`\n    function ${resolverHandler}(${GLOBAL_EXECUTION_CONTEXT}, ${GLOBAL_PARENT_NAME}, ${jsFieldName}, ${parentIndexes}) {\n      ${generateUniqueDeclarations(subContext)}\n      ${GLOBAL_PARENT_NAME}.${name} = ${nodeBody};\n      ${compileDeferredFields(subContext)}\n      ${appendix || \"\"}\n    }\n  `);\n    return body;\n}\nfunction compileDeferredFieldsSerially(context) {\n    let body = \"\";\n    context.deferred.forEach((deferredField, index) => {\n        const { name, fieldName, parentType } = deferredField;\n        const resolverName = getResolverName(parentType.name, fieldName);\n        const mutationHandler = getHoistedFunctionName(context, `${name}${resolverName}Mutation`);\n        body += `\n      if (${SAFETY_CHECK_PREFIX}${index}) {\n        ${GLOBAL_EXECUTION_CONTEXT}.queue.push(${mutationHandler});\n      }\n    `;\n        const appendix = `\n    if (${GLOBAL_PROMISE_COUNTER} === 0) {\n      ${GLOBAL_RESOLVE}(${GLOBAL_EXECUTION_CONTEXT});\n    }\n    `;\n        context.hoistedFunctions.push(`\n      function ${mutationHandler}(${GLOBAL_EXECUTION_CONTEXT}) {\n        ${compileDeferredField(context, deferredField, appendix)}\n      }\n      `);\n    });\n    return body;\n}\n/**\n * Processes a generic node.\n *\n * The type is analysed and later reprocessed in dedicated functions.\n * @param {CompilationContext} context compilation context to hold deferred nodes\n * @param parentType\n * @param {GraphQLType} type type of current parent node\n * @param {FieldNode[]} fieldNodes array of the field nodes\n * @param originPaths originPaths path in the parent object from where to fetch results\n * @param destinationPaths path in the where to write the result\n * @param previousPath response path until this node\n * @returns {string} body of the resolvable fieldNodes\n */\nfunction compileType(context, parentType, type, fieldNodes, originPaths, destinationPaths, previousPath) {\n    const sourcePath = originPaths.join(\".\");\n    let body = `${sourcePath} == null ? `;\n    let errorDestination;\n    if ((0, graphql_1.isNonNullType)(type)) {\n        type = type.ofType;\n        const nullErrorStr = `\"Cannot return null for non-nullable field ${parentType.name}.${getFieldNodesName(fieldNodes)}.\"`;\n        body += `(${GLOBAL_NULL_ERRORS_NAME}.push(${createErrorObject(context, fieldNodes, previousPath, nullErrorStr)}), null) :`;\n        errorDestination = GLOBAL_NULL_ERRORS_NAME;\n    }\n    else {\n        body += \"null : \";\n        errorDestination = GLOBAL_ERRORS_NAME;\n    }\n    body += \"(\";\n    // value can be an error obj\n    const errorPath = `${sourcePath}.message != null ? ${sourcePath}.message : ${sourcePath}`;\n    body += `${sourcePath} instanceof Error ? (${errorDestination}.push(${createErrorObject(context, fieldNodes, previousPath, errorPath, sourcePath)}), null) : `;\n    if ((0, graphql_1.isLeafType)(type)) {\n        body += compileLeafType(context, type, originPaths, fieldNodes, previousPath, errorDestination);\n    }\n    else if ((0, graphql_1.isObjectType)(type)) {\n        const fieldMap = (0, ast_1.collectSubfields)(context, type, fieldNodes, previousPath);\n        body += compileObjectType(context, type, fieldNodes, originPaths, destinationPaths, previousPath, errorDestination, fieldMap, false);\n    }\n    else if ((0, graphql_1.isAbstractType)(type)) {\n        body += compileAbstractType(context, parentType, type, fieldNodes, originPaths, previousPath, errorDestination);\n    }\n    else if ((0, graphql_1.isListType)(type)) {\n        body += compileListType(context, parentType, type, fieldNodes, originPaths, previousPath, errorDestination);\n    }\n    else {\n        /* istanbul ignore next */\n        throw new Error(`unsupported type: ${type.toString()}`);\n    }\n    body += \")\";\n    return body;\n}\nfunction compileLeafType(context, type, originPaths, fieldNodes, previousPath, errorDestination) {\n    let body = \"\";\n    if (context.options.disableLeafSerialization &&\n        (type instanceof graphql_1.GraphQLEnumType || (0, graphql_1.isSpecifiedScalarType)(type))) {\n        body += `${originPaths.join(\".\")}`;\n    }\n    else {\n        const serializerName = getSerializerName(type.name);\n        context.serializers[serializerName] = getSerializer(type, context.options.customSerializers[type.name]);\n        const parentIndexes = getParentArgIndexes(context);\n        const serializerErrorHandler = getHoistedFunctionName(context, `${type.name}${originPaths.join(\"\")}SerializerErrorHandler`);\n        context.hoistedFunctions.push(`\n    function ${serializerErrorHandler}(${GLOBAL_EXECUTION_CONTEXT}, message, ${parentIndexes}) {\n    ${errorDestination}.push(${createErrorObject(context, fieldNodes, previousPath, \"message\")});}\n    `);\n        body += `${GLOBAL_EXECUTION_CONTEXT}.serializers.${serializerName}(${GLOBAL_EXECUTION_CONTEXT}, ${originPaths.join(\".\")}, ${serializerErrorHandler}, ${parentIndexes})`;\n    }\n    return body;\n}\n/**\n * Compile a node of object type.\n * @param {CompilationContext} context\n * @param {GraphQLObjectType} type type of the node\n * @param fieldNodes fieldNodes array with the nodes references\n * @param originPaths originPaths path in the parent object from where to fetch results\n * @param destinationPaths path in the where to write the result\n * @param responsePath response path until this node\n * @param errorDestination Path for error array\n * @param fieldMap map of fields to fieldNodes array with the nodes references\n * @param alwaysDefer used to force the field to be resolved with a resolver ala graphql-js\n * @returns {string}\n */\nfunction compileObjectType(context, type, fieldNodes, originPaths, destinationPaths, responsePath, errorDestination, fieldMap, alwaysDefer) {\n    const body = (0, generate_function_1.default)();\n    // Begin object compilation paren\n    body(\"(\");\n    if (typeof type.isTypeOf === \"function\" && !alwaysDefer) {\n        context.isTypeOfs[type.name + \"IsTypeOf\"] = type.isTypeOf;\n        body(`!${GLOBAL_EXECUTION_CONTEXT}.isTypeOfs[\"${type.name}IsTypeOf\"](${originPaths.join(\".\")}) ? (${errorDestination}.push(${createErrorObject(context, fieldNodes, responsePath, `\\`Expected value of type \"${type.name}\" but got: $\\{${GLOBAL_INSPECT_NAME}(${originPaths.join(\".\")})}.\\``)}), null) :`);\n    }\n    // object start\n    body(\"{\");\n    for (const name of Object.keys(fieldMap)) {\n        const fieldNodes = fieldMap[name];\n        const field = (0, ast_1.resolveFieldDef)(context, type, fieldNodes);\n        if (!field) {\n            // Field is invalid, should have been caught in validation\n            // but the error is swallowed for compatibility reasons.\n            continue;\n        }\n        // Key of the object\n        // `name` is the field name or an alias supplied by the user\n        body(`\"${name}\": `);\n        /**\n         * Value of the object\n         *\n         * The combined condition for whether a field should be included\n         * in the object.\n         *\n         * Here, the logical operation is `||` because every fieldNode\n         * is at the same level in the tree, if at least \"one of\" the nodes\n         * is included, then the field is included.\n         *\n         * For example,\n         *\n         * ```graphql\n         * {\n         *   foo @skip(if: $c1)\n         *   ... { foo @skip(if: $c2) }\n         * }\n         * ```\n         *\n         * The logic for `foo` becomes -\n         *\n         * `compilationFor($c1) || compilationFor($c2)`\n         */\n        const serializedResponsePath = (0, ast_1.joinSkipIncludePath)((0, ast_1.serializeObjectPathForSkipInclude)(responsePath), name);\n        const fieldCondition = context.options.useExperimentalPathBasedSkipInclude\n            ? fieldNodes\n                .map((it) => it.__internalShouldIncludePath?.[serializedResponsePath])\n                .filter((it) => it)\n                .join(\" || \") || /* if(true) - default */ \"true\"\n            : fieldNodes\n                .map((it) => it.__internalShouldInclude)\n                .filter((it) => it)\n                .join(\" || \") || /* if(true) - default */ \"true\";\n        body(`\n      (\n        ${fieldCondition}\n      )\n    `);\n        // Inline __typename\n        // No need to call a resolver for typename\n        if (field === graphql_1.TypeNameMetaFieldDef) {\n            // type.name if field is included else undefined - to remove from object\n            // during serialization\n            body(`? \"${type.name}\" : undefined,`);\n            continue;\n        }\n        let resolver = field.resolve;\n        if (!resolver && alwaysDefer) {\n            const fieldName = field.name;\n            resolver = (parent) => parent && parent[fieldName];\n        }\n        if (resolver) {\n            context.deferred.push({\n                name,\n                responsePath: (0, ast_1.addPath)(responsePath, name),\n                originPaths,\n                destinationPaths,\n                parentType: type,\n                fieldName: field.name,\n                jsFieldName: getJsFieldName(field.name),\n                fieldType: field.type,\n                fieldNodes,\n                args: (0, ast_1.getArgumentDefs)(field, fieldNodes[0])\n            });\n            context.resolvers[getResolverName(type.name, field.name)] = resolver;\n            body(`\n          ? (\n              ${SAFETY_CHECK_PREFIX}${context.deferred.length - 1} = true,\n              null\n            )\n          : (\n              ${SAFETY_CHECK_PREFIX}${context.deferred.length - 1} = false,\n              undefined\n            )\n        `);\n        }\n        else {\n            // if included\n            body(\"?\");\n            body(compileType(context, type, field.type, fieldNodes, originPaths.concat(field.name), destinationPaths.concat(name), (0, ast_1.addPath)(responsePath, name)));\n            // if not included\n            body(\": undefined\");\n        }\n        // End object property\n        body(\",\");\n    }\n    // End object\n    body(\"}\");\n    // End object compilation paren\n    body(\")\");\n    return body.toString();\n}\nfunction compileAbstractType(context, parentType, type, fieldNodes, originPaths, previousPath, errorDestination) {\n    let resolveType;\n    if (type.resolveType) {\n        resolveType = type.resolveType;\n    }\n    else {\n        resolveType = (value, context, info) => defaultResolveTypeFn(value, context, info, type);\n    }\n    const typeResolverName = getTypeResolverName(type.name);\n    context.typeResolvers[typeResolverName] = resolveType;\n    const collectedTypes = context.schema\n        .getPossibleTypes(type)\n        .map((objectType) => {\n        const subContext = createSubCompilationContext(context);\n        const object = compileType(subContext, parentType, objectType, fieldNodes, originPaths, [\"__concrete\"], (0, ast_1.addPath)(previousPath, objectType.name, \"meta\"));\n        return `case \"${objectType.name}\": {\n                  ${generateUniqueDeclarations(subContext)}\n                  const __concrete = ${object};\n                  ${compileDeferredFields(subContext)}\n                  return __concrete;\n              }`;\n    })\n        .join(\"\\n\");\n    const finalTypeName = \"finalType\";\n    const nullTypeError = `\"Runtime Object type is not a possible type for \\\\\"${type.name}\\\\\".\"`;\n    /* eslint-disable max-len */\n    const notPossibleTypeError = \n    // eslint-disable-next-line no-template-curly-in-string\n    '`Runtime Object type \"${nodeType}\" is not a possible type for \"' +\n        type.name +\n        '\".`';\n    const noTypeError = `${finalTypeName} ? ${notPossibleTypeError} : \"Abstract type ${type.name} must resolve to an Object type at runtime for field ${parentType.name}.${getFieldNodesName(fieldNodes)}. Either the ${type.name} type should provide a \\\\\"resolveType\\\\\" function or each possible types should provide an \\\\\"isTypeOf\\\\\" function.\"`;\n    /* eslint-enable max-len */\n    return `((nodeType, err) =>\n  {\n    if (err != null) {\n      ${errorDestination}.push(${createErrorObject(context, fieldNodes, previousPath, \"err.message != null ? err.message : err\", \"err\")});\n      return null;\n    }\n    if (nodeType == null) {\n      ${errorDestination}.push(${createErrorObject(context, fieldNodes, previousPath, nullTypeError)})\n      return null;\n    }\n    const ${finalTypeName} = typeof nodeType === \"string\" ? nodeType : nodeType.name;\n    switch(${finalTypeName}) {\n      ${collectedTypes}\n      default:\n      ${errorDestination}.push(${createErrorObject(context, fieldNodes, previousPath, noTypeError)})\n      return null;\n    }\n  })(\n    ${GLOBAL_EXECUTION_CONTEXT}.typeResolvers.${typeResolverName}(${originPaths.join(\".\")},\n    ${GLOBAL_CONTEXT_NAME},\n    ${getExecutionInfo(context, parentType, type, type.name, fieldNodes, previousPath)}))`;\n}\n/**\n * Compile a list transformation.\n *\n * @param {CompilationContext} context\n * @param {GraphQLObjectType} parentType type of the parent of object which contained this type\n * @param {GraphQLList<GraphQLType>} type list type being compiled\n * @param {FieldNode[]} fieldNodes\n * @param originalObjectPaths\n * @param {ObjectPath} responsePath\n * @param errorDestination\n * @returns {string} compiled list transformation\n */\nfunction compileListType(context, parentType, type, fieldNodes, originalObjectPaths, responsePath, errorDestination) {\n    const name = originalObjectPaths.join(\".\");\n    const listContext = createSubCompilationContext(context);\n    // context depth will be mutated, so we cache the current value.\n    const newDepth = ++listContext.depth;\n    const fieldType = type.ofType;\n    const dataBody = compileType(listContext, parentType, fieldType, fieldNodes, [\"__currentItem\"], [`${GLOBAL_PARENT_NAME}[idx${newDepth}]`], (0, ast_1.addPath)(responsePath, \"idx\" + newDepth, \"variable\"));\n    const errorMessage = `\"Expected Iterable, but did not find one for field ${parentType.name}.${getFieldNodesName(fieldNodes)}.\"`;\n    const errorCase = `(${errorDestination}.push(${createErrorObject(context, fieldNodes, responsePath, errorMessage)}), null)`;\n    const executionError = createErrorObject(context, fieldNodes, (0, ast_1.addPath)(responsePath, \"idx\" + newDepth, \"variable\"), \"err.message != null ? err.message : err\", \"err\");\n    const emptyError = createErrorObject(context, fieldNodes, responsePath, '\"\"');\n    const uniqueDeclarations = generateUniqueDeclarations(listContext);\n    const deferredFields = compileDeferredFields(listContext);\n    const itemHandler = getHoistedFunctionName(context, `${parentType.name}${originalObjectPaths.join(\"\")}MapItemHandler`);\n    const childIndexes = getParentArgIndexes(listContext);\n    listContext.hoistedFunctions.push(`\n  function ${itemHandler}(${GLOBAL_EXECUTION_CONTEXT}, ${GLOBAL_PARENT_NAME}, __currentItem, ${childIndexes}) {\n    ${uniqueDeclarations}\n    ${GLOBAL_PARENT_NAME}[idx${newDepth}] = ${dataBody};\n    ${deferredFields}\n  }\n  `);\n    const safeMapHandler = getHoistedFunctionName(context, `${parentType.name}${originalObjectPaths.join(\"\")}MapHandler`);\n    const parentIndexes = getParentArgIndexes(context);\n    listContext.hoistedFunctions.push(`\n  function ${safeMapHandler}(${GLOBAL_EXECUTION_CONTEXT}, __currentItem, idx${newDepth}, resultArray, ${parentIndexes}) {\n    if (${isPromiseInliner(\"__currentItem\")}) {\n      ${promiseStarted()}\n      __currentItem.then(result => {\n        ${itemHandler}(${GLOBAL_EXECUTION_CONTEXT}, resultArray, result, ${childIndexes});\n        ${promiseDone()}\n      }, err => {\n        resultArray.push(null);\n        if (err) {\n          ${getErrorDestination(fieldType)}.push(${executionError});\n        } else {\n          ${getErrorDestination(fieldType)}.push(${emptyError});\n        }\n        ${promiseDone()}\n      });\n    } else {\n       ${itemHandler}(${GLOBAL_EXECUTION_CONTEXT}, resultArray, __currentItem, ${childIndexes});\n    }\n  }\n  `);\n    return `(typeof ${name} === \"string\" || typeof ${name}[Symbol.iterator] !== \"function\") ?  ${errorCase} :\n  ${GLOBAL_SAFE_MAP_NAME}(${GLOBAL_EXECUTION_CONTEXT}, ${name}, ${safeMapHandler}, ${parentIndexes})`;\n}\n/**\n * Implements a generic map operation for any iterable.\n *\n * If the iterable is not valid, null is returned.\n * @param context\n * @param {Iterable<any> | string} iterable possible iterable\n * @param {(a: any) => any} cb callback that receives the item being iterated\n * @param idx\n * @returns {any[]} a new array with the result of the callback\n */\nfunction safeMap(context, iterable, cb, ...idx) {\n    let index = 0;\n    const result = [];\n    for (const a of iterable) {\n        cb(context, a, index, result, ...idx);\n        ++index;\n    }\n    return result;\n}\nconst MAGIC_MINUS_INFINITY = \"__MAGIC_MINUS_INFINITY__71d4310a_d4a3_4a05_b1fe_e60779d24998\";\nconst MAGIC_PLUS_INFINITY = \"__MAGIC_PLUS_INFINITY__bb201c39_3333_4695_b4ad_7f1722e7aa7a\";\nconst MAGIC_NAN = \"__MAGIC_NAN__57f286b9_4c20_487f_b409_79804ddcb4f8\";\nconst MAGIC_DATE = \"__MAGIC_DATE__33a9e76d_02e0_4128_8e92_3530ad3da74d\";\nfunction specialValueReplacer(key, value) {\n    if (Number.isNaN(value)) {\n        return MAGIC_NAN;\n    }\n    if (value === Infinity) {\n        return MAGIC_PLUS_INFINITY;\n    }\n    if (value === -Infinity) {\n        return MAGIC_MINUS_INFINITY;\n    }\n    if (this[key] instanceof Date) {\n        return MAGIC_DATE + this[key].getTime();\n    }\n    return value;\n}\nfunction objectStringify(val) {\n    return JSON.stringify(val, specialValueReplacer)\n        .replace(new RegExp(`\"${MAGIC_NAN}\"`, \"g\"), \"NaN\")\n        .replace(new RegExp(`\"${MAGIC_PLUS_INFINITY}\"`, \"g\"), \"Infinity\")\n        .replace(new RegExp(`\"${MAGIC_MINUS_INFINITY}\"`, \"g\"), \"-Infinity\")\n        .replace(new RegExp(`\"${MAGIC_DATE}([^\"]+)\"`, \"g\"), \"new Date($1)\");\n}\n/**\n * Calculates a GraphQLResolveInfo object for the resolver calls.\n *\n * if the resolver does not use, it returns null.\n * @param {CompilationContext} context compilation context to submit the resolveInfoResolver\n * @param parentType\n * @param fieldType\n * @param fieldName\n * @param fieldNodes\n * @param responsePath\n * @returns {string} a call to the resolve info creator or \"{}\" if unused\n */\nfunction getExecutionInfo(context, parentType, fieldType, fieldName, fieldNodes, responsePath) {\n    const resolveInfoName = createResolveInfoName(responsePath);\n    const { schema, fragments, operation } = context;\n    context.resolveInfos[resolveInfoName] = (0, resolve_info_1.createResolveInfoThunk)({\n        schema,\n        fragments,\n        operation,\n        parentType,\n        fieldName,\n        fieldType,\n        fieldNodes\n    }, context.options.resolverInfoEnricher);\n    return `${GLOBAL_EXECUTION_CONTEXT}.resolveInfos.${resolveInfoName}(${GLOBAL_ROOT_NAME}, ${exports.GLOBAL_VARIABLES_NAME}, ${serializeResponsePath(responsePath)})`;\n}\nfunction getArgumentsName(prefixName) {\n    return `${prefixName}Args`;\n}\nfunction getValidArgumentsVarName(prefixName) {\n    return `${prefixName}ValidArgs`;\n}\nfunction objectPath(topLevel, path) {\n    if (!path) {\n        return topLevel;\n    }\n    let objectPath = topLevel;\n    const flattened = (0, ast_1.flattenPath)(path);\n    for (const section of flattened) {\n        if (section.type === \"literal\") {\n            objectPath += `[\"${section.key}\"]`;\n        }\n        else {\n            /* istanbul ignore next */\n            throw new Error(\"should only have received literal paths\");\n        }\n    }\n    return objectPath;\n}\n/**\n * Returns a static object with the all the arguments needed for the resolver\n * @param context\n * @param {Arguments} args\n * @param topLevelArg name of the toplevel\n * @param validArgs\n * @param returnType\n * @param path\n * @returns {string}\n */\nfunction compileArguments(context, args, topLevelArg, validArgs, returnType, path) {\n    // default to assuming arguments are valid\n    let body = `\n  let ${validArgs} = true;\n  const ${topLevelArg} = ${objectStringify(args.values)};\n  `;\n    const errorDestination = getErrorDestination(returnType);\n    for (const variable of args.missing) {\n        const varName = variable.valueNode.name.value;\n        body += `if (Object.prototype.hasOwnProperty.call(${exports.GLOBAL_VARIABLES_NAME}, \"${varName}\")) {`;\n        if (variable.argument && (0, graphql_1.isNonNullType)(variable.argument.definition.type)) {\n            const message = `'Argument \"${variable.argument.definition.name}\" of non-null type \"${variable.argument.definition.type.toString()}\" must not be null.'`;\n            body += `if (${exports.GLOBAL_VARIABLES_NAME}['${variable.valueNode.name.value}'] == null) {\n      ${errorDestination}.push(${createErrorObject(context, [variable.argument.node.value], path, message)});\n      ${validArgs} = false;\n      }`;\n        }\n        body += `\n    ${objectPath(topLevelArg, variable.path)} = ${exports.GLOBAL_VARIABLES_NAME}['${variable.valueNode.name.value}'];\n    }`;\n        // If there is no default value and no variable input\n        // throw a field error\n        if (variable.argument &&\n            (0, graphql_1.isNonNullType)(variable.argument.definition.type) &&\n            variable.argument.definition.defaultValue === undefined) {\n            const message = `'Argument \"${variable.argument.definition.name}\" of required type \"${variable.argument.definition.type.toString()}\" was provided the variable \"$${varName}\" which was not provided a runtime value.'`;\n            body += ` else {\n      ${errorDestination}.push(${createErrorObject(context, [variable.argument.node.value], path, message)});\n      ${validArgs} = false;\n        }`;\n        }\n    }\n    return body;\n}\n/**\n *  Safety checks for resolver execution is done via side effects every time a resolver function\n *  is encountered.\n *\n *  This function generates the declarations, so the side effect is valid code.\n *\n * @param {CompilationContext} context compilation context\n * @param {boolean} defaultValue usually false, meant to be true at the top level\n * @returns {string} a list of declarations eg: var __validNode0 = false;\\nvar __validNode1 = false;\n */\nfunction generateUniqueDeclarations(context, defaultValue = false) {\n    return context.deferred\n        .map((_, idx) => `\n        let ${SAFETY_CHECK_PREFIX}${idx} = ${defaultValue};\n      `)\n        .join(\"\\n\");\n}\nfunction createSubCompilationContext(context) {\n    return { ...context, deferred: [] };\n}\nfunction isPromise(value) {\n    return (value != null &&\n        typeof value === \"object\" &&\n        typeof value.then === \"function\");\n}\nexports.isPromise = isPromise;\nfunction isPromiseInliner(value) {\n    return `${value} != null && typeof ${value} === \"object\" && typeof ${value}.then === \"function\"`;\n}\nexports.isPromiseInliner = isPromiseInliner;\n/**\n * Serializes the response path for an error response.\n *\n * @param {ObjectPath | undefined} path response path of a field\n * @returns {string} filtered serialization of the response path\n */\nfunction serializeResponsePathAsArray(path) {\n    const flattened = (0, ast_1.flattenPath)(path);\n    let src = \"[\";\n    for (let i = flattened.length - 1; i >= 0; i--) {\n        // meta is only used for the function name\n        if (flattened[i].type === \"meta\") {\n            continue;\n        }\n        src +=\n            flattened[i].type === \"literal\"\n                ? `\"${flattened[i].key}\",`\n                : `${flattened[i].key},`;\n    }\n    return src + \"]\";\n}\nfunction getErrorDestination(type) {\n    return (0, graphql_1.isNonNullType)(type) ? GLOBAL_NULL_ERRORS_NAME : GLOBAL_ERRORS_NAME;\n}\nfunction createResolveInfoName(path) {\n    return ((0, ast_1.flattenPath)(path)\n        .map((p) => p.key)\n        .join(\"_\") + \"Info\");\n}\n/**\n * Serializes the response path for the resolve info function\n * @param {ObjectPath | undefined} path response path of a field\n * @returns {string} filtered serialization of the response path\n */\nfunction serializeResponsePath(path) {\n    if (!path) {\n        return \"undefined\";\n    }\n    if (path.type === \"meta\") {\n        // meta is ignored while serializing for the resolve info functions\n        return serializeResponsePath(path.prev);\n    }\n    const literalValue = `\"${path.key}\"`;\n    return `{\n    key:  ${path.type === \"literal\" ? literalValue : path.key},\n    prev: ${serializeResponsePath(path.prev)}\n  }`;\n}\n/**\n * Returned a bound serialization function of a scalar or enum\n * @param {GraphQLScalarType | GraphQLEnumType} scalar\n * @param customSerializer custom serializer\n * @returns {(v: any) => any} bound serializationFunction\n */\nfunction getSerializer(scalar, customSerializer) {\n    const { name } = scalar;\n    const serialize = customSerializer || ((val) => scalar.serialize(val));\n    return function leafSerializer(context, v, onError, ...idx) {\n        try {\n            const value = serialize(v);\n            if (isInvalid(value)) {\n                onError(context, `Expected a value of type \"${name}\" but received: ${v}`, ...idx);\n                return null;\n            }\n            return value;\n        }\n        catch (e) {\n            onError(context, (e && e.message) ||\n                `Expected a value of type \"${name}\" but received an Error`, ...idx);\n            return null;\n        }\n    };\n}\n/**\n * Default abstract type resolver.\n *\n * It only handle sync type resolving.\n * @param value\n * @param contextValue\n * @param {GraphQLResolveInfo} info\n * @param {GraphQLAbstractType} abstractType\n * @returns {string}\n */\nfunction defaultResolveTypeFn(value, contextValue, info, abstractType) {\n    // First, look for `__typename`.\n    if (value != null &&\n        typeof value === \"object\" &&\n        typeof value.__typename === \"string\") {\n        return value.__typename;\n    }\n    // Otherwise, test each possible type.\n    const possibleTypes = info.schema.getPossibleTypes(abstractType);\n    for (const type of possibleTypes) {\n        if (type.isTypeOf) {\n            const isTypeOfResult = type.isTypeOf(value, contextValue, info);\n            if (isPromise(isTypeOfResult)) {\n                throw new Error(`Promises are not supported for resolving type of ${value}`);\n            }\n            else if (isTypeOfResult) {\n                return type.name;\n            }\n        }\n    }\n    throw new Error(`Could not resolve the object type in possible types of ${abstractType.name} for the value: ` +\n        inspect(value));\n}\n/**\n * Constructs a ExecutionContext object from the arguments passed to\n * execute, which we will pass throughout the other execution methods.\n *\n * Throws a GraphQLError if a valid execution context cannot be created.\n */\nfunction buildCompilationContext(schema, document, options, operationName) {\n    const errors = [];\n    let operation = undefined;\n    let hasMultipleAssumedOperations = false;\n    const fragments = Object.create(null);\n    for (const definition of document.definitions) {\n        switch (definition.kind) {\n            case graphql_1.Kind.OPERATION_DEFINITION:\n                if (!operationName && operation) {\n                    hasMultipleAssumedOperations = true;\n                }\n                else if (!operationName ||\n                    (definition.name && definition.name.value === operationName)) {\n                    operation = definition;\n                }\n                break;\n            case graphql_1.Kind.FRAGMENT_DEFINITION:\n                fragments[definition.name.value] = definition;\n                break;\n        }\n    }\n    if (!operation) {\n        if (operationName) {\n            throw new graphql_1.GraphQLError(`Unknown operation named \"${operationName}\".`);\n        }\n        else {\n            throw new graphql_1.GraphQLError(\"Must provide an operation.\");\n        }\n    }\n    else if (hasMultipleAssumedOperations) {\n        throw new graphql_1.GraphQLError(\"Must provide operation name if query contains multiple operations.\");\n    }\n    return {\n        schema,\n        fragments,\n        rootValue: null,\n        contextValue: null,\n        operation,\n        options,\n        resolvers: {},\n        serializers: {},\n        typeResolvers: {},\n        isTypeOfs: {},\n        resolveInfos: {},\n        hoistedFunctions: [],\n        hoistedFunctionNames: new Map(),\n        deferred: [],\n        depth: -1,\n        variableValues: {},\n        errors\n    };\n}\nfunction getFieldNodesName(nodes) {\n    return nodes.length > 1\n        ? \"(\" + nodes.map(({ name }) => name.value).join(\",\") + \")\"\n        : nodes[0].name.value;\n}\nfunction getHoistedFunctionName(context, name) {\n    const count = context.hoistedFunctionNames.get(name);\n    if (count === undefined) {\n        context.hoistedFunctionNames.set(name, 0);\n        return name;\n    }\n    context.hoistedFunctionNames.set(name, count + 1);\n    return `${name}${count + 1}`;\n}\nfunction createErrorObject(context, nodes, path, message, originalError) {\n    return `new ${GRAPHQL_ERROR}(${message},\n    ${JSON.stringify((0, ast_1.computeLocations)(nodes))},\n      ${serializeResponsePathAsArray(path)},\n      ${originalError || \"undefined\"},\n      ${context.options.disablingCapturingStackErrors ? \"true\" : \"false\"})`;\n}\nfunction getResolverName(parentName, name) {\n    return parentName + name + \"Resolver\";\n}\nfunction getTypeResolverName(name) {\n    return name + \"TypeResolver\";\n}\nfunction getSerializerName(name) {\n    return name + \"Serializer\";\n}\nfunction promiseStarted() {\n    return `\n     // increase the promise counter\n     ++${GLOBAL_PROMISE_COUNTER};\n  `;\n}\nfunction promiseDone() {\n    return `\n    --${GLOBAL_PROMISE_COUNTER};\n    if (${GLOBAL_PROMISE_COUNTER} === 0) {\n      ${GLOBAL_RESOLVE}(${GLOBAL_EXECUTION_CONTEXT});\n    }\n  `;\n}\nfunction normalizeErrors(err) {\n    if (Array.isArray(err)) {\n        return err.map((e) => normalizeError(e));\n    }\n    return [normalizeError(err)];\n}\nfunction normalizeError(err) {\n    return err instanceof graphql_1.GraphQLError\n        ? err\n        : new error_1.GraphQLError(err.message, err.locations, err.path, err);\n}\n/**\n * Returns true if a value is undefined, or NaN.\n */\nfunction isInvalid(value) {\n    // eslint-disable-next-line no-self-compare\n    return value === undefined || value !== value;\n}\nfunction getParentArgIndexes(context) {\n    let args = \"\";\n    for (let i = 0; i <= context.depth; ++i) {\n        if (i > 0) {\n            args += \", \";\n        }\n        args += `idx${i}`;\n    }\n    return args;\n}\nfunction getJsFieldName(fieldName) {\n    return `${LOCAL_JS_FIELD_NAME_PREFIX}${fieldName}`;\n}\nfunction isAsyncIterable(val) {\n    return typeof Object(val)[Symbol.asyncIterator] === \"function\";\n}\nexports.isAsyncIterable = isAsyncIterable;\nfunction compileSubscriptionOperation(context, type, fieldMap, queryFn) {\n    const fieldNodes = Object.values(fieldMap)[0];\n    const fieldNode = fieldNodes[0];\n    const fieldName = fieldNode.name.value;\n    const field = (0, ast_1.resolveFieldDef)(context, type, fieldNodes);\n    if (!field) {\n        throw new graphql_1.GraphQLError(`The subscription field \"${fieldName}\" is not defined.`, (0, compat_1.getGraphQLErrorOptions)(fieldNodes));\n    }\n    const responsePath = (0, ast_1.addPath)(undefined, fieldName);\n    const resolveInfoName = createResolveInfoName(responsePath);\n    const subscriber = field.subscribe;\n    async function executeSubscription(executionContext) {\n        const resolveInfo = executionContext.resolveInfos[resolveInfoName](executionContext.rootValue, executionContext.variables, responsePath);\n        try {\n            const eventStream = await subscriber?.(executionContext.rootValue, executionContext.variables, executionContext.context, resolveInfo);\n            if (eventStream instanceof Error) {\n                throw eventStream;\n            }\n            return eventStream;\n        }\n        catch (error) {\n            throw (0, graphql_1.locatedError)(error, resolveInfo.fieldNodes, (0, Path_1.pathToArray)(resolveInfo.path));\n        }\n    }\n    async function createSourceEventStream(executionContext) {\n        try {\n            const eventStream = await executeSubscription(executionContext);\n            // Assert field returned an event stream, otherwise yield an error.\n            if (!isAsyncIterable(eventStream)) {\n                throw new Error(\"Subscription field must return Async Iterable. \" +\n                    `Received: ${inspect(eventStream)}.`);\n            }\n            return eventStream;\n        }\n        catch (error) {\n            // If it is a GraphQLError, report it as an ExecutionResult, containing only errors and no data.\n            // Otherwise treat the error as a system-class error and re-throw it.\n            if (error instanceof graphql_1.GraphQLError) {\n                return { errors: [error] };\n            }\n            throw error;\n        }\n    }\n    return async function subscribe(executionContext) {\n        const resultOrStream = await createSourceEventStream(executionContext);\n        if (!isAsyncIterable(resultOrStream)) {\n            return resultOrStream;\n        }\n        // For each payload yielded from a subscription, map it over the normal\n        // GraphQL `execute` function, with `payload` as the rootValue.\n        // This implements the \"MapSourceToResponseEvent\" algorithm described in\n        // the GraphQL specification. The `execute` function provides the\n        // \"ExecuteSubscriptionEvent\" algorithm, as it is nearly identical to the\n        // \"ExecuteQuery\" algorithm, for which `execute` is also used.\n        // We use our `query` function in place of `execute`\n        const mapSourceToResponse = (payload) => queryFn(payload, executionContext.context, executionContext.variables);\n        return mapAsyncIterator(resultOrStream, mapSourceToResponse);\n    };\n}\nfunction createBoundSubscribe(compilationContext, document, func, getVariableValues, operationName) {\n    const { resolvers, typeResolvers, isTypeOfs, serializers, resolveInfos } = compilationContext;\n    const trimmer = (0, non_null_1.createNullTrimmer)(compilationContext);\n    const fnName = operationName || \"subscribe\";\n    const ret = {\n        async [fnName](rootValue, context, variables) {\n            // this can be shared across in a batch request\n            const parsedVariables = getVariableValues(variables || {});\n            // Return early errors if variable coercing failed.\n            if ((0, variables_1.failToParseVariables)(parsedVariables)) {\n                return { errors: parsedVariables.errors };\n            }\n            const executionContext = {\n                rootValue,\n                context,\n                variables: parsedVariables.coerced,\n                safeMap,\n                inspect,\n                GraphQLError: error_1.GraphQLError,\n                resolvers,\n                typeResolvers,\n                isTypeOfs,\n                serializers,\n                resolveInfos,\n                trimmer,\n                promiseCounter: 0,\n                nullErrors: [],\n                errors: [],\n                data: {}\n            };\n            // eslint-disable-next-line no-useless-call\n            return func.call(null, executionContext);\n        }\n    };\n    return ret[fnName];\n}\n/**\n * Given an AsyncIterable and a callback function, return an AsyncIterator\n * which produces values mapped via calling the callback function.\n */\nfunction mapAsyncIterator(iterable, callback) {\n    const iterator = iterable[Symbol.asyncIterator]();\n    async function mapResult(result) {\n        if (result.done) {\n            return result;\n        }\n        try {\n            return { value: await callback(result.value), done: false };\n        }\n        catch (error) {\n            if (typeof iterator.return === \"function\") {\n                try {\n                    await iterator.return();\n                }\n                catch (e) {\n                    /* ignore error */\n                }\n            }\n            throw error;\n        }\n    }\n    return {\n        async next() {\n            return mapResult(await iterator.next());\n        },\n        async return() {\n            return typeof iterator.return === \"function\"\n                ? mapResult(await iterator.return())\n                : { value: undefined, done: true };\n        },\n        async throw(error) {\n            return typeof iterator.throw === \"function\"\n                ? mapResult(await iterator.throw(error))\n                : Promise.reject(error);\n        },\n        [Symbol.asyncIterator]() {\n            return this;\n        }\n    };\n}\n//# sourceMappingURL=execution.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/graphql-jit/dist/esm/execution.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/graphql-jit/dist/esm/index.js":
/*!*****************************************************!*\
  !*** ../node_modules/graphql-jit/dist/esm/index.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.isLeafField = exports.fieldExpansionEnricher = exports.isCompiledQuery = exports.compileQuery = void 0;\nvar execution_1 = __webpack_require__(/*! ./execution */ \"(ssr)/../node_modules/graphql-jit/dist/esm/execution.js\");\nObject.defineProperty(exports, \"compileQuery\", ({ enumerable: true, get: function () { return execution_1.compileQuery; } }));\nObject.defineProperty(exports, \"isCompiledQuery\", ({ enumerable: true, get: function () { return execution_1.isCompiledQuery; } }));\nvar resolve_info_1 = __webpack_require__(/*! ./resolve-info */ \"(ssr)/../node_modules/graphql-jit/dist/esm/resolve-info.js\");\nObject.defineProperty(exports, \"fieldExpansionEnricher\", ({ enumerable: true, get: function () { return resolve_info_1.fieldExpansionEnricher; } }));\nObject.defineProperty(exports, \"isLeafField\", ({ enumerable: true, get: function () { return resolve_info_1.isLeafField; } }));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL2dyYXBocWwtaml0L2Rpc3QvZXNtL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG1CQUFtQixHQUFHLDhCQUE4QixHQUFHLHVCQUF1QixHQUFHLG9CQUFvQjtBQUNyRyxrQkFBa0IsbUJBQU8sQ0FBQyw0RUFBYTtBQUN2QyxnREFBK0MsRUFBRSxxQ0FBcUMsb0NBQW9DLEVBQUM7QUFDM0gsbURBQWtELEVBQUUscUNBQXFDLHVDQUF1QyxFQUFDO0FBQ2pJLHFCQUFxQixtQkFBTyxDQUFDLGtGQUFnQjtBQUM3QywwREFBeUQsRUFBRSxxQ0FBcUMsaURBQWlELEVBQUM7QUFDbEosK0NBQThDLEVBQUUscUNBQXFDLHNDQUFzQyxFQUFDO0FBQzVIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGVkZ2l0eS15aWVsZC1mcm9udGVuZC8uLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC1qaXQvZGlzdC9lc20vaW5kZXguanM/ODAxYiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaXNMZWFmRmllbGQgPSBleHBvcnRzLmZpZWxkRXhwYW5zaW9uRW5yaWNoZXIgPSBleHBvcnRzLmlzQ29tcGlsZWRRdWVyeSA9IGV4cG9ydHMuY29tcGlsZVF1ZXJ5ID0gdm9pZCAwO1xudmFyIGV4ZWN1dGlvbl8xID0gcmVxdWlyZShcIi4vZXhlY3V0aW9uXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiY29tcGlsZVF1ZXJ5XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBleGVjdXRpb25fMS5jb21waWxlUXVlcnk7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJpc0NvbXBpbGVkUXVlcnlcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGV4ZWN1dGlvbl8xLmlzQ29tcGlsZWRRdWVyeTsgfSB9KTtcbnZhciByZXNvbHZlX2luZm9fMSA9IHJlcXVpcmUoXCIuL3Jlc29sdmUtaW5mb1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImZpZWxkRXhwYW5zaW9uRW5yaWNoZXJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlc29sdmVfaW5mb18xLmZpZWxkRXhwYW5zaW9uRW5yaWNoZXI7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJpc0xlYWZGaWVsZFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVzb2x2ZV9pbmZvXzEuaXNMZWFmRmllbGQ7IH0gfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/graphql-jit/dist/esm/index.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/graphql-jit/dist/esm/inspect.js":
/*!*******************************************************!*\
  !*** ../node_modules/graphql-jit/dist/esm/inspect.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/**\n * Based on https://github.com/graphql/graphql-js/blob/master/src/jsutils/inspect.js\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.nodejsCustomInspectSymbol = void 0;\nexports.nodejsCustomInspectSymbol = Symbol.for(\"nodejs.util.inspect.custom\");\nfunction createInspect(maxArrayLength = 10, maxRecursiveDepth = 2) {\n    /**\n     * Used to print values in error messages.\n     */\n    return function inspect(value) {\n        return formatValue(value, []);\n    };\n    function formatValue(value, seenValues) {\n        switch (typeof value) {\n            case \"string\":\n                return JSON.stringify(value);\n            case \"function\":\n                return value.name ? `[function ${value.name}]` : \"[function]\";\n            case \"object\":\n                return formatObjectValue(value, seenValues);\n            default:\n                return String(value);\n        }\n    }\n    function formatObjectValue(value, previouslySeenValues) {\n        if (previouslySeenValues.indexOf(value) !== -1) {\n            return \"[Circular]\";\n        }\n        const seenValues = [...previouslySeenValues, value];\n        if (value) {\n            const customInspectFn = getCustomFn(value);\n            if (customInspectFn) {\n                // $FlowFixMe(>=0.90.0)\n                const customValue = customInspectFn.call(value);\n                // check for infinite recursion\n                if (customValue !== value) {\n                    return typeof customValue === \"string\"\n                        ? customValue\n                        : formatValue(customValue, seenValues);\n                }\n            }\n            else if (Array.isArray(value)) {\n                return formatArray(value, seenValues);\n            }\n            return formatObject(value, seenValues);\n        }\n        return String(value);\n    }\n    function formatObject(object, seenValues) {\n        const keys = Object.keys(object);\n        if (keys.length === 0) {\n            return \"{}\";\n        }\n        if (seenValues.length > maxRecursiveDepth) {\n            return \"[\" + getObjectTag(object) + \"]\";\n        }\n        const properties = keys.map((key) => {\n            const value = formatValue(object[key], seenValues);\n            return key + \": \" + value;\n        });\n        return \"{ \" + properties.join(\", \") + \" }\";\n    }\n    function formatArray(array, seenValues) {\n        if (array.length === 0) {\n            return \"[]\";\n        }\n        if (seenValues.length > maxRecursiveDepth) {\n            return \"[Array]\";\n        }\n        const len = Math.min(maxArrayLength, array.length);\n        const remaining = array.length - len;\n        const items = [];\n        for (let i = 0; i < len; ++i) {\n            items.push(formatValue(array[i], seenValues));\n        }\n        if (remaining === 1) {\n            items.push(\"... 1 more item\");\n        }\n        else if (remaining > 1) {\n            items.push(`... ${remaining} more items`);\n        }\n        return \"[\" + items.join(\", \") + \"]\";\n    }\n    function getCustomFn(object) {\n        const customInspectFn = object[String(exports.nodejsCustomInspectSymbol)];\n        if (typeof customInspectFn === \"function\") {\n            return customInspectFn;\n        }\n        if (typeof object.inspect === \"function\") {\n            return object.inspect;\n        }\n    }\n    function getObjectTag(object) {\n        const tag = Object.prototype.toString\n            .call(object)\n            .replace(/^\\[object /, \"\")\n            .replace(/]$/, \"\");\n        if (tag === \"Object\" && typeof object.constructor === \"function\") {\n            const name = object.constructor.name;\n            if (typeof name === \"string\") {\n                return name;\n            }\n        }\n        return tag;\n    }\n}\nexports[\"default\"] = createInspect;\n//# sourceMappingURL=inspect.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL2dyYXBocWwtaml0L2Rpc3QvZXNtL2luc3BlY3QuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsaUNBQWlDO0FBQ2pDLGlDQUFpQztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQsV0FBVztBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Qsa0JBQWtCLCtCQUErQjtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLFNBQVM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLFdBQVc7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFlO0FBQ2YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9sZWRnaXR5LXlpZWxkLWZyb250ZW5kLy4uL25vZGVfbW9kdWxlcy9ncmFwaHFsLWppdC9kaXN0L2VzbS9pbnNwZWN0LmpzPzBjMjEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIEJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9ncmFwaHFsL2dyYXBocWwtanMvYmxvYi9tYXN0ZXIvc3JjL2pzdXRpbHMvaW5zcGVjdC5qc1xuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLm5vZGVqc0N1c3RvbUluc3BlY3RTeW1ib2wgPSB2b2lkIDA7XG5leHBvcnRzLm5vZGVqc0N1c3RvbUluc3BlY3RTeW1ib2wgPSBTeW1ib2wuZm9yKFwibm9kZWpzLnV0aWwuaW5zcGVjdC5jdXN0b21cIik7XG5mdW5jdGlvbiBjcmVhdGVJbnNwZWN0KG1heEFycmF5TGVuZ3RoID0gMTAsIG1heFJlY3Vyc2l2ZURlcHRoID0gMikge1xuICAgIC8qKlxuICAgICAqIFVzZWQgdG8gcHJpbnQgdmFsdWVzIGluIGVycm9yIG1lc3NhZ2VzLlxuICAgICAqL1xuICAgIHJldHVybiBmdW5jdGlvbiBpbnNwZWN0KHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBmb3JtYXRWYWx1ZSh2YWx1ZSwgW10pO1xuICAgIH07XG4gICAgZnVuY3Rpb24gZm9ybWF0VmFsdWUodmFsdWUsIHNlZW5WYWx1ZXMpIHtcbiAgICAgICAgc3dpdGNoICh0eXBlb2YgdmFsdWUpIHtcbiAgICAgICAgICAgIGNhc2UgXCJzdHJpbmdcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xuICAgICAgICAgICAgY2FzZSBcImZ1bmN0aW9uXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlLm5hbWUgPyBgW2Z1bmN0aW9uICR7dmFsdWUubmFtZX1dYCA6IFwiW2Z1bmN0aW9uXVwiO1xuICAgICAgICAgICAgY2FzZSBcIm9iamVjdFwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBmb3JtYXRPYmplY3RWYWx1ZSh2YWx1ZSwgc2VlblZhbHVlcyk7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiBTdHJpbmcodmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGZvcm1hdE9iamVjdFZhbHVlKHZhbHVlLCBwcmV2aW91c2x5U2VlblZhbHVlcykge1xuICAgICAgICBpZiAocHJldmlvdXNseVNlZW5WYWx1ZXMuaW5kZXhPZih2YWx1ZSkgIT09IC0xKSB7XG4gICAgICAgICAgICByZXR1cm4gXCJbQ2lyY3VsYXJdXCI7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc2VlblZhbHVlcyA9IFsuLi5wcmV2aW91c2x5U2VlblZhbHVlcywgdmFsdWVdO1xuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgIGNvbnN0IGN1c3RvbUluc3BlY3RGbiA9IGdldEN1c3RvbUZuKHZhbHVlKTtcbiAgICAgICAgICAgIGlmIChjdXN0b21JbnNwZWN0Rm4pIHtcbiAgICAgICAgICAgICAgICAvLyAkRmxvd0ZpeE1lKD49MC45MC4wKVxuICAgICAgICAgICAgICAgIGNvbnN0IGN1c3RvbVZhbHVlID0gY3VzdG9tSW5zcGVjdEZuLmNhbGwodmFsdWUpO1xuICAgICAgICAgICAgICAgIC8vIGNoZWNrIGZvciBpbmZpbml0ZSByZWN1cnNpb25cbiAgICAgICAgICAgICAgICBpZiAoY3VzdG9tVmFsdWUgIT09IHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0eXBlb2YgY3VzdG9tVmFsdWUgPT09IFwic3RyaW5nXCJcbiAgICAgICAgICAgICAgICAgICAgICAgID8gY3VzdG9tVmFsdWVcbiAgICAgICAgICAgICAgICAgICAgICAgIDogZm9ybWF0VmFsdWUoY3VzdG9tVmFsdWUsIHNlZW5WYWx1ZXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZvcm1hdEFycmF5KHZhbHVlLCBzZWVuVmFsdWVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmb3JtYXRPYmplY3QodmFsdWUsIHNlZW5WYWx1ZXMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBTdHJpbmcodmFsdWUpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBmb3JtYXRPYmplY3Qob2JqZWN0LCBzZWVuVmFsdWVzKSB7XG4gICAgICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpO1xuICAgICAgICBpZiAoa2V5cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBcInt9XCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNlZW5WYWx1ZXMubGVuZ3RoID4gbWF4UmVjdXJzaXZlRGVwdGgpIHtcbiAgICAgICAgICAgIHJldHVybiBcIltcIiArIGdldE9iamVjdFRhZyhvYmplY3QpICsgXCJdXCI7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcHJvcGVydGllcyA9IGtleXMubWFwKChrZXkpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gZm9ybWF0VmFsdWUob2JqZWN0W2tleV0sIHNlZW5WYWx1ZXMpO1xuICAgICAgICAgICAgcmV0dXJuIGtleSArIFwiOiBcIiArIHZhbHVlO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIFwieyBcIiArIHByb3BlcnRpZXMuam9pbihcIiwgXCIpICsgXCIgfVwiO1xuICAgIH1cbiAgICBmdW5jdGlvbiBmb3JtYXRBcnJheShhcnJheSwgc2VlblZhbHVlcykge1xuICAgICAgICBpZiAoYXJyYXkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gXCJbXVwiO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzZWVuVmFsdWVzLmxlbmd0aCA+IG1heFJlY3Vyc2l2ZURlcHRoKSB7XG4gICAgICAgICAgICByZXR1cm4gXCJbQXJyYXldXCI7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbGVuID0gTWF0aC5taW4obWF4QXJyYXlMZW5ndGgsIGFycmF5Lmxlbmd0aCk7XG4gICAgICAgIGNvbnN0IHJlbWFpbmluZyA9IGFycmF5Lmxlbmd0aCAtIGxlbjtcbiAgICAgICAgY29uc3QgaXRlbXMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgICAgICAgICAgaXRlbXMucHVzaChmb3JtYXRWYWx1ZShhcnJheVtpXSwgc2VlblZhbHVlcykpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZW1haW5pbmcgPT09IDEpIHtcbiAgICAgICAgICAgIGl0ZW1zLnB1c2goXCIuLi4gMSBtb3JlIGl0ZW1cIik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocmVtYWluaW5nID4gMSkge1xuICAgICAgICAgICAgaXRlbXMucHVzaChgLi4uICR7cmVtYWluaW5nfSBtb3JlIGl0ZW1zYCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFwiW1wiICsgaXRlbXMuam9pbihcIiwgXCIpICsgXCJdXCI7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldEN1c3RvbUZuKG9iamVjdCkge1xuICAgICAgICBjb25zdCBjdXN0b21JbnNwZWN0Rm4gPSBvYmplY3RbU3RyaW5nKGV4cG9ydHMubm9kZWpzQ3VzdG9tSW5zcGVjdFN5bWJvbCldO1xuICAgICAgICBpZiAodHlwZW9mIGN1c3RvbUluc3BlY3RGbiA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICByZXR1cm4gY3VzdG9tSW5zcGVjdEZuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2Ygb2JqZWN0Lmluc3BlY3QgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgcmV0dXJuIG9iamVjdC5pbnNwZWN0O1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldE9iamVjdFRhZyhvYmplY3QpIHtcbiAgICAgICAgY29uc3QgdGFnID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ1xuICAgICAgICAgICAgLmNhbGwob2JqZWN0KVxuICAgICAgICAgICAgLnJlcGxhY2UoL15cXFtvYmplY3QgLywgXCJcIilcbiAgICAgICAgICAgIC5yZXBsYWNlKC9dJC8sIFwiXCIpO1xuICAgICAgICBpZiAodGFnID09PSBcIk9iamVjdFwiICYmIHR5cGVvZiBvYmplY3QuY29uc3RydWN0b3IgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgY29uc3QgbmFtZSA9IG9iamVjdC5jb25zdHJ1Y3Rvci5uYW1lO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBuYW1lID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5hbWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRhZztcbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBjcmVhdGVJbnNwZWN0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5zcGVjdC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/graphql-jit/dist/esm/inspect.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/graphql-jit/dist/esm/json.js":
/*!****************************************************!*\
  !*** ../node_modules/graphql-jit/dist/esm/json.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.queryToJSONSchema = void 0;\n/**\n * Mapping between GQL primitive types and JSON Schema property types\n *\n * @type       {<type>}\n */\nconst graphql_1 = __webpack_require__(/*! graphql */ \"(ssr)/../node_modules/graphql/index.mjs\");\nconst ast_1 = __webpack_require__(/*! ./ast */ \"(ssr)/../node_modules/graphql-jit/dist/esm/ast.js\");\nconst compat_1 = __webpack_require__(/*! ./compat */ \"(ssr)/../node_modules/graphql-jit/dist/esm/compat.js\");\nconst PRIMITIVES = {\n    Int: \"integer\",\n    Float: \"number\",\n    String: \"string\",\n    Boolean: \"boolean\",\n    ID: \"string\"\n};\n/**\n * GQL -> JSON Schema transform\n *\n * @param compilationContext\n * @return     {object}  A plain JavaScript object which conforms to JSON Schema\n */\nfunction queryToJSONSchema(compilationContext) {\n    const type = (0, compat_1.getOperationRootType)(compilationContext.schema, compilationContext.operation);\n    const fields = (0, ast_1.collectFields)(compilationContext, type, compilationContext.operation.selectionSet, Object.create(null), Object.create(null));\n    const fieldProperties = Object.create(null);\n    for (const responseName of Object.keys(fields)) {\n        const fieldType = (0, ast_1.resolveFieldDef)(compilationContext, type, fields[responseName]);\n        if (!fieldType) {\n            // if field does not exist, it should be ignored for compatibility concerns.\n            // Usually, validation would stop it before getting here but this could be an old query\n            continue;\n        }\n        fieldProperties[responseName] = transformNode(compilationContext, fields[responseName], fieldType.type);\n    }\n    return {\n        type: \"object\",\n        properties: {\n            data: {\n                type: \"object\",\n                properties: fieldProperties,\n                nullable: true\n            },\n            errors: {\n                type: \"array\",\n                items: {\n                    type: \"object\",\n                    additionalProperties: true,\n                    properties: {\n                        message: {\n                            type: \"string\"\n                        },\n                        path: {\n                            type: \"array\",\n                            items: {\n                                type: [\"string\", \"number\"]\n                            }\n                        },\n                        locations: {\n                            type: \"array\",\n                            items: {\n                                type: \"object\",\n                                properties: {\n                                    line: {\n                                        type: \"number\"\n                                    },\n                                    column: {\n                                        type: \"number\"\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    };\n}\nexports.queryToJSONSchema = queryToJSONSchema;\nfunction transformNode(compilationContext, fieldNodes, type) {\n    if ((0, graphql_1.isObjectType)(type)) {\n        const subfields = (0, ast_1.collectSubfields)(compilationContext, type, fieldNodes);\n        const properties = Object.create(null);\n        for (const responseName of Object.keys(subfields)) {\n            const fieldType = (0, ast_1.resolveFieldDef)(compilationContext, type, subfields[responseName]);\n            if (!fieldType) {\n                // if field does not exist, it should be ignored for compatibility concerns.\n                // Usually, validation would stop it before getting here but this could be an old query\n                continue;\n            }\n            properties[responseName] = transformNode(compilationContext, subfields[responseName], fieldType.type);\n        }\n        return {\n            type: \"object\",\n            properties,\n            nullable: true\n        };\n    }\n    if ((0, graphql_1.isListType)(type)) {\n        return {\n            type: \"array\",\n            items: transformNode(compilationContext, fieldNodes, type.ofType),\n            nullable: true\n        };\n    }\n    if ((0, graphql_1.isNonNullType)(type)) {\n        const nullable = transformNode(compilationContext, fieldNodes, type.ofType);\n        nullable.nullable = false;\n        return nullable;\n    }\n    if ((0, graphql_1.isEnumType)(type)) {\n        return {\n            type: \"string\",\n            nullable: true\n        };\n    }\n    if ((0, graphql_1.isScalarType)(type)) {\n        const jsonSchemaType = PRIMITIVES[type.name];\n        if (!jsonSchemaType) {\n            throw new Error(`Got unexpected PRIMITIVES type: ${type.name}`);\n        }\n        return {\n            type: jsonSchemaType,\n            nullable: true\n        };\n    }\n    if ((0, graphql_1.isAbstractType)(type)) {\n        return compilationContext.schema.getPossibleTypes(type).reduce((res, t) => {\n            const jsonSchema = transformNode(compilationContext, fieldNodes, t);\n            res.properties = {\n                ...res.properties,\n                ...jsonSchema.properties\n            };\n            return res;\n        }, {\n            type: \"object\",\n            properties: {},\n            nullable: true\n        });\n    }\n    throw new Error(`Got unhandled type: ${type.name}`);\n}\n//# sourceMappingURL=json.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/graphql-jit/dist/esm/json.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/graphql-jit/dist/esm/memoize.js":
/*!*******************************************************!*\
  !*** ../node_modules/graphql-jit/dist/esm/memoize.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.memoize4 = exports.memoize3 = exports.memoize2 = void 0;\nconst lodash_memoize_1 = __importDefault(__webpack_require__(/*! lodash.memoize */ \"(ssr)/../node_modules/lodash.memoize/index.js\"));\nfunction uncurry2(fn) {\n    return (a, b) => fn(a)(b);\n}\nfunction uncurry3(fn) {\n    return (a, b, c) => fn(a)(b)(c);\n}\nfunction uncurry4(fn) {\n    return (a, b, c, d) => fn(a)(b)(c)(d);\n}\nfunction memoize2(fn) {\n    return uncurry2((0, lodash_memoize_1.default)((a) => (0, lodash_memoize_1.default)((b) => fn(a, b))));\n}\nexports.memoize2 = memoize2;\nfunction memoize3(fn) {\n    return uncurry3((0, lodash_memoize_1.default)((a) => (0, lodash_memoize_1.default)((b) => (0, lodash_memoize_1.default)((c) => fn(a, b, c)))));\n}\nexports.memoize3 = memoize3;\nfunction memoize4(fn) {\n    return uncurry4((0, lodash_memoize_1.default)((a) => (0, lodash_memoize_1.default)((b) => (0, lodash_memoize_1.default)((c) => (0, lodash_memoize_1.default)((d) => fn(a, b, c, d))))));\n}\nexports.memoize4 = memoize4;\n//# sourceMappingURL=memoize.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL2dyYXBocWwtaml0L2Rpc3QvZXNtL21lbW9pemUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLDZDQUE2QztBQUM3QztBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxnQkFBZ0IsR0FBRyxnQkFBZ0IsR0FBRyxnQkFBZ0I7QUFDdEQseUNBQXlDLG1CQUFPLENBQUMscUVBQWdCO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGVkZ2l0eS15aWVsZC1mcm9udGVuZC8uLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC1qaXQvZGlzdC9lc20vbWVtb2l6ZS5qcz8xMjA5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5tZW1vaXplNCA9IGV4cG9ydHMubWVtb2l6ZTMgPSBleHBvcnRzLm1lbW9pemUyID0gdm9pZCAwO1xuY29uc3QgbG9kYXNoX21lbW9pemVfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwibG9kYXNoLm1lbW9pemVcIikpO1xuZnVuY3Rpb24gdW5jdXJyeTIoZm4pIHtcbiAgICByZXR1cm4gKGEsIGIpID0+IGZuKGEpKGIpO1xufVxuZnVuY3Rpb24gdW5jdXJyeTMoZm4pIHtcbiAgICByZXR1cm4gKGEsIGIsIGMpID0+IGZuKGEpKGIpKGMpO1xufVxuZnVuY3Rpb24gdW5jdXJyeTQoZm4pIHtcbiAgICByZXR1cm4gKGEsIGIsIGMsIGQpID0+IGZuKGEpKGIpKGMpKGQpO1xufVxuZnVuY3Rpb24gbWVtb2l6ZTIoZm4pIHtcbiAgICByZXR1cm4gdW5jdXJyeTIoKDAsIGxvZGFzaF9tZW1vaXplXzEuZGVmYXVsdCkoKGEpID0+ICgwLCBsb2Rhc2hfbWVtb2l6ZV8xLmRlZmF1bHQpKChiKSA9PiBmbihhLCBiKSkpKTtcbn1cbmV4cG9ydHMubWVtb2l6ZTIgPSBtZW1vaXplMjtcbmZ1bmN0aW9uIG1lbW9pemUzKGZuKSB7XG4gICAgcmV0dXJuIHVuY3VycnkzKCgwLCBsb2Rhc2hfbWVtb2l6ZV8xLmRlZmF1bHQpKChhKSA9PiAoMCwgbG9kYXNoX21lbW9pemVfMS5kZWZhdWx0KSgoYikgPT4gKDAsIGxvZGFzaF9tZW1vaXplXzEuZGVmYXVsdCkoKGMpID0+IGZuKGEsIGIsIGMpKSkpKTtcbn1cbmV4cG9ydHMubWVtb2l6ZTMgPSBtZW1vaXplMztcbmZ1bmN0aW9uIG1lbW9pemU0KGZuKSB7XG4gICAgcmV0dXJuIHVuY3Vycnk0KCgwLCBsb2Rhc2hfbWVtb2l6ZV8xLmRlZmF1bHQpKChhKSA9PiAoMCwgbG9kYXNoX21lbW9pemVfMS5kZWZhdWx0KSgoYikgPT4gKDAsIGxvZGFzaF9tZW1vaXplXzEuZGVmYXVsdCkoKGMpID0+ICgwLCBsb2Rhc2hfbWVtb2l6ZV8xLmRlZmF1bHQpKChkKSA9PiBmbihhLCBiLCBjLCBkKSkpKSkpO1xufVxuZXhwb3J0cy5tZW1vaXplNCA9IG1lbW9pemU0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWVtb2l6ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/graphql-jit/dist/esm/memoize.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/graphql-jit/dist/esm/non-null.js":
/*!********************************************************!*\
  !*** ../node_modules/graphql-jit/dist/esm/non-null.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.createNullTrimmer = void 0;\nconst graphql_1 = __webpack_require__(/*! graphql */ \"(ssr)/../node_modules/graphql/index.mjs\");\nconst type_1 = __webpack_require__(/*! graphql/type */ \"(ssr)/../node_modules/graphql/type/index.js\");\nconst lodash_merge_1 = __importDefault(__webpack_require__(/*! lodash.merge */ \"(ssr)/../node_modules/lodash.merge/index.js\"));\nconst ast_1 = __webpack_require__(/*! ./ast */ \"(ssr)/../node_modules/graphql-jit/dist/esm/ast.js\");\nconst compat_1 = __webpack_require__(/*! ./compat */ \"(ssr)/../node_modules/graphql-jit/dist/esm/compat.js\");\n/**\n *\n * @param {CompilationContext} compilationContext\n * @returns {(data: any, errors: GraphQLError[]) => {data: any; errors: GraphQLError[]}}\n */\nfunction createNullTrimmer(compilationContext) {\n    return trimData(parseQueryNullables(compilationContext));\n}\nexports.createNullTrimmer = createNullTrimmer;\n/**\n * Trims a data response according to the field errors in non null fields.\n *\n * Errors are filtered to ensure a single field error per field.\n *\n * @param {QueryMetadata} nullable Description of the query and their nullability\n * @returns {(data: any, errors: GraphQLError[]) => {data: any; errors: GraphQLError[]}}\n * the trimmed data and a filtered list of errors.\n */\nfunction trimData(nullable) {\n    return (data, errors) => {\n        const finalErrors = [];\n        const processedErrors = new Set();\n        for (const error of errors) {\n            if (!error.path) {\n                // should never happen, it is a bug if it does\n                throw new Error(\"no path available for tree trimming\");\n            }\n            if (processedErrors.has(error.path.join(\".\"))) {\n                // there can be multiple field errors in some scenario\n                // there is no need to continue processing and it should not be part of the final response\n                continue;\n            }\n            const ancestors = findNullableAncestor(nullable, error.path);\n            // The top level field is always nullable\n            // http://facebook.github.io/graphql/June2018/#sec-Errors-and-Non-Nullability\n            //\n            // There is no mention if the following errors need to be present in the response.\n            // For now we assume this is not needed.\n            if (ancestors.length === 0) {\n                data = null;\n                finalErrors.push(error);\n                break;\n            }\n            removeBranch(data, ancestors);\n            processedErrors.add(error.path.join(\".\"));\n            finalErrors.push(error);\n        }\n        return { data, errors: finalErrors };\n    };\n}\n/**\n * Removes a branch out of the response data by mutating the original object.\n *\n * @param tree response data\n * @param {Array<number | string>} branch array with the path that should be trimmed\n */\nfunction removeBranch(tree, branch) {\n    for (let i = 0; i < branch.length - 1; ++i) {\n        // if ancestor has already been removed, there's nothing to do\n        if (tree[branch[i]] === null) {\n            return;\n        }\n        tree = tree[branch[i]];\n    }\n    const toNull = branch[branch.length - 1];\n    tree[toNull] = null;\n}\n/**\n * Name of the child used in array to contain the description.\n *\n * Only used for list to contain the child description.\n */\nconst ARRAY_CHILD_NAME = \"index\";\n/**\n *\n * @param {QueryMetadata} nullable Description of the query and their nullability\n * @param {ReadonlyArray<string | number>} paths path of the error location\n * @returns {Array<string | number>} path of the branch to be made null\n */\nfunction findNullableAncestor(nullable, paths) {\n    let lastNullable = 0;\n    for (let i = 0; i < paths.length; ++i) {\n        const path = paths[i];\n        const child = nullable.children[typeof path === \"string\" ? path : ARRAY_CHILD_NAME];\n        if (!child) {\n            // Stopping the search since we reached a leaf node,\n            // the loop should be on its final iteration\n            break;\n        }\n        if (child.isNullable) {\n            lastNullable = i + 1;\n        }\n        nullable = child;\n    }\n    return paths.slice(0, lastNullable);\n}\n/**\n * Produce a description of the query regarding its nullability.\n *\n * Leaf nodes are not present in this representation since they are not\n * interesting for removing branches of the response tree.\n *\n * The structure is recursive like the query.\n * @param {CompilationContext} compilationContext Execution content\n * @returns {QueryMetadata} description of the query\n */\nfunction parseQueryNullables(compilationContext) {\n    const type = (0, compat_1.getOperationRootType)(compilationContext.schema, compilationContext.operation);\n    const fields = (0, ast_1.collectFields)(compilationContext, type, compilationContext.operation.selectionSet, Object.create(null), Object.create(null));\n    const properties = Object.create(null);\n    for (const responseName of Object.keys(fields)) {\n        const fieldType = (0, ast_1.resolveFieldDef)(compilationContext, type, fields[responseName]);\n        if (!fieldType) {\n            // if field does not exist, it should be ignored for compatibility concerns.\n            // Usually, validation would stop it before getting here but this could be an old query\n            continue;\n        }\n        const property = transformNode(compilationContext, fields[responseName], fieldType.type);\n        if (property != null) {\n            properties[responseName] = property;\n        }\n    }\n    return {\n        isNullable: true,\n        children: properties\n    };\n}\n/**\n * Processes a single node to produce a description of itself and its children.\n *\n * Leaf nodes are ignore and removed from the description\n * @param {CompilationContext} compilationContext\n * @param {FieldNode[]} fieldNodes list of fields\n * @param {GraphQLType} type Current type being processed.\n * @returns {QueryMetadata | null} null if node is a leaf, otherwise a description of the node and its children.\n */\nfunction transformNode(compilationContext, fieldNodes, type) {\n    if ((0, graphql_1.isNonNullType)(type)) {\n        const nullable = transformNode(compilationContext, fieldNodes, type.ofType);\n        if (nullable != null) {\n            nullable.isNullable = false;\n            return nullable;\n        }\n        return null;\n    }\n    if ((0, graphql_1.isObjectType)(type)) {\n        const subfields = (0, ast_1.collectSubfields)(compilationContext, type, fieldNodes);\n        const properties = Object.create(null);\n        for (const responseName of Object.keys(subfields)) {\n            const fieldType = (0, ast_1.resolveFieldDef)(compilationContext, type, subfields[responseName]);\n            if (!fieldType) {\n                // if field does not exist, it should be ignored for compatibility concerns.\n                // Usually, validation would stop it before getting here but this could be an old query\n                continue;\n            }\n            const property = transformNode(compilationContext, subfields[responseName], fieldType.type);\n            if (property != null) {\n                properties[responseName] = property;\n            }\n        }\n        return {\n            isNullable: true,\n            children: properties\n        };\n    }\n    if ((0, graphql_1.isListType)(type)) {\n        const child = transformNode(compilationContext, fieldNodes, type.ofType);\n        if (child != null) {\n            return {\n                isNullable: true,\n                children: { [ARRAY_CHILD_NAME]: child }\n            };\n        }\n        return {\n            isNullable: true,\n            children: {}\n        };\n    }\n    if ((0, type_1.isAbstractType)(type)) {\n        return compilationContext.schema.getPossibleTypes(type).reduce((res, t) => {\n            const property = transformNode(compilationContext, fieldNodes, t);\n            if (property != null) {\n                // We do a deep merge because children can have subset of properties\n                // TODO: Possible bug: two object with different nullability on objects.\n                res.children = (0, lodash_merge_1.default)(res.children, property.children);\n            }\n            return res;\n        }, {\n            isNullable: true,\n            children: {}\n        });\n    }\n    // Scalars and enum are ignored since they are leaf values\n    return null;\n}\n//# sourceMappingURL=non-null.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/graphql-jit/dist/esm/non-null.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/graphql-jit/dist/esm/resolve-info.js":
/*!************************************************************!*\
  !*** ../node_modules/graphql-jit/dist/esm/resolve-info.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.fieldExpansionEnricher = exports.createResolveInfoThunk = exports.isLeafField = void 0;\nconst generate_function_1 = __importDefault(__webpack_require__(/*! generate-function */ \"(ssr)/../node_modules/generate-function/index.js\"));\nconst graphql_1 = __webpack_require__(/*! graphql */ \"(ssr)/../node_modules/graphql/index.mjs\");\nconst lodash_memoize_1 = __importDefault(__webpack_require__(/*! lodash.memoize */ \"(ssr)/../node_modules/lodash.memoize/index.js\"));\nconst lodash_mergewith_1 = __importDefault(__webpack_require__(/*! lodash.mergewith */ \"(ssr)/../node_modules/lodash.mergewith/index.js\"));\nconst memoize_1 = __webpack_require__(/*! ./memoize */ \"(ssr)/../node_modules/graphql-jit/dist/esm/memoize.js\");\nconst LeafFieldSymbol = Symbol(\"LeafFieldSymbol\");\nfunction createLeafField(props) {\n    return {\n        [LeafFieldSymbol]: true,\n        ...props\n    };\n}\nfunction isLeafField(obj) {\n    return (obj != null && Object.prototype.hasOwnProperty.call(obj, LeafFieldSymbol));\n}\nexports.isLeafField = isLeafField;\n/**\n * Compute the GraphQLJitResolveInfo's `fieldExpansion` and return a function\n * that returns the computed resolveInfo. This thunk is registered in\n * context.dependencies for the field's resolveInfoName\n */\nfunction createResolveInfoThunk({ schema, fragments, operation, parentType, fieldName, fieldType, fieldNodes }, enricher) {\n    let enrichedInfo = {};\n    if (typeof enricher === \"function\") {\n        enrichedInfo =\n            enricher({\n                fieldName,\n                fieldNodes,\n                returnType: fieldType,\n                parentType,\n                schema,\n                fragments,\n                operation\n            }) || {};\n        if (typeof enrichedInfo !== \"object\" || Array.isArray(enrichedInfo)) {\n            enrichedInfo = {};\n        }\n    }\n    const gen = (0, generate_function_1.default)();\n    gen(`return function getGraphQLResolveInfo(rootValue, variableValues, path) {\n      return {\n          fieldName,\n          fieldNodes,\n          returnType: fieldType,\n          parentType,\n          path,\n          schema,\n          fragments,\n          rootValue,\n          operation,\n          variableValues,`);\n    Object.keys(enrichedInfo).forEach((key) => {\n        gen(`${key}: enrichedInfo[\"${key}\"],\\n`);\n    });\n    gen(`};};`);\n    // eslint-disable-next-line\n    return new Function(\"fieldName\", \"fieldNodes\", \"fieldType\", \"parentType\", \"schema\", \"fragments\", \"operation\", \"enrichedInfo\", gen.toString()).call(null, fieldName, fieldNodes, fieldType, parentType, schema, fragments, operation, enrichedInfo);\n}\nexports.createResolveInfoThunk = createResolveInfoThunk;\nfunction fieldExpansionEnricher(input) {\n    const { schema, fragments, returnType, fieldNodes } = input;\n    const fieldExpansion = {};\n    for (const fieldNode of fieldNodes) {\n        deepMerge(fieldExpansion, memoizedExpandFieldNode(schema, fragments, fieldNode, returnType));\n    }\n    return {\n        fieldExpansion\n    };\n}\nexports.fieldExpansionEnricher = fieldExpansionEnricher;\nconst MEMOIZATION = true;\nconst memoizedGetReturnType = MEMOIZATION\n    ? (0, memoize_1.memoize2)(getReturnType)\n    : getReturnType;\nconst memoizedHasField = MEMOIZATION ? (0, memoize_1.memoize2)(hasField) : hasField;\nconst memoizedResolveEndType = MEMOIZATION\n    ? (0, lodash_memoize_1.default)(resolveEndType)\n    : resolveEndType;\nconst memoizedGetPossibleTypes = MEMOIZATION\n    ? (0, memoize_1.memoize2)(getPossibleTypes)\n    : getPossibleTypes;\nconst memoizedExpandFieldNodeType = MEMOIZATION\n    ? (0, memoize_1.memoize4)(expandFieldNodeType)\n    : expandFieldNodeType;\nconst memoizedExpandFieldNode = MEMOIZATION\n    ? (0, memoize_1.memoize4)(expandFieldNode)\n    : expandFieldNode;\nfunction expandFieldNode(schema, fragments, node, fieldType) {\n    if (node.selectionSet == null) {\n        return createLeafField({});\n    }\n    // there is a selectionSet which makes the fieldType a CompositeType\n    const typ = memoizedResolveEndType(fieldType);\n    const possibleTypes = memoizedGetPossibleTypes(schema, typ);\n    const fieldExpansion = {};\n    for (const possibleType of possibleTypes) {\n        if (!(0, graphql_1.isUnionType)(possibleType)) {\n            fieldExpansion[possibleType.name] = memoizedExpandFieldNodeType(schema, fragments, possibleType, node.selectionSet);\n        }\n    }\n    return fieldExpansion;\n}\nfunction expandFieldNodeType(schema, fragments, parentType, selectionSet) {\n    const typeExpansion = {};\n    for (const selection of selectionSet.selections) {\n        if (selection.kind === graphql_1.Kind.FIELD) {\n            if (!(0, graphql_1.isUnionType)(parentType) &&\n                memoizedHasField(parentType, selection.name.value)) {\n                typeExpansion[selection.name.value] = memoizedExpandFieldNode(schema, fragments, selection, memoizedGetReturnType(parentType, selection.name.value));\n            }\n        }\n        else {\n            const selectionSet = selection.kind === graphql_1.Kind.INLINE_FRAGMENT\n                ? selection.selectionSet\n                : fragments[selection.name.value].selectionSet;\n            const nextType = selection.kind === graphql_1.Kind.INLINE_FRAGMENT\n                ? selection.typeCondition\n                    ? schema.getType(selection.typeCondition.name.value)\n                    : parentType\n                : schema.getType(fragments[selection.name.value].typeCondition.name.value);\n            /**\n             * nextType (comes from query) is the type extracted from the fragment\n             * parentType (comes from schema) is the possibleType for which we are filling fields\n             *\n             * if the type from query (nextType) is the same as the type we are filling (parentType)\n             * or\n             * if the type from query (nextType) is an abstract type - this case is when we jump\n             * to a super type or sub type. Here we maintain the context (parentType) for which\n             * we are filling the fields. The super type / sub type will be filled in its own\n             * pass.\n             */\n            if (nextType === parentType || (0, graphql_1.isAbstractType)(nextType)) {\n                deepMerge(typeExpansion, memoizedExpandFieldNodeType(schema, fragments, parentType, selectionSet));\n            }\n        }\n    }\n    return typeExpansion;\n}\n/**\n * Returns a list of Possible types that one can get to from the\n * resolvedType. As an analogy, these are the same types that one\n * can use in a fragment's typeCondition.\n *\n * Note: This is different from schema.getPossibleTypes() that this\n * returns all possible types and not just the ones from the type definition.\n *\n * Example:\n * interface Node {\n *   id: ID!\n * }\n * type User implements Node {\n *   id: ID!\n *   name: String\n * }\n * type Article implements Node {\n *   id: ID!\n *   title: String\n * }\n * union Card = User | Article\n *\n * - schema.getPossibleTypes(Card) would give [User, Article]\n * - This function getPossibleTypes(schema, Card) would give [User, Article, Node]\n *\n */\nfunction getPossibleTypes(schema, compositeType) {\n    if ((0, graphql_1.isObjectType)(compositeType)) {\n        return [compositeType];\n    }\n    const possibleTypes = [];\n    const types = schema.getTypeMap();\n    for (const typeName in types) {\n        if (Object.prototype.hasOwnProperty.call(types, typeName)) {\n            const typ = types[typeName];\n            if ((0, graphql_1.isCompositeType)(typ) && (0, graphql_1.doTypesOverlap)(schema, typ, compositeType)) {\n                possibleTypes.push(typ);\n            }\n        }\n    }\n    return possibleTypes;\n}\n/**\n * Given an (Object|Interface)Type, and a fieldName, find the\n * appropriate `end` return type for the field in the Composite Type.\n *\n * Note: The `end` return type is the type by unwrapping non-null types\n * and list types. Check `resolveEndType`\n */\nfunction getReturnType(parentType, fieldName) {\n    const fields = parentType.getFields();\n    if (!Object.prototype.hasOwnProperty.call(fields, fieldName)) {\n        throw new graphql_1.GraphQLError(`Field \"${fieldName}\" does not exist in \"${parentType.name}\"`);\n    }\n    const outputType = fields[fieldName].type;\n    return memoizedResolveEndType(outputType);\n}\n/**\n * Resolve to the end type of the Output type unwrapping non-null types and lists\n */\nfunction resolveEndType(typ) {\n    if ((0, graphql_1.isListType)(typ) || (0, graphql_1.isNonNullType)(typ)) {\n        return memoizedResolveEndType(typ.ofType);\n    }\n    return typ;\n}\nfunction hasField(typ, fieldName) {\n    return Object.prototype.hasOwnProperty.call(typ.getFields(), fieldName);\n}\n// This is because lodash does not support merging keys\n// which are symbols. We require them for leaf fields\nfunction deepMerge(obj, src) {\n    (0, lodash_mergewith_1.default)(obj, src, (objValue, srcValue) => {\n        if (isLeafField(objValue)) {\n            if (isLeafField(srcValue)) {\n                return {\n                    ...objValue,\n                    ...srcValue\n                };\n            }\n            return objValue;\n        }\n        else if (isLeafField(srcValue)) {\n            return srcValue;\n        }\n        return undefined;\n    });\n}\n//# sourceMappingURL=resolve-info.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/graphql-jit/dist/esm/resolve-info.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/graphql-jit/dist/esm/variables.js":
/*!*********************************************************!*\
  !*** ../node_modules/graphql-jit/dist/esm/variables.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.compileVariableParsing = exports.failToParseVariables = void 0;\nconst generate_function_1 = __importDefault(__webpack_require__(/*! generate-function */ \"(ssr)/../node_modules/generate-function/index.js\"));\nconst graphql_1 = __webpack_require__(/*! graphql */ \"(ssr)/../node_modules/graphql/index.mjs\");\nconst ast_1 = __webpack_require__(/*! ./ast */ \"(ssr)/../node_modules/graphql-jit/dist/esm/ast.js\");\nconst error_1 = __webpack_require__(/*! ./error */ \"(ssr)/../node_modules/graphql-jit/dist/esm/error.js\");\nconst inspect_1 = __importDefault(__webpack_require__(/*! ./inspect */ \"(ssr)/../node_modules/graphql-jit/dist/esm/inspect.js\"));\nconst inspect = (0, inspect_1.default)();\nfunction failToParseVariables(x) {\n    return x.errors;\n}\nexports.failToParseVariables = failToParseVariables;\nfunction createSubCompilationContext(context) {\n    return { ...context };\n}\nfunction compileVariableParsing(schema, varDefNodes) {\n    const errors = [];\n    const coercedValues = Object.create(null);\n    let mainBody = \"\";\n    const dependencies = new Map();\n    for (const varDefNode of varDefNodes) {\n        const context = {\n            varDefNode,\n            depth: 0,\n            inputPath: (0, ast_1.addPath)(undefined, \"input\"),\n            responsePath: (0, ast_1.addPath)(undefined, \"coerced\"),\n            dependencies\n        };\n        const varName = varDefNode.variable.name.value;\n        const varType = (0, graphql_1.typeFromAST)(schema, varDefNode.type);\n        if (!varType || !(0, graphql_1.isInputType)(varType)) {\n            // Must use input types for variables. This should be caught during\n            // validation, however is checked again here for safety.\n            errors.push(new error_1.GraphQLError(`Variable \"$${varName}\" expected value of type ` +\n                `\"${varType || (0, graphql_1.print)(varDefNode.type)}\" which cannot be used as an input type.`, (0, ast_1.computeLocations)([varDefNode.type])));\n            continue;\n        }\n        // Ensure a constant shape of the input map\n        coercedValues[varName] = undefined;\n        const hasValueName = hasValue((0, ast_1.addPath)(context.inputPath, varName));\n        mainBody += `const ${hasValueName} = Object.prototype.hasOwnProperty.call(${getObjectPath(context.inputPath)}, \"${varName}\");\\n`;\n        context.inputPath = (0, ast_1.addPath)(context.inputPath, varName);\n        context.responsePath = (0, ast_1.addPath)(context.responsePath, varName);\n        mainBody += generateInput(context, varType, varName, hasValueName, (0, graphql_1.valueFromAST)(varDefNode.defaultValue, varType), false);\n    }\n    if (errors.length > 0) {\n        throw errors;\n    }\n    const gen = (0, generate_function_1.default)();\n    gen(`\n    return function getVariables(input) {\n      const errors = [];\n      const coerced = ${JSON.stringify(coercedValues)}\n      ${mainBody}\n      if (errors.length > 0) {\n        return {errors, coerced: undefined};\n      }\n      return {errors: undefined, coerced};\n    }\n  `);\n    // eslint-disable-next-line\n    return Function.apply(null, [\"GraphQLJITError\", \"inspect\"]\n        .concat(Array.from(dependencies.keys()))\n        .concat(gen.toString())).apply(null, [error_1.GraphQLError, inspect].concat(Array.from(dependencies.values())));\n}\nexports.compileVariableParsing = compileVariableParsing;\n// Int Scalars represent 32 bits\n// https://graphql.github.io/graphql-spec/June2018/#sec-Int\nconst MAX_32BIT_INT = 2147483647;\nconst MIN_32BIT_INT = -2147483648;\nfunction generateInput(context, varType, varName, hasValueName, defaultValue, wrapInList) {\n    const currentOutput = getObjectPath(context.responsePath);\n    const currentInput = getObjectPath(context.inputPath);\n    const errorLocation = printErrorLocation((0, ast_1.computeLocations)([context.varDefNode]));\n    const gen = (0, generate_function_1.default)();\n    gen(`if (${currentInput} == null) {`);\n    if ((0, graphql_1.isNonNullType)(varType)) {\n        let nonNullMessage;\n        let omittedMessage;\n        if (context.errorMessage) {\n            const objectPath = printObjectPath(context.responsePath);\n            nonNullMessage = `${context.errorMessage} + \\`Expected non-nullable type ${varType} not to be null at ${objectPath}.\\``;\n            omittedMessage = `${context.errorMessage} + \\`Field ${objectPath} of required type ${varType} was not provided.\\``;\n        }\n        else {\n            nonNullMessage = `'Variable \"$${varName}\" of non-null type \"${varType}\" must not be null.'`;\n            omittedMessage = `'Variable \"$${varName}\" of required type \"${varType}\" was not provided.'`;\n        }\n        varType = varType.ofType;\n        gen(`\n      if (${currentOutput} == null) {\n        errors.push(new GraphQLJITError(${hasValueName} ? ${nonNullMessage} : ${omittedMessage}, ${errorLocation}));\n      }\n    `);\n    }\n    else {\n        gen(`\n      if (${hasValueName}) { ${currentOutput} = null; }\n    `);\n        if (defaultValue !== undefined) {\n            gen(`else { ${currentOutput} = ${JSON.stringify(defaultValue)} }`);\n        }\n    }\n    gen(`} else {`);\n    if ((0, graphql_1.isScalarType)(varType)) {\n        switch (varType.name) {\n            case graphql_1.GraphQLID.name:\n                gen(`\n          if (typeof ${currentInput} === \"string\") {\n            ${currentOutput} = ${currentInput};\n          } else if (Number.isInteger(${currentInput})) {\n            ${currentOutput} = ${currentInput}.toString();\n          } else {\n            errors.push(new GraphQLJITError('Variable \"$${varName}\" got invalid value ' +\n              inspect(${currentInput}) + \"; \" +\n              'Expected type ${varType.name}; ' +\n              '${varType.name} cannot represent value: ' +\n              inspect(${currentInput}), ${errorLocation})\n            );\n          }\n        `);\n                break;\n            case graphql_1.GraphQLString.name:\n                gen(`\n          if (typeof ${currentInput} === \"string\") {\n              ${currentOutput} = ${currentInput};\n          } else {\n            errors.push(new GraphQLJITError('Variable \"$${varName}\" got invalid value ' +\n              inspect(${currentInput}) + \"; \" +\n              'Expected type ${varType.name}; ' +\n              '${varType.name} cannot represent a non string value: ' +\n              inspect(${currentInput}), ${errorLocation})\n            );\n          }\n        `);\n                break;\n            case graphql_1.GraphQLBoolean.name:\n                gen(`\n        if (typeof ${currentInput} === \"boolean\") {\n            ${currentOutput} = ${currentInput};\n        } else {\n          errors.push(new GraphQLJITError('Variable \"$${varName}\" got invalid value ' +\n          inspect(${currentInput}) + \"; \" +\n          'Expected type ${varType.name}; ' +\n          '${varType.name} cannot represent a non boolean value: ' +\n          inspect(${currentInput}), ${errorLocation}));\n        }\n        `);\n                break;\n            case graphql_1.GraphQLInt.name:\n                gen(`\n        if (Number.isInteger(${currentInput})) {\n          if (${currentInput} > ${MAX_32BIT_INT} || ${currentInput} < ${MIN_32BIT_INT}) {\n            errors.push(new GraphQLJITError('Variable \"$${varName}\" got invalid value ' +\n            inspect(${currentInput}) + \"; \" +\n            'Expected type ${varType.name}; ' +\n            '${varType.name} cannot represent non 32-bit signed integer value: ' +\n            inspect(${currentInput}), ${errorLocation}));\n          } else {\n            ${currentOutput} = ${currentInput};\n          }\n        } else {\n          errors.push(new GraphQLJITError('Variable \"$${varName}\" got invalid value ' +\n            inspect(${currentInput}) + \"; \" +\n            'Expected type ${varType.name}; ' +\n            '${varType.name} cannot represent non-integer value: ' +\n            inspect(${currentInput}), ${errorLocation})\n          );\n        }\n        `);\n                break;\n            case graphql_1.GraphQLFloat.name:\n                gen(`\n        if (Number.isFinite(${currentInput})) {\n            ${currentOutput} = ${currentInput};\n        } else {\n          errors.push(new GraphQLJITError('Variable \"$${varName}\" got invalid value ' +\n            inspect(${currentInput}) + \"; \" +\n            'Expected type ${varType.name}; ' +\n            '${varType.name} cannot represent non numeric value: ' +\n            inspect(${currentInput}), ${errorLocation})\n          );\n        }\n        `);\n                break;\n            default:\n                context.dependencies.set(`${varType.name}parseValue`, varType.parseValue.bind(varType));\n                gen(`\n          try {\n            const parseResult = ${varType.name}parseValue(${currentInput});\n            if (parseResult === undefined || parseResult !== parseResult) {\n              errors.push(new GraphQLJITError('Variable \"$${varName}\" got invalid value ' +\n              inspect(${currentInput}) + \"; \" +\n              'Expected type ${varType.name}.', ${errorLocation}));\n            }\n            ${currentOutput} = parseResult;\n          } catch (error) {\n            errors.push(new GraphQLJITError('Variable \"$${varName}\" got invalid value ' +\n              inspect(${currentInput}) + \"; \" +\n              'Expected type ${varType.name}.', ${errorLocation}, undefined, error)\n            );\n          }\n        `);\n        }\n    }\n    else if ((0, graphql_1.isEnumType)(varType)) {\n        context.dependencies.set(`${varType.name}getValue`, varType.getValue.bind(varType));\n        gen(`\n      if (typeof ${currentInput} === \"string\") {\n        const enumValue = ${varType.name}getValue(${currentInput});\n        if (enumValue) {\n          ${currentOutput} = enumValue.value;\n        } else {\n          errors.push(\n            new GraphQLJITError('Variable \"$${varName}\" got invalid value ' +\n            inspect(${currentInput}) + \"; \" +\n            'Expected type ${varType.name}.', ${errorLocation})\n          );\n        }\n      } else {\n        errors.push(\n          new GraphQLJITError('Variable \"$${varName}\" got invalid value ' +\n          inspect(${currentInput}) + \"; \" +\n          'Expected type ${varType.name}.', ${errorLocation})\n        );\n      }\n      `);\n    }\n    else if ((0, graphql_1.isListType)(varType)) {\n        context.errorMessage = `'Variable \"$${varName}\" got invalid value ' + inspect(${currentInput}) + '; '`;\n        const hasValueName = hasValue(context.inputPath);\n        const index = `idx${context.depth}`;\n        const subContext = createSubCompilationContext(context);\n        subContext.responsePath = (0, ast_1.addPath)(subContext.responsePath, index, \"variable\");\n        subContext.inputPath = (0, ast_1.addPath)(subContext.inputPath, index, \"variable\");\n        subContext.depth++;\n        gen(`\n      if (Array.isArray(${currentInput})) {\n        ${currentOutput} = [];\n        for (let ${index} = 0; ${index} < ${currentInput}.length; ++${index}) {\n          const ${hasValueName} =\n          ${getObjectPath(subContext.inputPath)} !== undefined;\n          ${generateInput(subContext, varType.ofType, varName, hasValueName, undefined, false)}\n        }\n      } else {\n        ${generateInput(context, varType.ofType, varName, hasValueName, undefined, true)}\n      }\n    `);\n    }\n    else if ((0, graphql_1.isInputType)(varType)) {\n        gen(`\n      if (typeof ${currentInput} !== 'object') {\n        errors.push(new GraphQLJITError('Variable \"$${varName}\" got invalid value ' +\n        inspect(${currentInput}) + \"; \" +\n        'Expected type ${varType.name} to be an object.', ${errorLocation}));\n      } else {\n        ${currentOutput} = {};\n    `);\n        const fields = varType.getFields();\n        const allowedFields = [];\n        for (const field of Object.values(fields)) {\n            const subContext = createSubCompilationContext(context);\n            allowedFields.push(field.name);\n            const hasValueName = hasValue((0, ast_1.addPath)(subContext.inputPath, field.name));\n            gen(`\n        const ${hasValueName} = Object.prototype.hasOwnProperty.call(\n          ${getObjectPath(subContext.inputPath)}, \"${field.name}\"\n        );\n      `);\n            subContext.inputPath = (0, ast_1.addPath)(subContext.inputPath, field.name);\n            subContext.responsePath = (0, ast_1.addPath)(subContext.responsePath, field.name);\n            subContext.errorMessage = `'Variable \"$${varName}\" got invalid value ' + inspect(${currentInput}) + '; '`;\n            gen(`\n        ${generateInput(subContext, field.type, field.name, hasValueName, field.defaultValue, false)}\n      `);\n        }\n        gen(`\n      const allowedFields = ${JSON.stringify(allowedFields)};\n      for (const fieldName of Object.keys(${currentInput})) {\n        if (!allowedFields.includes(fieldName)) {\n          errors.push(new GraphQLJITError('Variable \"$${varName}\" got invalid value ' +\n            inspect(${currentInput}) + \"; \" +\n            'Field \"' + fieldName + '\" is not defined by type ${varType.name}.', ${errorLocation}));\n          break;\n        }\n      }\n    }`);\n    }\n    else {\n        /* istanbul ignore next line */\n        throw new Error(`unknown type: ${varType}`);\n    }\n    if (wrapInList) {\n        gen(`${currentOutput} = [${currentOutput}];`);\n    }\n    gen(`}`);\n    return gen.toString();\n}\nfunction hasValue(path) {\n    const flattened = [];\n    let curr = path;\n    while (curr) {\n        flattened.push(curr.key);\n        curr = curr.prev;\n    }\n    return `hasValue${flattened.join(\"_\")}`;\n}\nfunction printErrorLocation(location) {\n    return JSON.stringify(location);\n}\nfunction getObjectPath(path) {\n    const flattened = [];\n    let curr = path;\n    while (curr) {\n        flattened.unshift({ key: curr.key, type: curr.type });\n        curr = curr.prev;\n    }\n    let name = flattened[0].key;\n    for (let i = 1; i < flattened.length; ++i) {\n        name +=\n            flattened[i].type === \"literal\"\n                ? `[\"${flattened[i].key}\"]`\n                : `[${flattened[i].key}]`;\n    }\n    return name;\n}\nfunction printObjectPath(path) {\n    const flattened = [];\n    let curr = path;\n    while (curr) {\n        flattened.unshift({ key: curr.key, type: curr.type });\n        curr = curr.prev;\n    }\n    const initialIndex = Math.min(flattened.length - 1, 1);\n    let name = \"value\";\n    for (let i = initialIndex + 1; i < flattened.length; ++i) {\n        name +=\n            flattened[i].type === \"literal\"\n                ? `.${flattened[i].key}`\n                : `[$\\{${flattened[i].key}}]`;\n    }\n    return name;\n}\n//# sourceMappingURL=variables.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/graphql-jit/dist/esm/variables.js\n");

/***/ })

};
;