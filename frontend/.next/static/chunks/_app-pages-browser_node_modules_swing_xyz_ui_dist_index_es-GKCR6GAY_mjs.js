"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_node_modules_swing_xyz_ui_dist_index_es-GKCR6GAY_mjs"],{

/***/ "(app-pages-browser)/../node_modules/@walletconnect/events/dist/esm/events.js":
/*!****************************************************************!*\
  !*** ../node_modules/@walletconnect/events/dist/esm/events.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IEvents: function() { return /* binding */ IEvents; }\n/* harmony export */ });\nclass IEvents {\n}\n//# sourceMappingURL=events.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvZXZlbnRzL2Rpc3QvZXNtL2V2ZW50cy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU87QUFDUDtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvZXZlbnRzL2Rpc3QvZXNtL2V2ZW50cy5qcz9mMzJhIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjbGFzcyBJRXZlbnRzIHtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWV2ZW50cy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/@walletconnect/events/dist/esm/events.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/@walletconnect/events/dist/esm/index.js":
/*!***************************************************************!*\
  !*** ../node_modules/@walletconnect/events/dist/esm/index.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IEvents: function() { return /* reexport safe */ _events__WEBPACK_IMPORTED_MODULE_0__.IEvents; }\n/* harmony export */ });\n/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./events */ \"(app-pages-browser)/../node_modules/@walletconnect/events/dist/esm/events.js\");\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvZXZlbnRzL2Rpc3QvZXNtL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXlCO0FBQ3pCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvZXZlbnRzL2Rpc3QvZXNtL2luZGV4LmpzP2UyOTkiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSBcIi4vZXZlbnRzXCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/@walletconnect/events/dist/esm/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/@walletconnect/types/dist/index.es.js":
/*!*************************************************************!*\
  !*** ../node_modules/@walletconnect/types/dist/index.es.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ICore: function() { return /* binding */ n; },\n/* harmony export */   ICrypto: function() { return /* binding */ l; },\n/* harmony export */   IEchoClient: function() { return /* binding */ v; },\n/* harmony export */   IEngine: function() { return /* binding */ M; },\n/* harmony export */   IEngineEvents: function() { return /* binding */ w; },\n/* harmony export */   IEventClient: function() { return /* binding */ C; },\n/* harmony export */   IExpirer: function() { return /* binding */ x; },\n/* harmony export */   IJsonRpcHistory: function() { return /* binding */ h; },\n/* harmony export */   IKeyChain: function() { return /* binding */ E; },\n/* harmony export */   IMessageTracker: function() { return /* binding */ a; },\n/* harmony export */   IPairing: function() { return /* binding */ m; },\n/* harmony export */   IPublisher: function() { return /* binding */ g; },\n/* harmony export */   IRelayer: function() { return /* binding */ u; },\n/* harmony export */   ISignClient: function() { return /* binding */ S; },\n/* harmony export */   ISignClientEvents: function() { return /* binding */ b; },\n/* harmony export */   IStore: function() { return /* binding */ p; },\n/* harmony export */   ISubscriber: function() { return /* binding */ d; },\n/* harmony export */   ISubscriberTopicMap: function() { return /* binding */ I; },\n/* harmony export */   IVerify: function() { return /* binding */ y; }\n/* harmony export */ });\n/* harmony import */ var _walletconnect_events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @walletconnect/events */ \"(app-pages-browser)/../node_modules/@walletconnect/events/dist/esm/index.js\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! events */ \"(app-pages-browser)/../node_modules/events/events.js\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_1__);\nclass n extends _walletconnect_events__WEBPACK_IMPORTED_MODULE_0__.IEvents{constructor(s){super(),this.opts=s,this.protocol=\"wc\",this.version=2}}class l{constructor(s,t,e){this.core=s,this.logger=t}}class h extends _walletconnect_events__WEBPACK_IMPORTED_MODULE_0__.IEvents{constructor(s,t){super(),this.core=s,this.logger=t,this.records=new Map}}class a{constructor(s,t){this.logger=s,this.core=t}}class g extends _walletconnect_events__WEBPACK_IMPORTED_MODULE_0__.IEvents{constructor(s,t){super(),this.relayer=s,this.logger=t}}class u extends _walletconnect_events__WEBPACK_IMPORTED_MODULE_0__.IEvents{constructor(s){super()}}class p{constructor(s,t,e,f){this.core=s,this.logger=t,this.name=e}}class I{constructor(){this.map=new Map}}class d extends _walletconnect_events__WEBPACK_IMPORTED_MODULE_0__.IEvents{constructor(s,t){super(),this.relayer=s,this.logger=t}}class E{constructor(s,t){this.core=s,this.logger=t}}class x extends _walletconnect_events__WEBPACK_IMPORTED_MODULE_0__.IEvents{constructor(s,t){super(),this.core=s,this.logger=t}}class m{constructor(s,t){this.logger=s,this.core=t}}class y{constructor(s,t,e){this.core=s,this.logger=t,this.store=e}}class v{constructor(s,t){this.projectId=s,this.logger=t}}class C{constructor(s,t,e){this.core=s,this.logger=t,this.telemetryEnabled=e}}class b extends (events__WEBPACK_IMPORTED_MODULE_1___default()){constructor(){super()}}class S{constructor(s){this.opts=s,this.protocol=\"wc\",this.version=2}}class w extends events__WEBPACK_IMPORTED_MODULE_1__.EventEmitter{constructor(){super()}}class M{constructor(s){this.client=s}}\n//# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdHlwZXMvZGlzdC9pbmRleC5lcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQXlGLGdCQUFnQiwwREFBQyxDQUFDLGVBQWUsdURBQXVELFFBQVEsbUJBQW1CLDJCQUEyQixnQkFBZ0IsMERBQUMsQ0FBQyxpQkFBaUIsd0RBQXdELFFBQVEsaUJBQWlCLDJCQUEyQixnQkFBZ0IsMERBQUMsQ0FBQyxpQkFBaUIsc0NBQXNDLGdCQUFnQiwwREFBQyxDQUFDLGVBQWUsU0FBUyxRQUFRLHFCQUFxQix1Q0FBdUMsUUFBUSxjQUFjLGtCQUFrQixnQkFBZ0IsMERBQUMsQ0FBQyxpQkFBaUIsc0NBQXNDLFFBQVEsaUJBQWlCLDJCQUEyQixnQkFBZ0IsMERBQUMsQ0FBQyxpQkFBaUIsbUNBQW1DLFFBQVEsaUJBQWlCLDJCQUEyQixRQUFRLG1CQUFtQix3Q0FBd0MsUUFBUSxpQkFBaUIsZ0NBQWdDLFFBQVEsbUJBQW1CLG1EQUFtRCxnQkFBZ0IsK0NBQUMsQ0FBQyxjQUFjLFNBQVMsUUFBUSxlQUFlLCtDQUErQyxnQkFBZ0IsZ0RBQUMsQ0FBQyxjQUFjLFNBQVMsUUFBUSxlQUFlLGVBQWdWO0FBQ3JoRCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L3R5cGVzL2Rpc3QvaW5kZXguZXMuanM/MDljYSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnR7SUV2ZW50cyBhcyBvfWZyb21cIkB3YWxsZXRjb25uZWN0L2V2ZW50c1wiO2ltcG9ydCBjLHtFdmVudEVtaXR0ZXIgYXMgaX1mcm9tXCJldmVudHNcIjtjbGFzcyBuIGV4dGVuZHMgb3tjb25zdHJ1Y3RvcihzKXtzdXBlcigpLHRoaXMub3B0cz1zLHRoaXMucHJvdG9jb2w9XCJ3Y1wiLHRoaXMudmVyc2lvbj0yfX1jbGFzcyBse2NvbnN0cnVjdG9yKHMsdCxlKXt0aGlzLmNvcmU9cyx0aGlzLmxvZ2dlcj10fX1jbGFzcyBoIGV4dGVuZHMgb3tjb25zdHJ1Y3RvcihzLHQpe3N1cGVyKCksdGhpcy5jb3JlPXMsdGhpcy5sb2dnZXI9dCx0aGlzLnJlY29yZHM9bmV3IE1hcH19Y2xhc3MgYXtjb25zdHJ1Y3RvcihzLHQpe3RoaXMubG9nZ2VyPXMsdGhpcy5jb3JlPXR9fWNsYXNzIGcgZXh0ZW5kcyBve2NvbnN0cnVjdG9yKHMsdCl7c3VwZXIoKSx0aGlzLnJlbGF5ZXI9cyx0aGlzLmxvZ2dlcj10fX1jbGFzcyB1IGV4dGVuZHMgb3tjb25zdHJ1Y3RvcihzKXtzdXBlcigpfX1jbGFzcyBwe2NvbnN0cnVjdG9yKHMsdCxlLGYpe3RoaXMuY29yZT1zLHRoaXMubG9nZ2VyPXQsdGhpcy5uYW1lPWV9fWNsYXNzIEl7Y29uc3RydWN0b3IoKXt0aGlzLm1hcD1uZXcgTWFwfX1jbGFzcyBkIGV4dGVuZHMgb3tjb25zdHJ1Y3RvcihzLHQpe3N1cGVyKCksdGhpcy5yZWxheWVyPXMsdGhpcy5sb2dnZXI9dH19Y2xhc3MgRXtjb25zdHJ1Y3RvcihzLHQpe3RoaXMuY29yZT1zLHRoaXMubG9nZ2VyPXR9fWNsYXNzIHggZXh0ZW5kcyBve2NvbnN0cnVjdG9yKHMsdCl7c3VwZXIoKSx0aGlzLmNvcmU9cyx0aGlzLmxvZ2dlcj10fX1jbGFzcyBte2NvbnN0cnVjdG9yKHMsdCl7dGhpcy5sb2dnZXI9cyx0aGlzLmNvcmU9dH19Y2xhc3MgeXtjb25zdHJ1Y3RvcihzLHQsZSl7dGhpcy5jb3JlPXMsdGhpcy5sb2dnZXI9dCx0aGlzLnN0b3JlPWV9fWNsYXNzIHZ7Y29uc3RydWN0b3Iocyx0KXt0aGlzLnByb2plY3RJZD1zLHRoaXMubG9nZ2VyPXR9fWNsYXNzIEN7Y29uc3RydWN0b3Iocyx0LGUpe3RoaXMuY29yZT1zLHRoaXMubG9nZ2VyPXQsdGhpcy50ZWxlbWV0cnlFbmFibGVkPWV9fWNsYXNzIGIgZXh0ZW5kcyBje2NvbnN0cnVjdG9yKCl7c3VwZXIoKX19Y2xhc3MgU3tjb25zdHJ1Y3RvcihzKXt0aGlzLm9wdHM9cyx0aGlzLnByb3RvY29sPVwid2NcIix0aGlzLnZlcnNpb249Mn19Y2xhc3MgdyBleHRlbmRzIGl7Y29uc3RydWN0b3IoKXtzdXBlcigpfX1jbGFzcyBNe2NvbnN0cnVjdG9yKHMpe3RoaXMuY2xpZW50PXN9fWV4cG9ydHtuIGFzIElDb3JlLGwgYXMgSUNyeXB0byx2IGFzIElFY2hvQ2xpZW50LE0gYXMgSUVuZ2luZSx3IGFzIElFbmdpbmVFdmVudHMsQyBhcyBJRXZlbnRDbGllbnQseCBhcyBJRXhwaXJlcixoIGFzIElKc29uUnBjSGlzdG9yeSxFIGFzIElLZXlDaGFpbixhIGFzIElNZXNzYWdlVHJhY2tlcixtIGFzIElQYWlyaW5nLGcgYXMgSVB1Ymxpc2hlcix1IGFzIElSZWxheWVyLFMgYXMgSVNpZ25DbGllbnQsYiBhcyBJU2lnbkNsaWVudEV2ZW50cyxwIGFzIElTdG9yZSxkIGFzIElTdWJzY3JpYmVyLEkgYXMgSVN1YnNjcmliZXJUb3BpY01hcCx5IGFzIElWZXJpZnl9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguZXMuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/@walletconnect/types/dist/index.es.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/events/events.js":
/*!****************************************!*\
  !*** ../node_modules/events/events.js ***!
  \****************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function errorListener(err) {\n      emitter.removeListener(name, resolver);\n      reject(err);\n    }\n\n    function resolver() {\n      if (typeof emitter.removeListener === 'function') {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n\n    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\n    if (name !== 'error') {\n      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\n    }\n  });\n}\n\nfunction addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n  if (typeof emitter.on === 'function') {\n    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);\n  }\n}\n\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n  if (typeof emitter.on === 'function') {\n    if (flags.once) {\n      emitter.once(name, listener);\n    } else {\n      emitter.on(name, listener);\n    }\n  } else if (typeof emitter.addEventListener === 'function') {\n    // EventTarget does not have `error` event semantics like Node\n    // EventEmitters, we do not listen for `error` events here.\n    emitter.addEventListener(name, function wrapListener(arg) {\n      // IE does not have builtin `{ once: true }` support so we\n      // have to do it manually.\n      if (flags.once) {\n        emitter.removeEventListener(name, wrapListener);\n      }\n      listener(arg);\n    });\n  } else {\n    throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/events/events.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/@swing.xyz/ui/dist/index.es-GKCR6GAY.mjs":
/*!****************************************************************!*\
  !*** ../node_modules/@swing.xyz/ui/dist/index.es-GKCR6GAY.mjs ***!
  \****************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ENGINE_CONTEXT: function() { return /* binding */ e1; },\n/* harmony export */   ENGINE_QUEUE_STATES: function() { return /* binding */ ft; },\n/* harmony export */   ENGINE_RPC_OPTS: function() { return /* binding */ lt; },\n/* harmony export */   HISTORY_CONTEXT: function() { return /* binding */ cx; },\n/* harmony export */   HISTORY_EVENTS: function() { return /* binding */ ax; },\n/* harmony export */   HISTORY_STORAGE_VERSION: function() { return /* binding */ ux; },\n/* harmony export */   METHODS_TO_VERIFY: function() { return /* binding */ r1; },\n/* harmony export */   PROPOSAL_CONTEXT: function() { return /* binding */ Xb; },\n/* harmony export */   PROPOSAL_EXPIRY: function() { return /* binding */ hx; },\n/* harmony export */   PROPOSAL_EXPIRY_MESSAGE: function() { return /* binding */ Qb; },\n/* harmony export */   REQUEST_CONTEXT: function() { return /* binding */ t1; },\n/* harmony export */   SESSION_CONTEXT: function() { return /* binding */ Zb; },\n/* harmony export */   SESSION_EXPIRY: function() { return /* binding */ cs; },\n/* harmony export */   SESSION_REQUEST_EXPIRY_BOUNDARIES: function() { return /* binding */ Ko; },\n/* harmony export */   SIGN_CLIENT_CONTEXT: function() { return /* binding */ ef; },\n/* harmony export */   SIGN_CLIENT_DEFAULT: function() { return /* binding */ $o; },\n/* harmony export */   SIGN_CLIENT_EVENTS: function() { return /* binding */ nx; },\n/* harmony export */   SIGN_CLIENT_PROTOCOL: function() { return /* binding */ Ql; },\n/* harmony export */   SIGN_CLIENT_STORAGE_OPTIONS: function() { return /* binding */ ox; },\n/* harmony export */   SIGN_CLIENT_STORAGE_PREFIX: function() { return /* binding */ Jo; },\n/* harmony export */   SIGN_CLIENT_VERSION: function() { return /* binding */ Zl; },\n/* harmony export */   SessionStore: function() { return /* binding */ lx; },\n/* harmony export */   SignClient: function() { return /* binding */ fx; },\n/* harmony export */   WALLETCONNECT_DEEPLINK_CHOICE: function() { return /* binding */ Jl; },\n/* harmony export */   \"default\": function() { return /* binding */ Wo; }\n/* harmony export */ });\n/* harmony import */ var _chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-2DI3TDIG.mjs */ \"(app-pages-browser)/../node_modules/@swing.xyz/ui/dist/chunk-2DI3TDIG.mjs\");\n/* harmony import */ var _walletconnect_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @walletconnect/types */ \"(app-pages-browser)/../node_modules/@walletconnect/types/dist/index.es.js\");\n/* harmony import */ var lodash_isequal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash.isequal */ \"(app-pages-browser)/../node_modules/lodash.isequal/index.js\");\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/../node_modules/process/browser.js\");\n/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"(app-pages-browser)/../node_modules/buffer/index.js\")[\"Buffer\"];\n/* __next_internal_client_entry_do_not_use__ ENGINE_CONTEXT,ENGINE_QUEUE_STATES,ENGINE_RPC_OPTS,HISTORY_CONTEXT,HISTORY_EVENTS,HISTORY_STORAGE_VERSION,METHODS_TO_VERIFY,PROPOSAL_CONTEXT,PROPOSAL_EXPIRY,PROPOSAL_EXPIRY_MESSAGE,REQUEST_CONTEXT,SESSION_CONTEXT,SESSION_EXPIRY,SESSION_REQUEST_EXPIRY_BOUNDARIES,SIGN_CLIENT_CONTEXT,SIGN_CLIENT_DEFAULT,SIGN_CLIENT_EVENTS,SIGN_CLIENT_PROTOCOL,SIGN_CLIENT_STORAGE_OPTIONS,SIGN_CLIENT_STORAGE_PREFIX,SIGN_CLIENT_VERSION,SessionStore,SignClient,WALLETCONNECT_DEEPLINK_CHOICE,default auto */ \nvar kt = (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.g)((c1, ls)=>{\n    \"use strict\";\n    var Kt = typeof Reflect == \"object\" ? Reflect : null, Xo = Kt && typeof Kt.apply == \"function\" ? Kt.apply : function(e, r, t) {\n        return Function.prototype.apply.call(e, r, t);\n    }, ci;\n    Kt && typeof Kt.ownKeys == \"function\" ? ci = Kt.ownKeys : Object.getOwnPropertySymbols ? ci = function(e) {\n        return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e));\n    } : ci = function(e) {\n        return Object.getOwnPropertyNames(e);\n    };\n    function tf(i) {\n        console && console.warn && console.warn(i);\n    }\n    var Zo = Number.isNaN || function(e) {\n        return e !== e;\n    };\n    function ce() {\n        ce.init.call(this);\n    }\n    ls.exports = ce;\n    ls.exports.once = of;\n    ce.EventEmitter = ce;\n    ce.prototype._events = void 0;\n    ce.prototype._eventsCount = 0;\n    ce.prototype._maxListeners = void 0;\n    var Qo = 10;\n    function ui(i) {\n        if (typeof i != \"function\") throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof i);\n    }\n    Object.defineProperty(ce, \"defaultMaxListeners\", {\n        enumerable: !0,\n        get: function() {\n            return Qo;\n        },\n        set: function(i) {\n            if (typeof i != \"number\" || i < 0 || Zo(i)) throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + i + \".\");\n            Qo = i;\n        }\n    });\n    ce.init = function() {\n        (this._events === void 0 || this._events === Object.getPrototypeOf(this)._events) && (this._events = Object.create(null), this._eventsCount = 0), this._maxListeners = this._maxListeners || void 0;\n    };\n    ce.prototype.setMaxListeners = function(e) {\n        if (typeof e != \"number\" || e < 0 || Zo(e)) throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + e + \".\");\n        return this._maxListeners = e, this;\n    };\n    function ea(i) {\n        return i._maxListeners === void 0 ? ce.defaultMaxListeners : i._maxListeners;\n    }\n    ce.prototype.getMaxListeners = function() {\n        return ea(this);\n    };\n    ce.prototype.emit = function(e) {\n        for(var r = [], t = 1; t < arguments.length; t++)r.push(arguments[t]);\n        var s = e === \"error\", n = this._events;\n        if (n !== void 0) s = s && n.error === void 0;\n        else if (!s) return !1;\n        if (s) {\n            var o;\n            if (r.length > 0 && (o = r[0]), o instanceof Error) throw o;\n            var a = new Error(\"Unhandled error.\" + (o ? \" (\" + o.message + \")\" : \"\"));\n            throw a.context = o, a;\n        }\n        var c = n[e];\n        if (c === void 0) return !1;\n        if (typeof c == \"function\") Xo(c, this, r);\n        else for(var u = c.length, h = na(c, u), t = 0; t < u; ++t)Xo(h[t], this, r);\n        return !0;\n    };\n    function ta(i, e, r, t) {\n        var s, n, o;\n        if (ui(r), n = i._events, n === void 0 ? (n = i._events = Object.create(null), i._eventsCount = 0) : (n.newListener !== void 0 && (i.emit(\"newListener\", e, r.listener ? r.listener : r), n = i._events), o = n[e]), o === void 0) o = n[e] = r, ++i._eventsCount;\n        else if (typeof o == \"function\" ? o = n[e] = t ? [\n            r,\n            o\n        ] : [\n            o,\n            r\n        ] : t ? o.unshift(r) : o.push(r), s = ea(i), s > 0 && o.length > s && !o.warned) {\n            o.warned = !0;\n            var a = new Error(\"Possible EventEmitter memory leak detected. \" + o.length + \" \" + String(e) + \" listeners added. Use emitter.setMaxListeners() to increase limit\");\n            a.name = \"MaxListenersExceededWarning\", a.emitter = i, a.type = e, a.count = o.length, tf(a);\n        }\n        return i;\n    }\n    ce.prototype.addListener = function(e, r) {\n        return ta(this, e, r, !1);\n    };\n    ce.prototype.on = ce.prototype.addListener;\n    ce.prototype.prependListener = function(e, r) {\n        return ta(this, e, r, !0);\n    };\n    function rf() {\n        if (!this.fired) return this.target.removeListener(this.type, this.wrapFn), this.fired = !0, arguments.length === 0 ? this.listener.call(this.target) : this.listener.apply(this.target, arguments);\n    }\n    function ra(i, e, r) {\n        var t = {\n            fired: !1,\n            wrapFn: void 0,\n            target: i,\n            type: e,\n            listener: r\n        }, s = rf.bind(t);\n        return s.listener = r, t.wrapFn = s, s;\n    }\n    ce.prototype.once = function(e, r) {\n        return ui(r), this.on(e, ra(this, e, r)), this;\n    };\n    ce.prototype.prependOnceListener = function(e, r) {\n        return ui(r), this.prependListener(e, ra(this, e, r)), this;\n    };\n    ce.prototype.removeListener = function(e, r) {\n        var t, s, n, o, a;\n        if (ui(r), s = this._events, s === void 0) return this;\n        if (t = s[e], t === void 0) return this;\n        if (t === r || t.listener === r) --this._eventsCount === 0 ? this._events = Object.create(null) : (delete s[e], s.removeListener && this.emit(\"removeListener\", e, t.listener || r));\n        else if (typeof t != \"function\") {\n            for(n = -1, o = t.length - 1; o >= 0; o--)if (t[o] === r || t[o].listener === r) {\n                a = t[o].listener, n = o;\n                break;\n            }\n            if (n < 0) return this;\n            n === 0 ? t.shift() : sf(t, n), t.length === 1 && (s[e] = t[0]), s.removeListener !== void 0 && this.emit(\"removeListener\", e, a || r);\n        }\n        return this;\n    };\n    ce.prototype.off = ce.prototype.removeListener;\n    ce.prototype.removeAllListeners = function(e) {\n        var r, t, s;\n        if (t = this._events, t === void 0) return this;\n        if (t.removeListener === void 0) return arguments.length === 0 ? (this._events = Object.create(null), this._eventsCount = 0) : t[e] !== void 0 && (--this._eventsCount === 0 ? this._events = Object.create(null) : delete t[e]), this;\n        if (arguments.length === 0) {\n            var n = Object.keys(t), o;\n            for(s = 0; s < n.length; ++s)o = n[s], o !== \"removeListener\" && this.removeAllListeners(o);\n            return this.removeAllListeners(\"removeListener\"), this._events = Object.create(null), this._eventsCount = 0, this;\n        }\n        if (r = t[e], typeof r == \"function\") this.removeListener(e, r);\n        else if (r !== void 0) for(s = r.length - 1; s >= 0; s--)this.removeListener(e, r[s]);\n        return this;\n    };\n    function ia(i, e, r) {\n        var t = i._events;\n        if (t === void 0) return [];\n        var s = t[e];\n        return s === void 0 ? [] : typeof s == \"function\" ? r ? [\n            s.listener || s\n        ] : [\n            s\n        ] : r ? nf(s) : na(s, s.length);\n    }\n    ce.prototype.listeners = function(e) {\n        return ia(this, e, !0);\n    };\n    ce.prototype.rawListeners = function(e) {\n        return ia(this, e, !1);\n    };\n    ce.listenerCount = function(i, e) {\n        return typeof i.listenerCount == \"function\" ? i.listenerCount(e) : sa.call(i, e);\n    };\n    ce.prototype.listenerCount = sa;\n    function sa(i) {\n        var e = this._events;\n        if (e !== void 0) {\n            var r = e[i];\n            if (typeof r == \"function\") return 1;\n            if (r !== void 0) return r.length;\n        }\n        return 0;\n    }\n    ce.prototype.eventNames = function() {\n        return this._eventsCount > 0 ? ci(this._events) : [];\n    };\n    function na(i, e) {\n        for(var r = new Array(e), t = 0; t < e; ++t)r[t] = i[t];\n        return r;\n    }\n    function sf(i, e) {\n        for(; e + 1 < i.length; e++)i[e] = i[e + 1];\n        i.pop();\n    }\n    function nf(i) {\n        for(var e = new Array(i.length), r = 0; r < e.length; ++r)e[r] = i[r].listener || i[r];\n        return e;\n    }\n    function of(i, e) {\n        return new Promise(function(r, t) {\n            function s(o) {\n                i.removeListener(e, n), t(o);\n            }\n            function n() {\n                typeof i.removeListener == \"function\" && i.removeListener(\"error\", s), r([].slice.call(arguments));\n            }\n            oa(i, e, n, {\n                once: !0\n            }), e !== \"error\" && af(i, s, {\n                once: !0\n            });\n        });\n    }\n    function af(i, e, r) {\n        typeof i.on == \"function\" && oa(i, \"error\", e, r);\n    }\n    function oa(i, e, r, t) {\n        if (typeof i.on == \"function\") t.once ? i.once(e, r) : i.on(e, r);\n        else if (typeof i.addEventListener == \"function\") i.addEventListener(e, function s(n) {\n            t.once && i.removeEventListener(e, s), r(n);\n        });\n        else throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof i);\n    }\n});\nvar Sr = {};\n(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.h)(Sr, {\n    __assign: ()=>Es,\n    __asyncDelegator: ()=>Vf,\n    __asyncGenerator: ()=>Bf,\n    __asyncValues: ()=>zf,\n    __await: ()=>Dr,\n    __awaiter: ()=>Lf,\n    __classPrivateFieldGet: ()=>Hf,\n    __classPrivateFieldSet: ()=>Gf,\n    __createBinding: ()=>Uf,\n    __decorate: ()=>Pf,\n    __exportStar: ()=>Mf,\n    __extends: ()=>Tf,\n    __generator: ()=>Ff,\n    __importDefault: ()=>kf,\n    __importStar: ()=>Kf,\n    __makeTemplateObject: ()=>$f,\n    __metadata: ()=>Af,\n    __param: ()=>Cf,\n    __read: ()=>ba,\n    __rest: ()=>Nf,\n    __spread: ()=>qf,\n    __spreadArrays: ()=>jf,\n    __values: ()=>vs\n});\nfunction Tf(i, e) {\n    bs(i, e);\n    function r() {\n        this.constructor = i;\n    }\n    i.prototype = e === null ? Object.create(e) : (r.prototype = e.prototype, new r);\n}\n_c = Tf;\nfunction Nf(i, e) {\n    var r = {};\n    for(var t in i)Object.prototype.hasOwnProperty.call(i, t) && e.indexOf(t) < 0 && (r[t] = i[t]);\n    if (i != null && typeof Object.getOwnPropertySymbols == \"function\") for(var s = 0, t = Object.getOwnPropertySymbols(i); s < t.length; s++)e.indexOf(t[s]) < 0 && Object.prototype.propertyIsEnumerable.call(i, t[s]) && (r[t[s]] = i[t[s]]);\n    return r;\n}\n_c1 = Nf;\nfunction Pf(i, e, r, t) {\n    var s = arguments.length, n = s < 3 ? e : t === null ? t = Object.getOwnPropertyDescriptor(e, r) : t, o;\n    if (typeof Reflect == \"object\" && typeof Reflect.decorate == \"function\") n = Reflect.decorate(i, e, r, t);\n    else for(var a = i.length - 1; a >= 0; a--)(o = i[a]) && (n = (s < 3 ? o(n) : s > 3 ? o(e, r, n) : o(e, r)) || n);\n    return s > 3 && n && Object.defineProperty(e, r, n), n;\n}\n_c2 = Pf;\nfunction Cf(i, e) {\n    return function(r, t) {\n        e(r, t, i);\n    };\n}\n_c3 = Cf;\nfunction Af(i, e) {\n    if (typeof Reflect == \"object\" && typeof Reflect.metadata == \"function\") return Reflect.metadata(i, e);\n}\n_c4 = Af;\nfunction Lf(i, e, r, t) {\n    function s(n) {\n        return n instanceof r ? n : new r(function(o) {\n            o(n);\n        });\n    }\n    return new (r || (r = Promise))(function(n, o) {\n        function a(h) {\n            try {\n                u(t.next(h));\n            } catch (l) {\n                o(l);\n            }\n        }\n        function c(h) {\n            try {\n                u(t.throw(h));\n            } catch (l) {\n                o(l);\n            }\n        }\n        function u(h) {\n            h.done ? n(h.value) : s(h.value).then(a, c);\n        }\n        u((t = t.apply(i, e || [])).next());\n    });\n}\n_c5 = Lf;\nfunction Ff(i, e) {\n    var r = {\n        label: 0,\n        sent: function() {\n            if (n[0] & 1) throw n[1];\n            return n[1];\n        },\n        trys: [],\n        ops: []\n    }, t, s, n, o;\n    return o = {\n        next: a(0),\n        throw: a(1),\n        return: a(2)\n    }, typeof Symbol == \"function\" && (o[Symbol.iterator] = function() {\n        return this;\n    }), o;\n    function a(u) {\n        return function(h) {\n            return c([\n                u,\n                h\n            ]);\n        };\n    }\n    function c(u) {\n        if (t) throw new TypeError(\"Generator is already executing.\");\n        for(; r;)try {\n            if (t = 1, s && (n = u[0] & 2 ? s.return : u[0] ? s.throw || ((n = s.return) && n.call(s), 0) : s.next) && !(n = n.call(s, u[1])).done) return n;\n            switch(s = 0, n && (u = [\n                u[0] & 2,\n                n.value\n            ]), u[0]){\n                case 0:\n                case 1:\n                    n = u;\n                    break;\n                case 4:\n                    return r.label++, {\n                        value: u[1],\n                        done: !1\n                    };\n                case 5:\n                    r.label++, s = u[1], u = [\n                        0\n                    ];\n                    continue;\n                case 7:\n                    u = r.ops.pop(), r.trys.pop();\n                    continue;\n                default:\n                    if (n = r.trys, !(n = n.length > 0 && n[n.length - 1]) && (u[0] === 6 || u[0] === 2)) {\n                        r = 0;\n                        continue;\n                    }\n                    if (u[0] === 3 && (!n || u[1] > n[0] && u[1] < n[3])) {\n                        r.label = u[1];\n                        break;\n                    }\n                    if (u[0] === 6 && r.label < n[1]) {\n                        r.label = n[1], n = u;\n                        break;\n                    }\n                    if (n && r.label < n[2]) {\n                        r.label = n[2], r.ops.push(u);\n                        break;\n                    }\n                    n[2] && r.ops.pop(), r.trys.pop();\n                    continue;\n            }\n            u = e.call(i, r);\n        } catch (h) {\n            u = [\n                6,\n                h\n            ], s = 0;\n        } finally{\n            t = n = 0;\n        }\n        if (u[0] & 5) throw u[1];\n        return {\n            value: u[0] ? u[1] : void 0,\n            done: !0\n        };\n    }\n}\n_c6 = Ff;\nfunction Uf(i, e, r, t) {\n    t === void 0 && (t = r), i[t] = e[r];\n}\n_c7 = Uf;\nfunction Mf(i, e) {\n    for(var r in i)r !== \"default\" && !e.hasOwnProperty(r) && (e[r] = i[r]);\n}\n_c8 = Mf;\nfunction vs(i) {\n    var e = typeof Symbol == \"function\" && Symbol.iterator, r = e && i[e], t = 0;\n    if (r) return r.call(i);\n    if (i && typeof i.length == \"number\") return {\n        next: function() {\n            return i && t >= i.length && (i = void 0), {\n                value: i && i[t++],\n                done: !i\n            };\n        }\n    };\n    throw new TypeError(e ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\nfunction ba(i, e) {\n    var r = typeof Symbol == \"function\" && i[Symbol.iterator];\n    if (!r) return i;\n    var t = r.call(i), s, n = [], o;\n    try {\n        for(; (e === void 0 || e-- > 0) && !(s = t.next()).done;)n.push(s.value);\n    } catch (a) {\n        o = {\n            error: a\n        };\n    } finally{\n        try {\n            s && !s.done && (r = t.return) && r.call(t);\n        } finally{\n            if (o) throw o.error;\n        }\n    }\n    return n;\n}\nfunction qf() {\n    for(var i = [], e = 0; e < arguments.length; e++)i = i.concat(ba(arguments[e]));\n    return i;\n}\nfunction jf() {\n    for(var i = 0, e = 0, r = arguments.length; e < r; e++)i += arguments[e].length;\n    for(var t = Array(i), s = 0, e = 0; e < r; e++)for(var n = arguments[e], o = 0, a = n.length; o < a; o++, s++)t[s] = n[o];\n    return t;\n}\nfunction Dr(i) {\n    return this instanceof Dr ? (this.v = i, this) : new Dr(i);\n}\n_c9 = Dr;\nfunction Bf(i, e, r) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var t = r.apply(i, e || []), s, n = [];\n    return s = {}, o(\"next\"), o(\"throw\"), o(\"return\"), s[Symbol.asyncIterator] = function() {\n        return this;\n    }, s;\n    function o(p) {\n        t[p] && (s[p] = function(d) {\n            return new Promise(function(g, w) {\n                n.push([\n                    p,\n                    d,\n                    g,\n                    w\n                ]) > 1 || a(p, d);\n            });\n        });\n    }\n    function a(p, d) {\n        try {\n            c(t[p](d));\n        } catch (g) {\n            l(n[0][3], g);\n        }\n    }\n    function c(p) {\n        p.value instanceof Dr ? Promise.resolve(p.value.v).then(u, h) : l(n[0][2], p);\n    }\n    function u(p) {\n        a(\"next\", p);\n    }\n    function h(p) {\n        a(\"throw\", p);\n    }\n    function l(p, d) {\n        p(d), n.shift(), n.length && a(n[0][0], n[0][1]);\n    }\n}\n_c10 = Bf;\nfunction Vf(i) {\n    var e, r;\n    return e = {}, t(\"next\"), t(\"throw\", function(s) {\n        throw s;\n    }), t(\"return\"), e[Symbol.iterator] = function() {\n        return this;\n    }, e;\n    function t(s, n) {\n        e[s] = i[s] ? function(o) {\n            return (r = !r) ? {\n                value: Dr(i[s](o)),\n                done: s === \"return\"\n            } : n ? n(o) : o;\n        } : n;\n    }\n}\n_c11 = Vf;\nfunction zf(i) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var e = i[Symbol.asyncIterator], r;\n    return e ? e.call(i) : (i = typeof vs == \"function\" ? vs(i) : i[Symbol.iterator](), r = {}, t(\"next\"), t(\"throw\"), t(\"return\"), r[Symbol.asyncIterator] = function() {\n        return this;\n    }, r);\n    function t(n) {\n        r[n] = i[n] && function(o) {\n            return new Promise(function(a, c) {\n                o = i[n](o), s(a, c, o.done, o.value);\n            });\n        };\n    }\n    function s(n, o, a, c) {\n        Promise.resolve(c).then(function(u) {\n            n({\n                value: u,\n                done: a\n            });\n        }, o);\n    }\n}\nfunction $f(i, e) {\n    return Object.defineProperty ? Object.defineProperty(i, \"raw\", {\n        value: e\n    }) : i.raw = e, i;\n}\nfunction Kf(i) {\n    if (i && i.__esModule) return i;\n    var e = {};\n    if (i != null) for(var r in i)Object.hasOwnProperty.call(i, r) && (e[r] = i[r]);\n    return e.default = i, e;\n}\n_c12 = Kf;\nfunction kf(i) {\n    return i && i.__esModule ? i : {\n        default: i\n    };\n}\nfunction Hf(i, e) {\n    if (!e.has(i)) throw new TypeError(\"attempted to get private field on non-instance\");\n    return e.get(i);\n}\n_c13 = Hf;\nfunction Gf(i, e, r) {\n    if (!e.has(i)) throw new TypeError(\"attempted to set private field on non-instance\");\n    return e.set(i, r), r;\n}\n_c14 = Gf;\nvar bs, Es, Ir = (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.f)(()=>{\n    \"use strict\";\n    bs = function(i, e) {\n        return bs = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(r, t) {\n            r.__proto__ = t;\n        } || function(r, t) {\n            for(var s in t)t.hasOwnProperty(s) && (r[s] = t[s]);\n        }, bs(i, e);\n    };\n    Es = function() {\n        return Es = Object.assign || function(e) {\n            for(var r, t = 1, s = arguments.length; t < s; t++){\n                r = arguments[t];\n                for(var n in r)Object.prototype.hasOwnProperty.call(r, n) && (e[n] = r[n]);\n            }\n            return e;\n        }, Es.apply(this, arguments);\n    };\n});\nvar Or = {};\n(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.h)(Or, {\n    __assign: ()=>xs,\n    __asyncDelegator: ()=>od,\n    __asyncGenerator: ()=>nd,\n    __asyncValues: ()=>ad,\n    __await: ()=>Rr,\n    __awaiter: ()=>Zf,\n    __classPrivateFieldGet: ()=>ld,\n    __classPrivateFieldSet: ()=>fd,\n    __createBinding: ()=>td,\n    __decorate: ()=>Yf,\n    __exportStar: ()=>rd,\n    __extends: ()=>Wf,\n    __generator: ()=>ed,\n    __importDefault: ()=>hd,\n    __importStar: ()=>ud,\n    __makeTemplateObject: ()=>cd,\n    __metadata: ()=>Qf,\n    __param: ()=>Xf,\n    __read: ()=>Ea,\n    __rest: ()=>Jf,\n    __spread: ()=>id,\n    __spreadArrays: ()=>sd,\n    __values: ()=>Ds\n});\nfunction Wf(i, e) {\n    _s(i, e);\n    function r() {\n        this.constructor = i;\n    }\n    i.prototype = e === null ? Object.create(e) : (r.prototype = e.prototype, new r);\n}\n_c15 = Wf;\nfunction Jf(i, e) {\n    var r = {};\n    for(var t in i)Object.prototype.hasOwnProperty.call(i, t) && e.indexOf(t) < 0 && (r[t] = i[t]);\n    if (i != null && typeof Object.getOwnPropertySymbols == \"function\") for(var s = 0, t = Object.getOwnPropertySymbols(i); s < t.length; s++)e.indexOf(t[s]) < 0 && Object.prototype.propertyIsEnumerable.call(i, t[s]) && (r[t[s]] = i[t[s]]);\n    return r;\n}\n_c16 = Jf;\nfunction Yf(i, e, r, t) {\n    var s = arguments.length, n = s < 3 ? e : t === null ? t = Object.getOwnPropertyDescriptor(e, r) : t, o;\n    if (typeof Reflect == \"object\" && typeof Reflect.decorate == \"function\") n = Reflect.decorate(i, e, r, t);\n    else for(var a = i.length - 1; a >= 0; a--)(o = i[a]) && (n = (s < 3 ? o(n) : s > 3 ? o(e, r, n) : o(e, r)) || n);\n    return s > 3 && n && Object.defineProperty(e, r, n), n;\n}\n_c17 = Yf;\nfunction Xf(i, e) {\n    return function(r, t) {\n        e(r, t, i);\n    };\n}\n_c18 = Xf;\nfunction Qf(i, e) {\n    if (typeof Reflect == \"object\" && typeof Reflect.metadata == \"function\") return Reflect.metadata(i, e);\n}\n_c19 = Qf;\nfunction Zf(i, e, r, t) {\n    function s(n) {\n        return n instanceof r ? n : new r(function(o) {\n            o(n);\n        });\n    }\n    return new (r || (r = Promise))(function(n, o) {\n        function a(h) {\n            try {\n                u(t.next(h));\n            } catch (l) {\n                o(l);\n            }\n        }\n        function c(h) {\n            try {\n                u(t.throw(h));\n            } catch (l) {\n                o(l);\n            }\n        }\n        function u(h) {\n            h.done ? n(h.value) : s(h.value).then(a, c);\n        }\n        u((t = t.apply(i, e || [])).next());\n    });\n}\n_c20 = Zf;\nfunction ed(i, e) {\n    var r = {\n        label: 0,\n        sent: function() {\n            if (n[0] & 1) throw n[1];\n            return n[1];\n        },\n        trys: [],\n        ops: []\n    }, t, s, n, o;\n    return o = {\n        next: a(0),\n        throw: a(1),\n        return: a(2)\n    }, typeof Symbol == \"function\" && (o[Symbol.iterator] = function() {\n        return this;\n    }), o;\n    function a(u) {\n        return function(h) {\n            return c([\n                u,\n                h\n            ]);\n        };\n    }\n    function c(u) {\n        if (t) throw new TypeError(\"Generator is already executing.\");\n        for(; r;)try {\n            if (t = 1, s && (n = u[0] & 2 ? s.return : u[0] ? s.throw || ((n = s.return) && n.call(s), 0) : s.next) && !(n = n.call(s, u[1])).done) return n;\n            switch(s = 0, n && (u = [\n                u[0] & 2,\n                n.value\n            ]), u[0]){\n                case 0:\n                case 1:\n                    n = u;\n                    break;\n                case 4:\n                    return r.label++, {\n                        value: u[1],\n                        done: !1\n                    };\n                case 5:\n                    r.label++, s = u[1], u = [\n                        0\n                    ];\n                    continue;\n                case 7:\n                    u = r.ops.pop(), r.trys.pop();\n                    continue;\n                default:\n                    if (n = r.trys, !(n = n.length > 0 && n[n.length - 1]) && (u[0] === 6 || u[0] === 2)) {\n                        r = 0;\n                        continue;\n                    }\n                    if (u[0] === 3 && (!n || u[1] > n[0] && u[1] < n[3])) {\n                        r.label = u[1];\n                        break;\n                    }\n                    if (u[0] === 6 && r.label < n[1]) {\n                        r.label = n[1], n = u;\n                        break;\n                    }\n                    if (n && r.label < n[2]) {\n                        r.label = n[2], r.ops.push(u);\n                        break;\n                    }\n                    n[2] && r.ops.pop(), r.trys.pop();\n                    continue;\n            }\n            u = e.call(i, r);\n        } catch (h) {\n            u = [\n                6,\n                h\n            ], s = 0;\n        } finally{\n            t = n = 0;\n        }\n        if (u[0] & 5) throw u[1];\n        return {\n            value: u[0] ? u[1] : void 0,\n            done: !0\n        };\n    }\n}\nfunction td(i, e, r, t) {\n    t === void 0 && (t = r), i[t] = e[r];\n}\nfunction rd(i, e) {\n    for(var r in i)r !== \"default\" && !e.hasOwnProperty(r) && (e[r] = i[r]);\n}\nfunction Ds(i) {\n    var e = typeof Symbol == \"function\" && Symbol.iterator, r = e && i[e], t = 0;\n    if (r) return r.call(i);\n    if (i && typeof i.length == \"number\") return {\n        next: function() {\n            return i && t >= i.length && (i = void 0), {\n                value: i && i[t++],\n                done: !i\n            };\n        }\n    };\n    throw new TypeError(e ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\n_c21 = Ds;\nfunction Ea(i, e) {\n    var r = typeof Symbol == \"function\" && i[Symbol.iterator];\n    if (!r) return i;\n    var t = r.call(i), s, n = [], o;\n    try {\n        for(; (e === void 0 || e-- > 0) && !(s = t.next()).done;)n.push(s.value);\n    } catch (a) {\n        o = {\n            error: a\n        };\n    } finally{\n        try {\n            s && !s.done && (r = t.return) && r.call(t);\n        } finally{\n            if (o) throw o.error;\n        }\n    }\n    return n;\n}\n_c22 = Ea;\nfunction id() {\n    for(var i = [], e = 0; e < arguments.length; e++)i = i.concat(Ea(arguments[e]));\n    return i;\n}\nfunction sd() {\n    for(var i = 0, e = 0, r = arguments.length; e < r; e++)i += arguments[e].length;\n    for(var t = Array(i), s = 0, e = 0; e < r; e++)for(var n = arguments[e], o = 0, a = n.length; o < a; o++, s++)t[s] = n[o];\n    return t;\n}\nfunction Rr(i) {\n    return this instanceof Rr ? (this.v = i, this) : new Rr(i);\n}\n_c23 = Rr;\nfunction nd(i, e, r) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var t = r.apply(i, e || []), s, n = [];\n    return s = {}, o(\"next\"), o(\"throw\"), o(\"return\"), s[Symbol.asyncIterator] = function() {\n        return this;\n    }, s;\n    function o(p) {\n        t[p] && (s[p] = function(d) {\n            return new Promise(function(g, w) {\n                n.push([\n                    p,\n                    d,\n                    g,\n                    w\n                ]) > 1 || a(p, d);\n            });\n        });\n    }\n    function a(p, d) {\n        try {\n            c(t[p](d));\n        } catch (g) {\n            l(n[0][3], g);\n        }\n    }\n    function c(p) {\n        p.value instanceof Rr ? Promise.resolve(p.value.v).then(u, h) : l(n[0][2], p);\n    }\n    function u(p) {\n        a(\"next\", p);\n    }\n    function h(p) {\n        a(\"throw\", p);\n    }\n    function l(p, d) {\n        p(d), n.shift(), n.length && a(n[0][0], n[0][1]);\n    }\n}\nfunction od(i) {\n    var e, r;\n    return e = {}, t(\"next\"), t(\"throw\", function(s) {\n        throw s;\n    }), t(\"return\"), e[Symbol.iterator] = function() {\n        return this;\n    }, e;\n    function t(s, n) {\n        e[s] = i[s] ? function(o) {\n            return (r = !r) ? {\n                value: Rr(i[s](o)),\n                done: s === \"return\"\n            } : n ? n(o) : o;\n        } : n;\n    }\n}\nfunction ad(i) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var e = i[Symbol.asyncIterator], r;\n    return e ? e.call(i) : (i = typeof Ds == \"function\" ? Ds(i) : i[Symbol.iterator](), r = {}, t(\"next\"), t(\"throw\"), t(\"return\"), r[Symbol.asyncIterator] = function() {\n        return this;\n    }, r);\n    function t(n) {\n        r[n] = i[n] && function(o) {\n            return new Promise(function(a, c) {\n                o = i[n](o), s(a, c, o.done, o.value);\n            });\n        };\n    }\n    function s(n, o, a, c) {\n        Promise.resolve(c).then(function(u) {\n            n({\n                value: u,\n                done: a\n            });\n        }, o);\n    }\n}\nfunction cd(i, e) {\n    return Object.defineProperty ? Object.defineProperty(i, \"raw\", {\n        value: e\n    }) : i.raw = e, i;\n}\nfunction ud(i) {\n    if (i && i.__esModule) return i;\n    var e = {};\n    if (i != null) for(var r in i)Object.hasOwnProperty.call(i, r) && (e[r] = i[r]);\n    return e.default = i, e;\n}\nfunction hd(i) {\n    return i && i.__esModule ? i : {\n        default: i\n    };\n}\nfunction ld(i, e) {\n    if (!e.has(i)) throw new TypeError(\"attempted to get private field on non-instance\");\n    return e.get(i);\n}\nfunction fd(i, e, r) {\n    if (!e.has(i)) throw new TypeError(\"attempted to set private field on non-instance\");\n    return e.set(i, r), r;\n}\nvar _s, xs, Tr = (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.f)(()=>{\n    \"use strict\";\n    _s = function(i, e) {\n        return _s = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(r, t) {\n            r.__proto__ = t;\n        } || function(r, t) {\n            for(var s in t)t.hasOwnProperty(s) && (r[s] = t[s]);\n        }, _s(i, e);\n    };\n    xs = function() {\n        return xs = Object.assign || function(e) {\n            for(var r, t = 1, s = arguments.length; t < s; t++){\n                r = arguments[t];\n                for(var n in r)Object.prototype.hasOwnProperty.call(r, n) && (e[n] = r[n]);\n            }\n            return e;\n        }, xs.apply(this, arguments);\n    };\n});\nvar va = (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.g)((fi)=>{\n    \"use strict\";\n    Object.defineProperty(fi, \"__esModule\", {\n        value: !0\n    });\n    fi.delay = void 0;\n    function dd(i) {\n        return new Promise((e)=>{\n            setTimeout(()=>{\n                e(!0);\n            }, i);\n        });\n    }\n    fi.delay = dd;\n});\nvar _a = (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.g)((Ht)=>{\n    \"use strict\";\n    Object.defineProperty(Ht, \"__esModule\", {\n        value: !0\n    });\n    Ht.ONE_THOUSAND = Ht.ONE_HUNDRED = void 0;\n    Ht.ONE_HUNDRED = 100;\n    Ht.ONE_THOUSAND = 1e3;\n});\nvar xa = (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.g)((A)=>{\n    \"use strict\";\n    Object.defineProperty(A, \"__esModule\", {\n        value: !0\n    });\n    A.ONE_YEAR = A.FOUR_WEEKS = A.THREE_WEEKS = A.TWO_WEEKS = A.ONE_WEEK = A.THIRTY_DAYS = A.SEVEN_DAYS = A.FIVE_DAYS = A.THREE_DAYS = A.ONE_DAY = A.TWENTY_FOUR_HOURS = A.TWELVE_HOURS = A.SIX_HOURS = A.THREE_HOURS = A.ONE_HOUR = A.SIXTY_MINUTES = A.THIRTY_MINUTES = A.TEN_MINUTES = A.FIVE_MINUTES = A.ONE_MINUTE = A.SIXTY_SECONDS = A.THIRTY_SECONDS = A.TEN_SECONDS = A.FIVE_SECONDS = A.ONE_SECOND = void 0;\n    A.ONE_SECOND = 1;\n    A.FIVE_SECONDS = 5;\n    A.TEN_SECONDS = 10;\n    A.THIRTY_SECONDS = 30;\n    A.SIXTY_SECONDS = 60;\n    A.ONE_MINUTE = A.SIXTY_SECONDS;\n    A.FIVE_MINUTES = A.ONE_MINUTE * 5;\n    A.TEN_MINUTES = A.ONE_MINUTE * 10;\n    A.THIRTY_MINUTES = A.ONE_MINUTE * 30;\n    A.SIXTY_MINUTES = A.ONE_MINUTE * 60;\n    A.ONE_HOUR = A.SIXTY_MINUTES;\n    A.THREE_HOURS = A.ONE_HOUR * 3;\n    A.SIX_HOURS = A.ONE_HOUR * 6;\n    A.TWELVE_HOURS = A.ONE_HOUR * 12;\n    A.TWENTY_FOUR_HOURS = A.ONE_HOUR * 24;\n    A.ONE_DAY = A.TWENTY_FOUR_HOURS;\n    A.THREE_DAYS = A.ONE_DAY * 3;\n    A.FIVE_DAYS = A.ONE_DAY * 5;\n    A.SEVEN_DAYS = A.ONE_DAY * 7;\n    A.THIRTY_DAYS = A.ONE_DAY * 30;\n    A.ONE_WEEK = A.SEVEN_DAYS;\n    A.TWO_WEEKS = A.ONE_WEEK * 2;\n    A.THREE_WEEKS = A.ONE_WEEK * 3;\n    A.FOUR_WEEKS = A.ONE_WEEK * 4;\n    A.ONE_YEAR = A.ONE_DAY * 365;\n});\nvar Ss = (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(_c24 = (di)=>{\n    \"use strict\";\n    Object.defineProperty(di, \"__esModule\", {\n        value: !0\n    });\n    var Da = (Tr(), (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.k)(Or));\n    Da.__exportStar(_a(), di);\n    Da.__exportStar(xa(), di);\n});\n_c25 = Ss;\nvar Ia = (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(_c26 = (Gt)=>{\n    \"use strict\";\n    Object.defineProperty(Gt, \"__esModule\", {\n        value: !0\n    });\n    Gt.fromMiliseconds = Gt.toMiliseconds = void 0;\n    var Sa = Ss();\n    function pd(i) {\n        return i * Sa.ONE_THOUSAND;\n    }\n    Gt.toMiliseconds = pd;\n    function gd(i) {\n        return Math.floor(i / Sa.ONE_THOUSAND);\n    }\n    Gt.fromMiliseconds = gd;\n});\n_c27 = Ia;\nvar Oa = (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(_c28 = (pi)=>{\n    \"use strict\";\n    Object.defineProperty(pi, \"__esModule\", {\n        value: !0\n    });\n    var Ra = (Tr(), (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.k)(Or));\n    Ra.__exportStar(va(), pi);\n    Ra.__exportStar(Ia(), pi);\n});\n_c29 = Oa;\nvar Ta = (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(_c30 = (Nr)=>{\n    \"use strict\";\n    Object.defineProperty(Nr, \"__esModule\", {\n        value: !0\n    });\n    Nr.Watch = void 0;\n    var gi = class {\n        start(e) {\n            if (this.timestamps.has(e)) throw new Error(\"Watch already started for label: \".concat(e));\n            this.timestamps.set(e, {\n                started: Date.now()\n            });\n        }\n        stop(e) {\n            let r = this.get(e);\n            if (typeof r.elapsed != \"undefined\") throw new Error(\"Watch already stopped for label: \".concat(e));\n            let t = Date.now() - r.started;\n            this.timestamps.set(e, {\n                started: r.started,\n                elapsed: t\n            });\n        }\n        get(e) {\n            let r = this.timestamps.get(e);\n            if (typeof r == \"undefined\") throw new Error(\"No timestamp found for label: \".concat(e));\n            return r;\n        }\n        elapsed(e) {\n            let r = this.get(e);\n            return r.elapsed || Date.now() - r.started;\n        }\n        constructor(){\n            this.timestamps = new Map;\n        }\n    };\n    Nr.Watch = gi;\n    Nr.default = gi;\n});\n_c31 = Ta;\nvar Na = (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(_c32 = (yi)=>{\n    \"use strict\";\n    Object.defineProperty(yi, \"__esModule\", {\n        value: !0\n    });\n    yi.IWatch = void 0;\n    var Is = class {\n    };\n    yi.IWatch = Is;\n});\n_c33 = Na;\nvar Pa = (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(_c34 = (Rs)=>{\n    \"use strict\";\n    Object.defineProperty(Rs, \"__esModule\", {\n        value: !0\n    });\n    var yd = (Tr(), (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.k)(Or));\n    yd.__exportStar(Na(), Rs);\n});\n_c35 = Pa;\nvar Tt = (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(_c36 = (Wt)=>{\n    \"use strict\";\n    Object.defineProperty(Wt, \"__esModule\", {\n        value: !0\n    });\n    var mi = (Tr(), (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.k)(Or));\n    mi.__exportStar(Oa(), Wt);\n    mi.__exportStar(Ta(), Wt);\n    mi.__exportStar(Pa(), Wt);\n    mi.__exportStar(Ss(), Wt);\n});\n_c37 = Tt;\nvar Os, Ca = (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.f)(()=>{\n    \"use strict\";\n    Os = class {\n    };\n});\nvar Aa = {};\n(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.h)(Aa, {\n    IEvents: ()=>Os\n});\nvar La = (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.f)(_c38 = ()=>{\n    \"use strict\";\n    Ca();\n});\n_c39 = La;\nvar Fa = (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(_c40 = (wi)=>{\n    \"use strict\";\n    Object.defineProperty(wi, \"__esModule\", {\n        value: !0\n    });\n    wi.IHeartBeat = void 0;\n    var md = (La(), (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.k)(Aa)), Ts = class extends md.IEvents {\n        constructor(e){\n            super();\n        }\n    };\n    wi.IHeartBeat = Ts;\n});\n_c41 = Fa;\nvar Ps = (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(_c42 = (Ns)=>{\n    \"use strict\";\n    Object.defineProperty(Ns, \"__esModule\", {\n        value: !0\n    });\n    var wd = (Ir(), (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.k)(Sr));\n    wd.__exportStar(Fa(), Ns);\n});\n_c43 = Ps;\nvar Ua = (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(_c44 = (Jt)=>{\n    \"use strict\";\n    Object.defineProperty(Jt, \"__esModule\", {\n        value: !0\n    });\n    Jt.HEARTBEAT_EVENTS = Jt.HEARTBEAT_INTERVAL = void 0;\n    var bd = Tt();\n    Jt.HEARTBEAT_INTERVAL = bd.FIVE_SECONDS;\n    Jt.HEARTBEAT_EVENTS = {\n        pulse: \"heartbeat_pulse\"\n    };\n});\n_c45 = Ua;\nvar As = (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(_c46 = (Cs)=>{\n    \"use strict\";\n    Object.defineProperty(Cs, \"__esModule\", {\n        value: !0\n    });\n    var Ed = (Ir(), (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.k)(Sr));\n    Ed.__exportStar(Ua(), Cs);\n});\n_c47 = As;\nvar Ma = (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(_c48 = (bi)=>{\n    \"use strict\";\n    Object.defineProperty(bi, \"__esModule\", {\n        value: !0\n    });\n    bi.HeartBeat = void 0;\n    var Ls = (Ir(), (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.k)(Sr)), vd = kt(), _d = Tt(), xd = Ps(), Fs = As(), Us = class i extends xd.IHeartBeat {\n        static init(e) {\n            return Ls.__awaiter(this, void 0, void 0, function*() {\n                let r = new i(e);\n                return yield r.init(), r;\n            });\n        }\n        init() {\n            return Ls.__awaiter(this, void 0, void 0, function*() {\n                yield this.initialize();\n            });\n        }\n        stop() {\n            clearInterval(this.intervalRef);\n        }\n        on(e, r) {\n            this.events.on(e, r);\n        }\n        once(e, r) {\n            this.events.once(e, r);\n        }\n        off(e, r) {\n            this.events.off(e, r);\n        }\n        removeListener(e, r) {\n            this.events.removeListener(e, r);\n        }\n        initialize() {\n            return Ls.__awaiter(this, void 0, void 0, function*() {\n                this.intervalRef = setInterval(()=>this.pulse(), _d.toMiliseconds(this.interval));\n            });\n        }\n        pulse() {\n            this.events.emit(Fs.HEARTBEAT_EVENTS.pulse);\n        }\n        constructor(e){\n            super(e), this.events = new vd.EventEmitter, this.interval = Fs.HEARTBEAT_INTERVAL, this.interval = (e == null ? void 0 : e.interval) || Fs.HEARTBEAT_INTERVAL;\n        }\n    };\n    bi.HeartBeat = Us;\n});\n_c49 = Ma;\nvar qa = (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.g)((Pr)=>{\n    \"use strict\";\n    Object.defineProperty(Pr, \"__esModule\", {\n        value: !0\n    });\n    var Ms = (Ir(), (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.k)(Sr));\n    Ms.__exportStar(Ma(), Pr);\n    Ms.__exportStar(Ps(), Pr);\n    Ms.__exportStar(As(), Pr);\n});\nvar Ba = (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(_c50 = ($1, ja)=>{\n    \"use strict\";\n    function Dd(i) {\n        try {\n            return JSON.stringify(i);\n        } catch (e) {\n            return '\"[Circular]\"';\n        }\n    }\n    ja.exports = Sd;\n    function Sd(i, e, r) {\n        var t = r && r.stringify || Dd, s = 1;\n        if (typeof i == \"object\" && i !== null) {\n            var n = e.length + s;\n            if (n === 1) return i;\n            var o = new Array(n);\n            o[0] = t(i);\n            for(var a = 1; a < n; a++)o[a] = t(e[a]);\n            return o.join(\" \");\n        }\n        if (typeof i != \"string\") return i;\n        var c = e.length;\n        if (c === 0) return i;\n        for(var u = \"\", h = 1 - s, l = -1, p = i && i.length || 0, d = 0; d < p;){\n            if (i.charCodeAt(d) === 37 && d + 1 < p) {\n                switch(l = l > -1 ? l : 0, i.charCodeAt(d + 1)){\n                    case 100:\n                    case 102:\n                        if (h >= c || e[h] == null) break;\n                        l < d && (u += i.slice(l, d)), u += Number(e[h]), l = d + 2, d++;\n                        break;\n                    case 105:\n                        if (h >= c || e[h] == null) break;\n                        l < d && (u += i.slice(l, d)), u += Math.floor(Number(e[h])), l = d + 2, d++;\n                        break;\n                    case 79:\n                    case 111:\n                    case 106:\n                        if (h >= c || e[h] === void 0) break;\n                        l < d && (u += i.slice(l, d));\n                        var g = typeof e[h];\n                        if (g === \"string\") {\n                            u += \"'\" + e[h] + \"'\", l = d + 2, d++;\n                            break;\n                        }\n                        if (g === \"function\") {\n                            u += e[h].name || \"<anonymous>\", l = d + 2, d++;\n                            break;\n                        }\n                        u += t(e[h]), l = d + 2, d++;\n                        break;\n                    case 115:\n                        if (h >= c) break;\n                        l < d && (u += i.slice(l, d)), u += String(e[h]), l = d + 2, d++;\n                        break;\n                    case 37:\n                        l < d && (u += i.slice(l, d)), u += \"%\", l = d + 2, d++, h--;\n                        break;\n                }\n                ++h;\n            }\n            ++d;\n        }\n        return l === -1 ? i : (l < p && (u += i.slice(l)), u);\n    }\n});\n_c51 = Ba;\nvar Bs = (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(_c52 = (K1, Ka)=>{\n    \"use strict\";\n    var Va = Ba();\n    Ka.exports = We;\n    var Cr = Fd().console || {}, Id = {\n        mapHttpRequest: Ei,\n        mapHttpResponse: Ei,\n        wrapRequestSerializer: qs,\n        wrapResponseSerializer: qs,\n        wrapErrorSerializer: qs,\n        req: Ei,\n        res: Ei,\n        err: Pd\n    };\n    function Rd(i, e) {\n        return Array.isArray(i) ? i.filter(function(t) {\n            return t !== \"!stdSerializers.err\";\n        }) : i === !0 ? Object.keys(e) : !1;\n    }\n    function We(i) {\n        i = i || {}, i.browser = i.browser || {};\n        let e = i.browser.transmit;\n        if (e && typeof e.send != \"function\") throw Error(\"pino: transmit option must have a send function\");\n        let r = i.browser.write || Cr;\n        i.browser.write && (i.browser.asObject = !0);\n        let t = i.serializers || {}, s = Rd(i.browser.serialize, t), n = i.browser.serialize;\n        Array.isArray(i.browser.serialize) && i.browser.serialize.indexOf(\"!stdSerializers.err\") > -1 && (n = !1);\n        let o = [\n            \"error\",\n            \"fatal\",\n            \"warn\",\n            \"info\",\n            \"debug\",\n            \"trace\"\n        ];\n        typeof r == \"function\" && (r.error = r.fatal = r.warn = r.info = r.debug = r.trace = r), i.enabled === !1 && (i.level = \"silent\");\n        let a = i.level || \"info\", c = Object.create(r);\n        c.log || (c.log = Ar), Object.defineProperty(c, \"levelVal\", {\n            get: h\n        }), Object.defineProperty(c, \"level\", {\n            get: l,\n            set: p\n        });\n        let u = {\n            transmit: e,\n            serialize: s,\n            asObject: i.browser.asObject,\n            levels: o,\n            timestamp: Cd(i)\n        };\n        c.levels = We.levels, c.level = a, c.setMaxListeners = c.getMaxListeners = c.emit = c.addListener = c.on = c.prependListener = c.once = c.prependOnceListener = c.removeListener = c.removeAllListeners = c.listeners = c.listenerCount = c.eventNames = c.write = c.flush = Ar, c.serializers = t, c._serialize = s, c._stdErrSerialize = n, c.child = d, e && (c._logEvent = js());\n        function h() {\n            return this.level === \"silent\" ? 1 / 0 : this.levels.values[this.level];\n        }\n        function l() {\n            return this._level;\n        }\n        function p(g) {\n            if (g !== \"silent\" && !this.levels.values[g]) throw Error(\"unknown level \" + g);\n            this._level = g, Yt(u, c, \"error\", \"log\"), Yt(u, c, \"fatal\", \"error\"), Yt(u, c, \"warn\", \"error\"), Yt(u, c, \"info\", \"log\"), Yt(u, c, \"debug\", \"log\"), Yt(u, c, \"trace\", \"log\");\n        }\n        function d(g, w) {\n            if (!g) throw new Error(\"missing bindings for child Pino\");\n            w = w || {}, s && g.serializers && (w.serializers = g.serializers);\n            let b = w.serializers;\n            if (s && b) {\n                var E = Object.assign({}, t, b), I = i.browser.serialize === !0 ? Object.keys(E) : s;\n                delete g.serializers, vi([\n                    g\n                ], I, E, this._stdErrSerialize);\n            }\n            function _(v) {\n                this._childLevel = (v._childLevel | 0) + 1, this.error = Xt(v, g, \"error\"), this.fatal = Xt(v, g, \"fatal\"), this.warn = Xt(v, g, \"warn\"), this.info = Xt(v, g, \"info\"), this.debug = Xt(v, g, \"debug\"), this.trace = Xt(v, g, \"trace\"), E && (this.serializers = E, this._serialize = I), e && (this._logEvent = js([].concat(v._logEvent.bindings, g)));\n            }\n            return _.prototype = this, new _(this);\n        }\n        return c;\n    }\n    We.levels = {\n        values: {\n            fatal: 60,\n            error: 50,\n            warn: 40,\n            info: 30,\n            debug: 20,\n            trace: 10\n        },\n        labels: {\n            10: \"trace\",\n            20: \"debug\",\n            30: \"info\",\n            40: \"warn\",\n            50: \"error\",\n            60: \"fatal\"\n        }\n    };\n    We.stdSerializers = Id;\n    We.stdTimeFunctions = Object.assign({}, {\n        nullTime: za,\n        epochTime: $a,\n        unixTime: Ad,\n        isoTime: Ld\n    });\n    function Yt(i, e, r, t) {\n        let s = Object.getPrototypeOf(e);\n        e[r] = e.levelVal > e.levels.values[r] ? Ar : s[r] ? s[r] : Cr[r] || Cr[t] || Ar, Od(i, e, r);\n    }\n    function Od(i, e, r) {\n        !i.transmit && e[r] === Ar || (e[r] = function(t) {\n            return function() {\n                let n = i.timestamp(), o = new Array(arguments.length), a = Object.getPrototypeOf && Object.getPrototypeOf(this) === Cr ? Cr : this;\n                for(var c = 0; c < o.length; c++)o[c] = arguments[c];\n                if (i.serialize && !i.asObject && vi(o, this._serialize, this.serializers, this._stdErrSerialize), i.asObject ? t.call(a, Td(this, r, o, n)) : t.apply(a, o), i.transmit) {\n                    let u = i.transmit.level || e.level, h = We.levels.values[u], l = We.levels.values[r];\n                    if (l < h) return;\n                    Nd(this, {\n                        ts: n,\n                        methodLevel: r,\n                        methodValue: l,\n                        transmitLevel: u,\n                        transmitValue: We.levels.values[i.transmit.level || e.level],\n                        send: i.transmit.send,\n                        val: e.levelVal\n                    }, o);\n                }\n            };\n        }(e[r]));\n    }\n    function Td(i, e, r, t) {\n        i._serialize && vi(r, i._serialize, i.serializers, i._stdErrSerialize);\n        let s = r.slice(), n = s[0], o = {};\n        t && (o.time = t), o.level = We.levels.values[e];\n        let a = (i._childLevel | 0) + 1;\n        if (a < 1 && (a = 1), n !== null && typeof n == \"object\") {\n            for(; a-- && typeof s[0] == \"object\";)Object.assign(o, s.shift());\n            n = s.length ? Va(s.shift(), s) : void 0;\n        } else typeof n == \"string\" && (n = Va(s.shift(), s));\n        return n !== void 0 && (o.msg = n), o;\n    }\n    function vi(i, e, r, t) {\n        for(let s in i)if (t && i[s] instanceof Error) i[s] = We.stdSerializers.err(i[s]);\n        else if (typeof i[s] == \"object\" && !Array.isArray(i[s])) for(let n in i[s])e && e.indexOf(n) > -1 && n in r && (i[s][n] = r[n](i[s][n]));\n    }\n    function Xt(i, e, r) {\n        return function() {\n            let t = new Array(1 + arguments.length);\n            t[0] = e;\n            for(var s = 1; s < t.length; s++)t[s] = arguments[s - 1];\n            return i[r].apply(this, t);\n        };\n    }\n    function Nd(i, e, r) {\n        let t = e.send, s = e.ts, n = e.methodLevel, o = e.methodValue, a = e.val, c = i._logEvent.bindings;\n        vi(r, i._serialize || Object.keys(i.serializers), i.serializers, i._stdErrSerialize === void 0 ? !0 : i._stdErrSerialize), i._logEvent.ts = s, i._logEvent.messages = r.filter(function(u) {\n            return c.indexOf(u) === -1;\n        }), i._logEvent.level.label = n, i._logEvent.level.value = o, t(n, i._logEvent, a), i._logEvent = js(c);\n    }\n    function js(i) {\n        return {\n            ts: 0,\n            messages: [],\n            bindings: i || [],\n            level: {\n                label: \"\",\n                value: 0\n            }\n        };\n    }\n    function Pd(i) {\n        let e = {\n            type: i.constructor.name,\n            msg: i.message,\n            stack: i.stack\n        };\n        for(let r in i)e[r] === void 0 && (e[r] = i[r]);\n        return e;\n    }\n    function Cd(i) {\n        return typeof i.timestamp == \"function\" ? i.timestamp : i.timestamp === !1 ? za : $a;\n    }\n    function Ei() {\n        return {};\n    }\n    function qs(i) {\n        return i;\n    }\n    function Ar() {}\n    function za() {\n        return !1;\n    }\n    function $a() {\n        return Date.now();\n    }\n    function Ad() {\n        return Math.round(Date.now() / 1e3);\n    }\n    function Ld() {\n        return new Date(Date.now()).toISOString();\n    }\n    function Fd() {\n        function i(e) {\n            return typeof e != \"undefined\" && e;\n        }\n        try {\n            return typeof globalThis != \"undefined\" || Object.defineProperty(Object.prototype, \"globalThis\", {\n                get: function() {\n                    return delete Object.prototype.globalThis, this.globalThis = this;\n                },\n                configurable: !0\n            }), globalThis;\n        } catch (e) {\n            return i(self) || i(window) || i(this) || {};\n        }\n    }\n});\n_c53 = Bs;\nvar Ya = (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(_c54 = (_i)=>{\n    \"use strict\";\n    Object.defineProperty(_i, \"__esModule\", {\n        value: !0\n    });\n    _i.BrowserRandomSource = void 0;\n    var Ja = 65536, zs = class {\n        randomBytes(e) {\n            if (!this.isAvailable || !this._crypto) throw new Error(\"Browser random byte generator is not available.\");\n            let r = new Uint8Array(e);\n            for(let t = 0; t < r.length; t += Ja)this._crypto.getRandomValues(r.subarray(t, t + Math.min(r.length - t, Ja)));\n            return r;\n        }\n        constructor(){\n            this.isAvailable = !1, this.isInstantiated = !1;\n            let e = typeof self != \"undefined\" ? self.crypto || self.msCrypto : null;\n            e && e.getRandomValues !== void 0 && (this._crypto = e, this.isAvailable = !0, this.isInstantiated = !0);\n        }\n    };\n    _i.BrowserRandomSource = zs;\n});\n_c55 = Ya;\nvar $e = (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(($s)=>{\n    \"use strict\";\n    Object.defineProperty($s, \"__esModule\", {\n        value: !0\n    });\n    function Gd(i) {\n        for(var e = 0; e < i.length; e++)i[e] = 0;\n        return i;\n    }\n    $s.wipe = Gd;\n});\nvar Xa = (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(_c56 = ()=>{\n    \"use strict\";\n});\n_c57 = Xa;\nvar Qa = (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(_c58 = (xi)=>{\n    \"use strict\";\n    Object.defineProperty(xi, \"__esModule\", {\n        value: !0\n    });\n    xi.NodeRandomSource = void 0;\n    var Wd = $e(), Ks = class {\n        randomBytes(e) {\n            if (!this.isAvailable || !this._crypto) throw new Error(\"Node.js random byte generator is not available.\");\n            let r = this._crypto.randomBytes(e);\n            if (r.length !== e) throw new Error(\"NodeRandomSource: got fewer bytes than requested\");\n            let t = new Uint8Array(e);\n            for(let s = 0; s < t.length; s++)t[s] = r[s];\n            return (0, Wd.wipe)(r), t;\n        }\n        constructor(){\n            if (this.isAvailable = !1, this.isInstantiated = !1, typeof _chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.d != \"undefined\") {\n                let e = Xa();\n                e && e.randomBytes && (this._crypto = e, this.isAvailable = !0, this.isInstantiated = !0);\n            }\n        }\n    };\n    xi.NodeRandomSource = Ks;\n});\n_c59 = Qa;\nvar Za = (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(_c60 = (Di)=>{\n    \"use strict\";\n    Object.defineProperty(Di, \"__esModule\", {\n        value: !0\n    });\n    Di.SystemRandomSource = void 0;\n    var Jd = Ya(), Yd = Qa(), ks = class {\n        randomBytes(e) {\n            if (!this.isAvailable) throw new Error(\"System random byte generator is not available.\");\n            return this._source.randomBytes(e);\n        }\n        constructor(){\n            if (this.isAvailable = !1, this.name = \"\", this._source = new Jd.BrowserRandomSource, this._source.isAvailable) {\n                this.isAvailable = !0, this.name = \"Browser\";\n                return;\n            }\n            if (this._source = new Yd.NodeRandomSource, this._source.isAvailable) {\n                this.isAvailable = !0, this.name = \"Node\";\n                return;\n            }\n        }\n    };\n    Di.SystemRandomSource = ks;\n});\n_c61 = Za;\nvar ec = (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.g)((Be)=>{\n    \"use strict\";\n    Object.defineProperty(Be, \"__esModule\", {\n        value: !0\n    });\n    function Xd(i, e) {\n        var r = i >>> 16 & 65535, t = i & 65535, s = e >>> 16 & 65535, n = e & 65535;\n        return t * n + (r * n + t * s << 16 >>> 0) | 0;\n    }\n    Be.mul = Math.imul || Xd;\n    function Qd(i, e) {\n        return i + e | 0;\n    }\n    Be.add = Qd;\n    function Zd(i, e) {\n        return i - e | 0;\n    }\n    Be.sub = Zd;\n    function ep(i, e) {\n        return i << e | i >>> 32 - e;\n    }\n    Be.rotl = ep;\n    function tp(i, e) {\n        return i << 32 - e | i >>> e;\n    }\n    Be.rotr = tp;\n    function rp(i) {\n        return typeof i == \"number\" && isFinite(i) && Math.floor(i) === i;\n    }\n    Be.isInteger = Number.isInteger || rp;\n    Be.MAX_SAFE_INTEGER = 9007199254740991;\n    Be.isSafeInteger = function(i) {\n        return Be.isInteger(i) && i >= -Be.MAX_SAFE_INTEGER && i <= Be.MAX_SAFE_INTEGER;\n    };\n});\nvar Zt = (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(_c62 = (Y)=>{\n    \"use strict\";\n    Object.defineProperty(Y, \"__esModule\", {\n        value: !0\n    });\n    var tc = ec();\n    function ip(i, e) {\n        return e === void 0 && (e = 0), (i[e + 0] << 8 | i[e + 1]) << 16 >> 16;\n    }\n    Y.readInt16BE = ip;\n    function sp(i, e) {\n        return e === void 0 && (e = 0), (i[e + 0] << 8 | i[e + 1]) >>> 0;\n    }\n    Y.readUint16BE = sp;\n    function np(i, e) {\n        return e === void 0 && (e = 0), (i[e + 1] << 8 | i[e]) << 16 >> 16;\n    }\n    Y.readInt16LE = np;\n    function op(i, e) {\n        return e === void 0 && (e = 0), (i[e + 1] << 8 | i[e]) >>> 0;\n    }\n    Y.readUint16LE = op;\n    function rc(i, e, r) {\n        return e === void 0 && (e = new Uint8Array(2)), r === void 0 && (r = 0), e[r + 0] = i >>> 8, e[r + 1] = i >>> 0, e;\n    }\n    Y.writeUint16BE = rc;\n    Y.writeInt16BE = rc;\n    function ic(i, e, r) {\n        return e === void 0 && (e = new Uint8Array(2)), r === void 0 && (r = 0), e[r + 0] = i >>> 0, e[r + 1] = i >>> 8, e;\n    }\n    Y.writeUint16LE = ic;\n    Y.writeInt16LE = ic;\n    function Hs(i, e) {\n        return e === void 0 && (e = 0), i[e] << 24 | i[e + 1] << 16 | i[e + 2] << 8 | i[e + 3];\n    }\n    Y.readInt32BE = Hs;\n    function Gs(i, e) {\n        return e === void 0 && (e = 0), (i[e] << 24 | i[e + 1] << 16 | i[e + 2] << 8 | i[e + 3]) >>> 0;\n    }\n    Y.readUint32BE = Gs;\n    function Ws(i, e) {\n        return e === void 0 && (e = 0), i[e + 3] << 24 | i[e + 2] << 16 | i[e + 1] << 8 | i[e];\n    }\n    Y.readInt32LE = Ws;\n    function Js(i, e) {\n        return e === void 0 && (e = 0), (i[e + 3] << 24 | i[e + 2] << 16 | i[e + 1] << 8 | i[e]) >>> 0;\n    }\n    Y.readUint32LE = Js;\n    function Si(i, e, r) {\n        return e === void 0 && (e = new Uint8Array(4)), r === void 0 && (r = 0), e[r + 0] = i >>> 24, e[r + 1] = i >>> 16, e[r + 2] = i >>> 8, e[r + 3] = i >>> 0, e;\n    }\n    Y.writeUint32BE = Si;\n    Y.writeInt32BE = Si;\n    function Ii(i, e, r) {\n        return e === void 0 && (e = new Uint8Array(4)), r === void 0 && (r = 0), e[r + 0] = i >>> 0, e[r + 1] = i >>> 8, e[r + 2] = i >>> 16, e[r + 3] = i >>> 24, e;\n    }\n    Y.writeUint32LE = Ii;\n    Y.writeInt32LE = Ii;\n    function ap(i, e) {\n        e === void 0 && (e = 0);\n        var r = Hs(i, e), t = Hs(i, e + 4);\n        return r * 4294967296 + t - (t >> 31) * 4294967296;\n    }\n    Y.readInt64BE = ap;\n    function cp(i, e) {\n        e === void 0 && (e = 0);\n        var r = Gs(i, e), t = Gs(i, e + 4);\n        return r * 4294967296 + t;\n    }\n    Y.readUint64BE = cp;\n    function up(i, e) {\n        e === void 0 && (e = 0);\n        var r = Ws(i, e), t = Ws(i, e + 4);\n        return t * 4294967296 + r - (r >> 31) * 4294967296;\n    }\n    Y.readInt64LE = up;\n    function hp(i, e) {\n        e === void 0 && (e = 0);\n        var r = Js(i, e), t = Js(i, e + 4);\n        return t * 4294967296 + r;\n    }\n    Y.readUint64LE = hp;\n    function sc(i, e, r) {\n        return e === void 0 && (e = new Uint8Array(8)), r === void 0 && (r = 0), Si(i / 4294967296 >>> 0, e, r), Si(i >>> 0, e, r + 4), e;\n    }\n    Y.writeUint64BE = sc;\n    Y.writeInt64BE = sc;\n    function nc(i, e, r) {\n        return e === void 0 && (e = new Uint8Array(8)), r === void 0 && (r = 0), Ii(i >>> 0, e, r), Ii(i / 4294967296 >>> 0, e, r + 4), e;\n    }\n    Y.writeUint64LE = nc;\n    Y.writeInt64LE = nc;\n    function lp(i, e, r) {\n        if (r === void 0 && (r = 0), i % 8 !== 0) throw new Error(\"readUintBE supports only bitLengths divisible by 8\");\n        if (i / 8 > e.length - r) throw new Error(\"readUintBE: array is too short for the given bitLength\");\n        for(var t = 0, s = 1, n = i / 8 + r - 1; n >= r; n--)t += e[n] * s, s *= 256;\n        return t;\n    }\n    Y.readUintBE = lp;\n    function fp(i, e, r) {\n        if (r === void 0 && (r = 0), i % 8 !== 0) throw new Error(\"readUintLE supports only bitLengths divisible by 8\");\n        if (i / 8 > e.length - r) throw new Error(\"readUintLE: array is too short for the given bitLength\");\n        for(var t = 0, s = 1, n = r; n < r + i / 8; n++)t += e[n] * s, s *= 256;\n        return t;\n    }\n    Y.readUintLE = fp;\n    function dp(i, e, r, t) {\n        if (r === void 0 && (r = new Uint8Array(i / 8)), t === void 0 && (t = 0), i % 8 !== 0) throw new Error(\"writeUintBE supports only bitLengths divisible by 8\");\n        if (!tc.isSafeInteger(e)) throw new Error(\"writeUintBE value must be an integer\");\n        for(var s = 1, n = i / 8 + t - 1; n >= t; n--)r[n] = e / s & 255, s *= 256;\n        return r;\n    }\n    Y.writeUintBE = dp;\n    function pp(i, e, r, t) {\n        if (r === void 0 && (r = new Uint8Array(i / 8)), t === void 0 && (t = 0), i % 8 !== 0) throw new Error(\"writeUintLE supports only bitLengths divisible by 8\");\n        if (!tc.isSafeInteger(e)) throw new Error(\"writeUintLE value must be an integer\");\n        for(var s = 1, n = t; n < t + i / 8; n++)r[n] = e / s & 255, s *= 256;\n        return r;\n    }\n    Y.writeUintLE = pp;\n    function gp(i, e) {\n        e === void 0 && (e = 0);\n        var r = new DataView(i.buffer, i.byteOffset, i.byteLength);\n        return r.getFloat32(e);\n    }\n    Y.readFloat32BE = gp;\n    function yp(i, e) {\n        e === void 0 && (e = 0);\n        var r = new DataView(i.buffer, i.byteOffset, i.byteLength);\n        return r.getFloat32(e, !0);\n    }\n    Y.readFloat32LE = yp;\n    function mp(i, e) {\n        e === void 0 && (e = 0);\n        var r = new DataView(i.buffer, i.byteOffset, i.byteLength);\n        return r.getFloat64(e);\n    }\n    Y.readFloat64BE = mp;\n    function wp(i, e) {\n        e === void 0 && (e = 0);\n        var r = new DataView(i.buffer, i.byteOffset, i.byteLength);\n        return r.getFloat64(e, !0);\n    }\n    Y.readFloat64LE = wp;\n    function bp(i, e, r) {\n        e === void 0 && (e = new Uint8Array(4)), r === void 0 && (r = 0);\n        var t = new DataView(e.buffer, e.byteOffset, e.byteLength);\n        return t.setFloat32(r, i), e;\n    }\n    Y.writeFloat32BE = bp;\n    function Ep(i, e, r) {\n        e === void 0 && (e = new Uint8Array(4)), r === void 0 && (r = 0);\n        var t = new DataView(e.buffer, e.byteOffset, e.byteLength);\n        return t.setFloat32(r, i, !0), e;\n    }\n    Y.writeFloat32LE = Ep;\n    function vp(i, e, r) {\n        e === void 0 && (e = new Uint8Array(8)), r === void 0 && (r = 0);\n        var t = new DataView(e.buffer, e.byteOffset, e.byteLength);\n        return t.setFloat64(r, i), e;\n    }\n    Y.writeFloat64BE = vp;\n    function _p(i, e, r) {\n        e === void 0 && (e = new Uint8Array(8)), r === void 0 && (r = 0);\n        var t = new DataView(e.buffer, e.byteOffset, e.byteLength);\n        return t.setFloat64(r, i, !0), e;\n    }\n    Y.writeFloat64LE = _p;\n});\n_c63 = Zt;\nvar Ur = (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(_c64 = (Ie)=>{\n    \"use strict\";\n    Object.defineProperty(Ie, \"__esModule\", {\n        value: !0\n    });\n    Ie.randomStringForEntropy = Ie.randomString = Ie.randomUint32 = Ie.randomBytes = Ie.defaultRandomSource = void 0;\n    var xp = Za(), Dp = Zt(), oc = $e();\n    Ie.defaultRandomSource = new xp.SystemRandomSource;\n    function Ys(i) {\n        let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : Ie.defaultRandomSource;\n        return e.randomBytes(i);\n    }\n    Ie.randomBytes = Ys;\n    function Sp() {\n        let i = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : Ie.defaultRandomSource;\n        let e = Ys(4, i), r = (0, Dp.readUint32LE)(e);\n        return (0, oc.wipe)(e), r;\n    }\n    Ie.randomUint32 = Sp;\n    var ac = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\n    function cc(i) {\n        let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : ac, r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : Ie.defaultRandomSource;\n        if (e.length < 2) throw new Error(\"randomString charset is too short\");\n        if (e.length > 256) throw new Error(\"randomString charset is too long\");\n        let t = \"\", s = e.length, n = 256 - 256 % s;\n        for(; i > 0;){\n            let o = Ys(Math.ceil(i * 256 / n), r);\n            for(let a = 0; a < o.length && i > 0; a++){\n                let c = o[a];\n                c < n && (t += e.charAt(c % s), i--);\n            }\n            (0, oc.wipe)(o);\n        }\n        return t;\n    }\n    Ie.randomString = cc;\n    function Ip(i) {\n        let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : ac, r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : Ie.defaultRandomSource;\n        let t = Math.ceil(i / (Math.log(e.length) / Math.LN2));\n        return cc(t, e, r);\n    }\n    Ie.randomStringForEntropy = Ip;\n});\n_c65 = Ur;\nvar lc = (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.g)((rt)=>{\n    \"use strict\";\n    Object.defineProperty(rt, \"__esModule\", {\n        value: !0\n    });\n    var tr = Zt(), er = $e();\n    rt.DIGEST_LENGTH = 64;\n    rt.BLOCK_SIZE = 128;\n    var hc = function() {\n        function i() {\n            this.digestLength = rt.DIGEST_LENGTH, this.blockSize = rt.BLOCK_SIZE, this._stateHi = new Int32Array(8), this._stateLo = new Int32Array(8), this._tempHi = new Int32Array(16), this._tempLo = new Int32Array(16), this._buffer = new Uint8Array(256), this._bufferLength = 0, this._bytesHashed = 0, this._finished = !1, this.reset();\n        }\n        return i.prototype._initState = function() {\n            this._stateHi[0] = 1779033703, this._stateHi[1] = 3144134277, this._stateHi[2] = 1013904242, this._stateHi[3] = 2773480762, this._stateHi[4] = 1359893119, this._stateHi[5] = 2600822924, this._stateHi[6] = 528734635, this._stateHi[7] = 1541459225, this._stateLo[0] = 4089235720, this._stateLo[1] = 2227873595, this._stateLo[2] = 4271175723, this._stateLo[3] = 1595750129, this._stateLo[4] = 2917565137, this._stateLo[5] = 725511199, this._stateLo[6] = 4215389547, this._stateLo[7] = 327033209;\n        }, i.prototype.reset = function() {\n            return this._initState(), this._bufferLength = 0, this._bytesHashed = 0, this._finished = !1, this;\n        }, i.prototype.clean = function() {\n            er.wipe(this._buffer), er.wipe(this._tempHi), er.wipe(this._tempLo), this.reset();\n        }, i.prototype.update = function(e, r) {\n            if (r === void 0 && (r = e.length), this._finished) throw new Error(\"SHA512: can't update because hash was finished.\");\n            var t = 0;\n            if (this._bytesHashed += r, this._bufferLength > 0) {\n                for(; this._bufferLength < rt.BLOCK_SIZE && r > 0;)this._buffer[this._bufferLength++] = e[t++], r--;\n                this._bufferLength === this.blockSize && (Xs(this._tempHi, this._tempLo, this._stateHi, this._stateLo, this._buffer, 0, this.blockSize), this._bufferLength = 0);\n            }\n            for(r >= this.blockSize && (t = Xs(this._tempHi, this._tempLo, this._stateHi, this._stateLo, e, t, r), r %= this.blockSize); r > 0;)this._buffer[this._bufferLength++] = e[t++], r--;\n            return this;\n        }, i.prototype.finish = function(e) {\n            if (!this._finished) {\n                var r = this._bytesHashed, t = this._bufferLength, s = r / 536870912 | 0, n = r << 3, o = r % 128 < 112 ? 128 : 256;\n                this._buffer[t] = 128;\n                for(var a = t + 1; a < o - 8; a++)this._buffer[a] = 0;\n                tr.writeUint32BE(s, this._buffer, o - 8), tr.writeUint32BE(n, this._buffer, o - 4), Xs(this._tempHi, this._tempLo, this._stateHi, this._stateLo, this._buffer, 0, o), this._finished = !0;\n            }\n            for(var a = 0; a < this.digestLength / 8; a++)tr.writeUint32BE(this._stateHi[a], e, a * 8), tr.writeUint32BE(this._stateLo[a], e, a * 8 + 4);\n            return this;\n        }, i.prototype.digest = function() {\n            var e = new Uint8Array(this.digestLength);\n            return this.finish(e), e;\n        }, i.prototype.saveState = function() {\n            if (this._finished) throw new Error(\"SHA256: cannot save finished state\");\n            return {\n                stateHi: new Int32Array(this._stateHi),\n                stateLo: new Int32Array(this._stateLo),\n                buffer: this._bufferLength > 0 ? new Uint8Array(this._buffer) : void 0,\n                bufferLength: this._bufferLength,\n                bytesHashed: this._bytesHashed\n            };\n        }, i.prototype.restoreState = function(e) {\n            return this._stateHi.set(e.stateHi), this._stateLo.set(e.stateLo), this._bufferLength = e.bufferLength, e.buffer && this._buffer.set(e.buffer), this._bytesHashed = e.bytesHashed, this._finished = !1, this;\n        }, i.prototype.cleanSavedState = function(e) {\n            er.wipe(e.stateHi), er.wipe(e.stateLo), e.buffer && er.wipe(e.buffer), e.bufferLength = 0, e.bytesHashed = 0;\n        }, i;\n    }();\n    rt.SHA512 = hc;\n    var uc = new Int32Array([\n        1116352408,\n        3609767458,\n        1899447441,\n        602891725,\n        3049323471,\n        3964484399,\n        3921009573,\n        2173295548,\n        961987163,\n        4081628472,\n        1508970993,\n        3053834265,\n        2453635748,\n        2937671579,\n        2870763221,\n        3664609560,\n        3624381080,\n        2734883394,\n        310598401,\n        1164996542,\n        607225278,\n        1323610764,\n        1426881987,\n        3590304994,\n        1925078388,\n        4068182383,\n        2162078206,\n        991336113,\n        2614888103,\n        633803317,\n        3248222580,\n        3479774868,\n        3835390401,\n        2666613458,\n        4022224774,\n        944711139,\n        264347078,\n        2341262773,\n        604807628,\n        2007800933,\n        770255983,\n        1495990901,\n        1249150122,\n        1856431235,\n        1555081692,\n        3175218132,\n        1996064986,\n        2198950837,\n        2554220882,\n        3999719339,\n        2821834349,\n        766784016,\n        2952996808,\n        2566594879,\n        3210313671,\n        3203337956,\n        3336571891,\n        1034457026,\n        3584528711,\n        2466948901,\n        113926993,\n        3758326383,\n        338241895,\n        168717936,\n        666307205,\n        1188179964,\n        773529912,\n        1546045734,\n        1294757372,\n        1522805485,\n        1396182291,\n        2643833823,\n        1695183700,\n        2343527390,\n        1986661051,\n        1014477480,\n        2177026350,\n        1206759142,\n        2456956037,\n        344077627,\n        2730485921,\n        1290863460,\n        2820302411,\n        3158454273,\n        3259730800,\n        3505952657,\n        3345764771,\n        106217008,\n        3516065817,\n        3606008344,\n        3600352804,\n        1432725776,\n        4094571909,\n        1467031594,\n        275423344,\n        851169720,\n        430227734,\n        3100823752,\n        506948616,\n        1363258195,\n        659060556,\n        3750685593,\n        883997877,\n        3785050280,\n        958139571,\n        3318307427,\n        1322822218,\n        3812723403,\n        1537002063,\n        2003034995,\n        1747873779,\n        3602036899,\n        1955562222,\n        1575990012,\n        2024104815,\n        1125592928,\n        2227730452,\n        2716904306,\n        2361852424,\n        442776044,\n        2428436474,\n        593698344,\n        2756734187,\n        3733110249,\n        3204031479,\n        2999351573,\n        3329325298,\n        3815920427,\n        3391569614,\n        3928383900,\n        3515267271,\n        566280711,\n        3940187606,\n        3454069534,\n        4118630271,\n        4000239992,\n        116418474,\n        1914138554,\n        174292421,\n        2731055270,\n        289380356,\n        3203993006,\n        460393269,\n        320620315,\n        685471733,\n        587496836,\n        852142971,\n        1086792851,\n        1017036298,\n        365543100,\n        1126000580,\n        2618297676,\n        1288033470,\n        3409855158,\n        1501505948,\n        4234509866,\n        1607167915,\n        987167468,\n        1816402316,\n        1246189591\n    ]);\n    function Xs(i, e, r, t, s, n, o) {\n        for(var a = r[0], c = r[1], u = r[2], h = r[3], l = r[4], p = r[5], d = r[6], g = r[7], w = t[0], b = t[1], E = t[2], I = t[3], _ = t[4], v = t[5], S = t[6], N = t[7], y, m, P, L, R, x, D, O; o >= 128;){\n            for(var M = 0; M < 16; M++){\n                var q = 8 * M + n;\n                i[M] = tr.readUint32BE(s, q), e[M] = tr.readUint32BE(s, q + 4);\n            }\n            for(var M = 0; M < 80; M++){\n                var C = a, G = c, he = u, U = h, B = l, V = p, z = d, j = g, $ = w, K = b, k = E, X = I, Z = _, ee = v, te = S, Q = N;\n                if (y = g, m = N, R = m & 65535, x = m >>> 16, D = y & 65535, O = y >>> 16, y = (l >>> 14 | _ << 18) ^ (l >>> 18 | _ << 14) ^ (_ >>> 9 | l << 23), m = (_ >>> 14 | l << 18) ^ (_ >>> 18 | l << 14) ^ (l >>> 9 | _ << 23), R += m & 65535, x += m >>> 16, D += y & 65535, O += y >>> 16, y = l & p ^ ~l & d, m = _ & v ^ ~_ & S, R += m & 65535, x += m >>> 16, D += y & 65535, O += y >>> 16, y = uc[M * 2], m = uc[M * 2 + 1], R += m & 65535, x += m >>> 16, D += y & 65535, O += y >>> 16, y = i[M % 16], m = e[M % 16], R += m & 65535, x += m >>> 16, D += y & 65535, O += y >>> 16, x += R >>> 16, D += x >>> 16, O += D >>> 16, P = D & 65535 | O << 16, L = R & 65535 | x << 16, y = P, m = L, R = m & 65535, x = m >>> 16, D = y & 65535, O = y >>> 16, y = (a >>> 28 | w << 4) ^ (w >>> 2 | a << 30) ^ (w >>> 7 | a << 25), m = (w >>> 28 | a << 4) ^ (a >>> 2 | w << 30) ^ (a >>> 7 | w << 25), R += m & 65535, x += m >>> 16, D += y & 65535, O += y >>> 16, y = a & c ^ a & u ^ c & u, m = w & b ^ w & E ^ b & E, R += m & 65535, x += m >>> 16, D += y & 65535, O += y >>> 16, x += R >>> 16, D += x >>> 16, O += D >>> 16, j = D & 65535 | O << 16, Q = R & 65535 | x << 16, y = U, m = X, R = m & 65535, x = m >>> 16, D = y & 65535, O = y >>> 16, y = P, m = L, R += m & 65535, x += m >>> 16, D += y & 65535, O += y >>> 16, x += R >>> 16, D += x >>> 16, O += D >>> 16, U = D & 65535 | O << 16, X = R & 65535 | x << 16, c = C, u = G, h = he, l = U, p = B, d = V, g = z, a = j, b = $, E = K, I = k, _ = X, v = Z, S = ee, N = te, w = Q, M % 16 === 15) for(var q = 0; q < 16; q++)y = i[q], m = e[q], R = m & 65535, x = m >>> 16, D = y & 65535, O = y >>> 16, y = i[(q + 9) % 16], m = e[(q + 9) % 16], R += m & 65535, x += m >>> 16, D += y & 65535, O += y >>> 16, P = i[(q + 1) % 16], L = e[(q + 1) % 16], y = (P >>> 1 | L << 31) ^ (P >>> 8 | L << 24) ^ P >>> 7, m = (L >>> 1 | P << 31) ^ (L >>> 8 | P << 24) ^ (L >>> 7 | P << 25), R += m & 65535, x += m >>> 16, D += y & 65535, O += y >>> 16, P = i[(q + 14) % 16], L = e[(q + 14) % 16], y = (P >>> 19 | L << 13) ^ (L >>> 29 | P << 3) ^ P >>> 6, m = (L >>> 19 | P << 13) ^ (P >>> 29 | L << 3) ^ (L >>> 6 | P << 26), R += m & 65535, x += m >>> 16, D += y & 65535, O += y >>> 16, x += R >>> 16, D += x >>> 16, O += D >>> 16, i[q] = D & 65535 | O << 16, e[q] = R & 65535 | x << 16;\n            }\n            y = a, m = w, R = m & 65535, x = m >>> 16, D = y & 65535, O = y >>> 16, y = r[0], m = t[0], R += m & 65535, x += m >>> 16, D += y & 65535, O += y >>> 16, x += R >>> 16, D += x >>> 16, O += D >>> 16, r[0] = a = D & 65535 | O << 16, t[0] = w = R & 65535 | x << 16, y = c, m = b, R = m & 65535, x = m >>> 16, D = y & 65535, O = y >>> 16, y = r[1], m = t[1], R += m & 65535, x += m >>> 16, D += y & 65535, O += y >>> 16, x += R >>> 16, D += x >>> 16, O += D >>> 16, r[1] = c = D & 65535 | O << 16, t[1] = b = R & 65535 | x << 16, y = u, m = E, R = m & 65535, x = m >>> 16, D = y & 65535, O = y >>> 16, y = r[2], m = t[2], R += m & 65535, x += m >>> 16, D += y & 65535, O += y >>> 16, x += R >>> 16, D += x >>> 16, O += D >>> 16, r[2] = u = D & 65535 | O << 16, t[2] = E = R & 65535 | x << 16, y = h, m = I, R = m & 65535, x = m >>> 16, D = y & 65535, O = y >>> 16, y = r[3], m = t[3], R += m & 65535, x += m >>> 16, D += y & 65535, O += y >>> 16, x += R >>> 16, D += x >>> 16, O += D >>> 16, r[3] = h = D & 65535 | O << 16, t[3] = I = R & 65535 | x << 16, y = l, m = _, R = m & 65535, x = m >>> 16, D = y & 65535, O = y >>> 16, y = r[4], m = t[4], R += m & 65535, x += m >>> 16, D += y & 65535, O += y >>> 16, x += R >>> 16, D += x >>> 16, O += D >>> 16, r[4] = l = D & 65535 | O << 16, t[4] = _ = R & 65535 | x << 16, y = p, m = v, R = m & 65535, x = m >>> 16, D = y & 65535, O = y >>> 16, y = r[5], m = t[5], R += m & 65535, x += m >>> 16, D += y & 65535, O += y >>> 16, x += R >>> 16, D += x >>> 16, O += D >>> 16, r[5] = p = D & 65535 | O << 16, t[5] = v = R & 65535 | x << 16, y = d, m = S, R = m & 65535, x = m >>> 16, D = y & 65535, O = y >>> 16, y = r[6], m = t[6], R += m & 65535, x += m >>> 16, D += y & 65535, O += y >>> 16, x += R >>> 16, D += x >>> 16, O += D >>> 16, r[6] = d = D & 65535 | O << 16, t[6] = S = R & 65535 | x << 16, y = g, m = N, R = m & 65535, x = m >>> 16, D = y & 65535, O = y >>> 16, y = r[7], m = t[7], R += m & 65535, x += m >>> 16, D += y & 65535, O += y >>> 16, x += R >>> 16, D += x >>> 16, O += D >>> 16, r[7] = g = D & 65535 | O << 16, t[7] = N = R & 65535 | x << 16, n += 128, o -= 128;\n        }\n        return n;\n    }\n    function Rp(i) {\n        var e = new hc;\n        e.update(i);\n        var r = e.digest();\n        return e.clean(), r;\n    }\n    rt.hash = Rp;\n});\nvar Sc = (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(_c66 = (ne)=>{\n    \"use strict\";\n    Object.defineProperty(ne, \"__esModule\", {\n        value: !0\n    });\n    ne.convertSecretKeyToX25519 = ne.convertPublicKeyToX25519 = ne.verify = ne.sign = ne.extractPublicKeyFromSecretKey = ne.generateKeyPair = ne.generateKeyPairFromSeed = ne.SEED_LENGTH = ne.SECRET_KEY_LENGTH = ne.PUBLIC_KEY_LENGTH = ne.SIGNATURE_LENGTH = void 0;\n    var Op = Ur(), Mr = lc(), yc = $e();\n    ne.SIGNATURE_LENGTH = 64;\n    ne.PUBLIC_KEY_LENGTH = 32;\n    ne.SECRET_KEY_LENGTH = 64;\n    ne.SEED_LENGTH = 32;\n    function F(i) {\n        let e = new Float64Array(16);\n        if (i) for(let r = 0; r < i.length; r++)e[r] = i[r];\n        return e;\n    }\n    var Tp = new Uint8Array(32);\n    Tp[0] = 9;\n    var en = F(), rr = F([\n        1\n    ]), Np = F([\n        30883,\n        4953,\n        19914,\n        30187,\n        55467,\n        16705,\n        2637,\n        112,\n        59544,\n        30585,\n        16505,\n        36039,\n        65139,\n        11119,\n        27886,\n        20995\n    ]), Pp = F([\n        61785,\n        9906,\n        39828,\n        60374,\n        45398,\n        33411,\n        5274,\n        224,\n        53552,\n        61171,\n        33010,\n        6542,\n        64743,\n        22239,\n        55772,\n        9222\n    ]), fc = F([\n        54554,\n        36645,\n        11616,\n        51542,\n        42930,\n        38181,\n        51040,\n        26924,\n        56412,\n        64982,\n        57905,\n        49316,\n        21502,\n        52590,\n        14035,\n        8553\n    ]), dc = F([\n        26200,\n        26214,\n        26214,\n        26214,\n        26214,\n        26214,\n        26214,\n        26214,\n        26214,\n        26214,\n        26214,\n        26214,\n        26214,\n        26214,\n        26214,\n        26214\n    ]), Cp = F([\n        41136,\n        18958,\n        6951,\n        50414,\n        58488,\n        44335,\n        6150,\n        12099,\n        55207,\n        15867,\n        153,\n        11085,\n        57099,\n        20417,\n        9344,\n        11139\n    ]);\n    function pt(i, e) {\n        for(let r = 0; r < 16; r++)i[r] = e[r] | 0;\n    }\n    function Qs(i) {\n        let e = 1;\n        for(let r = 0; r < 16; r++){\n            let t = i[r] + e + 65535;\n            e = Math.floor(t / 65536), i[r] = t - e * 65536;\n        }\n        i[0] += e - 1 + 37 * (e - 1);\n    }\n    function mc(i, e, r) {\n        let t = ~(r - 1);\n        for(let s = 0; s < 16; s++){\n            let n = t & (i[s] ^ e[s]);\n            i[s] ^= n, e[s] ^= n;\n        }\n    }\n    function qr(i, e) {\n        let r = F(), t = F();\n        for(let s = 0; s < 16; s++)t[s] = e[s];\n        Qs(t), Qs(t), Qs(t);\n        for(let s = 0; s < 2; s++){\n            r[0] = t[0] - 65517;\n            for(let o = 1; o < 15; o++)r[o] = t[o] - 65535 - (r[o - 1] >> 16 & 1), r[o - 1] &= 65535;\n            r[15] = t[15] - 32767 - (r[14] >> 16 & 1);\n            let n = r[15] >> 16 & 1;\n            r[14] &= 65535, mc(t, r, 1 - n);\n        }\n        for(let s = 0; s < 16; s++)i[2 * s] = t[s] & 255, i[2 * s + 1] = t[s] >> 8;\n    }\n    function wc(i, e) {\n        let r = 0;\n        for(let t = 0; t < 32; t++)r |= i[t] ^ e[t];\n        return (1 & r - 1 >>> 8) - 1;\n    }\n    function pc(i, e) {\n        let r = new Uint8Array(32), t = new Uint8Array(32);\n        return qr(r, i), qr(t, e), wc(r, t);\n    }\n    function bc(i) {\n        let e = new Uint8Array(32);\n        return qr(e, i), e[0] & 1;\n    }\n    function Ap(i, e) {\n        for(let r = 0; r < 16; r++)i[r] = e[2 * r] + (e[2 * r + 1] << 8);\n        i[15] &= 32767;\n    }\n    function Nt(i, e, r) {\n        for(let t = 0; t < 16; t++)i[t] = e[t] + r[t];\n    }\n    function Ct(i, e, r) {\n        for(let t = 0; t < 16; t++)i[t] = e[t] - r[t];\n    }\n    function ue(i, e, r) {\n        let t, s, n = 0, o = 0, a = 0, c = 0, u = 0, h = 0, l = 0, p = 0, d = 0, g = 0, w = 0, b = 0, E = 0, I = 0, _ = 0, v = 0, S = 0, N = 0, y = 0, m = 0, P = 0, L = 0, R = 0, x = 0, D = 0, O = 0, M = 0, q = 0, C = 0, G = 0, he = 0, U = r[0], B = r[1], V = r[2], z = r[3], j = r[4], $ = r[5], K = r[6], k = r[7], X = r[8], Z = r[9], ee = r[10], te = r[11], Q = r[12], re = r[13], ie = r[14], se = r[15];\n        t = e[0], n += t * U, o += t * B, a += t * V, c += t * z, u += t * j, h += t * $, l += t * K, p += t * k, d += t * X, g += t * Z, w += t * ee, b += t * te, E += t * Q, I += t * re, _ += t * ie, v += t * se, t = e[1], o += t * U, a += t * B, c += t * V, u += t * z, h += t * j, l += t * $, p += t * K, d += t * k, g += t * X, w += t * Z, b += t * ee, E += t * te, I += t * Q, _ += t * re, v += t * ie, S += t * se, t = e[2], a += t * U, c += t * B, u += t * V, h += t * z, l += t * j, p += t * $, d += t * K, g += t * k, w += t * X, b += t * Z, E += t * ee, I += t * te, _ += t * Q, v += t * re, S += t * ie, N += t * se, t = e[3], c += t * U, u += t * B, h += t * V, l += t * z, p += t * j, d += t * $, g += t * K, w += t * k, b += t * X, E += t * Z, I += t * ee, _ += t * te, v += t * Q, S += t * re, N += t * ie, y += t * se, t = e[4], u += t * U, h += t * B, l += t * V, p += t * z, d += t * j, g += t * $, w += t * K, b += t * k, E += t * X, I += t * Z, _ += t * ee, v += t * te, S += t * Q, N += t * re, y += t * ie, m += t * se, t = e[5], h += t * U, l += t * B, p += t * V, d += t * z, g += t * j, w += t * $, b += t * K, E += t * k, I += t * X, _ += t * Z, v += t * ee, S += t * te, N += t * Q, y += t * re, m += t * ie, P += t * se, t = e[6], l += t * U, p += t * B, d += t * V, g += t * z, w += t * j, b += t * $, E += t * K, I += t * k, _ += t * X, v += t * Z, S += t * ee, N += t * te, y += t * Q, m += t * re, P += t * ie, L += t * se, t = e[7], p += t * U, d += t * B, g += t * V, w += t * z, b += t * j, E += t * $, I += t * K, _ += t * k, v += t * X, S += t * Z, N += t * ee, y += t * te, m += t * Q, P += t * re, L += t * ie, R += t * se, t = e[8], d += t * U, g += t * B, w += t * V, b += t * z, E += t * j, I += t * $, _ += t * K, v += t * k, S += t * X, N += t * Z, y += t * ee, m += t * te, P += t * Q, L += t * re, R += t * ie, x += t * se, t = e[9], g += t * U, w += t * B, b += t * V, E += t * z, I += t * j, _ += t * $, v += t * K, S += t * k, N += t * X, y += t * Z, m += t * ee, P += t * te, L += t * Q, R += t * re, x += t * ie, D += t * se, t = e[10], w += t * U, b += t * B, E += t * V, I += t * z, _ += t * j, v += t * $, S += t * K, N += t * k, y += t * X, m += t * Z, P += t * ee, L += t * te, R += t * Q, x += t * re, D += t * ie, O += t * se, t = e[11], b += t * U, E += t * B, I += t * V, _ += t * z, v += t * j, S += t * $, N += t * K, y += t * k, m += t * X, P += t * Z, L += t * ee, R += t * te, x += t * Q, D += t * re, O += t * ie, M += t * se, t = e[12], E += t * U, I += t * B, _ += t * V, v += t * z, S += t * j, N += t * $, y += t * K, m += t * k, P += t * X, L += t * Z, R += t * ee, x += t * te, D += t * Q, O += t * re, M += t * ie, q += t * se, t = e[13], I += t * U, _ += t * B, v += t * V, S += t * z, N += t * j, y += t * $, m += t * K, P += t * k, L += t * X, R += t * Z, x += t * ee, D += t * te, O += t * Q, M += t * re, q += t * ie, C += t * se, t = e[14], _ += t * U, v += t * B, S += t * V, N += t * z, y += t * j, m += t * $, P += t * K, L += t * k, R += t * X, x += t * Z, D += t * ee, O += t * te, M += t * Q, q += t * re, C += t * ie, G += t * se, t = e[15], v += t * U, S += t * B, N += t * V, y += t * z, m += t * j, P += t * $, L += t * K, R += t * k, x += t * X, D += t * Z, O += t * ee, M += t * te, q += t * Q, C += t * re, G += t * ie, he += t * se, n += 38 * S, o += 38 * N, a += 38 * y, c += 38 * m, u += 38 * P, h += 38 * L, l += 38 * R, p += 38 * x, d += 38 * D, g += 38 * O, w += 38 * M, b += 38 * q, E += 38 * C, I += 38 * G, _ += 38 * he, s = 1, t = n + s + 65535, s = Math.floor(t / 65536), n = t - s * 65536, t = o + s + 65535, s = Math.floor(t / 65536), o = t - s * 65536, t = a + s + 65535, s = Math.floor(t / 65536), a = t - s * 65536, t = c + s + 65535, s = Math.floor(t / 65536), c = t - s * 65536, t = u + s + 65535, s = Math.floor(t / 65536), u = t - s * 65536, t = h + s + 65535, s = Math.floor(t / 65536), h = t - s * 65536, t = l + s + 65535, s = Math.floor(t / 65536), l = t - s * 65536, t = p + s + 65535, s = Math.floor(t / 65536), p = t - s * 65536, t = d + s + 65535, s = Math.floor(t / 65536), d = t - s * 65536, t = g + s + 65535, s = Math.floor(t / 65536), g = t - s * 65536, t = w + s + 65535, s = Math.floor(t / 65536), w = t - s * 65536, t = b + s + 65535, s = Math.floor(t / 65536), b = t - s * 65536, t = E + s + 65535, s = Math.floor(t / 65536), E = t - s * 65536, t = I + s + 65535, s = Math.floor(t / 65536), I = t - s * 65536, t = _ + s + 65535, s = Math.floor(t / 65536), _ = t - s * 65536, t = v + s + 65535, s = Math.floor(t / 65536), v = t - s * 65536, n += s - 1 + 37 * (s - 1), s = 1, t = n + s + 65535, s = Math.floor(t / 65536), n = t - s * 65536, t = o + s + 65535, s = Math.floor(t / 65536), o = t - s * 65536, t = a + s + 65535, s = Math.floor(t / 65536), a = t - s * 65536, t = c + s + 65535, s = Math.floor(t / 65536), c = t - s * 65536, t = u + s + 65535, s = Math.floor(t / 65536), u = t - s * 65536, t = h + s + 65535, s = Math.floor(t / 65536), h = t - s * 65536, t = l + s + 65535, s = Math.floor(t / 65536), l = t - s * 65536, t = p + s + 65535, s = Math.floor(t / 65536), p = t - s * 65536, t = d + s + 65535, s = Math.floor(t / 65536), d = t - s * 65536, t = g + s + 65535, s = Math.floor(t / 65536), g = t - s * 65536, t = w + s + 65535, s = Math.floor(t / 65536), w = t - s * 65536, t = b + s + 65535, s = Math.floor(t / 65536), b = t - s * 65536, t = E + s + 65535, s = Math.floor(t / 65536), E = t - s * 65536, t = I + s + 65535, s = Math.floor(t / 65536), I = t - s * 65536, t = _ + s + 65535, s = Math.floor(t / 65536), _ = t - s * 65536, t = v + s + 65535, s = Math.floor(t / 65536), v = t - s * 65536, n += s - 1 + 37 * (s - 1), i[0] = n, i[1] = o, i[2] = a, i[3] = c, i[4] = u, i[5] = h, i[6] = l, i[7] = p, i[8] = d, i[9] = g, i[10] = w, i[11] = b, i[12] = E, i[13] = I, i[14] = _, i[15] = v;\n    }\n    function Pt(i, e) {\n        ue(i, e, e);\n    }\n    function Ec(i, e) {\n        let r = F(), t;\n        for(t = 0; t < 16; t++)r[t] = e[t];\n        for(t = 253; t >= 0; t--)Pt(r, r), t !== 2 && t !== 4 && ue(r, r, e);\n        for(t = 0; t < 16; t++)i[t] = r[t];\n    }\n    function Lp(i, e) {\n        let r = F(), t;\n        for(t = 0; t < 16; t++)r[t] = e[t];\n        for(t = 250; t >= 0; t--)Pt(r, r), t !== 1 && ue(r, r, e);\n        for(t = 0; t < 16; t++)i[t] = r[t];\n    }\n    function tn(i, e) {\n        let r = F(), t = F(), s = F(), n = F(), o = F(), a = F(), c = F(), u = F(), h = F();\n        Ct(r, i[1], i[0]), Ct(h, e[1], e[0]), ue(r, r, h), Nt(t, i[0], i[1]), Nt(h, e[0], e[1]), ue(t, t, h), ue(s, i[3], e[3]), ue(s, s, Pp), ue(n, i[2], e[2]), Nt(n, n, n), Ct(o, t, r), Ct(a, n, s), Nt(c, n, s), Nt(u, t, r), ue(i[0], o, a), ue(i[1], u, c), ue(i[2], c, a), ue(i[3], o, u);\n    }\n    function gc(i, e, r) {\n        for(let t = 0; t < 4; t++)mc(i[t], e[t], r);\n    }\n    function sn(i, e) {\n        let r = F(), t = F(), s = F();\n        Ec(s, e[2]), ue(r, e[0], s), ue(t, e[1], s), qr(i, t), i[31] ^= bc(r) << 7;\n    }\n    function vc(i, e, r) {\n        pt(i[0], en), pt(i[1], rr), pt(i[2], rr), pt(i[3], en);\n        for(let t = 255; t >= 0; --t){\n            let s = r[t / 8 | 0] >> (t & 7) & 1;\n            gc(i, e, s), tn(e, i), tn(i, i), gc(i, e, s);\n        }\n    }\n    function nn(i, e) {\n        let r = [\n            F(),\n            F(),\n            F(),\n            F()\n        ];\n        pt(r[0], fc), pt(r[1], dc), pt(r[2], rr), ue(r[3], fc, dc), vc(i, r, e);\n    }\n    function _c(i) {\n        if (i.length !== ne.SEED_LENGTH) throw new Error(\"ed25519: seed must be \".concat(ne.SEED_LENGTH, \" bytes\"));\n        let e = (0, Mr.hash)(i);\n        e[0] &= 248, e[31] &= 127, e[31] |= 64;\n        let r = new Uint8Array(32), t = [\n            F(),\n            F(),\n            F(),\n            F()\n        ];\n        nn(t, e), sn(r, t);\n        let s = new Uint8Array(64);\n        return s.set(i), s.set(r, 32), {\n            publicKey: r,\n            secretKey: s\n        };\n    }\n    ne.generateKeyPairFromSeed = _c;\n    function Fp(i) {\n        let e = (0, Op.randomBytes)(32, i), r = _c(e);\n        return (0, yc.wipe)(e), r;\n    }\n    ne.generateKeyPair = Fp;\n    function Up(i) {\n        if (i.length !== ne.SECRET_KEY_LENGTH) throw new Error(\"ed25519: secret key must be \".concat(ne.SECRET_KEY_LENGTH, \" bytes\"));\n        return new Uint8Array(i.subarray(32));\n    }\n    ne.extractPublicKeyFromSecretKey = Up;\n    var Zs = new Float64Array([\n        237,\n        211,\n        245,\n        92,\n        26,\n        99,\n        18,\n        88,\n        214,\n        156,\n        247,\n        162,\n        222,\n        249,\n        222,\n        20,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        16\n    ]);\n    function xc(i, e) {\n        let r, t, s, n;\n        for(t = 63; t >= 32; --t){\n            for(r = 0, s = t - 32, n = t - 12; s < n; ++s)e[s] += r - 16 * e[t] * Zs[s - (t - 32)], r = Math.floor((e[s] + 128) / 256), e[s] -= r * 256;\n            e[s] += r, e[t] = 0;\n        }\n        for(r = 0, s = 0; s < 32; s++)e[s] += r - (e[31] >> 4) * Zs[s], r = e[s] >> 8, e[s] &= 255;\n        for(s = 0; s < 32; s++)e[s] -= r * Zs[s];\n        for(t = 0; t < 32; t++)e[t + 1] += e[t] >> 8, i[t] = e[t] & 255;\n    }\n    function rn(i) {\n        let e = new Float64Array(64);\n        for(let r = 0; r < 64; r++)e[r] = i[r];\n        for(let r = 0; r < 64; r++)i[r] = 0;\n        xc(i, e);\n    }\n    function Mp(i, e) {\n        let r = new Float64Array(64), t = [\n            F(),\n            F(),\n            F(),\n            F()\n        ], s = (0, Mr.hash)(i.subarray(0, 32));\n        s[0] &= 248, s[31] &= 127, s[31] |= 64;\n        let n = new Uint8Array(64);\n        n.set(s.subarray(32), 32);\n        let o = new Mr.SHA512;\n        o.update(n.subarray(32)), o.update(e);\n        let a = o.digest();\n        o.clean(), rn(a), nn(t, a), sn(n, t), o.reset(), o.update(n.subarray(0, 32)), o.update(i.subarray(32)), o.update(e);\n        let c = o.digest();\n        rn(c);\n        for(let u = 0; u < 32; u++)r[u] = a[u];\n        for(let u = 0; u < 32; u++)for(let h = 0; h < 32; h++)r[u + h] += c[u] * s[h];\n        return xc(n.subarray(32), r), n;\n    }\n    ne.sign = Mp;\n    function Dc(i, e) {\n        let r = F(), t = F(), s = F(), n = F(), o = F(), a = F(), c = F();\n        return pt(i[2], rr), Ap(i[1], e), Pt(s, i[1]), ue(n, s, Np), Ct(s, s, i[2]), Nt(n, i[2], n), Pt(o, n), Pt(a, o), ue(c, a, o), ue(r, c, s), ue(r, r, n), Lp(r, r), ue(r, r, s), ue(r, r, n), ue(r, r, n), ue(i[0], r, n), Pt(t, i[0]), ue(t, t, n), pc(t, s) && ue(i[0], i[0], Cp), Pt(t, i[0]), ue(t, t, n), pc(t, s) ? -1 : (bc(i[0]) === e[31] >> 7 && Ct(i[0], en, i[0]), ue(i[3], i[0], i[1]), 0);\n    }\n    function qp(i, e, r) {\n        let t = new Uint8Array(32), s = [\n            F(),\n            F(),\n            F(),\n            F()\n        ], n = [\n            F(),\n            F(),\n            F(),\n            F()\n        ];\n        if (r.length !== ne.SIGNATURE_LENGTH) throw new Error(\"ed25519: signature must be \".concat(ne.SIGNATURE_LENGTH, \" bytes\"));\n        if (Dc(n, i)) return !1;\n        let o = new Mr.SHA512;\n        o.update(r.subarray(0, 32)), o.update(i), o.update(e);\n        let a = o.digest();\n        return rn(a), vc(s, n, a), nn(n, r.subarray(32)), tn(s, n), sn(t, s), !wc(r, t);\n    }\n    ne.verify = qp;\n    function jp(i) {\n        let e = [\n            F(),\n            F(),\n            F(),\n            F()\n        ];\n        if (Dc(e, i)) throw new Error(\"Ed25519: invalid public key\");\n        let r = F(), t = F(), s = e[1];\n        Nt(r, rr, s), Ct(t, rr, s), Ec(t, t), ue(r, r, t);\n        let n = new Uint8Array(32);\n        return qr(n, r), n;\n    }\n    ne.convertPublicKeyToX25519 = jp;\n    function Bp(i) {\n        let e = (0, Mr.hash)(i.subarray(0, 32));\n        e[0] &= 248, e[31] &= 127, e[31] |= 64;\n        let r = new Uint8Array(e.subarray(0, 32));\n        return (0, yc.wipe)(e), r;\n    }\n    ne.convertSecretKeyToX25519 = Bp;\n});\n_c67 = Sc;\nvar au = (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.g)((Li)=>{\n    \"use strict\";\n    Object.defineProperty(Li, \"__esModule\", {\n        value: !0\n    });\n    var Re = Zt(), Pn = $e(), ey = 20;\n    function ty(i, e, r) {\n        for(var t = 1634760805, s = 857760878, n = 2036477234, o = 1797285236, a = r[3] << 24 | r[2] << 16 | r[1] << 8 | r[0], c = r[7] << 24 | r[6] << 16 | r[5] << 8 | r[4], u = r[11] << 24 | r[10] << 16 | r[9] << 8 | r[8], h = r[15] << 24 | r[14] << 16 | r[13] << 8 | r[12], l = r[19] << 24 | r[18] << 16 | r[17] << 8 | r[16], p = r[23] << 24 | r[22] << 16 | r[21] << 8 | r[20], d = r[27] << 24 | r[26] << 16 | r[25] << 8 | r[24], g = r[31] << 24 | r[30] << 16 | r[29] << 8 | r[28], w = e[3] << 24 | e[2] << 16 | e[1] << 8 | e[0], b = e[7] << 24 | e[6] << 16 | e[5] << 8 | e[4], E = e[11] << 24 | e[10] << 16 | e[9] << 8 | e[8], I = e[15] << 24 | e[14] << 16 | e[13] << 8 | e[12], _ = t, v = s, S = n, N = o, y = a, m = c, P = u, L = h, R = l, x = p, D = d, O = g, M = w, q = b, C = E, G = I, he = 0; he < ey; he += 2)_ = _ + y | 0, M ^= _, M = M >>> 16 | M << 16, R = R + M | 0, y ^= R, y = y >>> 20 | y << 12, v = v + m | 0, q ^= v, q = q >>> 16 | q << 16, x = x + q | 0, m ^= x, m = m >>> 20 | m << 12, S = S + P | 0, C ^= S, C = C >>> 16 | C << 16, D = D + C | 0, P ^= D, P = P >>> 20 | P << 12, N = N + L | 0, G ^= N, G = G >>> 16 | G << 16, O = O + G | 0, L ^= O, L = L >>> 20 | L << 12, S = S + P | 0, C ^= S, C = C >>> 24 | C << 8, D = D + C | 0, P ^= D, P = P >>> 25 | P << 7, N = N + L | 0, G ^= N, G = G >>> 24 | G << 8, O = O + G | 0, L ^= O, L = L >>> 25 | L << 7, v = v + m | 0, q ^= v, q = q >>> 24 | q << 8, x = x + q | 0, m ^= x, m = m >>> 25 | m << 7, _ = _ + y | 0, M ^= _, M = M >>> 24 | M << 8, R = R + M | 0, y ^= R, y = y >>> 25 | y << 7, _ = _ + m | 0, G ^= _, G = G >>> 16 | G << 16, D = D + G | 0, m ^= D, m = m >>> 20 | m << 12, v = v + P | 0, M ^= v, M = M >>> 16 | M << 16, O = O + M | 0, P ^= O, P = P >>> 20 | P << 12, S = S + L | 0, q ^= S, q = q >>> 16 | q << 16, R = R + q | 0, L ^= R, L = L >>> 20 | L << 12, N = N + y | 0, C ^= N, C = C >>> 16 | C << 16, x = x + C | 0, y ^= x, y = y >>> 20 | y << 12, S = S + L | 0, q ^= S, q = q >>> 24 | q << 8, R = R + q | 0, L ^= R, L = L >>> 25 | L << 7, N = N + y | 0, C ^= N, C = C >>> 24 | C << 8, x = x + C | 0, y ^= x, y = y >>> 25 | y << 7, v = v + P | 0, M ^= v, M = M >>> 24 | M << 8, O = O + M | 0, P ^= O, P = P >>> 25 | P << 7, _ = _ + m | 0, G ^= _, G = G >>> 24 | G << 8, D = D + G | 0, m ^= D, m = m >>> 25 | m << 7;\n        Re.writeUint32LE(_ + t | 0, i, 0), Re.writeUint32LE(v + s | 0, i, 4), Re.writeUint32LE(S + n | 0, i, 8), Re.writeUint32LE(N + o | 0, i, 12), Re.writeUint32LE(y + a | 0, i, 16), Re.writeUint32LE(m + c | 0, i, 20), Re.writeUint32LE(P + u | 0, i, 24), Re.writeUint32LE(L + h | 0, i, 28), Re.writeUint32LE(R + l | 0, i, 32), Re.writeUint32LE(x + p | 0, i, 36), Re.writeUint32LE(D + d | 0, i, 40), Re.writeUint32LE(O + g | 0, i, 44), Re.writeUint32LE(M + w | 0, i, 48), Re.writeUint32LE(q + b | 0, i, 52), Re.writeUint32LE(C + E | 0, i, 56), Re.writeUint32LE(G + I | 0, i, 60);\n    }\n    function ou(i, e, r, t, s) {\n        if (s === void 0 && (s = 0), i.length !== 32) throw new Error(\"ChaCha: key size must be 32 bytes\");\n        if (t.length < r.length) throw new Error(\"ChaCha: destination is shorter than source\");\n        var n, o;\n        if (s === 0) {\n            if (e.length !== 8 && e.length !== 12) throw new Error(\"ChaCha nonce must be 8 or 12 bytes\");\n            n = new Uint8Array(16), o = n.length - e.length, n.set(e, o);\n        } else {\n            if (e.length !== 16) throw new Error(\"ChaCha nonce with counter must be 16 bytes\");\n            n = e, o = s;\n        }\n        for(var a = new Uint8Array(64), c = 0; c < r.length; c += 64){\n            ty(a, n, i);\n            for(var u = c; u < c + 64 && u < r.length; u++)t[u] = r[u] ^ a[u - c];\n            iy(n, 0, o);\n        }\n        return Pn.wipe(a), s === 0 && Pn.wipe(n), t;\n    }\n    Li.streamXOR = ou;\n    function ry(i, e, r, t) {\n        return t === void 0 && (t = 0), Pn.wipe(r), ou(i, e, r, r, t);\n    }\n    Li.stream = ry;\n    function iy(i, e, r) {\n        for(var t = 1; r--;)t = t + (i[e] & 255) | 0, i[e] = t & 255, t >>>= 8, e++;\n        if (t > 0) throw new Error(\"ChaCha: counter overflow\");\n    }\n});\nvar Fi = (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(_c68 = (ur)=>{\n    \"use strict\";\n    Object.defineProperty(ur, \"__esModule\", {\n        value: !0\n    });\n    function sy(i, e, r) {\n        return ~(i - 1) & e | i - 1 & r;\n    }\n    ur.select = sy;\n    function ny(i, e) {\n        return (i | 0) - (e | 0) - 1 >>> 31 & 1;\n    }\n    ur.lessOrEqual = ny;\n    function cu(i, e) {\n        if (i.length !== e.length) return 0;\n        for(var r = 0, t = 0; t < i.length; t++)r |= i[t] ^ e[t];\n        return 1 & r - 1 >>> 8;\n    }\n    ur.compare = cu;\n    function oy(i, e) {\n        return i.length === 0 || e.length === 0 ? !1 : cu(i, e) !== 0;\n    }\n    ur.equal = oy;\n});\n_c69 = Fi;\nvar hu = (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.g)((st)=>{\n    \"use strict\";\n    Object.defineProperty(st, \"__esModule\", {\n        value: !0\n    });\n    var ay = Fi(), Ui = $e();\n    st.DIGEST_LENGTH = 16;\n    var uu = function() {\n        function i(e) {\n            this.digestLength = st.DIGEST_LENGTH, this._buffer = new Uint8Array(16), this._r = new Uint16Array(10), this._h = new Uint16Array(10), this._pad = new Uint16Array(8), this._leftover = 0, this._fin = 0, this._finished = !1;\n            var r = e[0] | e[1] << 8;\n            this._r[0] = r & 8191;\n            var t = e[2] | e[3] << 8;\n            this._r[1] = (r >>> 13 | t << 3) & 8191;\n            var s = e[4] | e[5] << 8;\n            this._r[2] = (t >>> 10 | s << 6) & 7939;\n            var n = e[6] | e[7] << 8;\n            this._r[3] = (s >>> 7 | n << 9) & 8191;\n            var o = e[8] | e[9] << 8;\n            this._r[4] = (n >>> 4 | o << 12) & 255, this._r[5] = o >>> 1 & 8190;\n            var a = e[10] | e[11] << 8;\n            this._r[6] = (o >>> 14 | a << 2) & 8191;\n            var c = e[12] | e[13] << 8;\n            this._r[7] = (a >>> 11 | c << 5) & 8065;\n            var u = e[14] | e[15] << 8;\n            this._r[8] = (c >>> 8 | u << 8) & 8191, this._r[9] = u >>> 5 & 127, this._pad[0] = e[16] | e[17] << 8, this._pad[1] = e[18] | e[19] << 8, this._pad[2] = e[20] | e[21] << 8, this._pad[3] = e[22] | e[23] << 8, this._pad[4] = e[24] | e[25] << 8, this._pad[5] = e[26] | e[27] << 8, this._pad[6] = e[28] | e[29] << 8, this._pad[7] = e[30] | e[31] << 8;\n        }\n        return i.prototype._blocks = function(e, r, t) {\n            for(var s = this._fin ? 0 : 2048, n = this._h[0], o = this._h[1], a = this._h[2], c = this._h[3], u = this._h[4], h = this._h[5], l = this._h[6], p = this._h[7], d = this._h[8], g = this._h[9], w = this._r[0], b = this._r[1], E = this._r[2], I = this._r[3], _ = this._r[4], v = this._r[5], S = this._r[6], N = this._r[7], y = this._r[8], m = this._r[9]; t >= 16;){\n                var P = e[r + 0] | e[r + 1] << 8;\n                n += P & 8191;\n                var L = e[r + 2] | e[r + 3] << 8;\n                o += (P >>> 13 | L << 3) & 8191;\n                var R = e[r + 4] | e[r + 5] << 8;\n                a += (L >>> 10 | R << 6) & 8191;\n                var x = e[r + 6] | e[r + 7] << 8;\n                c += (R >>> 7 | x << 9) & 8191;\n                var D = e[r + 8] | e[r + 9] << 8;\n                u += (x >>> 4 | D << 12) & 8191, h += D >>> 1 & 8191;\n                var O = e[r + 10] | e[r + 11] << 8;\n                l += (D >>> 14 | O << 2) & 8191;\n                var M = e[r + 12] | e[r + 13] << 8;\n                p += (O >>> 11 | M << 5) & 8191;\n                var q = e[r + 14] | e[r + 15] << 8;\n                d += (M >>> 8 | q << 8) & 8191, g += q >>> 5 | s;\n                var C = 0, G = C;\n                G += n * w, G += o * (5 * m), G += a * (5 * y), G += c * (5 * N), G += u * (5 * S), C = G >>> 13, G &= 8191, G += h * (5 * v), G += l * (5 * _), G += p * (5 * I), G += d * (5 * E), G += g * (5 * b), C += G >>> 13, G &= 8191;\n                var he = C;\n                he += n * b, he += o * w, he += a * (5 * m), he += c * (5 * y), he += u * (5 * N), C = he >>> 13, he &= 8191, he += h * (5 * S), he += l * (5 * v), he += p * (5 * _), he += d * (5 * I), he += g * (5 * E), C += he >>> 13, he &= 8191;\n                var U = C;\n                U += n * E, U += o * b, U += a * w, U += c * (5 * m), U += u * (5 * y), C = U >>> 13, U &= 8191, U += h * (5 * N), U += l * (5 * S), U += p * (5 * v), U += d * (5 * _), U += g * (5 * I), C += U >>> 13, U &= 8191;\n                var B = C;\n                B += n * I, B += o * E, B += a * b, B += c * w, B += u * (5 * m), C = B >>> 13, B &= 8191, B += h * (5 * y), B += l * (5 * N), B += p * (5 * S), B += d * (5 * v), B += g * (5 * _), C += B >>> 13, B &= 8191;\n                var V = C;\n                V += n * _, V += o * I, V += a * E, V += c * b, V += u * w, C = V >>> 13, V &= 8191, V += h * (5 * m), V += l * (5 * y), V += p * (5 * N), V += d * (5 * S), V += g * (5 * v), C += V >>> 13, V &= 8191;\n                var z = C;\n                z += n * v, z += o * _, z += a * I, z += c * E, z += u * b, C = z >>> 13, z &= 8191, z += h * w, z += l * (5 * m), z += p * (5 * y), z += d * (5 * N), z += g * (5 * S), C += z >>> 13, z &= 8191;\n                var j = C;\n                j += n * S, j += o * v, j += a * _, j += c * I, j += u * E, C = j >>> 13, j &= 8191, j += h * b, j += l * w, j += p * (5 * m), j += d * (5 * y), j += g * (5 * N), C += j >>> 13, j &= 8191;\n                var $ = C;\n                $ += n * N, $ += o * S, $ += a * v, $ += c * _, $ += u * I, C = $ >>> 13, $ &= 8191, $ += h * E, $ += l * b, $ += p * w, $ += d * (5 * m), $ += g * (5 * y), C += $ >>> 13, $ &= 8191;\n                var K = C;\n                K += n * y, K += o * N, K += a * S, K += c * v, K += u * _, C = K >>> 13, K &= 8191, K += h * I, K += l * E, K += p * b, K += d * w, K += g * (5 * m), C += K >>> 13, K &= 8191;\n                var k = C;\n                k += n * m, k += o * y, k += a * N, k += c * S, k += u * v, C = k >>> 13, k &= 8191, k += h * _, k += l * I, k += p * E, k += d * b, k += g * w, C += k >>> 13, k &= 8191, C = (C << 2) + C | 0, C = C + G | 0, G = C & 8191, C = C >>> 13, he += C, n = G, o = he, a = U, c = B, u = V, h = z, l = j, p = $, d = K, g = k, r += 16, t -= 16;\n            }\n            this._h[0] = n, this._h[1] = o, this._h[2] = a, this._h[3] = c, this._h[4] = u, this._h[5] = h, this._h[6] = l, this._h[7] = p, this._h[8] = d, this._h[9] = g;\n        }, i.prototype.finish = function(e, r) {\n            r === void 0 && (r = 0);\n            var t = new Uint16Array(10), s, n, o, a;\n            if (this._leftover) {\n                for(a = this._leftover, this._buffer[a++] = 1; a < 16; a++)this._buffer[a] = 0;\n                this._fin = 1, this._blocks(this._buffer, 0, 16);\n            }\n            for(s = this._h[1] >>> 13, this._h[1] &= 8191, a = 2; a < 10; a++)this._h[a] += s, s = this._h[a] >>> 13, this._h[a] &= 8191;\n            for(this._h[0] += s * 5, s = this._h[0] >>> 13, this._h[0] &= 8191, this._h[1] += s, s = this._h[1] >>> 13, this._h[1] &= 8191, this._h[2] += s, t[0] = this._h[0] + 5, s = t[0] >>> 13, t[0] &= 8191, a = 1; a < 10; a++)t[a] = this._h[a] + s, s = t[a] >>> 13, t[a] &= 8191;\n            for(t[9] -= 8192, n = (s ^ 1) - 1, a = 0; a < 10; a++)t[a] &= n;\n            for(n = ~n, a = 0; a < 10; a++)this._h[a] = this._h[a] & n | t[a];\n            for(this._h[0] = (this._h[0] | this._h[1] << 13) & 65535, this._h[1] = (this._h[1] >>> 3 | this._h[2] << 10) & 65535, this._h[2] = (this._h[2] >>> 6 | this._h[3] << 7) & 65535, this._h[3] = (this._h[3] >>> 9 | this._h[4] << 4) & 65535, this._h[4] = (this._h[4] >>> 12 | this._h[5] << 1 | this._h[6] << 14) & 65535, this._h[5] = (this._h[6] >>> 2 | this._h[7] << 11) & 65535, this._h[6] = (this._h[7] >>> 5 | this._h[8] << 8) & 65535, this._h[7] = (this._h[8] >>> 8 | this._h[9] << 5) & 65535, o = this._h[0] + this._pad[0], this._h[0] = o & 65535, a = 1; a < 8; a++)o = (this._h[a] + this._pad[a] | 0) + (o >>> 16) | 0, this._h[a] = o & 65535;\n            return e[r + 0] = this._h[0] >>> 0, e[r + 1] = this._h[0] >>> 8, e[r + 2] = this._h[1] >>> 0, e[r + 3] = this._h[1] >>> 8, e[r + 4] = this._h[2] >>> 0, e[r + 5] = this._h[2] >>> 8, e[r + 6] = this._h[3] >>> 0, e[r + 7] = this._h[3] >>> 8, e[r + 8] = this._h[4] >>> 0, e[r + 9] = this._h[4] >>> 8, e[r + 10] = this._h[5] >>> 0, e[r + 11] = this._h[5] >>> 8, e[r + 12] = this._h[6] >>> 0, e[r + 13] = this._h[6] >>> 8, e[r + 14] = this._h[7] >>> 0, e[r + 15] = this._h[7] >>> 8, this._finished = !0, this;\n        }, i.prototype.update = function(e) {\n            var r = 0, t = e.length, s;\n            if (this._leftover) {\n                s = 16 - this._leftover, s > t && (s = t);\n                for(var n = 0; n < s; n++)this._buffer[this._leftover + n] = e[r + n];\n                if (t -= s, r += s, this._leftover += s, this._leftover < 16) return this;\n                this._blocks(this._buffer, 0, 16), this._leftover = 0;\n            }\n            if (t >= 16 && (s = t - t % 16, this._blocks(e, r, s), r += s, t -= s), t) {\n                for(var n = 0; n < t; n++)this._buffer[this._leftover + n] = e[r + n];\n                this._leftover += t;\n            }\n            return this;\n        }, i.prototype.digest = function() {\n            if (this._finished) throw new Error(\"Poly1305 was finished\");\n            var e = new Uint8Array(16);\n            return this.finish(e), e;\n        }, i.prototype.clean = function() {\n            return Ui.wipe(this._buffer), Ui.wipe(this._r), Ui.wipe(this._h), Ui.wipe(this._pad), this._leftover = 0, this._fin = 0, this._finished = !0, this;\n        }, i;\n    }();\n    st.Poly1305 = uu;\n    function cy(i, e) {\n        var r = new uu(i);\n        r.update(e);\n        var t = r.digest();\n        return r.clean(), t;\n    }\n    st.oneTimeAuth = cy;\n    function uy(i, e) {\n        return i.length !== st.DIGEST_LENGTH || e.length !== st.DIGEST_LENGTH ? !1 : ay.equal(i, e);\n    }\n    st.equal = uy;\n});\nvar du = (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.g)((nt)=>{\n    \"use strict\";\n    Object.defineProperty(nt, \"__esModule\", {\n        value: !0\n    });\n    var Mi = au(), hy = hu(), kr = $e(), lu = Zt(), ly = Fi();\n    nt.KEY_LENGTH = 32;\n    nt.NONCE_LENGTH = 12;\n    nt.TAG_LENGTH = 16;\n    var fu = new Uint8Array(16), fy = function() {\n        function i(e) {\n            if (this.nonceLength = nt.NONCE_LENGTH, this.tagLength = nt.TAG_LENGTH, e.length !== nt.KEY_LENGTH) throw new Error(\"ChaCha20Poly1305 needs 32-byte key\");\n            this._key = new Uint8Array(e);\n        }\n        return i.prototype.seal = function(e, r, t, s) {\n            if (e.length > 16) throw new Error(\"ChaCha20Poly1305: incorrect nonce length\");\n            var n = new Uint8Array(16);\n            n.set(e, n.length - e.length);\n            var o = new Uint8Array(32);\n            Mi.stream(this._key, n, o, 4);\n            var a = r.length + this.tagLength, c;\n            if (s) {\n                if (s.length !== a) throw new Error(\"ChaCha20Poly1305: incorrect destination length\");\n                c = s;\n            } else c = new Uint8Array(a);\n            return Mi.streamXOR(this._key, n, r, c, 4), this._authenticate(c.subarray(c.length - this.tagLength, c.length), o, c.subarray(0, c.length - this.tagLength), t), kr.wipe(n), c;\n        }, i.prototype.open = function(e, r, t, s) {\n            if (e.length > 16) throw new Error(\"ChaCha20Poly1305: incorrect nonce length\");\n            if (r.length < this.tagLength) return null;\n            var n = new Uint8Array(16);\n            n.set(e, n.length - e.length);\n            var o = new Uint8Array(32);\n            Mi.stream(this._key, n, o, 4);\n            var a = new Uint8Array(this.tagLength);\n            if (this._authenticate(a, o, r.subarray(0, r.length - this.tagLength), t), !ly.equal(a, r.subarray(r.length - this.tagLength, r.length))) return null;\n            var c = r.length - this.tagLength, u;\n            if (s) {\n                if (s.length !== c) throw new Error(\"ChaCha20Poly1305: incorrect destination length\");\n                u = s;\n            } else u = new Uint8Array(c);\n            return Mi.streamXOR(this._key, n, r.subarray(0, r.length - this.tagLength), u, 4), kr.wipe(n), u;\n        }, i.prototype.clean = function() {\n            return kr.wipe(this._key), this;\n        }, i.prototype._authenticate = function(e, r, t, s) {\n            var n = new hy.Poly1305(r);\n            s && (n.update(s), s.length % 16 > 0 && n.update(fu.subarray(s.length % 16))), n.update(t), t.length % 16 > 0 && n.update(fu.subarray(t.length % 16));\n            var o = new Uint8Array(8);\n            s && lu.writeUint64LE(s.length, o), n.update(o), lu.writeUint64LE(t.length, o), n.update(o);\n            for(var a = n.digest(), c = 0; c < a.length; c++)e[c] = a[c];\n            n.clean(), kr.wipe(a), kr.wipe(o);\n        }, i;\n    }();\n    nt.ChaCha20Poly1305 = fy;\n});\nvar pu = (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.g)((Cn)=>{\n    \"use strict\";\n    Object.defineProperty(Cn, \"__esModule\", {\n        value: !0\n    });\n    function dy(i) {\n        return typeof i.saveState != \"undefined\" && typeof i.restoreState != \"undefined\" && typeof i.cleanSavedState != \"undefined\";\n    }\n    Cn.isSerializableHash = dy;\n});\nvar yu = (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.g)((Hr)=>{\n    \"use strict\";\n    Object.defineProperty(Hr, \"__esModule\", {\n        value: !0\n    });\n    var Ye = pu(), py = Fi(), gy = $e(), gu = function() {\n        function i(e, r) {\n            this._finished = !1, this._inner = new e, this._outer = new e, this.blockSize = this._outer.blockSize, this.digestLength = this._outer.digestLength;\n            var t = new Uint8Array(this.blockSize);\n            r.length > this.blockSize ? this._inner.update(r).finish(t).clean() : t.set(r);\n            for(var s = 0; s < t.length; s++)t[s] ^= 54;\n            this._inner.update(t);\n            for(var s = 0; s < t.length; s++)t[s] ^= 106;\n            this._outer.update(t), Ye.isSerializableHash(this._inner) && Ye.isSerializableHash(this._outer) && (this._innerKeyedState = this._inner.saveState(), this._outerKeyedState = this._outer.saveState()), gy.wipe(t);\n        }\n        return i.prototype.reset = function() {\n            if (!Ye.isSerializableHash(this._inner) || !Ye.isSerializableHash(this._outer)) throw new Error(\"hmac: can't reset() because hash doesn't implement restoreState()\");\n            return this._inner.restoreState(this._innerKeyedState), this._outer.restoreState(this._outerKeyedState), this._finished = !1, this;\n        }, i.prototype.clean = function() {\n            Ye.isSerializableHash(this._inner) && this._inner.cleanSavedState(this._innerKeyedState), Ye.isSerializableHash(this._outer) && this._outer.cleanSavedState(this._outerKeyedState), this._inner.clean(), this._outer.clean();\n        }, i.prototype.update = function(e) {\n            return this._inner.update(e), this;\n        }, i.prototype.finish = function(e) {\n            return this._finished ? (this._outer.finish(e), this) : (this._inner.finish(e), this._outer.update(e.subarray(0, this.digestLength)).finish(e), this._finished = !0, this);\n        }, i.prototype.digest = function() {\n            var e = new Uint8Array(this.digestLength);\n            return this.finish(e), e;\n        }, i.prototype.saveState = function() {\n            if (!Ye.isSerializableHash(this._inner)) throw new Error(\"hmac: can't saveState() because hash doesn't implement it\");\n            return this._inner.saveState();\n        }, i.prototype.restoreState = function(e) {\n            if (!Ye.isSerializableHash(this._inner) || !Ye.isSerializableHash(this._outer)) throw new Error(\"hmac: can't restoreState() because hash doesn't implement it\");\n            return this._inner.restoreState(e), this._outer.restoreState(this._outerKeyedState), this._finished = !1, this;\n        }, i.prototype.cleanSavedState = function(e) {\n            if (!Ye.isSerializableHash(this._inner)) throw new Error(\"hmac: can't cleanSavedState() because hash doesn't implement it\");\n            this._inner.cleanSavedState(e);\n        }, i;\n    }();\n    Hr.HMAC = gu;\n    function yy(i, e, r) {\n        var t = new gu(i, e);\n        t.update(r);\n        var s = t.digest();\n        return t.clean(), s;\n    }\n    Hr.hmac = yy;\n    Hr.equal = py.equal;\n});\nvar bu = (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.g)((An)=>{\n    \"use strict\";\n    Object.defineProperty(An, \"__esModule\", {\n        value: !0\n    });\n    var mu = yu(), wu = $e(), my = function() {\n        function i(e, r, t, s) {\n            t === void 0 && (t = new Uint8Array(0)), this._counter = new Uint8Array(1), this._hash = e, this._info = s;\n            var n = mu.hmac(this._hash, t, r);\n            this._hmac = new mu.HMAC(e, n), this._buffer = new Uint8Array(this._hmac.digestLength), this._bufpos = this._buffer.length;\n        }\n        return i.prototype._fillBuffer = function() {\n            this._counter[0]++;\n            var e = this._counter[0];\n            if (e === 0) throw new Error(\"hkdf: cannot expand more\");\n            this._hmac.reset(), e > 1 && this._hmac.update(this._buffer), this._info && this._hmac.update(this._info), this._hmac.update(this._counter), this._hmac.finish(this._buffer), this._bufpos = 0;\n        }, i.prototype.expand = function(e) {\n            for(var r = new Uint8Array(e), t = 0; t < r.length; t++)this._bufpos === this._buffer.length && this._fillBuffer(), r[t] = this._buffer[this._bufpos++];\n            return r;\n        }, i.prototype.clean = function() {\n            this._hmac.clean(), wu.wipe(this._buffer), wu.wipe(this._counter), this._bufpos = 0;\n        }, i;\n    }();\n    An.HKDF = my;\n});\nvar vu = (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.g)((yt)=>{\n    \"use strict\";\n    Object.defineProperty(yt, \"__esModule\", {\n        value: !0\n    });\n    var ji = Zt(), qi = $e();\n    yt.DIGEST_LENGTH = 32;\n    yt.BLOCK_SIZE = 64;\n    var Eu = function() {\n        function i() {\n            this.digestLength = yt.DIGEST_LENGTH, this.blockSize = yt.BLOCK_SIZE, this._state = new Int32Array(8), this._temp = new Int32Array(64), this._buffer = new Uint8Array(128), this._bufferLength = 0, this._bytesHashed = 0, this._finished = !1, this.reset();\n        }\n        return i.prototype._initState = function() {\n            this._state[0] = 1779033703, this._state[1] = 3144134277, this._state[2] = 1013904242, this._state[3] = 2773480762, this._state[4] = 1359893119, this._state[5] = 2600822924, this._state[6] = 528734635, this._state[7] = 1541459225;\n        }, i.prototype.reset = function() {\n            return this._initState(), this._bufferLength = 0, this._bytesHashed = 0, this._finished = !1, this;\n        }, i.prototype.clean = function() {\n            qi.wipe(this._buffer), qi.wipe(this._temp), this.reset();\n        }, i.prototype.update = function(e, r) {\n            if (r === void 0 && (r = e.length), this._finished) throw new Error(\"SHA256: can't update because hash was finished.\");\n            var t = 0;\n            if (this._bytesHashed += r, this._bufferLength > 0) {\n                for(; this._bufferLength < this.blockSize && r > 0;)this._buffer[this._bufferLength++] = e[t++], r--;\n                this._bufferLength === this.blockSize && (Ln(this._temp, this._state, this._buffer, 0, this.blockSize), this._bufferLength = 0);\n            }\n            for(r >= this.blockSize && (t = Ln(this._temp, this._state, e, t, r), r %= this.blockSize); r > 0;)this._buffer[this._bufferLength++] = e[t++], r--;\n            return this;\n        }, i.prototype.finish = function(e) {\n            if (!this._finished) {\n                var r = this._bytesHashed, t = this._bufferLength, s = r / 536870912 | 0, n = r << 3, o = r % 64 < 56 ? 64 : 128;\n                this._buffer[t] = 128;\n                for(var a = t + 1; a < o - 8; a++)this._buffer[a] = 0;\n                ji.writeUint32BE(s, this._buffer, o - 8), ji.writeUint32BE(n, this._buffer, o - 4), Ln(this._temp, this._state, this._buffer, 0, o), this._finished = !0;\n            }\n            for(var a = 0; a < this.digestLength / 4; a++)ji.writeUint32BE(this._state[a], e, a * 4);\n            return this;\n        }, i.prototype.digest = function() {\n            var e = new Uint8Array(this.digestLength);\n            return this.finish(e), e;\n        }, i.prototype.saveState = function() {\n            if (this._finished) throw new Error(\"SHA256: cannot save finished state\");\n            return {\n                state: new Int32Array(this._state),\n                buffer: this._bufferLength > 0 ? new Uint8Array(this._buffer) : void 0,\n                bufferLength: this._bufferLength,\n                bytesHashed: this._bytesHashed\n            };\n        }, i.prototype.restoreState = function(e) {\n            return this._state.set(e.state), this._bufferLength = e.bufferLength, e.buffer && this._buffer.set(e.buffer), this._bytesHashed = e.bytesHashed, this._finished = !1, this;\n        }, i.prototype.cleanSavedState = function(e) {\n            qi.wipe(e.state), e.buffer && qi.wipe(e.buffer), e.bufferLength = 0, e.bytesHashed = 0;\n        }, i;\n    }();\n    yt.SHA256 = Eu;\n    var wy = new Int32Array([\n        1116352408,\n        1899447441,\n        3049323471,\n        3921009573,\n        961987163,\n        1508970993,\n        2453635748,\n        2870763221,\n        3624381080,\n        310598401,\n        607225278,\n        1426881987,\n        1925078388,\n        2162078206,\n        2614888103,\n        3248222580,\n        3835390401,\n        4022224774,\n        264347078,\n        604807628,\n        770255983,\n        1249150122,\n        1555081692,\n        1996064986,\n        2554220882,\n        2821834349,\n        2952996808,\n        3210313671,\n        3336571891,\n        3584528711,\n        113926993,\n        338241895,\n        666307205,\n        773529912,\n        1294757372,\n        1396182291,\n        1695183700,\n        1986661051,\n        2177026350,\n        2456956037,\n        2730485921,\n        2820302411,\n        3259730800,\n        3345764771,\n        3516065817,\n        3600352804,\n        4094571909,\n        275423344,\n        430227734,\n        506948616,\n        659060556,\n        883997877,\n        958139571,\n        1322822218,\n        1537002063,\n        1747873779,\n        1955562222,\n        2024104815,\n        2227730452,\n        2361852424,\n        2428436474,\n        2756734187,\n        3204031479,\n        3329325298\n    ]);\n    function Ln(i, e, r, t, s) {\n        for(; s >= 64;){\n            for(var n = e[0], o = e[1], a = e[2], c = e[3], u = e[4], h = e[5], l = e[6], p = e[7], d = 0; d < 16; d++){\n                var g = t + d * 4;\n                i[d] = ji.readUint32BE(r, g);\n            }\n            for(var d = 16; d < 64; d++){\n                var w = i[d - 2], b = (w >>> 17 | w << 15) ^ (w >>> 19 | w << 13) ^ w >>> 10;\n                w = i[d - 15];\n                var E = (w >>> 7 | w << 25) ^ (w >>> 18 | w << 14) ^ w >>> 3;\n                i[d] = (b + i[d - 7] | 0) + (E + i[d - 16] | 0);\n            }\n            for(var d = 0; d < 64; d++){\n                var b = (((u >>> 6 | u << 26) ^ (u >>> 11 | u << 21) ^ (u >>> 25 | u << 7)) + (u & h ^ ~u & l) | 0) + (p + (wy[d] + i[d] | 0) | 0) | 0, E = ((n >>> 2 | n << 30) ^ (n >>> 13 | n << 19) ^ (n >>> 22 | n << 10)) + (n & o ^ n & a ^ o & a) | 0;\n                p = l, l = h, h = u, u = c + b | 0, c = a, a = o, o = n, n = b + E | 0;\n            }\n            e[0] += n, e[1] += o, e[2] += a, e[3] += c, e[4] += u, e[5] += h, e[6] += l, e[7] += p, t += 64, s -= 64;\n        }\n        return t;\n    }\n    function by(i) {\n        var e = new Eu;\n        e.update(i);\n        var r = e.digest();\n        return e.clean(), r;\n    }\n    yt.hash = by;\n});\nvar Su = (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(_c70 = (ge)=>{\n    \"use strict\";\n    Object.defineProperty(ge, \"__esModule\", {\n        value: !0\n    });\n    ge.sharedKey = ge.generateKeyPair = ge.generateKeyPairFromSeed = ge.scalarMultBase = ge.scalarMult = ge.SHARED_KEY_LENGTH = ge.SECRET_KEY_LENGTH = ge.PUBLIC_KEY_LENGTH = void 0;\n    var Ey = Ur(), vy = $e();\n    ge.PUBLIC_KEY_LENGTH = 32;\n    ge.SECRET_KEY_LENGTH = 32;\n    ge.SHARED_KEY_LENGTH = 32;\n    function Xe(i) {\n        let e = new Float64Array(16);\n        if (i) for(let r = 0; r < i.length; r++)e[r] = i[r];\n        return e;\n    }\n    var _u = new Uint8Array(32);\n    _u[0] = 9;\n    var _y = Xe([\n        56129,\n        1\n    ]);\n    function Fn(i) {\n        let e = 1;\n        for(let r = 0; r < 16; r++){\n            let t = i[r] + e + 65535;\n            e = Math.floor(t / 65536), i[r] = t - e * 65536;\n        }\n        i[0] += e - 1 + 37 * (e - 1);\n    }\n    function Gr(i, e, r) {\n        let t = ~(r - 1);\n        for(let s = 0; s < 16; s++){\n            let n = t & (i[s] ^ e[s]);\n            i[s] ^= n, e[s] ^= n;\n        }\n    }\n    function xy(i, e) {\n        let r = Xe(), t = Xe();\n        for(let s = 0; s < 16; s++)t[s] = e[s];\n        Fn(t), Fn(t), Fn(t);\n        for(let s = 0; s < 2; s++){\n            r[0] = t[0] - 65517;\n            for(let o = 1; o < 15; o++)r[o] = t[o] - 65535 - (r[o - 1] >> 16 & 1), r[o - 1] &= 65535;\n            r[15] = t[15] - 32767 - (r[14] >> 16 & 1);\n            let n = r[15] >> 16 & 1;\n            r[14] &= 65535, Gr(t, r, 1 - n);\n        }\n        for(let s = 0; s < 16; s++)i[2 * s] = t[s] & 255, i[2 * s + 1] = t[s] >> 8;\n    }\n    function Dy(i, e) {\n        for(let r = 0; r < 16; r++)i[r] = e[2 * r] + (e[2 * r + 1] << 8);\n        i[15] &= 32767;\n    }\n    function Bi(i, e, r) {\n        for(let t = 0; t < 16; t++)i[t] = e[t] + r[t];\n    }\n    function Vi(i, e, r) {\n        for(let t = 0; t < 16; t++)i[t] = e[t] - r[t];\n    }\n    function ot(i, e, r) {\n        let t, s, n = 0, o = 0, a = 0, c = 0, u = 0, h = 0, l = 0, p = 0, d = 0, g = 0, w = 0, b = 0, E = 0, I = 0, _ = 0, v = 0, S = 0, N = 0, y = 0, m = 0, P = 0, L = 0, R = 0, x = 0, D = 0, O = 0, M = 0, q = 0, C = 0, G = 0, he = 0, U = r[0], B = r[1], V = r[2], z = r[3], j = r[4], $ = r[5], K = r[6], k = r[7], X = r[8], Z = r[9], ee = r[10], te = r[11], Q = r[12], re = r[13], ie = r[14], se = r[15];\n        t = e[0], n += t * U, o += t * B, a += t * V, c += t * z, u += t * j, h += t * $, l += t * K, p += t * k, d += t * X, g += t * Z, w += t * ee, b += t * te, E += t * Q, I += t * re, _ += t * ie, v += t * se, t = e[1], o += t * U, a += t * B, c += t * V, u += t * z, h += t * j, l += t * $, p += t * K, d += t * k, g += t * X, w += t * Z, b += t * ee, E += t * te, I += t * Q, _ += t * re, v += t * ie, S += t * se, t = e[2], a += t * U, c += t * B, u += t * V, h += t * z, l += t * j, p += t * $, d += t * K, g += t * k, w += t * X, b += t * Z, E += t * ee, I += t * te, _ += t * Q, v += t * re, S += t * ie, N += t * se, t = e[3], c += t * U, u += t * B, h += t * V, l += t * z, p += t * j, d += t * $, g += t * K, w += t * k, b += t * X, E += t * Z, I += t * ee, _ += t * te, v += t * Q, S += t * re, N += t * ie, y += t * se, t = e[4], u += t * U, h += t * B, l += t * V, p += t * z, d += t * j, g += t * $, w += t * K, b += t * k, E += t * X, I += t * Z, _ += t * ee, v += t * te, S += t * Q, N += t * re, y += t * ie, m += t * se, t = e[5], h += t * U, l += t * B, p += t * V, d += t * z, g += t * j, w += t * $, b += t * K, E += t * k, I += t * X, _ += t * Z, v += t * ee, S += t * te, N += t * Q, y += t * re, m += t * ie, P += t * se, t = e[6], l += t * U, p += t * B, d += t * V, g += t * z, w += t * j, b += t * $, E += t * K, I += t * k, _ += t * X, v += t * Z, S += t * ee, N += t * te, y += t * Q, m += t * re, P += t * ie, L += t * se, t = e[7], p += t * U, d += t * B, g += t * V, w += t * z, b += t * j, E += t * $, I += t * K, _ += t * k, v += t * X, S += t * Z, N += t * ee, y += t * te, m += t * Q, P += t * re, L += t * ie, R += t * se, t = e[8], d += t * U, g += t * B, w += t * V, b += t * z, E += t * j, I += t * $, _ += t * K, v += t * k, S += t * X, N += t * Z, y += t * ee, m += t * te, P += t * Q, L += t * re, R += t * ie, x += t * se, t = e[9], g += t * U, w += t * B, b += t * V, E += t * z, I += t * j, _ += t * $, v += t * K, S += t * k, N += t * X, y += t * Z, m += t * ee, P += t * te, L += t * Q, R += t * re, x += t * ie, D += t * se, t = e[10], w += t * U, b += t * B, E += t * V, I += t * z, _ += t * j, v += t * $, S += t * K, N += t * k, y += t * X, m += t * Z, P += t * ee, L += t * te, R += t * Q, x += t * re, D += t * ie, O += t * se, t = e[11], b += t * U, E += t * B, I += t * V, _ += t * z, v += t * j, S += t * $, N += t * K, y += t * k, m += t * X, P += t * Z, L += t * ee, R += t * te, x += t * Q, D += t * re, O += t * ie, M += t * se, t = e[12], E += t * U, I += t * B, _ += t * V, v += t * z, S += t * j, N += t * $, y += t * K, m += t * k, P += t * X, L += t * Z, R += t * ee, x += t * te, D += t * Q, O += t * re, M += t * ie, q += t * se, t = e[13], I += t * U, _ += t * B, v += t * V, S += t * z, N += t * j, y += t * $, m += t * K, P += t * k, L += t * X, R += t * Z, x += t * ee, D += t * te, O += t * Q, M += t * re, q += t * ie, C += t * se, t = e[14], _ += t * U, v += t * B, S += t * V, N += t * z, y += t * j, m += t * $, P += t * K, L += t * k, R += t * X, x += t * Z, D += t * ee, O += t * te, M += t * Q, q += t * re, C += t * ie, G += t * se, t = e[15], v += t * U, S += t * B, N += t * V, y += t * z, m += t * j, P += t * $, L += t * K, R += t * k, x += t * X, D += t * Z, O += t * ee, M += t * te, q += t * Q, C += t * re, G += t * ie, he += t * se, n += 38 * S, o += 38 * N, a += 38 * y, c += 38 * m, u += 38 * P, h += 38 * L, l += 38 * R, p += 38 * x, d += 38 * D, g += 38 * O, w += 38 * M, b += 38 * q, E += 38 * C, I += 38 * G, _ += 38 * he, s = 1, t = n + s + 65535, s = Math.floor(t / 65536), n = t - s * 65536, t = o + s + 65535, s = Math.floor(t / 65536), o = t - s * 65536, t = a + s + 65535, s = Math.floor(t / 65536), a = t - s * 65536, t = c + s + 65535, s = Math.floor(t / 65536), c = t - s * 65536, t = u + s + 65535, s = Math.floor(t / 65536), u = t - s * 65536, t = h + s + 65535, s = Math.floor(t / 65536), h = t - s * 65536, t = l + s + 65535, s = Math.floor(t / 65536), l = t - s * 65536, t = p + s + 65535, s = Math.floor(t / 65536), p = t - s * 65536, t = d + s + 65535, s = Math.floor(t / 65536), d = t - s * 65536, t = g + s + 65535, s = Math.floor(t / 65536), g = t - s * 65536, t = w + s + 65535, s = Math.floor(t / 65536), w = t - s * 65536, t = b + s + 65535, s = Math.floor(t / 65536), b = t - s * 65536, t = E + s + 65535, s = Math.floor(t / 65536), E = t - s * 65536, t = I + s + 65535, s = Math.floor(t / 65536), I = t - s * 65536, t = _ + s + 65535, s = Math.floor(t / 65536), _ = t - s * 65536, t = v + s + 65535, s = Math.floor(t / 65536), v = t - s * 65536, n += s - 1 + 37 * (s - 1), s = 1, t = n + s + 65535, s = Math.floor(t / 65536), n = t - s * 65536, t = o + s + 65535, s = Math.floor(t / 65536), o = t - s * 65536, t = a + s + 65535, s = Math.floor(t / 65536), a = t - s * 65536, t = c + s + 65535, s = Math.floor(t / 65536), c = t - s * 65536, t = u + s + 65535, s = Math.floor(t / 65536), u = t - s * 65536, t = h + s + 65535, s = Math.floor(t / 65536), h = t - s * 65536, t = l + s + 65535, s = Math.floor(t / 65536), l = t - s * 65536, t = p + s + 65535, s = Math.floor(t / 65536), p = t - s * 65536, t = d + s + 65535, s = Math.floor(t / 65536), d = t - s * 65536, t = g + s + 65535, s = Math.floor(t / 65536), g = t - s * 65536, t = w + s + 65535, s = Math.floor(t / 65536), w = t - s * 65536, t = b + s + 65535, s = Math.floor(t / 65536), b = t - s * 65536, t = E + s + 65535, s = Math.floor(t / 65536), E = t - s * 65536, t = I + s + 65535, s = Math.floor(t / 65536), I = t - s * 65536, t = _ + s + 65535, s = Math.floor(t / 65536), _ = t - s * 65536, t = v + s + 65535, s = Math.floor(t / 65536), v = t - s * 65536, n += s - 1 + 37 * (s - 1), i[0] = n, i[1] = o, i[2] = a, i[3] = c, i[4] = u, i[5] = h, i[6] = l, i[7] = p, i[8] = d, i[9] = g, i[10] = w, i[11] = b, i[12] = E, i[13] = I, i[14] = _, i[15] = v;\n    }\n    function Wr(i, e) {\n        ot(i, e, e);\n    }\n    function Sy(i, e) {\n        let r = Xe();\n        for(let t = 0; t < 16; t++)r[t] = e[t];\n        for(let t = 253; t >= 0; t--)Wr(r, r), t !== 2 && t !== 4 && ot(r, r, e);\n        for(let t = 0; t < 16; t++)i[t] = r[t];\n    }\n    function Un(i, e) {\n        let r = new Uint8Array(32), t = new Float64Array(80), s = Xe(), n = Xe(), o = Xe(), a = Xe(), c = Xe(), u = Xe();\n        for(let d = 0; d < 31; d++)r[d] = i[d];\n        r[31] = i[31] & 127 | 64, r[0] &= 248, Dy(t, e);\n        for(let d = 0; d < 16; d++)n[d] = t[d];\n        s[0] = a[0] = 1;\n        for(let d = 254; d >= 0; --d){\n            let g = r[d >>> 3] >>> (d & 7) & 1;\n            Gr(s, n, g), Gr(o, a, g), Bi(c, s, o), Vi(s, s, o), Bi(o, n, a), Vi(n, n, a), Wr(a, c), Wr(u, s), ot(s, o, s), ot(o, n, c), Bi(c, s, o), Vi(s, s, o), Wr(n, s), Vi(o, a, u), ot(s, o, _y), Bi(s, s, a), ot(o, o, s), ot(s, a, u), ot(a, n, t), Wr(n, c), Gr(s, n, g), Gr(o, a, g);\n        }\n        for(let d = 0; d < 16; d++)t[d + 16] = s[d], t[d + 32] = o[d], t[d + 48] = n[d], t[d + 64] = a[d];\n        let h = t.subarray(32), l = t.subarray(16);\n        Sy(h, h), ot(l, l, h);\n        let p = new Uint8Array(32);\n        return xy(p, l), p;\n    }\n    ge.scalarMult = Un;\n    function xu(i) {\n        return Un(i, _u);\n    }\n    ge.scalarMultBase = xu;\n    function Du(i) {\n        if (i.length !== ge.SECRET_KEY_LENGTH) throw new Error(\"x25519: seed must be \".concat(ge.SECRET_KEY_LENGTH, \" bytes\"));\n        let e = new Uint8Array(i);\n        return {\n            publicKey: xu(e),\n            secretKey: e\n        };\n    }\n    ge.generateKeyPairFromSeed = Du;\n    function Iy(i) {\n        let e = (0, Ey.randomBytes)(32, i), r = Du(e);\n        return (0, vy.wipe)(e), r;\n    }\n    ge.generateKeyPair = Iy;\n    function Ry(i, e) {\n        let r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1;\n        if (i.length !== ge.PUBLIC_KEY_LENGTH) throw new Error(\"X25519: incorrect secret key length\");\n        if (e.length !== ge.PUBLIC_KEY_LENGTH) throw new Error(\"X25519: incorrect public key length\");\n        let t = Un(i, e);\n        if (r) {\n            let s = 0;\n            for(let n = 0; n < t.length; n++)s |= t[n];\n            if (s === 0) throw new Error(\"X25519: invalid shared key\");\n        }\n        return t;\n    }\n    ge.sharedKey = Ry;\n});\n_c71 = Su;\nvar Mn = (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(_c72 = (le)=>{\n    \"use strict\";\n    Object.defineProperty(le, \"__esModule\", {\n        value: !0\n    });\n    le.getLocalStorage = le.getLocalStorageOrThrow = le.getCrypto = le.getCryptoOrThrow = le.getLocation = le.getLocationOrThrow = le.getNavigator = le.getNavigatorOrThrow = le.getDocument = le.getDocumentOrThrow = le.getFromWindowOrThrow = le.getFromWindow = void 0;\n    function Ft(i) {\n        let e;\n        return typeof window != \"undefined\" && typeof window[i] != \"undefined\" && (e = window[i]), e;\n    }\n    le.getFromWindow = Ft;\n    function hr(i) {\n        let e = Ft(i);\n        if (!e) throw new Error(\"\".concat(i, \" is not defined in Window\"));\n        return e;\n    }\n    le.getFromWindowOrThrow = hr;\n    function By() {\n        return hr(\"document\");\n    }\n    le.getDocumentOrThrow = By;\n    function Vy() {\n        return Ft(\"document\");\n    }\n    le.getDocument = Vy;\n    function zy() {\n        return hr(\"navigator\");\n    }\n    le.getNavigatorOrThrow = zy;\n    function $y() {\n        return Ft(\"navigator\");\n    }\n    le.getNavigator = $y;\n    function Ky() {\n        return hr(\"location\");\n    }\n    le.getLocationOrThrow = Ky;\n    function ky() {\n        return Ft(\"location\");\n    }\n    le.getLocation = ky;\n    function Hy() {\n        return hr(\"crypto\");\n    }\n    le.getCryptoOrThrow = Hy;\n    function Gy() {\n        return Ft(\"crypto\");\n    }\n    le.getCrypto = Gy;\n    function Wy() {\n        return hr(\"localStorage\");\n    }\n    le.getLocalStorageOrThrow = Wy;\n    function Jy() {\n        return Ft(\"localStorage\");\n    }\n    le.getLocalStorage = Jy;\n});\n_c73 = Mn;\nvar Cu = (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(_c74 = (zi)=>{\n    \"use strict\";\n    Object.defineProperty(zi, \"__esModule\", {\n        value: !0\n    });\n    zi.getWindowMetadata = void 0;\n    var Pu = Mn();\n    function Yy() {\n        let i, e;\n        try {\n            i = Pu.getDocumentOrThrow(), e = Pu.getLocationOrThrow();\n        } catch (l) {\n            return null;\n        }\n        function r() {\n            let l = i.getElementsByTagName(\"link\"), p = [];\n            for(let d = 0; d < l.length; d++){\n                let g = l[d], w = g.getAttribute(\"rel\");\n                if (w && w.toLowerCase().indexOf(\"icon\") > -1) {\n                    let b = g.getAttribute(\"href\");\n                    if (b) if (b.toLowerCase().indexOf(\"https:\") === -1 && b.toLowerCase().indexOf(\"http:\") === -1 && b.indexOf(\"//\") !== 0) {\n                        let E = e.protocol + \"//\" + e.host;\n                        if (b.indexOf(\"/\") === 0) E += b;\n                        else {\n                            let I = e.pathname.split(\"/\");\n                            I.pop();\n                            let _ = I.join(\"/\");\n                            E += _ + \"/\" + b;\n                        }\n                        p.push(E);\n                    } else if (b.indexOf(\"//\") === 0) {\n                        let E = e.protocol + b;\n                        p.push(E);\n                    } else p.push(b);\n                }\n            }\n            return p;\n        }\n        function t() {\n            for(var _len = arguments.length, l = new Array(_len), _key = 0; _key < _len; _key++){\n                l[_key] = arguments[_key];\n            }\n            let p = i.getElementsByTagName(\"meta\");\n            for(let d = 0; d < p.length; d++){\n                let g = p[d], w = [\n                    \"itemprop\",\n                    \"property\",\n                    \"name\"\n                ].map((b)=>g.getAttribute(b)).filter((b)=>b ? l.includes(b) : !1);\n                if (w.length && w) {\n                    let b = g.getAttribute(\"content\");\n                    if (b) return b;\n                }\n            }\n            return \"\";\n        }\n        function s() {\n            let l = t(\"name\", \"og:site_name\", \"og:title\", \"twitter:title\");\n            return l || (l = i.title), l;\n        }\n        function n() {\n            return t(\"description\", \"og:description\", \"twitter:description\", \"keywords\");\n        }\n        let o = s(), a = n(), c = e.origin, u = r();\n        return {\n            description: a,\n            url: c,\n            icons: u,\n            name: o\n        };\n    }\n    zi.getWindowMetadata = Yy;\n});\n_c75 = Cu;\nvar Lu = (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(_c76 = (Wv, Au)=>{\n    \"use strict\";\n    Au.exports = (i)=>encodeURIComponent(i).replace(/[!'()*]/g, (e)=>\"%\".concat(e.charCodeAt(0).toString(16).toUpperCase()));\n});\n_c77 = Lu;\nvar ju = (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.g)((Jv, qu)=>{\n    \"use strict\";\n    var Mu = \"%[a-f0-9]{2}\", Fu = new RegExp(\"(\" + Mu + \")|([^%]+?)\", \"gi\"), Uu = new RegExp(\"(\" + Mu + \")+\", \"gi\");\n    function qn(i, e) {\n        try {\n            return [\n                decodeURIComponent(i.join(\"\"))\n            ];\n        } catch (s) {}\n        if (i.length === 1) return i;\n        e = e || 1;\n        var r = i.slice(0, e), t = i.slice(e);\n        return Array.prototype.concat.call([], qn(r), qn(t));\n    }\n    function Xy(i) {\n        try {\n            return decodeURIComponent(i);\n        } catch (t) {\n            for(var e = i.match(Fu) || [], r = 1; r < e.length; r++)i = qn(e, r).join(\"\"), e = i.match(Fu) || [];\n            return i;\n        }\n    }\n    function Qy(i) {\n        for(var e = {\n            \"%FE%FF\": \"��\",\n            \"%FF%FE\": \"��\"\n        }, r = Uu.exec(i); r;){\n            try {\n                e[r[0]] = decodeURIComponent(r[0]);\n            } catch (a) {\n                var t = Xy(r[0]);\n                t !== r[0] && (e[r[0]] = t);\n            }\n            r = Uu.exec(i);\n        }\n        e[\"%C2\"] = \"�\";\n        for(var s = Object.keys(e), n = 0; n < s.length; n++){\n            var o = s[n];\n            i = i.replace(new RegExp(o, \"g\"), e[o]);\n        }\n        return i;\n    }\n    qu.exports = function(i) {\n        if (typeof i != \"string\") throw new TypeError(\"Expected `encodedURI` to be of type `string`, got `\" + typeof i + \"`\");\n        try {\n            return i = i.replace(/\\+/g, \" \"), decodeURIComponent(i);\n        } catch (e) {\n            return Qy(i);\n        }\n    };\n});\nvar Vu = (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(_c78 = (Yv, Bu)=>{\n    \"use strict\";\n    Bu.exports = (i, e)=>{\n        if (!(typeof i == \"string\" && typeof e == \"string\")) throw new TypeError(\"Expected the arguments to be of type `string`\");\n        if (e === \"\") return [\n            i\n        ];\n        let r = i.indexOf(e);\n        return r === -1 ? [\n            i\n        ] : [\n            i.slice(0, r),\n            i.slice(r + e.length)\n        ];\n    };\n});\n_c79 = Vu;\nvar $u = (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.g)((Xv, zu)=>{\n    \"use strict\";\n    zu.exports = function(i, e) {\n        for(var r = {}, t = Object.keys(i), s = Array.isArray(e), n = 0; n < t.length; n++){\n            var o = t[n], a = i[o];\n            (s ? e.indexOf(o) !== -1 : e(o, a, i)) && (r[o] = a);\n        }\n        return r;\n    };\n});\nvar Xu = (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(_c80 = (Ue)=>{\n    \"use strict\";\n    var Zy = Lu(), em = ju(), ku = Vu(), tm = $u(), rm = (i)=>i == null, jn = Symbol(\"encodeFragmentIdentifier\");\n    function im(i) {\n        switch(i.arrayFormat){\n            case \"index\":\n                return (e)=>(r, t)=>{\n                        let s = r.length;\n                        return t === void 0 || i.skipNull && t === null || i.skipEmptyString && t === \"\" ? r : t === null ? [\n                            ...r,\n                            [\n                                ye(e, i),\n                                \"[\",\n                                s,\n                                \"]\"\n                            ].join(\"\")\n                        ] : [\n                            ...r,\n                            [\n                                ye(e, i),\n                                \"[\",\n                                ye(s, i),\n                                \"]=\",\n                                ye(t, i)\n                            ].join(\"\")\n                        ];\n                    };\n            case \"bracket\":\n                return (e)=>(r, t)=>t === void 0 || i.skipNull && t === null || i.skipEmptyString && t === \"\" ? r : t === null ? [\n                            ...r,\n                            [\n                                ye(e, i),\n                                \"[]\"\n                            ].join(\"\")\n                        ] : [\n                            ...r,\n                            [\n                                ye(e, i),\n                                \"[]=\",\n                                ye(t, i)\n                            ].join(\"\")\n                        ];\n            case \"colon-list-separator\":\n                return (e)=>(r, t)=>t === void 0 || i.skipNull && t === null || i.skipEmptyString && t === \"\" ? r : t === null ? [\n                            ...r,\n                            [\n                                ye(e, i),\n                                \":list=\"\n                            ].join(\"\")\n                        ] : [\n                            ...r,\n                            [\n                                ye(e, i),\n                                \":list=\",\n                                ye(t, i)\n                            ].join(\"\")\n                        ];\n            case \"comma\":\n            case \"separator\":\n            case \"bracket-separator\":\n                {\n                    let e = i.arrayFormat === \"bracket-separator\" ? \"[]=\" : \"=\";\n                    return (r)=>(t, s)=>s === void 0 || i.skipNull && s === null || i.skipEmptyString && s === \"\" ? t : (s = s === null ? \"\" : s, t.length === 0 ? [\n                                [\n                                    ye(r, i),\n                                    e,\n                                    ye(s, i)\n                                ].join(\"\")\n                            ] : [\n                                [\n                                    t,\n                                    ye(s, i)\n                                ].join(i.arrayFormatSeparator)\n                            ]);\n                }\n            default:\n                return (e)=>(r, t)=>t === void 0 || i.skipNull && t === null || i.skipEmptyString && t === \"\" ? r : t === null ? [\n                            ...r,\n                            ye(e, i)\n                        ] : [\n                            ...r,\n                            [\n                                ye(e, i),\n                                \"=\",\n                                ye(t, i)\n                            ].join(\"\")\n                        ];\n        }\n    }\n    function sm(i) {\n        let e;\n        switch(i.arrayFormat){\n            case \"index\":\n                return (r, t, s)=>{\n                    if (e = /\\[(\\d*)\\]$/.exec(r), r = r.replace(/\\[\\d*\\]$/, \"\"), !e) {\n                        s[r] = t;\n                        return;\n                    }\n                    s[r] === void 0 && (s[r] = {}), s[r][e[1]] = t;\n                };\n            case \"bracket\":\n                return (r, t, s)=>{\n                    if (e = /(\\[\\])$/.exec(r), r = r.replace(/\\[\\]$/, \"\"), !e) {\n                        s[r] = t;\n                        return;\n                    }\n                    if (s[r] === void 0) {\n                        s[r] = [\n                            t\n                        ];\n                        return;\n                    }\n                    s[r] = [].concat(s[r], t);\n                };\n            case \"colon-list-separator\":\n                return (r, t, s)=>{\n                    if (e = /(:list)$/.exec(r), r = r.replace(/:list$/, \"\"), !e) {\n                        s[r] = t;\n                        return;\n                    }\n                    if (s[r] === void 0) {\n                        s[r] = [\n                            t\n                        ];\n                        return;\n                    }\n                    s[r] = [].concat(s[r], t);\n                };\n            case \"comma\":\n            case \"separator\":\n                return (r, t, s)=>{\n                    let n = typeof t == \"string\" && t.includes(i.arrayFormatSeparator), o = typeof t == \"string\" && !n && at(t, i).includes(i.arrayFormatSeparator);\n                    t = o ? at(t, i) : t;\n                    let a = n || o ? t.split(i.arrayFormatSeparator).map((c)=>at(c, i)) : t === null ? t : at(t, i);\n                    s[r] = a;\n                };\n            case \"bracket-separator\":\n                return (r, t, s)=>{\n                    let n = /(\\[\\])$/.test(r);\n                    if (r = r.replace(/\\[\\]$/, \"\"), !n) {\n                        s[r] = t && at(t, i);\n                        return;\n                    }\n                    let o = t === null ? [] : t.split(i.arrayFormatSeparator).map((a)=>at(a, i));\n                    if (s[r] === void 0) {\n                        s[r] = o;\n                        return;\n                    }\n                    s[r] = [].concat(s[r], o);\n                };\n            default:\n                return (r, t, s)=>{\n                    if (s[r] === void 0) {\n                        s[r] = t;\n                        return;\n                    }\n                    s[r] = [].concat(s[r], t);\n                };\n        }\n    }\n    function Hu(i) {\n        if (typeof i != \"string\" || i.length !== 1) throw new TypeError(\"arrayFormatSeparator must be single character string\");\n    }\n    function ye(i, e) {\n        return e.encode ? e.strict ? Zy(i) : encodeURIComponent(i) : i;\n    }\n    function at(i, e) {\n        return e.decode ? em(i) : i;\n    }\n    function Gu(i) {\n        return Array.isArray(i) ? i.sort() : typeof i == \"object\" ? Gu(Object.keys(i)).sort((e, r)=>Number(e) - Number(r)).map((e)=>i[e]) : i;\n    }\n    function Wu(i) {\n        let e = i.indexOf(\"#\");\n        return e !== -1 && (i = i.slice(0, e)), i;\n    }\n    function nm(i) {\n        let e = \"\", r = i.indexOf(\"#\");\n        return r !== -1 && (e = i.slice(r)), e;\n    }\n    function Ju(i) {\n        i = Wu(i);\n        let e = i.indexOf(\"?\");\n        return e === -1 ? \"\" : i.slice(e + 1);\n    }\n    function Ku(i, e) {\n        return e.parseNumbers && !Number.isNaN(Number(i)) && typeof i == \"string\" && i.trim() !== \"\" ? i = Number(i) : e.parseBooleans && i !== null && (i.toLowerCase() === \"true\" || i.toLowerCase() === \"false\") && (i = i.toLowerCase() === \"true\"), i;\n    }\n    function Yu(i, e) {\n        e = Object.assign({\n            decode: !0,\n            sort: !0,\n            arrayFormat: \"none\",\n            arrayFormatSeparator: \",\",\n            parseNumbers: !1,\n            parseBooleans: !1\n        }, e), Hu(e.arrayFormatSeparator);\n        let r = sm(e), t = Object.create(null);\n        if (typeof i != \"string\" || (i = i.trim().replace(/^[?#&]/, \"\"), !i)) return t;\n        for (let s of i.split(\"&\")){\n            if (s === \"\") continue;\n            let [n, o] = ku(e.decode ? s.replace(/\\+/g, \" \") : s, \"=\");\n            o = o === void 0 ? null : [\n                \"comma\",\n                \"separator\",\n                \"bracket-separator\"\n            ].includes(e.arrayFormat) ? o : at(o, e), r(at(n, e), o, t);\n        }\n        for (let s of Object.keys(t)){\n            let n = t[s];\n            if (typeof n == \"object\" && n !== null) for (let o of Object.keys(n))n[o] = Ku(n[o], e);\n            else t[s] = Ku(n, e);\n        }\n        return e.sort === !1 ? t : (e.sort === !0 ? Object.keys(t).sort() : Object.keys(t).sort(e.sort)).reduce((s, n)=>{\n            let o = t[n];\n            return o && typeof o == \"object\" && !Array.isArray(o) ? s[n] = Gu(o) : s[n] = o, s;\n        }, Object.create(null));\n    }\n    Ue.extract = Ju;\n    Ue.parse = Yu;\n    Ue.stringify = (i, e)=>{\n        if (!i) return \"\";\n        e = Object.assign({\n            encode: !0,\n            strict: !0,\n            arrayFormat: \"none\",\n            arrayFormatSeparator: \",\"\n        }, e), Hu(e.arrayFormatSeparator);\n        let r = (o)=>e.skipNull && rm(i[o]) || e.skipEmptyString && i[o] === \"\", t = im(e), s = {};\n        for (let o of Object.keys(i))r(o) || (s[o] = i[o]);\n        let n = Object.keys(s);\n        return e.sort !== !1 && n.sort(e.sort), n.map((o)=>{\n            let a = i[o];\n            return a === void 0 ? \"\" : a === null ? ye(o, e) : Array.isArray(a) ? a.length === 0 && e.arrayFormat === \"bracket-separator\" ? ye(o, e) + \"[]\" : a.reduce(t(o), []).join(\"&\") : ye(o, e) + \"=\" + ye(a, e);\n        }).filter((o)=>o.length > 0).join(\"&\");\n    };\n    Ue.parseUrl = (i, e)=>{\n        e = Object.assign({\n            decode: !0\n        }, e);\n        let [r, t] = ku(i, \"#\");\n        return Object.assign({\n            url: r.split(\"?\")[0] || \"\",\n            query: Yu(Ju(i), e)\n        }, e && e.parseFragmentIdentifier && t ? {\n            fragmentIdentifier: at(t, e)\n        } : {});\n    };\n    Ue.stringifyUrl = (i, e)=>{\n        e = Object.assign({\n            encode: !0,\n            strict: !0,\n            [jn]: !0\n        }, e);\n        let r = Wu(i.url).split(\"?\")[0] || \"\", t = Ue.extract(i.url), s = Ue.parse(t, {\n            sort: !1\n        }), n = Object.assign(s, i.query), o = Ue.stringify(n, e);\n        o && (o = \"?\".concat(o));\n        let a = nm(i.url);\n        return i.fragmentIdentifier && (a = \"#\".concat(e[jn] ? ye(i.fragmentIdentifier, e) : i.fragmentIdentifier)), \"\".concat(r).concat(o).concat(a);\n    };\n    Ue.pick = (i, e, r)=>{\n        r = Object.assign({\n            parseFragmentIdentifier: !0,\n            [jn]: !1\n        }, r);\n        let { url: t, query: s, fragmentIdentifier: n } = Ue.parseUrl(i, r);\n        return Ue.stringifyUrl({\n            url: t,\n            query: tm(s, e),\n            fragmentIdentifier: n\n        }, r);\n    };\n    Ue.exclude = (i, e, r)=>{\n        let t = Array.isArray(e) ? (s)=>!e.includes(s) : (s, n)=>!e(s, n);\n        return Ue.pick(i, t, r);\n    };\n});\n_c81 = Xu;\nvar Yh = {};\n(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.h)(Yh, {\n    __assign: ()=>oo,\n    __asyncDelegator: ()=>a0,\n    __asyncGenerator: ()=>o0,\n    __asyncValues: ()=>c0,\n    __await: ()=>ri,\n    __awaiter: ()=>e0,\n    __classPrivateFieldGet: ()=>f0,\n    __classPrivateFieldSet: ()=>d0,\n    __createBinding: ()=>r0,\n    __decorate: ()=>Xm,\n    __exportStar: ()=>i0,\n    __extends: ()=>Jm,\n    __generator: ()=>t0,\n    __importDefault: ()=>l0,\n    __importStar: ()=>h0,\n    __makeTemplateObject: ()=>u0,\n    __metadata: ()=>Zm,\n    __param: ()=>Qm,\n    __read: ()=>Jh,\n    __rest: ()=>Ym,\n    __spread: ()=>s0,\n    __spreadArrays: ()=>n0,\n    __values: ()=>ao\n});\nfunction Jm(i, e) {\n    no(i, e);\n    function r() {\n        this.constructor = i;\n    }\n    i.prototype = e === null ? Object.create(e) : (r.prototype = e.prototype, new r);\n}\n_c82 = Jm;\nfunction Ym(i, e) {\n    var r = {};\n    for(var t in i)Object.prototype.hasOwnProperty.call(i, t) && e.indexOf(t) < 0 && (r[t] = i[t]);\n    if (i != null && typeof Object.getOwnPropertySymbols == \"function\") for(var s = 0, t = Object.getOwnPropertySymbols(i); s < t.length; s++)e.indexOf(t[s]) < 0 && Object.prototype.propertyIsEnumerable.call(i, t[s]) && (r[t[s]] = i[t[s]]);\n    return r;\n}\n_c83 = Ym;\nfunction Xm(i, e, r, t) {\n    var s = arguments.length, n = s < 3 ? e : t === null ? t = Object.getOwnPropertyDescriptor(e, r) : t, o;\n    if (typeof Reflect == \"object\" && typeof Reflect.decorate == \"function\") n = Reflect.decorate(i, e, r, t);\n    else for(var a = i.length - 1; a >= 0; a--)(o = i[a]) && (n = (s < 3 ? o(n) : s > 3 ? o(e, r, n) : o(e, r)) || n);\n    return s > 3 && n && Object.defineProperty(e, r, n), n;\n}\n_c84 = Xm;\nfunction Qm(i, e) {\n    return function(r, t) {\n        e(r, t, i);\n    };\n}\n_c85 = Qm;\nfunction Zm(i, e) {\n    if (typeof Reflect == \"object\" && typeof Reflect.metadata == \"function\") return Reflect.metadata(i, e);\n}\n_c86 = Zm;\nfunction e0(i, e, r, t) {\n    function s(n) {\n        return n instanceof r ? n : new r(function(o) {\n            o(n);\n        });\n    }\n    return new (r || (r = Promise))(function(n, o) {\n        function a(h) {\n            try {\n                u(t.next(h));\n            } catch (l) {\n                o(l);\n            }\n        }\n        function c(h) {\n            try {\n                u(t.throw(h));\n            } catch (l) {\n                o(l);\n            }\n        }\n        function u(h) {\n            h.done ? n(h.value) : s(h.value).then(a, c);\n        }\n        u((t = t.apply(i, e || [])).next());\n    });\n}\nfunction t0(i, e) {\n    var r = {\n        label: 0,\n        sent: function() {\n            if (n[0] & 1) throw n[1];\n            return n[1];\n        },\n        trys: [],\n        ops: []\n    }, t, s, n, o;\n    return o = {\n        next: a(0),\n        throw: a(1),\n        return: a(2)\n    }, typeof Symbol == \"function\" && (o[Symbol.iterator] = function() {\n        return this;\n    }), o;\n    function a(u) {\n        return function(h) {\n            return c([\n                u,\n                h\n            ]);\n        };\n    }\n    function c(u) {\n        if (t) throw new TypeError(\"Generator is already executing.\");\n        for(; r;)try {\n            if (t = 1, s && (n = u[0] & 2 ? s.return : u[0] ? s.throw || ((n = s.return) && n.call(s), 0) : s.next) && !(n = n.call(s, u[1])).done) return n;\n            switch(s = 0, n && (u = [\n                u[0] & 2,\n                n.value\n            ]), u[0]){\n                case 0:\n                case 1:\n                    n = u;\n                    break;\n                case 4:\n                    return r.label++, {\n                        value: u[1],\n                        done: !1\n                    };\n                case 5:\n                    r.label++, s = u[1], u = [\n                        0\n                    ];\n                    continue;\n                case 7:\n                    u = r.ops.pop(), r.trys.pop();\n                    continue;\n                default:\n                    if (n = r.trys, !(n = n.length > 0 && n[n.length - 1]) && (u[0] === 6 || u[0] === 2)) {\n                        r = 0;\n                        continue;\n                    }\n                    if (u[0] === 3 && (!n || u[1] > n[0] && u[1] < n[3])) {\n                        r.label = u[1];\n                        break;\n                    }\n                    if (u[0] === 6 && r.label < n[1]) {\n                        r.label = n[1], n = u;\n                        break;\n                    }\n                    if (n && r.label < n[2]) {\n                        r.label = n[2], r.ops.push(u);\n                        break;\n                    }\n                    n[2] && r.ops.pop(), r.trys.pop();\n                    continue;\n            }\n            u = e.call(i, r);\n        } catch (h) {\n            u = [\n                6,\n                h\n            ], s = 0;\n        } finally{\n            t = n = 0;\n        }\n        if (u[0] & 5) throw u[1];\n        return {\n            value: u[0] ? u[1] : void 0,\n            done: !0\n        };\n    }\n}\nfunction r0(i, e, r, t) {\n    t === void 0 && (t = r), i[t] = e[r];\n}\nfunction i0(i, e) {\n    for(var r in i)r !== \"default\" && !e.hasOwnProperty(r) && (e[r] = i[r]);\n}\nfunction ao(i) {\n    var e = typeof Symbol == \"function\" && Symbol.iterator, r = e && i[e], t = 0;\n    if (r) return r.call(i);\n    if (i && typeof i.length == \"number\") return {\n        next: function() {\n            return i && t >= i.length && (i = void 0), {\n                value: i && i[t++],\n                done: !i\n            };\n        }\n    };\n    throw new TypeError(e ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\nfunction Jh(i, e) {\n    var r = typeof Symbol == \"function\" && i[Symbol.iterator];\n    if (!r) return i;\n    var t = r.call(i), s, n = [], o;\n    try {\n        for(; (e === void 0 || e-- > 0) && !(s = t.next()).done;)n.push(s.value);\n    } catch (a) {\n        o = {\n            error: a\n        };\n    } finally{\n        try {\n            s && !s.done && (r = t.return) && r.call(t);\n        } finally{\n            if (o) throw o.error;\n        }\n    }\n    return n;\n}\n_c87 = Jh;\nfunction s0() {\n    for(var i = [], e = 0; e < arguments.length; e++)i = i.concat(Jh(arguments[e]));\n    return i;\n}\nfunction n0() {\n    for(var i = 0, e = 0, r = arguments.length; e < r; e++)i += arguments[e].length;\n    for(var t = Array(i), s = 0, e = 0; e < r; e++)for(var n = arguments[e], o = 0, a = n.length; o < a; o++, s++)t[s] = n[o];\n    return t;\n}\nfunction ri(i) {\n    return this instanceof ri ? (this.v = i, this) : new ri(i);\n}\nfunction o0(i, e, r) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var t = r.apply(i, e || []), s, n = [];\n    return s = {}, o(\"next\"), o(\"throw\"), o(\"return\"), s[Symbol.asyncIterator] = function() {\n        return this;\n    }, s;\n    function o(p) {\n        t[p] && (s[p] = function(d) {\n            return new Promise(function(g, w) {\n                n.push([\n                    p,\n                    d,\n                    g,\n                    w\n                ]) > 1 || a(p, d);\n            });\n        });\n    }\n    function a(p, d) {\n        try {\n            c(t[p](d));\n        } catch (g) {\n            l(n[0][3], g);\n        }\n    }\n    function c(p) {\n        p.value instanceof ri ? Promise.resolve(p.value.v).then(u, h) : l(n[0][2], p);\n    }\n    function u(p) {\n        a(\"next\", p);\n    }\n    function h(p) {\n        a(\"throw\", p);\n    }\n    function l(p, d) {\n        p(d), n.shift(), n.length && a(n[0][0], n[0][1]);\n    }\n}\nfunction a0(i) {\n    var e, r;\n    return e = {}, t(\"next\"), t(\"throw\", function(s) {\n        throw s;\n    }), t(\"return\"), e[Symbol.iterator] = function() {\n        return this;\n    }, e;\n    function t(s, n) {\n        e[s] = i[s] ? function(o) {\n            return (r = !r) ? {\n                value: ri(i[s](o)),\n                done: s === \"return\"\n            } : n ? n(o) : o;\n        } : n;\n    }\n}\nfunction c0(i) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var e = i[Symbol.asyncIterator], r;\n    return e ? e.call(i) : (i = typeof ao == \"function\" ? ao(i) : i[Symbol.iterator](), r = {}, t(\"next\"), t(\"throw\"), t(\"return\"), r[Symbol.asyncIterator] = function() {\n        return this;\n    }, r);\n    function t(n) {\n        r[n] = i[n] && function(o) {\n            return new Promise(function(a, c) {\n                o = i[n](o), s(a, c, o.done, o.value);\n            });\n        };\n    }\n    function s(n, o, a, c) {\n        Promise.resolve(c).then(function(u) {\n            n({\n                value: u,\n                done: a\n            });\n        }, o);\n    }\n}\nfunction u0(i, e) {\n    return Object.defineProperty ? Object.defineProperty(i, \"raw\", {\n        value: e\n    }) : i.raw = e, i;\n}\nfunction h0(i) {\n    if (i && i.__esModule) return i;\n    var e = {};\n    if (i != null) for(var r in i)Object.hasOwnProperty.call(i, r) && (e[r] = i[r]);\n    return e.default = i, e;\n}\nfunction l0(i) {\n    return i && i.__esModule ? i : {\n        default: i\n    };\n}\nfunction f0(i, e) {\n    if (!e.has(i)) throw new TypeError(\"attempted to get private field on non-instance\");\n    return e.get(i);\n}\nfunction d0(i, e, r) {\n    if (!e.has(i)) throw new TypeError(\"attempted to set private field on non-instance\");\n    return e.set(i, r), r;\n}\nvar no, oo, Xh = (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.f)(()=>{\n    \"use strict\";\n    no = function(i, e) {\n        return no = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(r, t) {\n            r.__proto__ = t;\n        } || function(r, t) {\n            for(var s in t)t.hasOwnProperty(s) && (r[s] = t[s]);\n        }, no(i, e);\n    };\n    oo = function() {\n        return oo = Object.assign || function(e) {\n            for(var r, t = 1, s = arguments.length; t < s; t++){\n                r = arguments[t];\n                for(var n in r)Object.prototype.hasOwnProperty.call(r, n) && (e[n] = r[n]);\n            }\n            return e;\n        }, oo.apply(this, arguments);\n    };\n});\nvar Zh = (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(_c88 = (xt)=>{\n    \"use strict\";\n    Object.defineProperty(xt, \"__esModule\", {\n        value: !0\n    });\n    xt.isBrowserCryptoAvailable = xt.getSubtleCrypto = xt.getBrowerCrypto = void 0;\n    function co() {\n        return (global == null ? void 0 : global.crypto) || (global == null ? void 0 : global.msCrypto) || {};\n    }\n    xt.getBrowerCrypto = co;\n    function Qh() {\n        let i = co();\n        return i.subtle || i.webkitSubtle;\n    }\n    xt.getSubtleCrypto = Qh;\n    function p0() {\n        return !!co() && !!Qh();\n    }\n    xt.isBrowserCryptoAvailable = p0;\n});\n_c89 = Zh;\nvar rl = (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.g)((Dt)=>{\n    \"use strict\";\n    Object.defineProperty(Dt, \"__esModule\", {\n        value: !0\n    });\n    Dt.isBrowser = Dt.isNode = Dt.isReactNative = void 0;\n    function el() {\n        return typeof document == \"undefined\" && typeof navigator != \"undefined\" && navigator.product === \"ReactNative\";\n    }\n    Dt.isReactNative = el;\n    function tl() {\n        return typeof process != \"undefined\" && typeof process.versions != \"undefined\" && typeof process.versions.node != \"undefined\";\n    }\n    Dt.isNode = tl;\n    function g0() {\n        return !el() && !tl();\n    }\n    Dt.isBrowser = g0;\n});\nvar uo = (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.g)((es)=>{\n    \"use strict\";\n    Object.defineProperty(es, \"__esModule\", {\n        value: !0\n    });\n    var il = (Xh(), (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.k)(Yh));\n    il.__exportStar(Zh(), es);\n    il.__exportStar(rl(), es);\n});\nvar hl = (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.g)((U_, ul)=>{\n    \"use strict\";\n    ul.exports = function() {\n        throw new Error(\"ws does not work in the browser. Browser clients must use the native WebSocket object\");\n    };\n});\nvar po = {};\n(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.h)(po, {\n    default: ()=>R0\n});\nfunction R0(i, e) {\n    return e = e || {}, new Promise(function(r, t) {\n        var s = new XMLHttpRequest, n = [], o = [], a = {}, c = function() {\n            return {\n                ok: (s.status / 100 | 0) == 2,\n                statusText: s.statusText,\n                status: s.status,\n                url: s.responseURL,\n                text: function() {\n                    return Promise.resolve(s.responseText);\n                },\n                json: function() {\n                    return Promise.resolve(s.responseText).then(JSON.parse);\n                },\n                blob: function() {\n                    return Promise.resolve(new Blob([\n                        s.response\n                    ]));\n                },\n                clone: c,\n                headers: {\n                    keys: function() {\n                        return n;\n                    },\n                    entries: function() {\n                        return o;\n                    },\n                    get: function(h) {\n                        return a[h.toLowerCase()];\n                    },\n                    has: function(h) {\n                        return h.toLowerCase() in a;\n                    }\n                }\n            };\n        };\n        for(var u in s.open(e.method || \"get\", i, !0), s.onload = function() {\n            s.getAllResponseHeaders().replace(/^(.*?):[^\\S\\n]*([\\s\\S]*?)$/gm, function(h, l, p) {\n                n.push(l = l.toLowerCase()), o.push([\n                    l,\n                    p\n                ]), a[l] = a[l] ? a[l] + \",\" + p : p;\n            }), r(c());\n        }, s.onerror = t, s.withCredentials = e.credentials == \"include\", e.headers)s.setRequestHeader(u, e.headers[u]);\n        s.send(e.body || null);\n    });\n}\n_c90 = R0;\nvar go = (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.f)(()=>{\n    \"use strict\";\n});\nvar gl = (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.g)((V_, pl)=>{\n    \"use strict\";\n    pl.exports = self.fetch || (self.fetch = (go(), (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.k)(po)).default || (go(), (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.k)(po)));\n});\nvar ht = (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.j)(kt());\nvar cf = /\"(?:_|\\\\u0{2}5[Ff]){2}(?:p|\\\\u0{2}70)(?:r|\\\\u0{2}72)(?:o|\\\\u0{2}6[Ff])(?:t|\\\\u0{2}74)(?:o|\\\\u0{2}6[Ff])(?:_|\\\\u0{2}5[Ff]){2}\"\\s*:/, uf = /\"(?:c|\\\\u0063)(?:o|\\\\u006[Ff])(?:n|\\\\u006[Ee])(?:s|\\\\u0073)(?:t|\\\\u0074)(?:r|\\\\u0072)(?:u|\\\\u0075)(?:c|\\\\u0063)(?:t|\\\\u0074)(?:o|\\\\u006[Ff])(?:r|\\\\u0072)\"\\s*:/, hf = /^\\s*[\"[{]|^\\s*-?\\d{1,16}(\\.\\d{1,17})?([Ee][+-]?\\d+)?\\s*$/;\nfunction lf(i, e) {\n    if (i === \"__proto__\" || i === \"constructor\" && e && typeof e == \"object\" && \"prototype\" in e) {\n        ff(i);\n        return;\n    }\n    return e;\n}\nfunction ff(i) {\n    console.warn('[destr] Dropping \"'.concat(i, '\" key to prevent prototype pollution.'));\n}\nfunction Er(i) {\n    let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    if (typeof i != \"string\") return i;\n    let r = i.trim();\n    if (i[0] === '\"' && i.at(-1) === '\"' && !i.includes(\"\\\\\")) return r.slice(1, -1);\n    if (r.length <= 9) {\n        let t = r.toLowerCase();\n        if (t === \"true\") return !0;\n        if (t === \"false\") return !1;\n        if (t === \"undefined\") return;\n        if (t === \"null\") return null;\n        if (t === \"nan\") return Number.NaN;\n        if (t === \"infinity\") return Number.POSITIVE_INFINITY;\n        if (t === \"-infinity\") return Number.NEGATIVE_INFINITY;\n    }\n    if (!hf.test(i)) {\n        if (e.strict) throw new SyntaxError(\"[destr] Invalid JSON\");\n        return i;\n    }\n    try {\n        if (cf.test(i) || uf.test(i)) {\n            if (e.strict) throw new Error(\"[destr] Possible prototype pollution\");\n            return JSON.parse(i, lf);\n        }\n        return JSON.parse(i);\n    } catch (t) {\n        if (e.strict) throw t;\n        return i;\n    }\n}\n_c91 = Er;\nfunction df(i) {\n    return !i || typeof i.then != \"function\" ? Promise.resolve(i) : i;\n}\nfunction be(i) {\n    for(var _len = arguments.length, e = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n        e[_key - 1] = arguments[_key];\n    }\n    try {\n        return df(i(...e));\n    } catch (r) {\n        return Promise.reject(r);\n    }\n}\nfunction pf(i) {\n    let e = typeof i;\n    return i === null || e !== \"object\" && e !== \"function\";\n}\nfunction gf(i) {\n    let e = Object.getPrototypeOf(i);\n    return !e || e.isPrototypeOf(Object);\n}\nfunction vr(i) {\n    if (pf(i)) return String(i);\n    if (gf(i) || Array.isArray(i)) return JSON.stringify(i);\n    if (typeof i.toJSON == \"function\") return vr(i.toJSON());\n    throw new Error(\"[unstorage] Cannot stringify value!\");\n}\nfunction aa() {\n    if (typeof Buffer === void 0) throw new TypeError(\"[unstorage] Buffer is not supported!\");\n}\nvar fs = \"base64:\";\nfunction ca(i) {\n    if (typeof i == \"string\") return i;\n    aa();\n    let e = Buffer.from(i).toString(\"base64\");\n    return fs + e;\n}\nfunction ua(i) {\n    return typeof i != \"string\" || !i.startsWith(fs) ? i : (aa(), Buffer.from(i.slice(fs.length), \"base64\"));\n}\nfunction Pe(i) {\n    return i ? i.split(\"?\")[0].replace(/[/\\\\]/g, \":\").replace(/:+/g, \":\").replace(/^:|:$/g, \"\") : \"\";\n}\n_c92 = Pe;\nfunction ha() {\n    for(var _len = arguments.length, i = new Array(_len), _key = 0; _key < _len; _key++){\n        i[_key] = arguments[_key];\n    }\n    return Pe(i.join(\":\"));\n}\nfunction _r(i) {\n    return i = Pe(i), i ? i + \":\" : \"\";\n}\nvar yf = \"memory\", mf = ()=>{\n    let i = new Map;\n    return {\n        name: yf,\n        options: {},\n        hasItem (e) {\n            return i.has(e);\n        },\n        getItem (e) {\n            var r;\n            return (r = i.get(e)) != null ? r : null;\n        },\n        getItemRaw (e) {\n            var r;\n            return (r = i.get(e)) != null ? r : null;\n        },\n        setItem (e, r) {\n            i.set(e, r);\n        },\n        setItemRaw (e, r) {\n            i.set(e, r);\n        },\n        removeItem (e) {\n            i.delete(e);\n        },\n        getKeys () {\n            return Array.from(i.keys());\n        },\n        clear () {\n            i.clear();\n        },\n        dispose () {\n            i.clear();\n        }\n    };\n};\nfunction da() {\n    let i = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n    let e = {\n        mounts: {\n            \"\": i.driver || mf()\n        },\n        mountpoints: [\n            \"\"\n        ],\n        watching: !1,\n        watchListeners: [],\n        unwatch: {}\n    }, r = (h)=>{\n        for (let l of e.mountpoints)if (h.startsWith(l)) return {\n            base: l,\n            relativeKey: h.slice(l.length),\n            driver: e.mounts[l]\n        };\n        return {\n            base: \"\",\n            relativeKey: h,\n            driver: e.mounts[\"\"]\n        };\n    }, t = (h, l)=>e.mountpoints.filter((p)=>p.startsWith(h) || l && h.startsWith(p)).map((p)=>({\n                relativeBase: h.length > p.length ? h.slice(p.length) : void 0,\n                mountpoint: p,\n                driver: e.mounts[p]\n            })), s = (h, l)=>{\n        if (e.watching) {\n            l = Pe(l);\n            for (let p of e.watchListeners)p(h, l);\n        }\n    }, n = ()=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n            if (!e.watching) {\n                e.watching = !0;\n                for(let h in e.mounts)e.unwatch[h] = yield la(e.mounts[h], s, h);\n            }\n        }), o = ()=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n            if (e.watching) {\n                for(let h in e.unwatch)yield e.unwatch[h]();\n                e.unwatch = {}, e.watching = !1;\n            }\n        }), a = (h, l, p)=>{\n        let d = new Map, g = (w)=>{\n            let b = d.get(w.base);\n            return b || (b = {\n                driver: w.driver,\n                base: w.base,\n                items: []\n            }, d.set(w.base, b)), b;\n        };\n        for (let w of h){\n            let b = typeof w == \"string\", E = Pe(b ? w : w.key), I = b ? void 0 : w.value, _ = b || !w.options ? l : (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.b)((0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.b)({}, l), w.options), v = r(E);\n            g(v).items.push({\n                key: E,\n                value: I,\n                relativeKey: v.relativeKey,\n                options: _\n            });\n        }\n        return Promise.all([\n            ...d.values()\n        ].map((w)=>p(w))).then((w)=>w.flat());\n    }, c = {\n        hasItem (h) {\n            let l = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n            h = Pe(h);\n            let { relativeKey: p, driver: d } = r(h);\n            return be(d.hasItem, p, l);\n        },\n        getItem (h) {\n            let l = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n            h = Pe(h);\n            let { relativeKey: p, driver: d } = r(h);\n            return be(d.getItem, p, l).then((g)=>Er(g));\n        },\n        getItems (h, l) {\n            return a(h, l, (p)=>p.driver.getItems ? be(p.driver.getItems, p.items.map((d)=>({\n                        key: d.relativeKey,\n                        options: d.options\n                    })), l).then((d)=>d.map((g)=>({\n                            key: ha(p.base, g.key),\n                            value: Er(g.value)\n                        }))) : Promise.all(p.items.map((d)=>be(p.driver.getItem, d.relativeKey, d.options).then((g)=>({\n                            key: d.key,\n                            value: Er(g)\n                        })))));\n        },\n        getItemRaw (h) {\n            let l = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n            h = Pe(h);\n            let { relativeKey: p, driver: d } = r(h);\n            return d.getItemRaw ? be(d.getItemRaw, p, l) : be(d.getItem, p, l).then((g)=>ua(g));\n        },\n        setItem (d, g) {\n            return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, arguments, function*(h, l) {\n                let p = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n                if (l === void 0) return c.removeItem(h);\n                h = Pe(h);\n                let { relativeKey: w, driver: b } = r(h);\n                b.setItem && (yield be(b.setItem, w, vr(l), p), b.watch || s(\"update\", h));\n            });\n        },\n        setItems (h, l) {\n            return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                yield a(h, l, (p)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                        p.driver.setItems && (yield be(p.driver.setItems, p.items.map((d)=>({\n                                key: d.relativeKey,\n                                value: vr(d.value),\n                                options: d.options\n                            })), l)), p.driver.setItem && (yield Promise.all(p.items.map((d)=>be(p.driver.setItem, d.relativeKey, vr(d.value), d.options))));\n                    }));\n            });\n        },\n        setItemRaw (d, g) {\n            return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, arguments, function*(h, l) {\n                let p = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n                if (l === void 0) return c.removeItem(h, p);\n                h = Pe(h);\n                let { relativeKey: w, driver: b } = r(h);\n                if (b.setItemRaw) yield be(b.setItemRaw, w, l, p);\n                else if (b.setItem) yield be(b.setItem, w, ca(l), p);\n                else return;\n                b.watch || s(\"update\", h);\n            });\n        },\n        removeItem (p) {\n            return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, arguments, function*(h) {\n                let l = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n                typeof l == \"boolean\" && (l = {\n                    removeMeta: l\n                }), h = Pe(h);\n                let { relativeKey: d, driver: g } = r(h);\n                g.removeItem && (yield be(g.removeItem, d, l), (l.removeMeta || l.removeMata) && (yield be(g.removeItem, d + \"$\", l)), g.watch || s(\"remove\", h));\n            });\n        },\n        getMeta (p) {\n            return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, arguments, function*(h) {\n                let l = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n                typeof l == \"boolean\" && (l = {\n                    nativeOnly: l\n                }), h = Pe(h);\n                let { relativeKey: d, driver: g } = r(h), w = Object.create(null);\n                if (g.getMeta && Object.assign(w, (yield be(g.getMeta, d, l))), !l.nativeOnly) {\n                    let b = yield be(g.getItem, d + \"$\", l).then((E)=>Er(E));\n                    b && typeof b == \"object\" && (typeof b.atime == \"string\" && (b.atime = new Date(b.atime)), typeof b.mtime == \"string\" && (b.mtime = new Date(b.mtime)), Object.assign(w, b));\n                }\n                return w;\n            });\n        },\n        setMeta (h, l) {\n            let p = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n            return this.setItem(h + \"$\", l, p);\n        },\n        removeMeta (h) {\n            let l = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n            return this.removeItem(h + \"$\", l);\n        },\n        getKeys (p) {\n            return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, arguments, function*(h) {\n                let l = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n                h = _r(h);\n                let d = t(h, !0), g = [], w = [];\n                for (let b of d){\n                    let I = (yield be(b.driver.getKeys, b.relativeBase, l)).map((_)=>b.mountpoint + Pe(_)).filter((_)=>!g.some((v)=>_.startsWith(v)));\n                    w.push(...I), g = [\n                        b.mountpoint,\n                        ...g.filter((_)=>!_.startsWith(b.mountpoint))\n                    ];\n                }\n                return h ? w.filter((b)=>b.startsWith(h) && !b.endsWith(\"$\")) : w.filter((b)=>!b.endsWith(\"$\"));\n            });\n        },\n        clear (p) {\n            return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, arguments, function*(h) {\n                let l = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n                h = _r(h), yield Promise.all(t(h, !1).map((d)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                        if (d.driver.clear) return be(d.driver.clear, d.relativeBase, l);\n                        if (d.driver.removeItem) {\n                            let g = yield d.driver.getKeys(d.relativeBase || \"\", l);\n                            return Promise.all(g.map((w)=>d.driver.removeItem(w, l)));\n                        }\n                    })));\n            });\n        },\n        dispose () {\n            return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                yield Promise.all(Object.values(e.mounts).map((h)=>fa(h)));\n            });\n        },\n        watch (h) {\n            return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                return yield n(), e.watchListeners.push(h), ()=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                        e.watchListeners = e.watchListeners.filter((l)=>l !== h), e.watchListeners.length === 0 && (yield o());\n                    });\n            });\n        },\n        unwatch () {\n            return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                e.watchListeners = [], yield o();\n            });\n        },\n        mount (h, l) {\n            if (h = _r(h), h && e.mounts[h]) throw new Error(\"already mounted at \".concat(h));\n            return h && (e.mountpoints.push(h), e.mountpoints.sort((p, d)=>d.length - p.length)), e.mounts[h] = l, e.watching && Promise.resolve(la(l, s, h)).then((p)=>{\n                e.unwatch[h] = p;\n            }).catch(console.error), c;\n        },\n        unmount (h) {\n            let l = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !0;\n            return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                h = _r(h), !(!h || !e.mounts[h]) && (e.watching && h in e.unwatch && (e.unwatch[h](), delete e.unwatch[h]), l && (yield fa(e.mounts[h])), e.mountpoints = e.mountpoints.filter((p)=>p !== h), delete e.mounts[h]);\n            });\n        },\n        getMount () {\n            let h = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : \"\";\n            h = Pe(h) + \":\";\n            let l = r(h);\n            return {\n                driver: l.driver,\n                base: l.base\n            };\n        },\n        getMounts () {\n            let h = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : \"\", l = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n            return h = Pe(h), t(h, l.parents).map((d)=>({\n                    driver: d.driver,\n                    base: d.mountpoint\n                }));\n        }\n    };\n    return c;\n}\nfunction la(i, e, r) {\n    return i.watch ? i.watch((t, s)=>e(t, r + s)) : ()=>{};\n}\nfunction fa(i) {\n    return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n        typeof i.dispose == \"function\" && (yield be(i.dispose));\n    });\n}\nfunction Ot(i) {\n    return new Promise((e, r)=>{\n        i.oncomplete = i.onsuccess = ()=>e(i.result), i.onabort = i.onerror = ()=>r(i.error);\n    });\n}\n_c93 = Ot;\nfunction ps(i, e) {\n    let r = indexedDB.open(i);\n    r.onupgradeneeded = ()=>r.result.createObjectStore(e);\n    let t = Ot(r);\n    return (s, n)=>t.then((o)=>n(o.transaction(e, s).objectStore(e)));\n}\nvar ds;\nfunction xr() {\n    return ds || (ds = ps(\"keyval-store\", \"keyval\")), ds;\n}\nfunction gs(i) {\n    let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : xr();\n    return e(\"readonly\", (r)=>Ot(r.get(i)));\n}\nfunction pa(i, e) {\n    let r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : xr();\n    return r(\"readwrite\", (t)=>(t.put(e, i), Ot(t.transaction)));\n}\nfunction ga(i) {\n    let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : xr();\n    return e(\"readwrite\", (r)=>(r.delete(i), Ot(r.transaction)));\n}\nfunction ya() {\n    let i = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : xr();\n    return i(\"readwrite\", (e)=>(e.clear(), Ot(e.transaction)));\n}\nfunction wf(i, e) {\n    return i.openCursor().onsuccess = function() {\n        this.result && (e(this.result), this.result.continue());\n    }, Ot(i.transaction);\n}\nfunction ma() {\n    let i = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : xr();\n    return i(\"readonly\", (e)=>{\n        if (e.getAllKeys) return Ot(e.getAllKeys());\n        let r = [];\n        return wf(e, (t)=>r.push(t.key)).then(()=>r);\n    });\n}\nvar bf = (i)=>JSON.stringify(i, (e, r)=>typeof r == \"bigint\" ? r.toString() + \"n\" : r), Ef = (i)=>{\n    let e = /([\\[:])?(\\d{17,}|(?:[9](?:[1-9]07199254740991|0[1-9]7199254740991|00[8-9]199254740991|007[2-9]99254740991|007199[3-9]54740991|0071992[6-9]4740991|00719925[5-9]740991|007199254[8-9]40991|0071992547[5-9]0991|00719925474[1-9]991|00719925474099[2-9])))([,\\}\\]])/g, r = i.replace(e, '$1\"$2n\"$3');\n    return JSON.parse(r, (t, s)=>typeof s == \"string\" && s.match(/^\\d+n$/) ? BigInt(s.substring(0, s.length - 1)) : s);\n};\nfunction dt(i) {\n    if (typeof i != \"string\") throw new Error(\"Cannot safe json parse value of type \".concat(typeof i));\n    try {\n        return Ef(i);\n    } catch (e) {\n        return i;\n    }\n}\nfunction Ge(i) {\n    return typeof i == \"string\" ? i : bf(i) || \"\";\n}\n_c94 = Ge;\nvar vf = \"idb-keyval\", _f = function() {\n    let i = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n    let e = i.base && i.base.length > 0 ? \"\".concat(i.base, \":\") : \"\", r = (n)=>e + n, t;\n    return i.dbName && i.storeName && (t = ps(i.dbName, i.storeName)), {\n        name: vf,\n        options: i,\n        hasItem (n) {\n            return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                return !(typeof (yield gs(r(n), t)) > \"u\");\n            });\n        },\n        getItem (n) {\n            return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                var o;\n                return (o = yield gs(r(n), t)) != null ? o : null;\n            });\n        },\n        setItem (n, o) {\n            return pa(r(n), o, t);\n        },\n        removeItem (n) {\n            return ga(r(n), t);\n        },\n        getKeys () {\n            return ma(t);\n        },\n        clear () {\n            return ya(t);\n        }\n    };\n}, xf = \"WALLET_CONNECT_V2_INDEXED_DB\", Df = \"keyvaluestorage\", ms = class {\n    getKeys() {\n        return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n            return this.indexedDb.getKeys();\n        });\n    }\n    getEntries() {\n        return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n            return (yield this.indexedDb.getItems((yield this.indexedDb.getKeys()))).map((e)=>[\n                    e.key,\n                    e.value\n                ]);\n        });\n    }\n    getItem(e) {\n        return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n            let r = yield this.indexedDb.getItem(e);\n            if (r !== null) return r;\n        });\n    }\n    setItem(e, r) {\n        return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n            yield this.indexedDb.setItem(e, Ge(r));\n        });\n    }\n    removeItem(e) {\n        return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n            yield this.indexedDb.removeItem(e);\n        });\n    }\n    constructor(){\n        this.indexedDb = da({\n            driver: _f({\n                dbName: xf,\n                storeName: Df\n            })\n        });\n    }\n}, ys = typeof globalThis < \"u\" ? globalThis : typeof window < \"u\" ? window : typeof global < \"u\" ? global : typeof self < \"u\" ? self : {}, hi = {\n    exports: {}\n};\n(function() {\n    let i;\n    function e() {}\n    i = e, i.prototype.getItem = function(r) {\n        return this.hasOwnProperty(r) ? String(this[r]) : null;\n    }, i.prototype.setItem = function(r, t) {\n        this[r] = String(t);\n    }, i.prototype.removeItem = function(r) {\n        delete this[r];\n    }, i.prototype.clear = function() {\n        let r = this;\n        Object.keys(r).forEach(function(t) {\n            r[t] = void 0, delete r[t];\n        });\n    }, i.prototype.key = function(r) {\n        return r = r || 0, Object.keys(this)[r];\n    }, i.prototype.__defineGetter__(\"length\", function() {\n        return Object.keys(this).length;\n    }), typeof ys < \"u\" && ys.localStorage ? hi.exports = ys.localStorage : typeof window < \"u\" && window.localStorage ? hi.exports = window.localStorage : hi.exports = new e;\n})();\nfunction Sf(i) {\n    var e;\n    return [\n        i[0],\n        dt((e = i[1]) != null ? e : \"\")\n    ];\n}\n_c95 = Sf;\nvar ws = class {\n    getKeys() {\n        return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n            return Object.keys(this.localStorage);\n        });\n    }\n    getEntries() {\n        return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n            return Object.entries(this.localStorage).map(Sf);\n        });\n    }\n    getItem(e) {\n        return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n            let r = this.localStorage.getItem(e);\n            if (r !== null) return dt(r);\n        });\n    }\n    setItem(e, r) {\n        return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n            this.localStorage.setItem(e, Ge(r));\n        });\n    }\n    removeItem(e) {\n        return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n            this.localStorage.removeItem(e);\n        });\n    }\n    constructor(){\n        this.localStorage = hi.exports;\n    }\n}, If = \"wc_storage_version\", wa = 1, Rf = (i, e, r)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(void 0, null, function*() {\n        let t = If, s = yield e.getItem(t);\n        if (s && s >= wa) {\n            r(e);\n            return;\n        }\n        let n = yield i.getKeys();\n        if (!n.length) {\n            r(e);\n            return;\n        }\n        let o = [];\n        for(; n.length;){\n            let a = n.shift();\n            if (!a) continue;\n            let c = a.toLowerCase();\n            if (c.includes(\"wc@\") || c.includes(\"walletconnect\") || c.includes(\"wc_\") || c.includes(\"wallet_connect\")) {\n                let u = yield i.getItem(a);\n                yield e.setItem(a, u), o.push(a);\n            }\n        }\n        yield e.setItem(t, wa), r(e), Of(i, o);\n    }), Of = (i, e)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(void 0, null, function*() {\n        e.length && e.forEach((r)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(void 0, null, function*() {\n                yield i.removeItem(r);\n            }));\n    }), li = class {\n    getKeys() {\n        return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n            return yield this.initialize(), this.storage.getKeys();\n        });\n    }\n    getEntries() {\n        return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n            return yield this.initialize(), this.storage.getEntries();\n        });\n    }\n    getItem(e) {\n        return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n            return yield this.initialize(), this.storage.getItem(e);\n        });\n    }\n    setItem(e, r) {\n        return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n            return yield this.initialize(), this.storage.setItem(e, r);\n        });\n    }\n    removeItem(e) {\n        return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n            return yield this.initialize(), this.storage.removeItem(e);\n        });\n    }\n    initialize() {\n        return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n            this.initialized || (yield new Promise((e)=>{\n                let r = setInterval(()=>{\n                    this.initialized && (clearInterval(r), e());\n                }, 20);\n            }));\n        });\n    }\n    constructor(){\n        this.initialized = !1, this.setInitialized = (r)=>{\n            this.storage = r, this.initialized = !0;\n        };\n        let e = new ws;\n        this.storage = e;\n        try {\n            let r = new ms;\n            Rf(e, r, this.setInitialized);\n        } catch (r) {\n            this.initialized = !0;\n        }\n    }\n};\nvar zt = (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.j)(qa());\nvar Wa = (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.j)(Bs()), Qt = (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.j)(Bs());\nvar Ud = {\n    level: \"info\"\n}, Lr = \"custom_context\", H1 = 1e3 * 1024, Vs = class {\n    get value() {\n        return this.nodeValue;\n    }\n    get size() {\n        return this.sizeInBytes;\n    }\n    constructor(e){\n        this.nodeValue = e, this.sizeInBytes = new TextEncoder().encode(this.nodeValue).length, this.next = null;\n    }\n}, ka = class {\n    append(e) {\n        let r = new Vs(e);\n        if (r.size > this.maxSizeInBytes) throw new Error(\"[LinkedList] Value too big to insert into list: \".concat(e, \" with size \").concat(r.size));\n        for(; this.size + r.size > this.maxSizeInBytes;)this.shift();\n        this.head ? (this.tail && (this.tail.next = r), this.tail = r) : (this.head = r, this.tail = r), this.lengthInNodes++, this.sizeInBytes += r.size;\n    }\n    shift() {\n        if (!this.head) return;\n        let e = this.head;\n        this.head = this.head.next, this.head || (this.tail = null), this.lengthInNodes--, this.sizeInBytes -= e.size;\n    }\n    toArray() {\n        let e = [], r = this.head;\n        for(; r !== null;)e.push(r.value), r = r.next;\n        return e;\n    }\n    get length() {\n        return this.lengthInNodes;\n    }\n    get size() {\n        return this.sizeInBytes;\n    }\n    toOrderedArray() {\n        return Array.from(this);\n    }\n    [Symbol.iterator]() {\n        let e = this.head;\n        return {\n            next: ()=>{\n                if (!e) return {\n                    done: !0,\n                    value: null\n                };\n                let r = e.value;\n                return e = e.next, {\n                    done: !1,\n                    value: r\n                };\n            }\n        };\n    }\n    constructor(e){\n        this.head = null, this.tail = null, this.lengthInNodes = 0, this.maxSizeInBytes = e, this.sizeInBytes = 0;\n    }\n};\nvar Md = Object.defineProperty, qd = Object.defineProperties, jd = Object.getOwnPropertyDescriptors, Ha = Object.getOwnPropertySymbols, Bd = Object.prototype.hasOwnProperty, Vd = Object.prototype.propertyIsEnumerable, Ga = (i, e, r)=>e in i ? Md(i, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: r\n    }) : i[e] = r, zd = (i, e)=>{\n    for(var r in e || (e = {}))Bd.call(e, r) && Ga(i, r, e[r]);\n    if (Ha) for (var r of Ha(e))Vd.call(e, r) && Ga(i, r, e[r]);\n    return i;\n}, $d = (i, e)=>qd(i, jd(e));\nfunction Fr(i) {\n    return $d(zd({}, i), {\n        level: (i == null ? void 0 : i.level) || Ud.level\n    });\n}\n_c96 = Fr;\nfunction Kd(i) {\n    let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : Lr;\n    return i[e] || \"\";\n}\n_c97 = Kd;\nfunction kd(i, e) {\n    let r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : Lr;\n    return i[r] = e, i;\n}\nfunction De(i) {\n    let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : Lr;\n    let r = \"\";\n    return typeof i.bindings > \"u\" ? r = Kd(i, e) : r = i.bindings().context || \"\", r;\n}\n_c98 = De;\nfunction Hd(i, e) {\n    let r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : Lr;\n    let t = De(i, r);\n    return t.trim() ? \"\".concat(t, \"/\").concat(e) : e;\n}\n_c99 = Hd;\nfunction Se(i, e) {\n    let r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : Lr;\n    let t = Hd(i, e, r), s = i.child({\n        context: t\n    });\n    return kd(s, t, r);\n}\n_c100 = Se;\n\nvar Kr = (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.j)(Sc()), iu = (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.j)(Ur()), su = (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.j)(Tt());\nvar Ic = \"EdDSA\", Rc = \"JWT\", on = \".\", an = \"base64url\", Oc = \"utf8\", Tc = \"utf8\", Nc = \":\", Pc = \"did\", Cc = \"key\", cn = \"base58btc\", Ac = \"z\", Lc = \"K36\";\nfunction At(i) {\n    return globalThis.Buffer != null ? new Uint8Array(i.buffer, i.byteOffset, i.byteLength) : i;\n}\n_c101 = At;\nfunction jr() {\n    let i = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;\n    return globalThis.Buffer != null && globalThis.Buffer.allocUnsafe != null ? At(globalThis.Buffer.allocUnsafe(i)) : new Uint8Array(i);\n}\nfunction ir(i, e) {\n    e || (e = i.reduce((s, n)=>s + n.length, 0));\n    let r = jr(e), t = 0;\n    for (let s of i)r.set(s, t), t += s.length;\n    return At(r);\n}\nvar dn = {};\n(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.h)(dn, {\n    identity: ()=>Hp\n});\nfunction Vp(i, e) {\n    if (i.length >= 255) throw new TypeError(\"Alphabet too long\");\n    for(var r = new Uint8Array(256), t = 0; t < r.length; t++)r[t] = 255;\n    for(var s = 0; s < i.length; s++){\n        var n = i.charAt(s), o = n.charCodeAt(0);\n        if (r[o] !== 255) throw new TypeError(n + \" is ambiguous\");\n        r[o] = s;\n    }\n    var a = i.length, c = i.charAt(0), u = Math.log(a) / Math.log(256), h = Math.log(256) / Math.log(a);\n    function l(g) {\n        if (g instanceof Uint8Array || (ArrayBuffer.isView(g) ? g = new Uint8Array(g.buffer, g.byteOffset, g.byteLength) : Array.isArray(g) && (g = Uint8Array.from(g))), !(g instanceof Uint8Array)) throw new TypeError(\"Expected Uint8Array\");\n        if (g.length === 0) return \"\";\n        for(var w = 0, b = 0, E = 0, I = g.length; E !== I && g[E] === 0;)E++, w++;\n        for(var _ = (I - E) * h + 1 >>> 0, v = new Uint8Array(_); E !== I;){\n            for(var S = g[E], N = 0, y = _ - 1; (S !== 0 || N < b) && y !== -1; y--, N++)S += 256 * v[y] >>> 0, v[y] = S % a >>> 0, S = S / a >>> 0;\n            if (S !== 0) throw new Error(\"Non-zero carry\");\n            b = N, E++;\n        }\n        for(var m = _ - b; m !== _ && v[m] === 0;)m++;\n        for(var P = c.repeat(w); m < _; ++m)P += i.charAt(v[m]);\n        return P;\n    }\n    function p(g) {\n        if (typeof g != \"string\") throw new TypeError(\"Expected String\");\n        if (g.length === 0) return new Uint8Array;\n        var w = 0;\n        if (g[w] !== \" \") {\n            for(var b = 0, E = 0; g[w] === c;)b++, w++;\n            for(var I = (g.length - w) * u + 1 >>> 0, _ = new Uint8Array(I); g[w];){\n                var v = r[g.charCodeAt(w)];\n                if (v === 255) return;\n                for(var S = 0, N = I - 1; (v !== 0 || S < E) && N !== -1; N--, S++)v += a * _[N] >>> 0, _[N] = v % 256 >>> 0, v = v / 256 >>> 0;\n                if (v !== 0) throw new Error(\"Non-zero carry\");\n                E = S, w++;\n            }\n            if (g[w] !== \" \") {\n                for(var y = I - E; y !== I && _[y] === 0;)y++;\n                for(var m = new Uint8Array(b + (I - y)), P = b; y !== I;)m[P++] = _[y++];\n                return m;\n            }\n        }\n    }\n    function d(g) {\n        var w = p(g);\n        if (w) return w;\n        throw new Error(\"Non-\".concat(e, \" character\"));\n    }\n    return {\n        encode: l,\n        decodeUnsafe: p,\n        decode: d\n    };\n}\n_c102 = Vp;\nvar zp = Vp, $p = zp, Fc = $p;\nvar pE = new Uint8Array(0);\nvar Uc = (i, e)=>{\n    if (i === e) return !0;\n    if (i.byteLength !== e.byteLength) return !1;\n    for(let r = 0; r < i.byteLength; r++)if (i[r] !== e[r]) return !1;\n    return !0;\n}, it = (i)=>{\n    if (i instanceof Uint8Array && i.constructor.name === \"Uint8Array\") return i;\n    if (i instanceof ArrayBuffer) return new Uint8Array(i);\n    if (ArrayBuffer.isView(i)) return new Uint8Array(i.buffer, i.byteOffset, i.byteLength);\n    throw new Error(\"Unknown type, must be binary type\");\n};\nvar Mc = (i)=>new TextEncoder().encode(i), qc = (i)=>new TextDecoder().decode(i);\nvar un = class {\n    encode(e) {\n        if (e instanceof Uint8Array) return \"\".concat(this.prefix).concat(this.baseEncode(e));\n        throw Error(\"Unknown type, must be binary type\");\n    }\n    constructor(e, r, t){\n        this.name = e, this.prefix = r, this.baseEncode = t;\n    }\n}, hn = class {\n    decode(e) {\n        if (typeof e == \"string\") {\n            if (e.codePointAt(0) !== this.prefixCodePoint) throw Error(\"Unable to decode multibase string \".concat(JSON.stringify(e), \", \").concat(this.name, \" decoder only supports inputs prefixed with \").concat(this.prefix));\n            return this.baseDecode(e.slice(this.prefix.length));\n        } else throw Error(\"Can only multibase decode strings\");\n    }\n    or(e) {\n        return Bc(this, e);\n    }\n    constructor(e, r, t){\n        if (this.name = e, this.prefix = r, r.codePointAt(0) === void 0) throw new Error(\"Invalid prefix character\");\n        this.prefixCodePoint = r.codePointAt(0), this.baseDecode = t;\n    }\n}, ln = class {\n    or(e) {\n        return Bc(this, e);\n    }\n    decode(e) {\n        let r = e[0], t = this.decoders[r];\n        if (t) return t.decode(e);\n        throw RangeError(\"Unable to decode multibase string \".concat(JSON.stringify(e), \", only inputs prefixed with \").concat(Object.keys(this.decoders), \" are supported\"));\n    }\n    constructor(e){\n        this.decoders = e;\n    }\n}, Bc = (i, e)=>new ln((0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.b)((0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.b)({}, i.decoders || {\n        [i.prefix]: i\n    }), e.decoders || {\n        [e.prefix]: e\n    })), fn = class {\n    encode(e) {\n        return this.encoder.encode(e);\n    }\n    decode(e) {\n        return this.decoder.decode(e);\n    }\n    constructor(e, r, t, s){\n        this.name = e, this.prefix = r, this.baseEncode = t, this.baseDecode = s, this.encoder = new un(e, r, t), this.decoder = new hn(e, r, s);\n    }\n}, sr = (param)=>{\n    let { name: i, prefix: e, encode: r, decode: t } = param;\n    return new fn(i, e, r, t);\n}, gt = (param)=>{\n    let { prefix: i, name: e, alphabet: r } = param;\n    let { encode: t, decode: s } = Fc(r, e);\n    return sr({\n        prefix: i,\n        name: e,\n        encode: t,\n        decode: (n)=>it(s(n))\n    });\n}, Kp = (i, e, r, t)=>{\n    let s = {};\n    for(let h = 0; h < e.length; ++h)s[e[h]] = h;\n    let n = i.length;\n    for(; i[n - 1] === \"=\";)--n;\n    let o = new Uint8Array(n * r / 8 | 0), a = 0, c = 0, u = 0;\n    for(let h = 0; h < n; ++h){\n        let l = s[i[h]];\n        if (l === void 0) throw new SyntaxError(\"Non-\".concat(t, \" character\"));\n        c = c << r | l, a += r, a >= 8 && (a -= 8, o[u++] = 255 & c >> a);\n    }\n    if (a >= r || 255 & c << 8 - a) throw new SyntaxError(\"Unexpected end of data\");\n    return o;\n}, kp = (i, e, r)=>{\n    let t = e[e.length - 1] === \"=\", s = (1 << r) - 1, n = \"\", o = 0, a = 0;\n    for(let c = 0; c < i.length; ++c)for(a = a << 8 | i[c], o += 8; o > r;)o -= r, n += e[s & a >> o];\n    if (o && (n += e[s & a << r - o]), t) for(; n.length * r & 7;)n += \"=\";\n    return n;\n}, pe = (param)=>{\n    let { name: i, prefix: e, bitsPerChar: r, alphabet: t } = param;\n    return sr({\n        prefix: e,\n        name: i,\n        encode (s) {\n            return kp(s, t, r);\n        },\n        decode (s) {\n            return Kp(s, t, r, i);\n        }\n    });\n};\nvar Hp = sr({\n    prefix: \"\\0\",\n    name: \"identity\",\n    encode: (i)=>qc(i),\n    decode: (i)=>Mc(i)\n});\nvar pn = {};\n(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.h)(pn, {\n    base2: ()=>Gp\n});\nvar Gp = pe({\n    prefix: \"0\",\n    name: \"base2\",\n    alphabet: \"01\",\n    bitsPerChar: 1\n});\nvar gn = {};\n(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.h)(gn, {\n    base8: ()=>Wp\n});\nvar Wp = pe({\n    prefix: \"7\",\n    name: \"base8\",\n    alphabet: \"01234567\",\n    bitsPerChar: 3\n});\nvar yn = {};\n(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.h)(yn, {\n    base10: ()=>Jp\n});\nvar Jp = gt({\n    prefix: \"9\",\n    name: \"base10\",\n    alphabet: \"0123456789\"\n});\nvar mn = {};\n(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.h)(mn, {\n    base16: ()=>Yp,\n    base16upper: ()=>Xp\n});\nvar Yp = pe({\n    prefix: \"f\",\n    name: \"base16\",\n    alphabet: \"0123456789abcdef\",\n    bitsPerChar: 4\n}), Xp = pe({\n    prefix: \"F\",\n    name: \"base16upper\",\n    alphabet: \"0123456789ABCDEF\",\n    bitsPerChar: 4\n});\nvar wn = {};\n(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.h)(wn, {\n    base32: ()=>nr,\n    base32hex: ()=>tg,\n    base32hexpad: ()=>ig,\n    base32hexpadupper: ()=>sg,\n    base32hexupper: ()=>rg,\n    base32pad: ()=>Zp,\n    base32padupper: ()=>eg,\n    base32upper: ()=>Qp,\n    base32z: ()=>ng\n});\nvar nr = pe({\n    prefix: \"b\",\n    name: \"base32\",\n    alphabet: \"abcdefghijklmnopqrstuvwxyz234567\",\n    bitsPerChar: 5\n}), Qp = pe({\n    prefix: \"B\",\n    name: \"base32upper\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\",\n    bitsPerChar: 5\n}), Zp = pe({\n    prefix: \"c\",\n    name: \"base32pad\",\n    alphabet: \"abcdefghijklmnopqrstuvwxyz234567=\",\n    bitsPerChar: 5\n}), eg = pe({\n    prefix: \"C\",\n    name: \"base32padupper\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=\",\n    bitsPerChar: 5\n}), tg = pe({\n    prefix: \"v\",\n    name: \"base32hex\",\n    alphabet: \"0123456789abcdefghijklmnopqrstuv\",\n    bitsPerChar: 5\n}), rg = pe({\n    prefix: \"V\",\n    name: \"base32hexupper\",\n    alphabet: \"0123456789ABCDEFGHIJKLMNOPQRSTUV\",\n    bitsPerChar: 5\n}), ig = pe({\n    prefix: \"t\",\n    name: \"base32hexpad\",\n    alphabet: \"0123456789abcdefghijklmnopqrstuv=\",\n    bitsPerChar: 5\n}), sg = pe({\n    prefix: \"T\",\n    name: \"base32hexpadupper\",\n    alphabet: \"0123456789ABCDEFGHIJKLMNOPQRSTUV=\",\n    bitsPerChar: 5\n}), ng = pe({\n    prefix: \"h\",\n    name: \"base32z\",\n    alphabet: \"ybndrfg8ejkmcpqxot1uwisza345h769\",\n    bitsPerChar: 5\n});\nvar bn = {};\n(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.h)(bn, {\n    base36: ()=>og,\n    base36upper: ()=>ag\n});\nvar og = gt({\n    prefix: \"k\",\n    name: \"base36\",\n    alphabet: \"0123456789abcdefghijklmnopqrstuvwxyz\"\n}), ag = gt({\n    prefix: \"K\",\n    name: \"base36upper\",\n    alphabet: \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n});\nvar En = {};\n(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.h)(En, {\n    base58btc: ()=>Je,\n    base58flickr: ()=>cg\n});\nvar Je = gt({\n    name: \"base58btc\",\n    prefix: \"z\",\n    alphabet: \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"\n}), cg = gt({\n    name: \"base58flickr\",\n    prefix: \"Z\",\n    alphabet: \"123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ\"\n});\nvar vn = {};\n(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.h)(vn, {\n    base64: ()=>ug,\n    base64pad: ()=>hg,\n    base64url: ()=>lg,\n    base64urlpad: ()=>fg\n});\nvar ug = pe({\n    prefix: \"m\",\n    name: \"base64\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\",\n    bitsPerChar: 6\n}), hg = pe({\n    prefix: \"M\",\n    name: \"base64pad\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\",\n    bitsPerChar: 6\n}), lg = pe({\n    prefix: \"u\",\n    name: \"base64url\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\",\n    bitsPerChar: 6\n}), fg = pe({\n    prefix: \"U\",\n    name: \"base64urlpad\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=\",\n    bitsPerChar: 6\n});\nvar _n = {};\n(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.h)(_n, {\n    base256emoji: ()=>mg\n});\nvar Vc = Array.from(\"\\uD83D\\uDE80\\uD83E\\uDE90☄\\uD83D\\uDEF0\\uD83C\\uDF0C\\uD83C\\uDF11\\uD83C\\uDF12\\uD83C\\uDF13\\uD83C\\uDF14\\uD83C\\uDF15\\uD83C\\uDF16\\uD83C\\uDF17\\uD83C\\uDF18\\uD83C\\uDF0D\\uD83C\\uDF0F\\uD83C\\uDF0E\\uD83D\\uDC09☀\\uD83D\\uDCBB\\uD83D\\uDDA5\\uD83D\\uDCBE\\uD83D\\uDCBF\\uD83D\\uDE02❤\\uD83D\\uDE0D\\uD83E\\uDD23\\uD83D\\uDE0A\\uD83D\\uDE4F\\uD83D\\uDC95\\uD83D\\uDE2D\\uD83D\\uDE18\\uD83D\\uDC4D\\uD83D\\uDE05\\uD83D\\uDC4F\\uD83D\\uDE01\\uD83D\\uDD25\\uD83E\\uDD70\\uD83D\\uDC94\\uD83D\\uDC96\\uD83D\\uDC99\\uD83D\\uDE22\\uD83E\\uDD14\\uD83D\\uDE06\\uD83D\\uDE44\\uD83D\\uDCAA\\uD83D\\uDE09☺\\uD83D\\uDC4C\\uD83E\\uDD17\\uD83D\\uDC9C\\uD83D\\uDE14\\uD83D\\uDE0E\\uD83D\\uDE07\\uD83C\\uDF39\\uD83E\\uDD26\\uD83C\\uDF89\\uD83D\\uDC9E✌✨\\uD83E\\uDD37\\uD83D\\uDE31\\uD83D\\uDE0C\\uD83C\\uDF38\\uD83D\\uDE4C\\uD83D\\uDE0B\\uD83D\\uDC97\\uD83D\\uDC9A\\uD83D\\uDE0F\\uD83D\\uDC9B\\uD83D\\uDE42\\uD83D\\uDC93\\uD83E\\uDD29\\uD83D\\uDE04\\uD83D\\uDE00\\uD83D\\uDDA4\\uD83D\\uDE03\\uD83D\\uDCAF\\uD83D\\uDE48\\uD83D\\uDC47\\uD83C\\uDFB6\\uD83D\\uDE12\\uD83E\\uDD2D❣\\uD83D\\uDE1C\\uD83D\\uDC8B\\uD83D\\uDC40\\uD83D\\uDE2A\\uD83D\\uDE11\\uD83D\\uDCA5\\uD83D\\uDE4B\\uD83D\\uDE1E\\uD83D\\uDE29\\uD83D\\uDE21\\uD83E\\uDD2A\\uD83D\\uDC4A\\uD83E\\uDD73\\uD83D\\uDE25\\uD83E\\uDD24\\uD83D\\uDC49\\uD83D\\uDC83\\uD83D\\uDE33✋\\uD83D\\uDE1A\\uD83D\\uDE1D\\uD83D\\uDE34\\uD83C\\uDF1F\\uD83D\\uDE2C\\uD83D\\uDE43\\uD83C\\uDF40\\uD83C\\uDF37\\uD83D\\uDE3B\\uD83D\\uDE13⭐✅\\uD83E\\uDD7A\\uD83C\\uDF08\\uD83D\\uDE08\\uD83E\\uDD18\\uD83D\\uDCA6✔\\uD83D\\uDE23\\uD83C\\uDFC3\\uD83D\\uDC90☹\\uD83C\\uDF8A\\uD83D\\uDC98\\uD83D\\uDE20☝\\uD83D\\uDE15\\uD83C\\uDF3A\\uD83C\\uDF82\\uD83C\\uDF3B\\uD83D\\uDE10\\uD83D\\uDD95\\uD83D\\uDC9D\\uD83D\\uDE4A\\uD83D\\uDE39\\uD83D\\uDDE3\\uD83D\\uDCAB\\uD83D\\uDC80\\uD83D\\uDC51\\uD83C\\uDFB5\\uD83E\\uDD1E\\uD83D\\uDE1B\\uD83D\\uDD34\\uD83D\\uDE24\\uD83C\\uDF3C\\uD83D\\uDE2B⚽\\uD83E\\uDD19☕\\uD83C\\uDFC6\\uD83E\\uDD2B\\uD83D\\uDC48\\uD83D\\uDE2E\\uD83D\\uDE46\\uD83C\\uDF7B\\uD83C\\uDF43\\uD83D\\uDC36\\uD83D\\uDC81\\uD83D\\uDE32\\uD83C\\uDF3F\\uD83E\\uDDE1\\uD83C\\uDF81⚡\\uD83C\\uDF1E\\uD83C\\uDF88❌✊\\uD83D\\uDC4B\\uD83D\\uDE30\\uD83E\\uDD28\\uD83D\\uDE36\\uD83E\\uDD1D\\uD83D\\uDEB6\\uD83D\\uDCB0\\uD83C\\uDF53\\uD83D\\uDCA2\\uD83E\\uDD1F\\uD83D\\uDE41\\uD83D\\uDEA8\\uD83D\\uDCA8\\uD83E\\uDD2C✈\\uD83C\\uDF80\\uD83C\\uDF7A\\uD83E\\uDD13\\uD83D\\uDE19\\uD83D\\uDC9F\\uD83C\\uDF31\\uD83D\\uDE16\\uD83D\\uDC76\\uD83E\\uDD74▶➡❓\\uD83D\\uDC8E\\uD83D\\uDCB8⬇\\uD83D\\uDE28\\uD83C\\uDF1A\\uD83E\\uDD8B\\uD83D\\uDE37\\uD83D\\uDD7A⚠\\uD83D\\uDE45\\uD83D\\uDE1F\\uD83D\\uDE35\\uD83D\\uDC4E\\uD83E\\uDD32\\uD83E\\uDD20\\uD83E\\uDD27\\uD83D\\uDCCC\\uD83D\\uDD35\\uD83D\\uDC85\\uD83E\\uDDD0\\uD83D\\uDC3E\\uD83C\\uDF52\\uD83D\\uDE17\\uD83E\\uDD11\\uD83C\\uDF0A\\uD83E\\uDD2F\\uD83D\\uDC37☎\\uD83D\\uDCA7\\uD83D\\uDE2F\\uD83D\\uDC86\\uD83D\\uDC46\\uD83C\\uDFA4\\uD83D\\uDE47\\uD83C\\uDF51❄\\uD83C\\uDF34\\uD83D\\uDCA3\\uD83D\\uDC38\\uD83D\\uDC8C\\uD83D\\uDCCD\\uD83E\\uDD40\\uD83E\\uDD22\\uD83D\\uDC45\\uD83D\\uDCA1\\uD83D\\uDCA9\\uD83D\\uDC50\\uD83D\\uDCF8\\uD83D\\uDC7B\\uD83E\\uDD10\\uD83E\\uDD2E\\uD83C\\uDFBC\\uD83E\\uDD75\\uD83D\\uDEA9\\uD83C\\uDF4E\\uD83C\\uDF4A\\uD83D\\uDC7C\\uD83D\\uDC8D\\uD83D\\uDCE3\\uD83E\\uDD42\"), dg = Vc.reduce((i, e, r)=>(i[r] = e, i), []), pg = Vc.reduce((i, e, r)=>(i[e.codePointAt(0)] = r, i), []);\nfunction gg(i) {\n    return i.reduce((e, r)=>(e += dg[r], e), \"\");\n}\nfunction yg(i) {\n    let e = [];\n    for (let r of i){\n        let t = pg[r.codePointAt(0)];\n        if (t === void 0) throw new Error(\"Non-base256emoji character: \".concat(r));\n        e.push(t);\n    }\n    return new Uint8Array(e);\n}\nvar mg = sr({\n    prefix: \"\\uD83D\\uDE80\",\n    name: \"base256emoji\",\n    encode: gg,\n    decode: yg\n});\nvar In = {};\n(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.h)(In, {\n    sha256: ()=>Ug,\n    sha512: ()=>Mg\n});\nvar wg = Kc, zc = 128, bg = 127, Eg = ~bg, vg = Math.pow(2, 31);\nfunction Kc(i, e, r) {\n    e = e || [], r = r || 0;\n    for(var t = r; i >= vg;)e[r++] = i & 255 | zc, i /= 128;\n    for(; i & Eg;)e[r++] = i & 255 | zc, i >>>= 7;\n    return e[r] = i | 0, Kc.bytes = r - t + 1, e;\n}\n_c103 = Kc;\nvar _g = xn, xg = 128, $c = 127;\nfunction xn(i, t) {\n    var r = 0, t = t || 0, s = 0, n = t, o, a = i.length;\n    do {\n        if (n >= a) throw xn.bytes = 0, new RangeError(\"Could not decode varint\");\n        o = i[n++], r += s < 28 ? (o & $c) << s : (o & $c) * Math.pow(2, s), s += 7;\n    }while (o >= xg);\n    return xn.bytes = n - t, r;\n}\nvar Dg = Math.pow(2, 7), Sg = Math.pow(2, 14), Ig = Math.pow(2, 21), Rg = Math.pow(2, 28), Og = Math.pow(2, 35), Tg = Math.pow(2, 42), Ng = Math.pow(2, 49), Pg = Math.pow(2, 56), Cg = Math.pow(2, 63), Ag = function(i) {\n    return i < Dg ? 1 : i < Sg ? 2 : i < Ig ? 3 : i < Rg ? 4 : i < Og ? 5 : i < Tg ? 6 : i < Ng ? 7 : i < Pg ? 8 : i < Cg ? 9 : 10;\n}, Lg = {\n    encode: wg,\n    decode: _g,\n    encodingLength: Ag\n}, Fg = Lg, Br = Fg;\nvar Vr = function(i) {\n    let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;\n    return [\n        Br.decode(i, e),\n        Br.decode.bytes\n    ];\n}, or = function(i, e) {\n    let r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;\n    return Br.encode(i, e, r), e;\n}, ar = (i)=>Br.encodingLength(i);\nvar Lt = (i, e)=>{\n    let r = e.byteLength, t = ar(i), s = t + ar(r), n = new Uint8Array(s + r);\n    return or(i, n, 0), or(r, n, t), n.set(e, s), new cr(i, r, e, n);\n}, kc = (i)=>{\n    let e = it(i), [r, t] = Vr(e), [s, n] = Vr(e.subarray(t)), o = e.subarray(t + n);\n    if (o.byteLength !== s) throw new Error(\"Incorrect length\");\n    return new cr(r, s, o, e);\n}, Hc = (i, e)=>i === e ? !0 : i.code === e.code && i.size === e.size && Uc(i.bytes, e.bytes), cr = class {\n    constructor(e, r, t, s){\n        this.code = e, this.size = r, this.digest = t, this.bytes = s;\n    }\n};\nvar Sn = (param)=>{\n    let { name: i, code: e, encode: r } = param;\n    return new Dn(i, e, r);\n}, Dn = class {\n    digest(e) {\n        if (e instanceof Uint8Array) {\n            let r = this.encode(e);\n            return r instanceof Uint8Array ? Lt(this.code, r) : r.then((t)=>Lt(this.code, t));\n        } else throw Error(\"Unknown type, must be binary type\");\n    }\n    constructor(e, r, t){\n        this.name = e, this.code = r, this.encode = t;\n    }\n};\nvar Wc = (i)=>(e)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(void 0, null, function*() {\n            return new Uint8Array((yield crypto.subtle.digest(i, e)));\n        }), Ug = Sn({\n    name: \"sha2-256\",\n    code: 18,\n    encode: Wc(\"SHA-256\")\n}), Mg = Sn({\n    name: \"sha2-512\",\n    code: 19,\n    encode: Wc(\"SHA-512\")\n});\nvar Rn = {};\n(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.h)(Rn, {\n    identity: ()=>Bg\n});\nvar Jc = 0, qg = \"identity\", Yc = it, jg = (i)=>Lt(Jc, Yc(i)), Bg = {\n    code: Jc,\n    name: qg,\n    encode: Yc,\n    digest: jg\n};\nvar ME = new TextEncoder, qE = new TextDecoder;\nvar Ni = class i {\n    toV0() {\n        switch(this.version){\n            case 0:\n                return this;\n            default:\n                {\n                    let { code: e, multihash: r } = this;\n                    if (e !== $r) throw new Error(\"Cannot convert a non dag-pb CID to CIDv0\");\n                    if (r.code !== Hg) throw new Error(\"Cannot convert non sha2-256 multihash CID to CIDv0\");\n                    return i.createV0(r);\n                }\n        }\n    }\n    toV1() {\n        switch(this.version){\n            case 0:\n                {\n                    let { code: e, digest: r } = this.multihash, t = Lt(e, r);\n                    return i.createV1(this.code, t);\n                }\n            case 1:\n                return this;\n            default:\n                throw Error(\"Can not convert CID version \".concat(this.version, \" to version 0. This is a bug please report\"));\n        }\n    }\n    equals(e) {\n        return e && this.code === e.code && this.version === e.version && Hc(this.multihash, e.multihash);\n    }\n    toString(e) {\n        let { bytes: r, version: t, _baseCache: s } = this;\n        switch(t){\n            case 0:\n                return Kg(r, s, e || Je.encoder);\n            default:\n                return kg(r, s, e || nr.encoder);\n        }\n    }\n    toJSON() {\n        return {\n            code: this.code,\n            version: this.version,\n            hash: this.multihash.bytes\n        };\n    }\n    get [Symbol.toStringTag]() {\n        return \"CID\";\n    }\n    [Symbol.for(\"nodejs.util.inspect.custom\")]() {\n        return \"CID(\" + this.toString() + \")\";\n    }\n    static isCID(e) {\n        return Wg(/^0\\.0/, Jg), !!(e && (e[Qc] || e.asCID === e));\n    }\n    get toBaseEncodedString() {\n        throw new Error(\"Deprecated, use .toString()\");\n    }\n    get codec() {\n        throw new Error('\"codec\" property is deprecated, use integer \"code\" property instead');\n    }\n    get buffer() {\n        throw new Error(\"Deprecated .buffer property, use .bytes to get Uint8Array instead\");\n    }\n    get multibaseName() {\n        throw new Error('\"multibaseName\" property is deprecated');\n    }\n    get prefix() {\n        throw new Error('\"prefix\" property is deprecated');\n    }\n    static asCID(e) {\n        if (e instanceof i) return e;\n        if (e != null && e.asCID === e) {\n            let { version: r, code: t, multihash: s, bytes: n } = e;\n            return new i(r, t, s, n || Xc(r, t, s.bytes));\n        } else if (e != null && e[Qc] === !0) {\n            let { version: r, multihash: t, code: s } = e, n = kc(t);\n            return i.create(r, s, n);\n        } else return null;\n    }\n    static create(e, r, t) {\n        if (typeof r != \"number\") throw new Error(\"String codecs are no longer supported\");\n        switch(e){\n            case 0:\n                {\n                    if (r !== $r) throw new Error(\"Version 0 CID must use dag-pb (code: \".concat($r, \") block encoding\"));\n                    return new i(e, r, t, t.bytes);\n                }\n            case 1:\n                {\n                    let s = Xc(e, r, t.bytes);\n                    return new i(e, r, t, s);\n                }\n            default:\n                throw new Error(\"Invalid version\");\n        }\n    }\n    static createV0(e) {\n        return i.create(0, $r, e);\n    }\n    static createV1(e, r) {\n        return i.create(1, e, r);\n    }\n    static decode(e) {\n        let [r, t] = i.decodeFirst(e);\n        if (t.length) throw new Error(\"Incorrect length\");\n        return r;\n    }\n    static decodeFirst(e) {\n        let r = i.inspectBytes(e), t = r.size - r.multihashSize, s = it(e.subarray(t, t + r.multihashSize));\n        if (s.byteLength !== r.multihashSize) throw new Error(\"Incorrect length\");\n        let n = s.subarray(r.multihashSize - r.digestSize), o = new cr(r.multihashCode, r.digestSize, n, s);\n        return [\n            r.version === 0 ? i.createV0(o) : i.createV1(r.codec, o),\n            e.subarray(r.size)\n        ];\n    }\n    static inspectBytes(e) {\n        let r = 0, t = ()=>{\n            let [l, p] = Vr(e.subarray(r));\n            return r += p, l;\n        }, s = t(), n = $r;\n        if (s === 18 ? (s = 0, r = 0) : s === 1 && (n = t()), s !== 0 && s !== 1) throw new RangeError(\"Invalid CID version \".concat(s));\n        let o = r, a = t(), c = t(), u = r + c, h = u - o;\n        return {\n            version: s,\n            codec: n,\n            multihashCode: a,\n            digestSize: c,\n            multihashSize: h,\n            size: u\n        };\n    }\n    static parse(e, r) {\n        let [t, s] = $g(e, r), n = i.decode(s);\n        return n._baseCache.set(t, e), n;\n    }\n    constructor(e, r, t, s){\n        this.code = r, this.version = e, this.multihash = t, this.bytes = s, this.byteOffset = s.byteOffset, this.byteLength = s.byteLength, this.asCID = this, this._baseCache = new Map, Object.defineProperties(this, {\n            byteOffset: Ti,\n            byteLength: Ti,\n            code: Oi,\n            version: Oi,\n            multihash: Oi,\n            bytes: Oi,\n            _baseCache: Ti,\n            asCID: Ti\n        });\n    }\n}, $g = (i, e)=>{\n    switch(i[0]){\n        case \"Q\":\n            {\n                let r = e || Je;\n                return [\n                    Je.prefix,\n                    r.decode(\"\".concat(Je.prefix).concat(i))\n                ];\n            }\n        case Je.prefix:\n            {\n                let r = e || Je;\n                return [\n                    Je.prefix,\n                    r.decode(i)\n                ];\n            }\n        case nr.prefix:\n            {\n                let r = e || nr;\n                return [\n                    nr.prefix,\n                    r.decode(i)\n                ];\n            }\n        default:\n            {\n                if (e == null) throw Error(\"To parse non base32 or base58btc encoded CID multibase decoder must be provided\");\n                return [\n                    i[0],\n                    e.decode(i)\n                ];\n            }\n    }\n}, Kg = (i, e, r)=>{\n    let { prefix: t } = r;\n    if (t !== Je.prefix) throw Error(\"Cannot string encode V0 in \".concat(r.name, \" encoding\"));\n    let s = e.get(t);\n    if (s == null) {\n        let n = r.encode(i).slice(1);\n        return e.set(t, n), n;\n    } else return s;\n}, kg = (i, e, r)=>{\n    let { prefix: t } = r, s = e.get(t);\n    if (s == null) {\n        let n = r.encode(i);\n        return e.set(t, n), n;\n    } else return s;\n}, $r = 112, Hg = 18, Xc = (i, e, r)=>{\n    let t = ar(i), s = t + ar(e), n = new Uint8Array(s + r.byteLength);\n    return or(i, n, 0), or(e, n, t), n.set(r, s), n;\n}, Qc = Symbol.for(\"@ipld/js-cid/CID\"), Oi = {\n    writable: !1,\n    configurable: !1,\n    enumerable: !0\n}, Ti = {\n    writable: !1,\n    enumerable: !1,\n    configurable: !1\n}, Gg = \"0.0.0-dev\", Wg = (i, e)=>{\n    if (i.test(Gg)) console.warn(e);\n    else throw new Error(e);\n}, Jg = \"CID.isCID(v) is deprecated and will be removed in the next major release.\\nFollowing code pattern:\\n\\nif (CID.isCID(value)) {\\n  doSomethingWithCID(value)\\n}\\n\\nIs replaced with:\\n\\nconst cid = CID.asCID(value)\\nif (cid) {\\n  // Make sure to use cid instead of value\\n  doSomethingWithCID(cid)\\n}\\n\";\nvar On = (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.b)((0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.b)((0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.b)((0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.b)((0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.b)((0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.b)((0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.b)((0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.b)((0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.b)((0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.b)({}, dn), pn), gn), yn), mn), wn), bn), En), vn), _n), HE = (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.b)((0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.b)({}, In), Rn);\nfunction eu(i, e, r, t) {\n    return {\n        name: i,\n        prefix: e,\n        encoder: {\n            name: i,\n            prefix: e,\n            encode: r\n        },\n        decoder: {\n            decode: t\n        }\n    };\n}\nvar Zc = eu(\"utf8\", \"u\", (i)=>\"u\" + new TextDecoder(\"utf8\").decode(i), (i)=>new TextEncoder().encode(i.substring(1))), Tn = eu(\"ascii\", \"a\", (i)=>{\n    let e = \"a\";\n    for(let r = 0; r < i.length; r++)e += String.fromCharCode(i[r]);\n    return e;\n}, (i)=>{\n    i = i.substring(1);\n    let e = jr(i.length);\n    for(let r = 0; r < i.length; r++)e[r] = i.charCodeAt(r);\n    return e;\n}), Yg = (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.b)({\n    utf8: Zc,\n    \"utf-8\": Zc,\n    hex: On.base16,\n    latin1: Tn,\n    ascii: Tn,\n    binary: Tn\n}, On), Pi = Yg;\nfunction Ee(i) {\n    let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"utf8\";\n    let r = Pi[e];\n    if (!r) throw new Error('Unsupported encoding \"'.concat(e, '\"'));\n    return (e === \"utf8\" || e === \"utf-8\") && globalThis.Buffer != null && globalThis.Buffer.from != null ? globalThis.Buffer.from(i.buffer, i.byteOffset, i.byteLength).toString(\"utf8\") : r.encoder.encode(i).substring(1);\n}\n_c104 = Ee;\nfunction ve(i) {\n    let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"utf8\";\n    let r = Pi[e];\n    if (!r) throw new Error('Unsupported encoding \"'.concat(e, '\"'));\n    return (e === \"utf8\" || e === \"utf-8\") && globalThis.Buffer != null && globalThis.Buffer.from != null ? At(globalThis.Buffer.from(i, \"utf-8\")) : r.decoder.decode(\"\".concat(r.prefix).concat(i));\n}\nfunction Ci(i) {\n    return Ee(ve(Ge(i), Oc), an);\n}\n_c105 = Ci;\nfunction Ai(i) {\n    let e = ve(Lc, cn), r = Ac + Ee(ir([\n        e,\n        i\n    ]), cn);\n    return [\n        Pc,\n        Cc,\n        r\n    ].join(Nc);\n}\n_c106 = Ai;\nfunction Xg(i) {\n    return Ee(i, an);\n}\n_c107 = Xg;\nfunction tu(i) {\n    return ve([\n        Ci(i.header),\n        Ci(i.payload)\n    ].join(on), Tc);\n}\nfunction ru(i) {\n    return [\n        Ci(i.header),\n        Ci(i.payload),\n        Xg(i.signature)\n    ].join(on);\n}\nfunction Nn() {\n    let i = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : (0, iu.randomBytes)(32);\n    return Kr.generateKeyPairFromSeed(i);\n}\n_c108 = Nn;\nfunction nu(n, o, a, c) {\n    return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, arguments, function*(i, e, r, t) {\n        let s = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : (0, su.fromMiliseconds)(Date.now());\n        let u = {\n            alg: Ic,\n            typ: Rc\n        }, h = Ai(t.publicKey), l = s + r, p = {\n            iss: h,\n            sub: i,\n            aud: e,\n            iat: s,\n            exp: l\n        }, d = tu({\n            header: u,\n            payload: p\n        }), g = Kr.sign(t.secretKey, d);\n        return ru({\n            header: u,\n            payload: p,\n            signature: g\n        });\n    });\n}\nvar $n = (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.j)(du()), ah = (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.j)(bu()), Kn = (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.j)(Ur()), Jr = (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.j)(vu()), Ki = (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.j)(Su());\nvar Iu = function(i, e, r) {\n    if (r || arguments.length === 2) for(var t = 0, s = e.length, n; t < s; t++)(n || !(t in e)) && (n || (n = Array.prototype.slice.call(e, 0, t)), n[t] = e[t]);\n    return i.concat(n || Array.prototype.slice.call(e));\n}, Oy = function() {\n    function i(e, r, t) {\n        this.name = e, this.version = r, this.os = t, this.type = \"browser\";\n    }\n    return i;\n}();\nvar Ty = function() {\n    function i(e) {\n        this.version = e, this.type = \"node\", this.name = \"node\", this.os = process.platform;\n    }\n    return i;\n}();\nvar Ny = function() {\n    function i(e, r, t, s) {\n        this.name = e, this.version = r, this.os = t, this.bot = s, this.type = \"bot-device\";\n    }\n    return i;\n}();\nvar Py = function() {\n    function i() {\n        this.type = \"bot\", this.bot = !0, this.name = \"bot\", this.version = null, this.os = null;\n    }\n    return i;\n}();\nvar Cy = function() {\n    function i() {\n        this.type = \"react-native\", this.name = \"react-native\", this.version = null, this.os = null;\n    }\n    return i;\n}();\nvar Ay = /alexa|bot|crawl(er|ing)|facebookexternalhit|feedburner|google web preview|nagios|postrank|pingdom|slurp|spider|yahoo!|yandex/, Ly = /(nuhk|curl|Googlebot|Yammybot|Openbot|Slurp|MSNBot|Ask\\ Jeeves\\/Teoma|ia_archiver)/, Ru = 3, Fy = [\n    [\n        \"aol\",\n        /AOLShield\\/([0-9\\._]+)/\n    ],\n    [\n        \"edge\",\n        /Edge\\/([0-9\\._]+)/\n    ],\n    [\n        \"edge-ios\",\n        /EdgiOS\\/([0-9\\._]+)/\n    ],\n    [\n        \"yandexbrowser\",\n        /YaBrowser\\/([0-9\\._]+)/\n    ],\n    [\n        \"kakaotalk\",\n        /KAKAOTALK\\s([0-9\\.]+)/\n    ],\n    [\n        \"samsung\",\n        /SamsungBrowser\\/([0-9\\.]+)/\n    ],\n    [\n        \"silk\",\n        /\\bSilk\\/([0-9._-]+)\\b/\n    ],\n    [\n        \"miui\",\n        /MiuiBrowser\\/([0-9\\.]+)$/\n    ],\n    [\n        \"beaker\",\n        /BeakerBrowser\\/([0-9\\.]+)/\n    ],\n    [\n        \"edge-chromium\",\n        /EdgA?\\/([0-9\\.]+)/\n    ],\n    [\n        \"chromium-webview\",\n        /(?!Chrom.*OPR)wv\\).*Chrom(?:e|ium)\\/([0-9\\.]+)(:?\\s|$)/\n    ],\n    [\n        \"chrome\",\n        /(?!Chrom.*OPR)Chrom(?:e|ium)\\/([0-9\\.]+)(:?\\s|$)/\n    ],\n    [\n        \"phantomjs\",\n        /PhantomJS\\/([0-9\\.]+)(:?\\s|$)/\n    ],\n    [\n        \"crios\",\n        /CriOS\\/([0-9\\.]+)(:?\\s|$)/\n    ],\n    [\n        \"firefox\",\n        /Firefox\\/([0-9\\.]+)(?:\\s|$)/\n    ],\n    [\n        \"fxios\",\n        /FxiOS\\/([0-9\\.]+)/\n    ],\n    [\n        \"opera-mini\",\n        /Opera Mini.*Version\\/([0-9\\.]+)/\n    ],\n    [\n        \"opera\",\n        /Opera\\/([0-9\\.]+)(?:\\s|$)/\n    ],\n    [\n        \"opera\",\n        /OPR\\/([0-9\\.]+)(:?\\s|$)/\n    ],\n    [\n        \"pie\",\n        /^Microsoft Pocket Internet Explorer\\/(\\d+\\.\\d+)$/\n    ],\n    [\n        \"pie\",\n        /^Mozilla\\/\\d\\.\\d+\\s\\(compatible;\\s(?:MSP?IE|MSInternet Explorer) (\\d+\\.\\d+);.*Windows CE.*\\)$/\n    ],\n    [\n        \"netfront\",\n        /^Mozilla\\/\\d\\.\\d+.*NetFront\\/(\\d.\\d)/\n    ],\n    [\n        \"ie\",\n        /Trident\\/7\\.0.*rv\\:([0-9\\.]+).*\\).*Gecko$/\n    ],\n    [\n        \"ie\",\n        /MSIE\\s([0-9\\.]+);.*Trident\\/[4-7].0/\n    ],\n    [\n        \"ie\",\n        /MSIE\\s(7\\.0)/\n    ],\n    [\n        \"bb10\",\n        /BB10;\\sTouch.*Version\\/([0-9\\.]+)/\n    ],\n    [\n        \"android\",\n        /Android\\s([0-9\\.]+)/\n    ],\n    [\n        \"ios\",\n        /Version\\/([0-9\\._]+).*Mobile.*Safari.*/\n    ],\n    [\n        \"safari\",\n        /Version\\/([0-9\\._]+).*Safari/\n    ],\n    [\n        \"facebook\",\n        /FB[AS]V\\/([0-9\\.]+)/\n    ],\n    [\n        \"instagram\",\n        /Instagram\\s([0-9\\.]+)/\n    ],\n    [\n        \"ios-webview\",\n        /AppleWebKit\\/([0-9\\.]+).*Mobile/\n    ],\n    [\n        \"ios-webview\",\n        /AppleWebKit\\/([0-9\\.]+).*Gecko\\)$/\n    ],\n    [\n        \"curl\",\n        /^curl\\/([0-9\\.]+)$/\n    ],\n    [\n        \"searchbot\",\n        Ay\n    ]\n], Ou = [\n    [\n        \"iOS\",\n        /iP(hone|od|ad)/\n    ],\n    [\n        \"Android OS\",\n        /Android/\n    ],\n    [\n        \"BlackBerry OS\",\n        /BlackBerry|BB10/\n    ],\n    [\n        \"Windows Mobile\",\n        /IEMobile/\n    ],\n    [\n        \"Amazon OS\",\n        /Kindle/\n    ],\n    [\n        \"Windows 3.11\",\n        /Win16/\n    ],\n    [\n        \"Windows 95\",\n        /(Windows 95)|(Win95)|(Windows_95)/\n    ],\n    [\n        \"Windows 98\",\n        /(Windows 98)|(Win98)/\n    ],\n    [\n        \"Windows 2000\",\n        /(Windows NT 5.0)|(Windows 2000)/\n    ],\n    [\n        \"Windows XP\",\n        /(Windows NT 5.1)|(Windows XP)/\n    ],\n    [\n        \"Windows Server 2003\",\n        /(Windows NT 5.2)/\n    ],\n    [\n        \"Windows Vista\",\n        /(Windows NT 6.0)/\n    ],\n    [\n        \"Windows 7\",\n        /(Windows NT 6.1)/\n    ],\n    [\n        \"Windows 8\",\n        /(Windows NT 6.2)/\n    ],\n    [\n        \"Windows 8.1\",\n        /(Windows NT 6.3)/\n    ],\n    [\n        \"Windows 10\",\n        /(Windows NT 10.0)/\n    ],\n    [\n        \"Windows ME\",\n        /Windows ME/\n    ],\n    [\n        \"Windows CE\",\n        /Windows CE|WinCE|Microsoft Pocket Internet Explorer/\n    ],\n    [\n        \"Open BSD\",\n        /OpenBSD/\n    ],\n    [\n        \"Sun OS\",\n        /SunOS/\n    ],\n    [\n        \"Chrome OS\",\n        /CrOS/\n    ],\n    [\n        \"Linux\",\n        /(Linux)|(X11)/\n    ],\n    [\n        \"Mac OS\",\n        /(Mac_PowerPC)|(Macintosh)/\n    ],\n    [\n        \"QNX\",\n        /QNX/\n    ],\n    [\n        \"BeOS\",\n        /BeOS/\n    ],\n    [\n        \"OS/2\",\n        /OS\\/2/\n    ]\n];\nfunction Nu(i) {\n    return i ? Tu(i) : typeof document == \"undefined\" && typeof navigator != \"undefined\" && navigator.product === \"ReactNative\" ? new Cy : typeof navigator != \"undefined\" ? Tu(navigator.userAgent) : qy();\n}\n_c109 = Nu;\nfunction Uy(i) {\n    return i !== \"\" && Fy.reduce(function(e, r) {\n        var t = r[0], s = r[1];\n        if (e) return e;\n        var n = s.exec(i);\n        return !!n && [\n            t,\n            n\n        ];\n    }, !1);\n}\n_c110 = Uy;\nfunction Tu(i) {\n    var e = Uy(i);\n    if (!e) return null;\n    var r = e[0], t = e[1];\n    if (r === \"searchbot\") return new Py;\n    var s = t[1] && t[1].split(\".\").join(\"_\").split(\"_\").slice(0, 3);\n    s ? s.length < Ru && (s = Iu(Iu([], s, !0), jy(Ru - s.length), !0)) : s = [];\n    var n = s.join(\".\"), o = My(i), a = Ly.exec(i);\n    return a && a[1] ? new Ny(r, n, o, a[1]) : new Oy(r, n, o);\n}\n_c111 = Tu;\nfunction My(i) {\n    for(var e = 0, r = Ou.length; e < r; e++){\n        var t = Ou[e], s = t[0], n = t[1], o = n.exec(i);\n        if (o) return s;\n    }\n    return null;\n}\n_c112 = My;\nfunction qy() {\n    var i = typeof process != \"undefined\" && process.version;\n    return i ? new Ty(process.version.slice(1)) : null;\n}\nfunction jy(i) {\n    for(var e = [], r = 0; r < i; r++)e.push(\"0\");\n    return e;\n}\nvar ct = (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.j)(Tt()), wt = (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.j)(Mn()), ch = (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.j)(Cu()), lr = (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.j)(Xu());\nvar Qu = {\n    waku: {\n        publish: \"waku_publish\",\n        batchPublish: \"waku_batchPublish\",\n        subscribe: \"waku_subscribe\",\n        batchSubscribe: \"waku_batchSubscribe\",\n        subscription: \"waku_subscription\",\n        unsubscribe: \"waku_unsubscribe\",\n        batchUnsubscribe: \"waku_batchUnsubscribe\",\n        batchFetchMessages: \"waku_batchFetchMessages\"\n    },\n    irn: {\n        publish: \"irn_publish\",\n        batchPublish: \"irn_batchPublish\",\n        subscribe: \"irn_subscribe\",\n        batchSubscribe: \"irn_batchSubscribe\",\n        subscription: \"irn_subscription\",\n        unsubscribe: \"irn_unsubscribe\",\n        batchUnsubscribe: \"irn_batchUnsubscribe\",\n        batchFetchMessages: \"irn_batchFetchMessages\"\n    },\n    iridium: {\n        publish: \"iridium_publish\",\n        batchPublish: \"iridium_batchPublish\",\n        subscribe: \"iridium_subscribe\",\n        batchSubscribe: \"iridium_batchSubscribe\",\n        subscription: \"iridium_subscription\",\n        unsubscribe: \"iridium_unsubscribe\",\n        batchUnsubscribe: \"iridium_batchUnsubscribe\",\n        batchFetchMessages: \"iridium_batchFetchMessages\"\n    }\n};\nfunction uh(i, e) {\n    return i.includes(\":\") ? [\n        i\n    ] : e.chains || [];\n}\nvar hh = \"base10\", Oe = \"base16\", Vn = \"base64pad\", kn = \"utf8\", lh = 0, ut = 1, om = 0, Zu = 1, zn = 12, Hn = 32;\nfunction fh() {\n    let i = Ki.generateKeyPair();\n    return {\n        privateKey: Ee(i.secretKey, Oe),\n        publicKey: Ee(i.publicKey, Oe)\n    };\n}\nfunction ki() {\n    let i = (0, Kn.randomBytes)(Hn);\n    return Ee(i, Oe);\n}\nfunction dh(i, e) {\n    let r = Ki.sharedKey(ve(i, Oe), ve(e, Oe), !0), t = new ah.HKDF(Jr.SHA256, r).expand(Hn);\n    return Ee(t, Oe);\n}\nfunction ph(i) {\n    let e = (0, Jr.hash)(ve(i, Oe));\n    return Ee(e, Oe);\n}\nfunction bt(i) {\n    let e = (0, Jr.hash)(ve(i, kn));\n    return Ee(e, Oe);\n}\nfunction am(i) {\n    return ve(\"\".concat(i), hh);\n}\nfunction fr(i) {\n    return Number(Ee(i, hh));\n}\nfunction gh(i) {\n    let e = am(typeof i.type < \"u\" ? i.type : lh);\n    if (fr(e) === ut && typeof i.senderPublicKey > \"u\") throw new Error(\"Missing sender public key for type 1 envelope\");\n    let r = typeof i.senderPublicKey < \"u\" ? ve(i.senderPublicKey, Oe) : void 0, t = typeof i.iv < \"u\" ? ve(i.iv, Oe) : (0, Kn.randomBytes)(zn), s = new $n.ChaCha20Poly1305(ve(i.symKey, Oe)).seal(t, ve(i.message, kn));\n    return cm({\n        type: e,\n        sealed: s,\n        iv: t,\n        senderPublicKey: r\n    });\n}\nfunction yh(i) {\n    let e = new $n.ChaCha20Poly1305(ve(i.symKey, Oe)), { sealed: r, iv: t } = Yr(i.encoded), s = e.open(t, r);\n    if (s === null) throw new Error(\"Failed to decrypt\");\n    return Ee(s, kn);\n}\nfunction cm(i) {\n    if (fr(i.type) === ut) {\n        if (typeof i.senderPublicKey > \"u\") throw new Error(\"Missing sender public key for type 1 envelope\");\n        return Ee(ir([\n            i.type,\n            i.senderPublicKey,\n            i.iv,\n            i.sealed\n        ]), Vn);\n    }\n    return Ee(ir([\n        i.type,\n        i.iv,\n        i.sealed\n    ]), Vn);\n}\nfunction Yr(i) {\n    let e = ve(i, Vn), r = e.slice(om, Zu), t = Zu;\n    if (fr(r) === ut) {\n        let a = t + Hn, c = a + zn, u = e.slice(t, a), h = e.slice(a, c), l = e.slice(c);\n        return {\n            type: r,\n            sealed: l,\n            iv: h,\n            senderPublicKey: u\n        };\n    }\n    let s = t + zn, n = e.slice(t, s), o = e.slice(s);\n    return {\n        type: r,\n        sealed: o,\n        iv: n\n    };\n}\n_c113 = Yr;\nfunction mh(i, e) {\n    let r = Yr(i);\n    return Gn({\n        type: fr(r.type),\n        senderPublicKey: typeof r.senderPublicKey < \"u\" ? Ee(r.senderPublicKey, Oe) : void 0,\n        receiverPublicKey: e == null ? void 0 : e.receiverPublicKey\n    });\n}\nfunction Gn(i) {\n    let e = (i == null ? void 0 : i.type) || lh;\n    if (e === ut) {\n        if (typeof (i == null ? void 0 : i.senderPublicKey) > \"u\") throw new Error(\"missing sender public key\");\n        if (typeof (i == null ? void 0 : i.receiverPublicKey) > \"u\") throw new Error(\"missing receiver public key\");\n    }\n    return {\n        type: e,\n        senderPublicKey: i == null ? void 0 : i.senderPublicKey,\n        receiverPublicKey: i == null ? void 0 : i.receiverPublicKey\n    };\n}\n_c114 = Gn;\nfunction Wn(i) {\n    return i.type === ut && typeof i.senderPublicKey == \"string\" && typeof i.receiverPublicKey == \"string\";\n}\n_c115 = Wn;\nvar um = Object.defineProperty, eh = Object.getOwnPropertySymbols, hm = Object.prototype.hasOwnProperty, lm = Object.prototype.propertyIsEnumerable, th = (i, e, r)=>e in i ? um(i, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: r\n    }) : i[e] = r, rh = (i, e)=>{\n    for(var r in e || (e = {}))hm.call(e, r) && th(i, r, e[r]);\n    if (eh) for (var r of eh(e))lm.call(e, r) && th(i, r, e[r]);\n    return i;\n}, fm = \"ReactNative\", Me = {\n    reactNative: \"react-native\",\n    node: \"node\",\n    browser: \"browser\",\n    unknown: \"unknown\"\n};\nvar dm = \"js\";\nfunction dr() {\n    return typeof process < \"u\" && typeof process.versions < \"u\" && typeof process.versions.node < \"u\";\n}\nfunction Mt() {\n    return !(0, wt.getDocument)() && !!(0, wt.getNavigator)() && navigator.product === fm;\n}\n_c116 = Mt;\nfunction Et() {\n    return !dr() && !!(0, wt.getNavigator)() && !!(0, wt.getDocument)();\n}\n_c117 = Et;\nfunction Xr() {\n    return Mt() ? Me.reactNative : dr() ? Me.node : Et() ? Me.browser : Me.unknown;\n}\n_c118 = Xr;\nfunction wh() {\n    var i;\n    try {\n        return Mt() && typeof global < \"u\" && typeof (global == null ? void 0 : global.Application) < \"u\" ? (i = global.Application) == null ? void 0 : i.applicationId : void 0;\n    } catch (e) {\n        return;\n    }\n}\nfunction pm(i, e) {\n    let r = lr.parse(i);\n    return r = rh(rh({}, r), e), i = lr.stringify(r), i;\n}\nfunction bh() {\n    return (0, ch.getWindowMetadata)() || {\n        name: \"\",\n        description: \"\",\n        url: \"\",\n        icons: [\n            \"\"\n        ]\n    };\n}\nfunction gm() {\n    if (Xr() === Me.reactNative && typeof global < \"u\" && typeof (global == null ? void 0 : global.Platform) < \"u\") {\n        let { OS: r, Version: t } = global.Platform;\n        return [\n            r,\n            t\n        ].join(\"-\");\n    }\n    let i = Nu();\n    if (i === null) return \"unknown\";\n    let e = i.os ? i.os.replace(\" \", \"\").toLowerCase() : \"unknown\";\n    return i.type === \"browser\" ? [\n        e,\n        i.name,\n        i.version\n    ].join(\"-\") : [\n        e,\n        i.version\n    ].join(\"-\");\n}\nfunction ym() {\n    var i;\n    let e = Xr();\n    return e === Me.browser ? [\n        e,\n        ((i = (0, wt.getLocation)()) == null ? void 0 : i.host) || \"unknown\"\n    ].join(\":\") : e;\n}\nfunction mm(i, e, r) {\n    let t = gm(), s = ym();\n    return [\n        [\n            i,\n            e\n        ].join(\"-\"),\n        [\n            dm,\n            r\n        ].join(\"-\"),\n        t,\n        s\n    ].join(\"/\");\n}\nfunction Eh(param) {\n    let { protocol: i, version: e, relayUrl: r, sdkVersion: t, auth: s, projectId: n, useOnCloseEvent: o, bundleId: a } = param;\n    let c = r.split(\"?\"), u = mm(i, e, t), h = {\n        auth: s,\n        ua: u,\n        projectId: n,\n        useOnCloseEvent: o || void 0,\n        origin: a || void 0\n    }, l = pm(c[1] || \"\", h);\n    return c[0] + \"?\" + l;\n}\n_c119 = Eh;\nfunction Ut(i, e) {\n    return i.filter((r)=>e.includes(r)).length === i.length;\n}\n_c120 = Ut;\nfunction Jn(i) {\n    return Object.fromEntries(i.entries());\n}\n_c121 = Jn;\nfunction Yn(i) {\n    return new Map(Object.entries(i));\n}\n_c122 = Yn;\nfunction vt() {\n    let i = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : ct.FIVE_MINUTES, e = arguments.length > 1 ? arguments[1] : void 0;\n    let r = (0, ct.toMiliseconds)(i || ct.FIVE_MINUTES), t, s, n;\n    return {\n        resolve: (o)=>{\n            n && t && (clearTimeout(n), t(o));\n        },\n        reject: (o)=>{\n            n && s && (clearTimeout(n), s(o));\n        },\n        done: ()=>new Promise((o, a)=>{\n                n = setTimeout(()=>{\n                    a(new Error(e));\n                }, r), t = o, s = a;\n            })\n    };\n}\nfunction pr(i, e, r) {\n    return new Promise((t, s)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n            let n = setTimeout(()=>s(new Error(r)), e);\n            try {\n                let o = yield i;\n                t(o);\n            } catch (o) {\n                s(o);\n            }\n            clearTimeout(n);\n        }));\n}\nfunction vh(i, e) {\n    if (typeof e == \"string\" && e.startsWith(\"\".concat(i, \":\"))) return e;\n    if (i.toLowerCase() === \"topic\") {\n        if (typeof e != \"string\") throw new Error('Value must be \"string\" for expirer target type: topic');\n        return \"topic:\".concat(e);\n    } else if (i.toLowerCase() === \"id\") {\n        if (typeof e != \"number\") throw new Error('Value must be \"number\" for expirer target type: id');\n        return \"id:\".concat(e);\n    }\n    throw new Error(\"Unknown expirer target type: \".concat(i));\n}\nfunction _h(i) {\n    return vh(\"topic\", i);\n}\nfunction xh(i) {\n    return vh(\"id\", i);\n}\nfunction Hi(i) {\n    let [e, r] = i.split(\":\"), t = {\n        id: void 0,\n        topic: void 0\n    };\n    if (e === \"topic\" && typeof r == \"string\") t.topic = r;\n    else if (e === \"id\" && Number.isInteger(Number(r))) t.id = Number(r);\n    else throw new Error(\"Invalid target, expected id:number or topic:string, got \".concat(e, \":\").concat(r));\n    return t;\n}\n_c123 = Hi;\nfunction Ce(i, e) {\n    return (0, ct.fromMiliseconds)((e || Date.now()) + (0, ct.toMiliseconds)(i));\n}\n_c124 = Ce;\nfunction Qe(i) {\n    return Date.now() >= (0, ct.toMiliseconds)(i);\n}\n_c125 = Qe;\nfunction oe(i, e) {\n    return \"\".concat(i).concat(e ? \":\".concat(e) : \"\");\n}\nfunction Dh(t) {\n    return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, arguments, function*(param) {\n        let { id: i, topic: e, wcDeepLink: r } = param;\n        try {\n            if (!r) return;\n            let s = typeof r == \"string\" ? JSON.parse(r) : r, n = s == null ? void 0 : s.href;\n            if (typeof n != \"string\") return;\n            n.endsWith(\"/\") && (n = n.slice(0, -1));\n            let o = \"\".concat(n, \"/wc?requestId=\").concat(i, \"&sessionTopic=\").concat(e), a = Xr();\n            a === Me.browser ? o.startsWith(\"https://\") ? window.open(o, \"_blank\", \"noreferrer noopener\") : window.open(o, \"_self\", \"noreferrer noopener\") : a === Me.reactNative && typeof (global == null ? void 0 : global.Linking) < \"u\" && (yield global.Linking.openURL(o));\n        } catch (s) {\n            console.error(s);\n        }\n    });\n}\n_c126 = Dh;\nfunction Sh(i, e) {\n    return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n        try {\n            return (yield i.getItem(e)) || (Et() ? localStorage.getItem(e) : void 0);\n        } catch (r) {\n            console.error(r);\n        }\n    });\n}\n_c127 = Sh;\nvar wm = \"irn\";\nfunction Gi(i) {\n    return (i == null ? void 0 : i.relay) || {\n        protocol: wm\n    };\n}\n_c128 = Gi;\nfunction Qr(i) {\n    let e = Qu[i];\n    if (typeof e > \"u\") throw new Error(\"Relay Protocol not supported: \".concat(i));\n    return e;\n}\n_c129 = Qr;\nvar bm = Object.defineProperty, Em = Object.defineProperties, vm = Object.getOwnPropertyDescriptors, ih = Object.getOwnPropertySymbols, _m = Object.prototype.hasOwnProperty, xm = Object.prototype.propertyIsEnumerable, sh = (i, e, r)=>e in i ? bm(i, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: r\n    }) : i[e] = r, Dm = (i, e)=>{\n    for(var r in e || (e = {}))_m.call(e, r) && sh(i, r, e[r]);\n    if (ih) for (var r of ih(e))xm.call(e, r) && sh(i, r, e[r]);\n    return i;\n}, Sm = (i, e)=>Em(i, vm(e));\nfunction Im(i) {\n    let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"-\";\n    let r = {}, t = \"relay\" + e;\n    return Object.keys(i).forEach((s)=>{\n        if (s.startsWith(t)) {\n            let n = s.replace(t, \"\"), o = i[s];\n            r[n] = o;\n        }\n    }), r;\n}\n_c130 = Im;\nfunction Xn(i) {\n    i = i.includes(\"wc://\") ? i.replace(\"wc://\", \"\") : i, i = i.includes(\"wc:\") ? i.replace(\"wc:\", \"\") : i;\n    let e = i.indexOf(\":\"), r = i.indexOf(\"?\") !== -1 ? i.indexOf(\"?\") : void 0, t = i.substring(0, e), s = i.substring(e + 1, r).split(\"@\"), n = typeof r < \"u\" ? i.substring(r) : \"\", o = lr.parse(n);\n    return {\n        protocol: t,\n        topic: Rm(s[0]),\n        version: parseInt(s[1], 10),\n        symKey: o.symKey,\n        relay: Im(o),\n        expiryTimestamp: o.expiryTimestamp ? parseInt(o.expiryTimestamp, 10) : void 0\n    };\n}\n_c131 = Xn;\nfunction Rm(i) {\n    return i.startsWith(\"//\") ? i.substring(2) : i;\n}\n_c132 = Rm;\nfunction Om(i) {\n    let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"-\";\n    let r = \"relay\", t = {};\n    return Object.keys(i).forEach((s)=>{\n        let n = r + e + s;\n        i[s] && (t[n] = i[s]);\n    }), t;\n}\n_c133 = Om;\nfunction Ih(i) {\n    return \"\".concat(i.protocol, \":\").concat(i.topic, \"@\").concat(i.version, \"?\") + lr.stringify(Sm(Dm({\n        symKey: i.symKey\n    }, Om(i.relay)), {\n        expiryTimestamp: i.expiryTimestamp\n    }));\n}\n_c134 = Ih;\nfunction gr(i) {\n    let e = [];\n    return i.forEach((r)=>{\n        let [t, s] = r.split(\":\");\n        e.push(\"\".concat(t, \":\").concat(s));\n    }), e;\n}\nfunction Tm(i) {\n    let e = [];\n    return Object.values(i).forEach((r)=>{\n        e.push(...gr(r.accounts));\n    }), e;\n}\n_c135 = Tm;\nfunction Nm(i, e) {\n    let r = [];\n    return Object.values(i).forEach((t)=>{\n        gr(t.accounts).includes(e) && r.push(...t.methods);\n    }), r;\n}\n_c136 = Nm;\nfunction Pm(i, e) {\n    let r = [];\n    return Object.values(i).forEach((t)=>{\n        gr(t.accounts).includes(e) && r.push(...t.events);\n    }), r;\n}\n_c137 = Pm;\nvar Cm = {\n    INVALID_METHOD: {\n        message: \"Invalid method.\",\n        code: 1001\n    },\n    INVALID_EVENT: {\n        message: \"Invalid event.\",\n        code: 1002\n    },\n    INVALID_UPDATE_REQUEST: {\n        message: \"Invalid update request.\",\n        code: 1003\n    },\n    INVALID_EXTEND_REQUEST: {\n        message: \"Invalid extend request.\",\n        code: 1004\n    },\n    INVALID_SESSION_SETTLE_REQUEST: {\n        message: \"Invalid session settle request.\",\n        code: 1005\n    },\n    UNAUTHORIZED_METHOD: {\n        message: \"Unauthorized method.\",\n        code: 3001\n    },\n    UNAUTHORIZED_EVENT: {\n        message: \"Unauthorized event.\",\n        code: 3002\n    },\n    UNAUTHORIZED_UPDATE_REQUEST: {\n        message: \"Unauthorized update request.\",\n        code: 3003\n    },\n    UNAUTHORIZED_EXTEND_REQUEST: {\n        message: \"Unauthorized extend request.\",\n        code: 3004\n    },\n    USER_REJECTED: {\n        message: \"User rejected.\",\n        code: 5e3\n    },\n    USER_REJECTED_CHAINS: {\n        message: \"User rejected chains.\",\n        code: 5001\n    },\n    USER_REJECTED_METHODS: {\n        message: \"User rejected methods.\",\n        code: 5002\n    },\n    USER_REJECTED_EVENTS: {\n        message: \"User rejected events.\",\n        code: 5003\n    },\n    UNSUPPORTED_CHAINS: {\n        message: \"Unsupported chains.\",\n        code: 5100\n    },\n    UNSUPPORTED_METHODS: {\n        message: \"Unsupported methods.\",\n        code: 5101\n    },\n    UNSUPPORTED_EVENTS: {\n        message: \"Unsupported events.\",\n        code: 5102\n    },\n    UNSUPPORTED_ACCOUNTS: {\n        message: \"Unsupported accounts.\",\n        code: 5103\n    },\n    UNSUPPORTED_NAMESPACE_KEY: {\n        message: \"Unsupported namespace key.\",\n        code: 5104\n    },\n    USER_DISCONNECTED: {\n        message: \"User disconnected.\",\n        code: 6e3\n    },\n    SESSION_SETTLEMENT_FAILED: {\n        message: \"Session settlement failed.\",\n        code: 7e3\n    },\n    WC_METHOD_UNSUPPORTED: {\n        message: \"Unsupported wc_ method.\",\n        code: 10001\n    }\n}, Am = {\n    NOT_INITIALIZED: {\n        message: \"Not initialized.\",\n        code: 1\n    },\n    NO_MATCHING_KEY: {\n        message: \"No matching key.\",\n        code: 2\n    },\n    RESTORE_WILL_OVERRIDE: {\n        message: \"Restore will override.\",\n        code: 3\n    },\n    RESUBSCRIBED: {\n        message: \"Resubscribed.\",\n        code: 4\n    },\n    MISSING_OR_INVALID: {\n        message: \"Missing or invalid.\",\n        code: 5\n    },\n    EXPIRED: {\n        message: \"Expired.\",\n        code: 6\n    },\n    UNKNOWN_TYPE: {\n        message: \"Unknown type.\",\n        code: 7\n    },\n    MISMATCHED_TOPIC: {\n        message: \"Mismatched topic.\",\n        code: 8\n    },\n    NON_CONFORMING_NAMESPACES: {\n        message: \"Non conforming namespaces.\",\n        code: 9\n    }\n};\nfunction T(i, e) {\n    let { message: r, code: t } = Am[i];\n    return {\n        message: e ? \"\".concat(r, \" \").concat(e) : r,\n        code: t\n    };\n}\n_c138 = T;\nfunction de(i, e) {\n    let { message: r, code: t } = Cm[i];\n    return {\n        message: e ? \"\".concat(r, \" \").concat(e) : r,\n        code: t\n    };\n}\nfunction yr(i, e) {\n    return Array.isArray(i) ? typeof e < \"u\" && i.length ? i.every(e) : !0 : !1;\n}\nfunction Zr(i) {\n    return Object.getPrototypeOf(i) === Object.prototype && Object.keys(i).length;\n}\n_c139 = Zr;\nfunction _e(i) {\n    return typeof i > \"u\";\n}\nfunction me(i, e) {\n    return e && _e(i) ? !0 : typeof i == \"string\" && !!i.trim().length;\n}\nfunction Qn(i, e) {\n    return e && _e(i) ? !0 : typeof i == \"number\" && !isNaN(i);\n}\n_c140 = Qn;\nfunction Rh(i, e) {\n    let { requiredNamespaces: r } = e, t = Object.keys(i.namespaces), s = Object.keys(r), n = !0;\n    return Ut(s, t) ? (t.forEach((o)=>{\n        let { accounts: a, methods: c, events: u } = i.namespaces[o], h = gr(a), l = r[o];\n        (!Ut(uh(o, l), h) || !Ut(l.methods, c) || !Ut(l.events, u)) && (n = !1);\n    }), n) : !1;\n}\n_c141 = Rh;\nfunction $i(i) {\n    return me(i, !1) && i.includes(\":\") ? i.split(\":\").length === 2 : !1;\n}\nfunction Lm(i) {\n    if (me(i, !1) && i.includes(\":\")) {\n        let e = i.split(\":\");\n        if (e.length === 3) {\n            let r = e[0] + \":\" + e[1];\n            return !!e[2] && $i(r);\n        }\n    }\n    return !1;\n}\n_c142 = Lm;\nfunction Oh(i) {\n    if (me(i, !1)) try {\n        return typeof new URL(i) < \"u\";\n    } catch (e) {\n        return !1;\n    }\n    return !1;\n}\n_c143 = Oh;\nfunction Th(i) {\n    var e;\n    return (e = i == null ? void 0 : i.proposer) == null ? void 0 : e.publicKey;\n}\n_c144 = Th;\nfunction Nh(i) {\n    return i == null ? void 0 : i.topic;\n}\n_c145 = Nh;\nfunction Ph(i, e) {\n    let r = null;\n    return me(i == null ? void 0 : i.publicKey, !1) || (r = T(\"MISSING_OR_INVALID\", \"\".concat(e, \" controller public key should be a string\"))), r;\n}\n_c146 = Ph;\nfunction nh(i) {\n    let e = !0;\n    return yr(i) ? i.length && (e = i.every((r)=>me(r, !1))) : e = !1, e;\n}\nfunction Fm(i, e, r) {\n    let t = null;\n    return yr(e) && e.length ? e.forEach((s)=>{\n        t || $i(s) || (t = de(\"UNSUPPORTED_CHAINS\", \"\".concat(r, \", chain \").concat(s, ' should be a string and conform to \"namespace:chainId\" format')));\n    }) : $i(i) || (t = de(\"UNSUPPORTED_CHAINS\", \"\".concat(r, ', chains must be defined as \"namespace:chainId\" e.g. \"eip155:1\": {...} in the namespace key OR as an array of CAIP-2 chainIds e.g. eip155: { chains: [\"eip155:1\", \"eip155:5\"] }'))), t;\n}\n_c147 = Fm;\nfunction Um(i, e, r) {\n    let t = null;\n    return Object.entries(i).forEach((param)=>{\n        let [s, n] = param;\n        if (t) return;\n        let o = Fm(s, uh(s, n), \"\".concat(e, \" \").concat(r));\n        o && (t = o);\n    }), t;\n}\n_c148 = Um;\nfunction Mm(i, e) {\n    let r = null;\n    return yr(i) ? i.forEach((t)=>{\n        r || Lm(t) || (r = de(\"UNSUPPORTED_ACCOUNTS\", \"\".concat(e, \", account \").concat(t, ' should be a string and conform to \"namespace:chainId:address\" format')));\n    }) : r = de(\"UNSUPPORTED_ACCOUNTS\", \"\".concat(e, ', accounts should be an array of strings conforming to \"namespace:chainId:address\" format')), r;\n}\n_c149 = Mm;\nfunction qm(i, e) {\n    let r = null;\n    return Object.values(i).forEach((t)=>{\n        if (r) return;\n        let s = Mm(t == null ? void 0 : t.accounts, \"\".concat(e, \" namespace\"));\n        s && (r = s);\n    }), r;\n}\nfunction jm(i, e) {\n    let r = null;\n    return nh(i == null ? void 0 : i.methods) ? nh(i == null ? void 0 : i.events) || (r = de(\"UNSUPPORTED_EVENTS\", \"\".concat(e, \", events should be an array of strings or empty array for no events\"))) : r = de(\"UNSUPPORTED_METHODS\", \"\".concat(e, \", methods should be an array of strings or empty array for no methods\")), r;\n}\nfunction Ch(i, e) {\n    let r = null;\n    return Object.values(i).forEach((t)=>{\n        if (r) return;\n        let s = jm(t, \"\".concat(e, \", namespace\"));\n        s && (r = s);\n    }), r;\n}\n_c150 = Ch;\nfunction Ah(i, e, r) {\n    let t = null;\n    if (i && Zr(i)) {\n        let s = Ch(i, e);\n        s && (t = s);\n        let n = Um(i, e, r);\n        n && (t = n);\n    } else t = T(\"MISSING_OR_INVALID\", \"\".concat(e, \", \").concat(r, \" should be an object with data\"));\n    return t;\n}\n_c151 = Ah;\nfunction Wi(i, e) {\n    let r = null;\n    if (i && Zr(i)) {\n        let t = Ch(i, e);\n        t && (r = t);\n        let s = qm(i, e);\n        s && (r = s);\n    } else r = T(\"MISSING_OR_INVALID\", \"\".concat(e, \", namespaces should be an object with data\"));\n    return r;\n}\n_c152 = Wi;\nfunction Zn(i) {\n    return me(i.protocol, !0);\n}\n_c153 = Zn;\nfunction Lh(i, e) {\n    let r = !1;\n    return e && !i ? r = !0 : i && yr(i) && i.length && i.forEach((t)=>{\n        r = Zn(t);\n    }), r;\n}\n_c154 = Lh;\nfunction Fh(i) {\n    return typeof i == \"number\";\n}\n_c155 = Fh;\nfunction Te(i) {\n    return typeof i < \"u\" && typeof i !== null;\n}\n_c156 = Te;\nfunction Uh(i) {\n    return !(!i || typeof i != \"object\" || !i.code || !Qn(i.code, !1) || !i.message || !me(i.message, !1));\n}\n_c157 = Uh;\nfunction Mh(i) {\n    return !(_e(i) || !me(i.method, !1));\n}\n_c158 = Mh;\nfunction qh(i) {\n    return !(_e(i) || _e(i.result) && _e(i.error) || !Qn(i.id, !1) || !me(i.jsonrpc, !1));\n}\nfunction jh(i) {\n    return !(_e(i) || !me(i.name, !1));\n}\nfunction eo(i, e) {\n    return !(!$i(e) || !Tm(i).includes(e));\n}\nfunction Bh(i, e, r) {\n    return me(r, !1) ? Nm(i, e).includes(r) : !1;\n}\n_c159 = Bh;\nfunction Vh(i, e, r) {\n    return me(r, !1) ? Pm(i, e).includes(r) : !1;\n}\n_c160 = Vh;\nfunction to(i, e, r) {\n    let t = null, s = Bm(i), n = Vm(e), o = Object.keys(s), a = Object.keys(n), c = oh(Object.keys(i)), u = oh(Object.keys(e)), h = c.filter((l)=>!u.includes(l));\n    return h.length && (t = T(\"NON_CONFORMING_NAMESPACES\", \"\".concat(r, \" namespaces keys don't satisfy requiredNamespaces.\\n      Required: \").concat(h.toString(), \"\\n      Received: \").concat(Object.keys(e).toString()))), Ut(o, a) || (t = T(\"NON_CONFORMING_NAMESPACES\", \"\".concat(r, \" namespaces chains don't satisfy required namespaces.\\n      Required: \").concat(o.toString(), \"\\n      Approved: \").concat(a.toString()))), Object.keys(e).forEach((l)=>{\n        if (!l.includes(\":\") || t) return;\n        let p = gr(e[l].accounts);\n        p.includes(l) || (t = T(\"NON_CONFORMING_NAMESPACES\", \"\".concat(r, \" namespaces accounts don't satisfy namespace accounts for \").concat(l, \"\\n        Required: \").concat(l, \"\\n        Approved: \").concat(p.toString())));\n    }), o.forEach((l)=>{\n        t || (Ut(s[l].methods, n[l].methods) ? Ut(s[l].events, n[l].events) || (t = T(\"NON_CONFORMING_NAMESPACES\", \"\".concat(r, \" namespaces events don't satisfy namespace events for \").concat(l))) : t = T(\"NON_CONFORMING_NAMESPACES\", \"\".concat(r, \" namespaces methods don't satisfy namespace methods for \").concat(l)));\n    }), t;\n}\nfunction Bm(i) {\n    let e = {};\n    return Object.keys(i).forEach((r)=>{\n        var t;\n        r.includes(\":\") ? e[r] = i[r] : (t = i[r].chains) == null || t.forEach((s)=>{\n            e[s] = {\n                methods: i[r].methods,\n                events: i[r].events\n            };\n        });\n    }), e;\n}\n_c161 = Bm;\nfunction oh(i) {\n    return [\n        ...new Set(i.map((e)=>e.includes(\":\") ? e.split(\":\")[0] : e))\n    ];\n}\nfunction Vm(i) {\n    let e = {};\n    return Object.keys(i).forEach((r)=>{\n        if (r.includes(\":\")) e[r] = i[r];\n        else {\n            let t = gr(i[r].accounts);\n            t == null || t.forEach((s)=>{\n                e[s] = {\n                    accounts: i[r].accounts.filter((n)=>n.includes(\"\".concat(s, \":\"))),\n                    methods: i[r].methods,\n                    events: i[r].events\n                };\n            });\n        }\n    }), e;\n}\n_c162 = Vm;\nfunction zh(i, e) {\n    return Qn(i, !1) && i <= e.max && i >= e.min;\n}\nfunction ro() {\n    let i = Xr();\n    return new Promise((e)=>{\n        switch(i){\n            case Me.browser:\n                e(zm());\n                break;\n            case Me.reactNative:\n                e($m());\n                break;\n            case Me.node:\n                e(Km());\n                break;\n            default:\n                e(!0);\n        }\n    });\n}\nfunction zm() {\n    return Et() && (navigator == null ? void 0 : navigator.onLine);\n}\nfunction $m() {\n    return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n        if (Mt() && typeof global < \"u\" && global != null && global.NetInfo) {\n            let i = yield global == null ? void 0 : global.NetInfo.fetch();\n            return i == null ? void 0 : i.isConnected;\n        }\n        return !0;\n    });\n}\nfunction Km() {\n    return !0;\n}\n_c163 = Km;\nfunction $h(i) {\n    switch(Xr()){\n        case Me.browser:\n            km(i);\n            break;\n        case Me.reactNative:\n            Hm(i);\n            break;\n        case Me.node:\n            break;\n    }\n}\nfunction km(i) {\n    !Mt() && Et() && (window.addEventListener(\"online\", ()=>i(!0)), window.addEventListener(\"offline\", ()=>i(!1)));\n}\nfunction Hm(i) {\n    Mt() && typeof global < \"u\" && global != null && global.NetInfo && (global == null || global.NetInfo.addEventListener((e)=>i(e == null ? void 0 : e.isConnected)));\n}\n_c164 = Hm;\nvar Bn = {}, mt = class {\n    static get(e) {\n        return Bn[e];\n    }\n    static set(e, r) {\n        Bn[e] = r;\n    }\n    static delete(e) {\n        delete Bn[e];\n    }\n};\nvar W = (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.j)(Tt());\nvar cl = (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.j)(kt());\nvar Ne = {};\n(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.h)(Ne, {\n    DEFAULT_ERROR: ()=>ti,\n    IBaseJsonRpcProvider: ()=>is,\n    IEvents: ()=>ii,\n    IJsonRpcConnection: ()=>ho,\n    IJsonRpcProvider: ()=>si,\n    INTERNAL_ERROR: ()=>Ji,\n    INVALID_PARAMS: ()=>Gh,\n    INVALID_REQUEST: ()=>kh,\n    METHOD_NOT_FOUND: ()=>Hh,\n    PARSE_ERROR: ()=>Kh,\n    RESERVED_ERROR_CODES: ()=>io,\n    SERVER_ERROR: ()=>ei,\n    SERVER_ERROR_CODE_RANGE: ()=>Yi,\n    STANDARD_ERROR_MAP: ()=>_t,\n    formatErrorMessage: ()=>ol,\n    formatJsonRpcError: ()=>qt,\n    formatJsonRpcRequest: ()=>Ze,\n    formatJsonRpcResult: ()=>mr,\n    getBigIntRpcId: ()=>He,\n    getError: ()=>Qi,\n    getErrorByCode: ()=>Zi,\n    isHttpUrl: ()=>_0,\n    isJsonRpcError: ()=>Le,\n    isJsonRpcPayload: ()=>fo,\n    isJsonRpcRequest: ()=>wr,\n    isJsonRpcResponse: ()=>It,\n    isJsonRpcResult: ()=>Ke,\n    isJsonRpcValidationInvalid: ()=>x0,\n    isLocalhostUrl: ()=>lo,\n    isNodeJs: ()=>nl,\n    isReservedErrorCode: ()=>Xi,\n    isServerErrorCode: ()=>Gm,\n    isValidDefaultRoute: ()=>ts,\n    isValidErrorCode: ()=>Wh,\n    isValidLeadingWildcardRoute: ()=>m0,\n    isValidRoute: ()=>y0,\n    isValidTrailingWildcardRoute: ()=>w0,\n    isValidWildcardRoute: ()=>rs,\n    isWsUrl: ()=>ss,\n    parseConnectionError: ()=>so,\n    payloadId: ()=>St,\n    validateJsonRpcError: ()=>Wm\n});\nvar Kh = \"PARSE_ERROR\", kh = \"INVALID_REQUEST\", Hh = \"METHOD_NOT_FOUND\", Gh = \"INVALID_PARAMS\", Ji = \"INTERNAL_ERROR\", ei = \"SERVER_ERROR\", io = [\n    -32700,\n    -32600,\n    -32601,\n    -32602,\n    -32603\n], Yi = [\n    -32e3,\n    -32099\n], _t = {\n    [Kh]: {\n        code: -32700,\n        message: \"Parse error\"\n    },\n    [kh]: {\n        code: -32600,\n        message: \"Invalid Request\"\n    },\n    [Hh]: {\n        code: -32601,\n        message: \"Method not found\"\n    },\n    [Gh]: {\n        code: -32602,\n        message: \"Invalid params\"\n    },\n    [Ji]: {\n        code: -32603,\n        message: \"Internal error\"\n    },\n    [ei]: {\n        code: -32e3,\n        message: \"Server error\"\n    }\n}, ti = ei;\nfunction Gm(i) {\n    return i <= Yi[0] && i >= Yi[1];\n}\n_c165 = Gm;\nfunction Xi(i) {\n    return io.includes(i);\n}\n_c166 = Xi;\nfunction Wh(i) {\n    return typeof i == \"number\";\n}\n_c167 = Wh;\nfunction Qi(i) {\n    return Object.keys(_t).includes(i) ? _t[i] : _t[ti];\n}\n_c168 = Qi;\nfunction Zi(i) {\n    let e = Object.values(_t).find((r)=>r.code === i);\n    return e || _t[ti];\n}\n_c169 = Zi;\nfunction Wm(i) {\n    if (typeof i.error.code == \"undefined\") return {\n        valid: !1,\n        error: \"Missing code for JSON-RPC error\"\n    };\n    if (typeof i.error.message == \"undefined\") return {\n        valid: !1,\n        error: \"Missing message for JSON-RPC error\"\n    };\n    if (!Wh(i.error.code)) return {\n        valid: !1,\n        error: \"Invalid error code type for JSON-RPC: \".concat(i.error.code)\n    };\n    if (Xi(i.error.code)) {\n        let e = Zi(i.error.code);\n        if (e.message !== _t[ti].message && i.error.message === e.message) return {\n            valid: !1,\n            error: \"Invalid error code message for JSON-RPC: \".concat(i.error.code)\n        };\n    }\n    return {\n        valid: !0\n    };\n}\n_c170 = Wm;\nfunction so(i, e, r) {\n    return i.message.includes(\"getaddrinfo ENOTFOUND\") || i.message.includes(\"connect ECONNREFUSED\") ? new Error(\"Unavailable \".concat(r, \" RPC url at \").concat(e)) : i;\n}\nvar Ae = {};\n(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.h)(Ae, {\n    isNodeJs: ()=>nl\n});\nvar sl = (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.j)(uo());\n(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(Ae, (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.j)(uo()));\nvar nl = sl.isNode;\n(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(Ne, Ae);\nfunction St() {\n    let i = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 3;\n    let e = Date.now() * Math.pow(10, i), r = Math.floor(Math.random() * Math.pow(10, i));\n    return e + r;\n}\n_c171 = St;\nfunction He() {\n    let i = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 6;\n    return BigInt(St(i));\n}\n_c172 = He;\nfunction Ze(i, e, r) {\n    return {\n        id: r || St(),\n        jsonrpc: \"2.0\",\n        method: i,\n        params: e\n    };\n}\n_c173 = Ze;\nfunction mr(i, e) {\n    return {\n        id: i,\n        jsonrpc: \"2.0\",\n        result: e\n    };\n}\nfunction qt(i, e, r) {\n    return {\n        id: i,\n        jsonrpc: \"2.0\",\n        error: ol(e, r)\n    };\n}\nfunction ol(i, e) {\n    return typeof i == \"undefined\" ? Qi(Ji) : (typeof i == \"string\" && (i = Object.assign(Object.assign({}, Qi(ei)), {\n        message: i\n    })), typeof e != \"undefined\" && (i.data = e), Xi(i.code) && (i = Zi(i.code)), i);\n}\nfunction y0(i) {\n    return i.includes(\"*\") ? rs(i) : !/\\W/g.test(i);\n}\nfunction ts(i) {\n    return i === \"*\";\n}\nfunction rs(i) {\n    return ts(i) ? !0 : !(!i.includes(\"*\") || i.split(\"*\").length !== 2 || i.split(\"*\").filter((e)=>e.trim() === \"\").length !== 1);\n}\nfunction m0(i) {\n    return !ts(i) && rs(i) && !i.split(\"*\")[0].trim();\n}\nfunction w0(i) {\n    return !ts(i) && rs(i) && !i.split(\"*\")[1].trim();\n}\nvar ii = class {\n}, ho = class extends ii {\n    constructor(e){\n        super();\n    }\n}, is = class extends ii {\n    constructor(){\n        super();\n    }\n}, si = class extends is {\n    constructor(e){\n        super();\n    }\n};\nvar b0 = \"^https?:\", E0 = \"^wss?:\";\nfunction v0(i) {\n    let e = i.match(new RegExp(/^\\w+:/, \"gi\"));\n    if (!(!e || !e.length)) return e[0];\n}\nfunction al(i, e) {\n    let r = v0(i);\n    return typeof r == \"undefined\" ? !1 : new RegExp(e).test(r);\n}\nfunction _0(i) {\n    return al(i, b0);\n}\nfunction ss(i) {\n    return al(i, E0);\n}\nfunction lo(i) {\n    return new RegExp(\"wss?://localhost(:d{2,5})?\").test(i);\n}\nfunction fo(i) {\n    return typeof i == \"object\" && \"id\" in i && \"jsonrpc\" in i && i.jsonrpc === \"2.0\";\n}\nfunction wr(i) {\n    return fo(i) && \"method\" in i;\n}\nfunction It(i) {\n    return fo(i) && (Ke(i) || Le(i));\n}\n_c174 = It;\nfunction Ke(i) {\n    return \"result\" in i;\n}\n_c175 = Ke;\nfunction Le(i) {\n    return \"error\" in i;\n}\n_c176 = Le;\nfunction x0(i) {\n    return \"error\" in i && i.valid === !1;\n}\nvar ns = class extends si {\n    connect() {\n        return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, arguments, function*() {\n            let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.connection;\n            yield this.open(e);\n        });\n    }\n    disconnect() {\n        return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n            yield this.close();\n        });\n    }\n    on(e, r) {\n        this.events.on(e, r);\n    }\n    once(e, r) {\n        this.events.once(e, r);\n    }\n    off(e, r) {\n        this.events.off(e, r);\n    }\n    removeListener(e, r) {\n        this.events.removeListener(e, r);\n    }\n    request(e, r) {\n        return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n            return this.requestStrict(Ze(e.method, e.params || [], e.id || He().toString()), r);\n        });\n    }\n    requestStrict(e, r) {\n        return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n            return new Promise((t, s)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                    if (!this.connection.connected) try {\n                        yield this.open();\n                    } catch (n) {\n                        s(n);\n                    }\n                    this.events.on(\"\".concat(e.id), (n)=>{\n                        Le(n) ? s(n.error) : t(n.result);\n                    });\n                    try {\n                        yield this.connection.send(e, r);\n                    } catch (n) {\n                        s(n);\n                    }\n                }));\n        });\n    }\n    setConnection() {\n        let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.connection;\n        return e;\n    }\n    onPayload(e) {\n        this.events.emit(\"payload\", e), It(e) ? this.events.emit(\"\".concat(e.id), e) : this.events.emit(\"message\", {\n            type: e.method,\n            data: e.params\n        });\n    }\n    onClose(e) {\n        e && e.code === 3e3 && this.events.emit(\"error\", new Error(\"WebSocket connection closed abnormally with code: \".concat(e.code, \" \").concat(e.reason ? \"(\".concat(e.reason, \")\") : \"\"))), this.events.emit(\"disconnect\");\n    }\n    open() {\n        return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, arguments, function*() {\n            let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.connection;\n            this.connection === e && this.connection.connected || (this.connection.connected && this.close(), typeof e == \"string\" && (yield this.connection.open(e), e = this.connection), this.connection = this.setConnection(e), yield this.connection.open(), this.registerEventListeners(), this.events.emit(\"connect\"));\n        });\n    }\n    close() {\n        return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n            yield this.connection.close();\n        });\n    }\n    registerEventListeners() {\n        this.hasRegisteredEventListeners || (this.connection.on(\"payload\", (e)=>this.onPayload(e)), this.connection.on(\"close\", (e)=>this.onClose(e)), this.connection.on(\"error\", (e)=>this.events.emit(\"error\", e)), this.connection.on(\"register_error\", (e)=>this.onClose()), this.hasRegisteredEventListeners = !0);\n    }\n    constructor(e){\n        super(e), this.events = new cl.EventEmitter, this.hasRegisteredEventListeners = !1, this.connection = this.setConnection(e), this.connection.connected && this.registerEventListeners();\n    }\n};\nvar dl = (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.j)(kt());\nvar D0 = ()=>typeof WebSocket < \"u\" ? WebSocket : typeof global < \"u\" && typeof global.WebSocket < \"u\" ? global.WebSocket : typeof window < \"u\" && typeof window.WebSocket < \"u\" ? window.WebSocket : typeof self < \"u\" && typeof self.WebSocket < \"u\" ? self.WebSocket : hl(), S0 = ()=>typeof WebSocket < \"u\" || typeof global < \"u\" && typeof global.WebSocket < \"u\" || typeof window < \"u\" && typeof window.WebSocket < \"u\" || typeof self < \"u\" && typeof self.WebSocket < \"u\", ll = (i)=>i.split(\"?\")[0], fl = 10, I0 = D0(), os = class {\n    get connected() {\n        return typeof this.socket < \"u\";\n    }\n    get connecting() {\n        return this.registering;\n    }\n    on(e, r) {\n        this.events.on(e, r);\n    }\n    once(e, r) {\n        this.events.once(e, r);\n    }\n    off(e, r) {\n        this.events.off(e, r);\n    }\n    removeListener(e, r) {\n        this.events.removeListener(e, r);\n    }\n    open() {\n        return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, arguments, function*() {\n            let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.url;\n            yield this.register(e);\n        });\n    }\n    close() {\n        return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n            return new Promise((e, r)=>{\n                if (typeof this.socket > \"u\") {\n                    r(new Error(\"Connection already closed\"));\n                    return;\n                }\n                this.socket.onclose = (t)=>{\n                    this.onClose(t), e();\n                }, this.socket.close();\n            });\n        });\n    }\n    send(e) {\n        return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n            typeof this.socket > \"u\" && (this.socket = yield this.register());\n            try {\n                this.socket.send(Ge(e));\n            } catch (r) {\n                this.onError(e.id, r);\n            }\n        });\n    }\n    register() {\n        let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.url;\n        if (!ss(e)) throw new Error(\"Provided URL is not compatible with WebSocket connection: \".concat(e));\n        if (this.registering) {\n            let r = this.events.getMaxListeners();\n            return (this.events.listenerCount(\"register_error\") >= r || this.events.listenerCount(\"open\") >= r) && this.events.setMaxListeners(r + 1), new Promise((t, s)=>{\n                this.events.once(\"register_error\", (n)=>{\n                    this.resetMaxListeners(), s(n);\n                }), this.events.once(\"open\", ()=>{\n                    if (this.resetMaxListeners(), typeof this.socket > \"u\") return s(new Error(\"WebSocket connection is missing or invalid\"));\n                    t(this.socket);\n                });\n            });\n        }\n        return this.url = e, this.registering = !0, new Promise((r, t)=>{\n            let s = new URLSearchParams(e).get(\"origin\"), n = (0, Ne.isReactNative)() ? {\n                headers: {\n                    origin: s\n                }\n            } : {\n                rejectUnauthorized: !lo(e)\n            }, o = new I0(e, [], n);\n            S0() ? o.onerror = (a)=>{\n                let c = a;\n                t(this.emitError(c.error));\n            } : o.on(\"error\", (a)=>{\n                t(this.emitError(a));\n            }), o.onopen = ()=>{\n                this.onOpen(o), r(o);\n            };\n        });\n    }\n    onOpen(e) {\n        e.onmessage = (r)=>this.onPayload(r), e.onclose = (r)=>this.onClose(r), this.socket = e, this.registering = !1, this.events.emit(\"open\");\n    }\n    onClose(e) {\n        this.socket = void 0, this.registering = !1, this.events.emit(\"close\", e);\n    }\n    onPayload(e) {\n        if (typeof e.data > \"u\") return;\n        let r = typeof e.data == \"string\" ? dt(e.data) : e.data;\n        this.events.emit(\"payload\", r);\n    }\n    onError(e, r) {\n        let t = this.parseError(r), s = t.message || t.toString(), n = qt(e, s);\n        this.events.emit(\"payload\", n);\n    }\n    parseError(e) {\n        let r = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.url;\n        return so(e, ll(r), \"WS\");\n    }\n    resetMaxListeners() {\n        this.events.getMaxListeners() > fl && this.events.setMaxListeners(fl);\n    }\n    emitError(e) {\n        let r = this.parseError(new Error((e == null ? void 0 : e.message) || \"WebSocket connection failed for host: \".concat(ll(this.url))));\n        return this.events.emit(\"register_error\", r), r;\n    }\n    constructor(e){\n        if (this.url = e, this.events = new dl.EventEmitter, this.registering = !1, !ss(e)) throw new Error(\"Provided URL is not compatible with WebSocket connection: \".concat(e));\n        this.url = e;\n    }\n};\nvar Ll = (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.j)(gl());\n\nfunction j0(i, e) {\n    if (i.length >= 255) throw new TypeError(\"Alphabet too long\");\n    for(var r = new Uint8Array(256), t = 0; t < r.length; t++)r[t] = 255;\n    for(var s = 0; s < i.length; s++){\n        var n = i.charAt(s), o = n.charCodeAt(0);\n        if (r[o] !== 255) throw new TypeError(n + \" is ambiguous\");\n        r[o] = s;\n    }\n    var a = i.length, c = i.charAt(0), u = Math.log(a) / Math.log(256), h = Math.log(256) / Math.log(a);\n    function l(g) {\n        if (g instanceof Uint8Array || (ArrayBuffer.isView(g) ? g = new Uint8Array(g.buffer, g.byteOffset, g.byteLength) : Array.isArray(g) && (g = Uint8Array.from(g))), !(g instanceof Uint8Array)) throw new TypeError(\"Expected Uint8Array\");\n        if (g.length === 0) return \"\";\n        for(var w = 0, b = 0, E = 0, I = g.length; E !== I && g[E] === 0;)E++, w++;\n        for(var _ = (I - E) * h + 1 >>> 0, v = new Uint8Array(_); E !== I;){\n            for(var S = g[E], N = 0, y = _ - 1; (S !== 0 || N < b) && y !== -1; y--, N++)S += 256 * v[y] >>> 0, v[y] = S % a >>> 0, S = S / a >>> 0;\n            if (S !== 0) throw new Error(\"Non-zero carry\");\n            b = N, E++;\n        }\n        for(var m = _ - b; m !== _ && v[m] === 0;)m++;\n        for(var P = c.repeat(w); m < _; ++m)P += i.charAt(v[m]);\n        return P;\n    }\n    function p(g) {\n        if (typeof g != \"string\") throw new TypeError(\"Expected String\");\n        if (g.length === 0) return new Uint8Array;\n        var w = 0;\n        if (g[w] !== \" \") {\n            for(var b = 0, E = 0; g[w] === c;)b++, w++;\n            for(var I = (g.length - w) * u + 1 >>> 0, _ = new Uint8Array(I); g[w];){\n                var v = r[g.charCodeAt(w)];\n                if (v === 255) return;\n                for(var S = 0, N = I - 1; (v !== 0 || S < E) && N !== -1; N--, S++)v += a * _[N] >>> 0, _[N] = v % 256 >>> 0, v = v / 256 >>> 0;\n                if (v !== 0) throw new Error(\"Non-zero carry\");\n                E = S, w++;\n            }\n            if (g[w] !== \" \") {\n                for(var y = I - E; y !== I && _[y] === 0;)y++;\n                for(var m = new Uint8Array(b + (I - y)), P = b; y !== I;)m[P++] = _[y++];\n                return m;\n            }\n        }\n    }\n    function d(g) {\n        var w = p(g);\n        if (w) return w;\n        throw new Error(\"Non-\".concat(e, \" character\"));\n    }\n    return {\n        encode: l,\n        decodeUnsafe: p,\n        decode: d\n    };\n}\nvar B0 = j0, V0 = B0, Fl = (i)=>{\n    if (i instanceof Uint8Array && i.constructor.name === \"Uint8Array\") return i;\n    if (i instanceof ArrayBuffer) return new Uint8Array(i);\n    if (ArrayBuffer.isView(i)) return new Uint8Array(i.buffer, i.byteOffset, i.byteLength);\n    throw new Error(\"Unknown type, must be binary type\");\n}, z0 = (i)=>new TextEncoder().encode(i), $0 = (i)=>new TextDecoder().decode(i), bo = class {\n    encode(e) {\n        if (e instanceof Uint8Array) return \"\".concat(this.prefix).concat(this.baseEncode(e));\n        throw Error(\"Unknown type, must be binary type\");\n    }\n    constructor(e, r, t){\n        this.name = e, this.prefix = r, this.baseEncode = t;\n    }\n}, Eo = class {\n    decode(e) {\n        if (typeof e == \"string\") {\n            if (e.codePointAt(0) !== this.prefixCodePoint) throw Error(\"Unable to decode multibase string \".concat(JSON.stringify(e), \", \").concat(this.name, \" decoder only supports inputs prefixed with \").concat(this.prefix));\n            return this.baseDecode(e.slice(this.prefix.length));\n        } else throw Error(\"Can only multibase decode strings\");\n    }\n    or(e) {\n        return Ul(this, e);\n    }\n    constructor(e, r, t){\n        if (this.name = e, this.prefix = r, r.codePointAt(0) === void 0) throw new Error(\"Invalid prefix character\");\n        this.prefixCodePoint = r.codePointAt(0), this.baseDecode = t;\n    }\n}, vo = class {\n    or(e) {\n        return Ul(this, e);\n    }\n    decode(e) {\n        let r = e[0], t = this.decoders[r];\n        if (t) return t.decode(e);\n        throw RangeError(\"Unable to decode multibase string \".concat(JSON.stringify(e), \", only inputs prefixed with \").concat(Object.keys(this.decoders), \" are supported\"));\n    }\n    constructor(e){\n        this.decoders = e;\n    }\n}, Ul = (i, e)=>new vo((0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.b)((0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.b)({}, i.decoders || {\n        [i.prefix]: i\n    }), e.decoders || {\n        [e.prefix]: e\n    })), _o = class {\n    encode(e) {\n        return this.encoder.encode(e);\n    }\n    decode(e) {\n        return this.decoder.decode(e);\n    }\n    constructor(e, r, t, s){\n        this.name = e, this.prefix = r, this.baseEncode = t, this.baseDecode = s, this.encoder = new bo(e, r, t), this.decoder = new Eo(e, r, s);\n    }\n}, as = (param)=>{\n    let { name: i, prefix: e, encode: r, decode: t } = param;\n    return new _o(i, e, r, t);\n}, ai = (param)=>{\n    let { prefix: i, name: e, alphabet: r } = param;\n    let { encode: t, decode: s } = V0(r, e);\n    return as({\n        prefix: i,\n        name: e,\n        encode: t,\n        decode: (n)=>Fl(s(n))\n    });\n}, K0 = (i, e, r, t)=>{\n    let s = {};\n    for(let h = 0; h < e.length; ++h)s[e[h]] = h;\n    let n = i.length;\n    for(; i[n - 1] === \"=\";)--n;\n    let o = new Uint8Array(n * r / 8 | 0), a = 0, c = 0, u = 0;\n    for(let h = 0; h < n; ++h){\n        let l = s[i[h]];\n        if (l === void 0) throw new SyntaxError(\"Non-\".concat(t, \" character\"));\n        c = c << r | l, a += r, a >= 8 && (a -= 8, o[u++] = 255 & c >> a);\n    }\n    if (a >= r || 255 & c << 8 - a) throw new SyntaxError(\"Unexpected end of data\");\n    return o;\n}, k0 = (i, e, r)=>{\n    let t = e[e.length - 1] === \"=\", s = (1 << r) - 1, n = \"\", o = 0, a = 0;\n    for(let c = 0; c < i.length; ++c)for(a = a << 8 | i[c], o += 8; o > r;)o -= r, n += e[s & a >> o];\n    if (o && (n += e[s & a << r - o]), t) for(; n.length * r & 7;)n += \"=\";\n    return n;\n}, xe = (param)=>{\n    let { name: i, prefix: e, bitsPerChar: r, alphabet: t } = param;\n    return as({\n        prefix: e,\n        name: i,\n        encode (s) {\n            return k0(s, t, r);\n        },\n        decode (s) {\n            return K0(s, t, r, i);\n        }\n    });\n}, H0 = as({\n    prefix: \"\\0\",\n    name: \"identity\",\n    encode: (i)=>$0(i),\n    decode: (i)=>z0(i)\n}), G0 = Object.freeze({\n    __proto__: null,\n    identity: H0\n}), W0 = xe({\n    prefix: \"0\",\n    name: \"base2\",\n    alphabet: \"01\",\n    bitsPerChar: 1\n}), J0 = Object.freeze({\n    __proto__: null,\n    base2: W0\n}), Y0 = xe({\n    prefix: \"7\",\n    name: \"base8\",\n    alphabet: \"01234567\",\n    bitsPerChar: 3\n}), X0 = Object.freeze({\n    __proto__: null,\n    base8: Y0\n}), Q0 = ai({\n    prefix: \"9\",\n    name: \"base10\",\n    alphabet: \"0123456789\"\n}), Z0 = Object.freeze({\n    __proto__: null,\n    base10: Q0\n}), ew = xe({\n    prefix: \"f\",\n    name: \"base16\",\n    alphabet: \"0123456789abcdef\",\n    bitsPerChar: 4\n}), tw = xe({\n    prefix: \"F\",\n    name: \"base16upper\",\n    alphabet: \"0123456789ABCDEF\",\n    bitsPerChar: 4\n}), rw = Object.freeze({\n    __proto__: null,\n    base16: ew,\n    base16upper: tw\n}), iw = xe({\n    prefix: \"b\",\n    name: \"base32\",\n    alphabet: \"abcdefghijklmnopqrstuvwxyz234567\",\n    bitsPerChar: 5\n}), sw = xe({\n    prefix: \"B\",\n    name: \"base32upper\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\",\n    bitsPerChar: 5\n}), nw = xe({\n    prefix: \"c\",\n    name: \"base32pad\",\n    alphabet: \"abcdefghijklmnopqrstuvwxyz234567=\",\n    bitsPerChar: 5\n}), ow = xe({\n    prefix: \"C\",\n    name: \"base32padupper\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=\",\n    bitsPerChar: 5\n}), aw = xe({\n    prefix: \"v\",\n    name: \"base32hex\",\n    alphabet: \"0123456789abcdefghijklmnopqrstuv\",\n    bitsPerChar: 5\n}), cw = xe({\n    prefix: \"V\",\n    name: \"base32hexupper\",\n    alphabet: \"0123456789ABCDEFGHIJKLMNOPQRSTUV\",\n    bitsPerChar: 5\n}), uw = xe({\n    prefix: \"t\",\n    name: \"base32hexpad\",\n    alphabet: \"0123456789abcdefghijklmnopqrstuv=\",\n    bitsPerChar: 5\n}), hw = xe({\n    prefix: \"T\",\n    name: \"base32hexpadupper\",\n    alphabet: \"0123456789ABCDEFGHIJKLMNOPQRSTUV=\",\n    bitsPerChar: 5\n}), lw = xe({\n    prefix: \"h\",\n    name: \"base32z\",\n    alphabet: \"ybndrfg8ejkmcpqxot1uwisza345h769\",\n    bitsPerChar: 5\n}), fw = Object.freeze({\n    __proto__: null,\n    base32: iw,\n    base32upper: sw,\n    base32pad: nw,\n    base32padupper: ow,\n    base32hex: aw,\n    base32hexupper: cw,\n    base32hexpad: uw,\n    base32hexpadupper: hw,\n    base32z: lw\n}), dw = ai({\n    prefix: \"k\",\n    name: \"base36\",\n    alphabet: \"0123456789abcdefghijklmnopqrstuvwxyz\"\n}), pw = ai({\n    prefix: \"K\",\n    name: \"base36upper\",\n    alphabet: \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n}), gw = Object.freeze({\n    __proto__: null,\n    base36: dw,\n    base36upper: pw\n}), yw = ai({\n    name: \"base58btc\",\n    prefix: \"z\",\n    alphabet: \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"\n}), mw = ai({\n    name: \"base58flickr\",\n    prefix: \"Z\",\n    alphabet: \"123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ\"\n}), ww = Object.freeze({\n    __proto__: null,\n    base58btc: yw,\n    base58flickr: mw\n}), bw = xe({\n    prefix: \"m\",\n    name: \"base64\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\",\n    bitsPerChar: 6\n}), Ew = xe({\n    prefix: \"M\",\n    name: \"base64pad\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\",\n    bitsPerChar: 6\n}), vw = xe({\n    prefix: \"u\",\n    name: \"base64url\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\",\n    bitsPerChar: 6\n}), _w = xe({\n    prefix: \"U\",\n    name: \"base64urlpad\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=\",\n    bitsPerChar: 6\n}), xw = Object.freeze({\n    __proto__: null,\n    base64: bw,\n    base64pad: Ew,\n    base64url: vw,\n    base64urlpad: _w\n}), Ml = Array.from(\"\\uD83D\\uDE80\\uD83E\\uDE90☄\\uD83D\\uDEF0\\uD83C\\uDF0C\\uD83C\\uDF11\\uD83C\\uDF12\\uD83C\\uDF13\\uD83C\\uDF14\\uD83C\\uDF15\\uD83C\\uDF16\\uD83C\\uDF17\\uD83C\\uDF18\\uD83C\\uDF0D\\uD83C\\uDF0F\\uD83C\\uDF0E\\uD83D\\uDC09☀\\uD83D\\uDCBB\\uD83D\\uDDA5\\uD83D\\uDCBE\\uD83D\\uDCBF\\uD83D\\uDE02❤\\uD83D\\uDE0D\\uD83E\\uDD23\\uD83D\\uDE0A\\uD83D\\uDE4F\\uD83D\\uDC95\\uD83D\\uDE2D\\uD83D\\uDE18\\uD83D\\uDC4D\\uD83D\\uDE05\\uD83D\\uDC4F\\uD83D\\uDE01\\uD83D\\uDD25\\uD83E\\uDD70\\uD83D\\uDC94\\uD83D\\uDC96\\uD83D\\uDC99\\uD83D\\uDE22\\uD83E\\uDD14\\uD83D\\uDE06\\uD83D\\uDE44\\uD83D\\uDCAA\\uD83D\\uDE09☺\\uD83D\\uDC4C\\uD83E\\uDD17\\uD83D\\uDC9C\\uD83D\\uDE14\\uD83D\\uDE0E\\uD83D\\uDE07\\uD83C\\uDF39\\uD83E\\uDD26\\uD83C\\uDF89\\uD83D\\uDC9E✌✨\\uD83E\\uDD37\\uD83D\\uDE31\\uD83D\\uDE0C\\uD83C\\uDF38\\uD83D\\uDE4C\\uD83D\\uDE0B\\uD83D\\uDC97\\uD83D\\uDC9A\\uD83D\\uDE0F\\uD83D\\uDC9B\\uD83D\\uDE42\\uD83D\\uDC93\\uD83E\\uDD29\\uD83D\\uDE04\\uD83D\\uDE00\\uD83D\\uDDA4\\uD83D\\uDE03\\uD83D\\uDCAF\\uD83D\\uDE48\\uD83D\\uDC47\\uD83C\\uDFB6\\uD83D\\uDE12\\uD83E\\uDD2D❣\\uD83D\\uDE1C\\uD83D\\uDC8B\\uD83D\\uDC40\\uD83D\\uDE2A\\uD83D\\uDE11\\uD83D\\uDCA5\\uD83D\\uDE4B\\uD83D\\uDE1E\\uD83D\\uDE29\\uD83D\\uDE21\\uD83E\\uDD2A\\uD83D\\uDC4A\\uD83E\\uDD73\\uD83D\\uDE25\\uD83E\\uDD24\\uD83D\\uDC49\\uD83D\\uDC83\\uD83D\\uDE33✋\\uD83D\\uDE1A\\uD83D\\uDE1D\\uD83D\\uDE34\\uD83C\\uDF1F\\uD83D\\uDE2C\\uD83D\\uDE43\\uD83C\\uDF40\\uD83C\\uDF37\\uD83D\\uDE3B\\uD83D\\uDE13⭐✅\\uD83E\\uDD7A\\uD83C\\uDF08\\uD83D\\uDE08\\uD83E\\uDD18\\uD83D\\uDCA6✔\\uD83D\\uDE23\\uD83C\\uDFC3\\uD83D\\uDC90☹\\uD83C\\uDF8A\\uD83D\\uDC98\\uD83D\\uDE20☝\\uD83D\\uDE15\\uD83C\\uDF3A\\uD83C\\uDF82\\uD83C\\uDF3B\\uD83D\\uDE10\\uD83D\\uDD95\\uD83D\\uDC9D\\uD83D\\uDE4A\\uD83D\\uDE39\\uD83D\\uDDE3\\uD83D\\uDCAB\\uD83D\\uDC80\\uD83D\\uDC51\\uD83C\\uDFB5\\uD83E\\uDD1E\\uD83D\\uDE1B\\uD83D\\uDD34\\uD83D\\uDE24\\uD83C\\uDF3C\\uD83D\\uDE2B⚽\\uD83E\\uDD19☕\\uD83C\\uDFC6\\uD83E\\uDD2B\\uD83D\\uDC48\\uD83D\\uDE2E\\uD83D\\uDE46\\uD83C\\uDF7B\\uD83C\\uDF43\\uD83D\\uDC36\\uD83D\\uDC81\\uD83D\\uDE32\\uD83C\\uDF3F\\uD83E\\uDDE1\\uD83C\\uDF81⚡\\uD83C\\uDF1E\\uD83C\\uDF88❌✊\\uD83D\\uDC4B\\uD83D\\uDE30\\uD83E\\uDD28\\uD83D\\uDE36\\uD83E\\uDD1D\\uD83D\\uDEB6\\uD83D\\uDCB0\\uD83C\\uDF53\\uD83D\\uDCA2\\uD83E\\uDD1F\\uD83D\\uDE41\\uD83D\\uDEA8\\uD83D\\uDCA8\\uD83E\\uDD2C✈\\uD83C\\uDF80\\uD83C\\uDF7A\\uD83E\\uDD13\\uD83D\\uDE19\\uD83D\\uDC9F\\uD83C\\uDF31\\uD83D\\uDE16\\uD83D\\uDC76\\uD83E\\uDD74▶➡❓\\uD83D\\uDC8E\\uD83D\\uDCB8⬇\\uD83D\\uDE28\\uD83C\\uDF1A\\uD83E\\uDD8B\\uD83D\\uDE37\\uD83D\\uDD7A⚠\\uD83D\\uDE45\\uD83D\\uDE1F\\uD83D\\uDE35\\uD83D\\uDC4E\\uD83E\\uDD32\\uD83E\\uDD20\\uD83E\\uDD27\\uD83D\\uDCCC\\uD83D\\uDD35\\uD83D\\uDC85\\uD83E\\uDDD0\\uD83D\\uDC3E\\uD83C\\uDF52\\uD83D\\uDE17\\uD83E\\uDD11\\uD83C\\uDF0A\\uD83E\\uDD2F\\uD83D\\uDC37☎\\uD83D\\uDCA7\\uD83D\\uDE2F\\uD83D\\uDC86\\uD83D\\uDC46\\uD83C\\uDFA4\\uD83D\\uDE47\\uD83C\\uDF51❄\\uD83C\\uDF34\\uD83D\\uDCA3\\uD83D\\uDC38\\uD83D\\uDC8C\\uD83D\\uDCCD\\uD83E\\uDD40\\uD83E\\uDD22\\uD83D\\uDC45\\uD83D\\uDCA1\\uD83D\\uDCA9\\uD83D\\uDC50\\uD83D\\uDCF8\\uD83D\\uDC7B\\uD83E\\uDD10\\uD83E\\uDD2E\\uD83C\\uDFBC\\uD83E\\uDD75\\uD83D\\uDEA9\\uD83C\\uDF4E\\uD83C\\uDF4A\\uD83D\\uDC7C\\uD83D\\uDC8D\\uD83D\\uDCE3\\uD83E\\uDD42\"), Dw = Ml.reduce((i, e, r)=>(i[r] = e, i), []), Sw = Ml.reduce((i, e, r)=>(i[e.codePointAt(0)] = r, i), []);\nfunction Iw(i) {\n    return i.reduce((e, r)=>(e += Dw[r], e), \"\");\n}\n_c177 = Iw;\nfunction Rw(i) {\n    let e = [];\n    for (let r of i){\n        let t = Sw[r.codePointAt(0)];\n        if (t === void 0) throw new Error(\"Non-base256emoji character: \".concat(r));\n        e.push(t);\n    }\n    return new Uint8Array(e);\n}\n_c178 = Rw;\nvar Ow = as({\n    prefix: \"\\uD83D\\uDE80\",\n    name: \"base256emoji\",\n    encode: Iw,\n    decode: Rw\n}), Tw = Object.freeze({\n    __proto__: null,\n    base256emoji: Ow\n}), Nw = ql, yl = 128, Pw = 127, Cw = ~Pw, Aw = Math.pow(2, 31);\nfunction ql(i, e, r) {\n    e = e || [], r = r || 0;\n    for(var t = r; i >= Aw;)e[r++] = i & 255 | yl, i /= 128;\n    for(; i & Cw;)e[r++] = i & 255 | yl, i >>>= 7;\n    return e[r] = i | 0, ql.bytes = r - t + 1, e;\n}\nvar Lw = xo, Fw = 128, ml = 127;\nfunction xo(i, t) {\n    var r = 0, t = t || 0, s = 0, n = t, o, a = i.length;\n    do {\n        if (n >= a) throw xo.bytes = 0, new RangeError(\"Could not decode varint\");\n        o = i[n++], r += s < 28 ? (o & ml) << s : (o & ml) * Math.pow(2, s), s += 7;\n    }while (o >= Fw);\n    return xo.bytes = n - t, r;\n}\nvar Uw = Math.pow(2, 7), Mw = Math.pow(2, 14), qw = Math.pow(2, 21), jw = Math.pow(2, 28), Bw = Math.pow(2, 35), Vw = Math.pow(2, 42), zw = Math.pow(2, 49), $w = Math.pow(2, 56), Kw = Math.pow(2, 63), kw = function(i) {\n    return i < Uw ? 1 : i < Mw ? 2 : i < qw ? 3 : i < jw ? 4 : i < Bw ? 5 : i < Vw ? 6 : i < zw ? 7 : i < $w ? 8 : i < Kw ? 9 : 10;\n}, Hw = {\n    encode: Nw,\n    decode: Lw,\n    encodingLength: kw\n}, jl = Hw, wl = function(i, e) {\n    let r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;\n    return jl.encode(i, e, r), e;\n}, bl = (i)=>jl.encodingLength(i), Do = (i, e)=>{\n    let r = e.byteLength, t = bl(i), s = t + bl(r), n = new Uint8Array(s + r);\n    return wl(i, n, 0), wl(r, n, t), n.set(e, s), new So(i, r, e, n);\n}, So = class {\n    constructor(e, r, t, s){\n        this.code = e, this.size = r, this.digest = t, this.bytes = s;\n    }\n}, Bl = (param)=>{\n    let { name: i, code: e, encode: r } = param;\n    return new Io(i, e, r);\n}, Io = class {\n    digest(e) {\n        if (e instanceof Uint8Array) {\n            let r = this.encode(e);\n            return r instanceof Uint8Array ? Do(this.code, r) : r.then((t)=>Do(this.code, t));\n        } else throw Error(\"Unknown type, must be binary type\");\n    }\n    constructor(e, r, t){\n        this.name = e, this.code = r, this.encode = t;\n    }\n}, Vl = (i)=>(e)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(void 0, null, function*() {\n            return new Uint8Array((yield crypto.subtle.digest(i, e)));\n        }), Gw = Bl({\n    name: \"sha2-256\",\n    code: 18,\n    encode: Vl(\"SHA-256\")\n}), Ww = Bl({\n    name: \"sha2-512\",\n    code: 19,\n    encode: Vl(\"SHA-512\")\n}), Jw = Object.freeze({\n    __proto__: null,\n    sha256: Gw,\n    sha512: Ww\n}), zl = 0, Yw = \"identity\", $l = Fl, Xw = (i)=>Do(zl, $l(i)), Qw = {\n    code: zl,\n    name: Yw,\n    encode: $l,\n    digest: Xw\n}, Zw = Object.freeze({\n    __proto__: null,\n    identity: Qw\n});\nnew TextEncoder, new TextDecoder;\nvar El = (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.b)((0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.b)((0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.b)((0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.b)((0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.b)((0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.b)((0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.b)((0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.b)((0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.b)((0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.b)({}, G0), J0), X0), Z0), rw), fw), gw), ww), xw), Tw);\n(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.b)((0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.b)({}, Jw), Zw);\nfunction Kl(i) {\n    return globalThis.Buffer != null ? new Uint8Array(i.buffer, i.byteOffset, i.byteLength) : i;\n}\n_c179 = Kl;\nfunction eb() {\n    let i = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;\n    return globalThis.Buffer != null && globalThis.Buffer.allocUnsafe != null ? Kl(globalThis.Buffer.allocUnsafe(i)) : new Uint8Array(i);\n}\nfunction kl(i, e, r, t) {\n    return {\n        name: i,\n        prefix: e,\n        encoder: {\n            name: i,\n            prefix: e,\n            encode: r\n        },\n        decoder: {\n            decode: t\n        }\n    };\n}\nvar vl = kl(\"utf8\", \"u\", (i)=>\"u\" + new TextDecoder(\"utf8\").decode(i), (i)=>new TextEncoder().encode(i.substring(1))), yo = kl(\"ascii\", \"a\", (i)=>{\n    let e = \"a\";\n    for(let r = 0; r < i.length; r++)e += String.fromCharCode(i[r]);\n    return e;\n}, (i)=>{\n    i = i.substring(1);\n    let e = eb(i.length);\n    for(let r = 0; r < i.length; r++)e[r] = i.charCodeAt(r);\n    return e;\n}), tb = (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.b)({\n    utf8: vl,\n    \"utf-8\": vl,\n    hex: El.base16,\n    latin1: yo,\n    ascii: yo,\n    binary: yo\n}, El);\nfunction rb(i) {\n    let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"utf8\";\n    let r = tb[e];\n    if (!r) throw new Error('Unsupported encoding \"'.concat(e, '\"'));\n    return (e === \"utf8\" || e === \"utf-8\") && globalThis.Buffer != null && globalThis.Buffer.from != null ? Kl(globalThis.Buffer.from(i, \"utf-8\")) : r.decoder.decode(\"\".concat(r.prefix).concat(i));\n}\nvar Hl = \"wc\", ib = 2, Vo = \"core\", Rt = \"\".concat(Hl, \"@2:\").concat(Vo, \":\"), sb = {\n    name: Vo,\n    logger: \"error\"\n}, nb = {\n    database: \":memory:\"\n}, ob = \"crypto\", _l = \"client_ed25519_seed\", ab = W.ONE_DAY, cb = \"keychain\", ub = \"0.3\", hb = \"messages\", lb = \"0.3\", fb = W.SIX_HOURS, db = \"publisher\", zo = \"irn\", pb = \"error\", Gl = \"wss://relay.walletconnect.com\", xl = \"wss://relay.walletconnect.org\", gb = \"relayer\", qe = {\n    message: \"relayer_message\",\n    message_ack: \"relayer_message_ack\",\n    connect: \"relayer_connect\",\n    disconnect: \"relayer_disconnect\",\n    error: \"relayer_error\",\n    connection_stalled: \"relayer_connection_stalled\",\n    transport_closed: \"relayer_transport_closed\",\n    publish: \"relayer_publish\"\n}, yb = \"_subscription\", ke = {\n    payload: \"payload\",\n    connect: \"connect\",\n    disconnect: \"disconnect\",\n    error: \"error\"\n}, mb = W.ONE_SECOND;\nvar wb = \"2.11.3\", bb = 1e4, Eb = \"0.3\", vb = \"WALLETCONNECT_CLIENT_ID\", tt = {\n    created: \"subscription_created\",\n    deleted: \"subscription_deleted\",\n    expired: \"subscription_expired\",\n    disabled: \"subscription_disabled\",\n    sync: \"subscription_sync\",\n    resubscribed: \"subscription_resubscribed\"\n};\nvar _b = \"subscription\", xb = \"0.3\", Db = W.FIVE_SECONDS * 1e3, Sb = \"pairing\", Ib = \"0.3\";\nvar ni = {\n    wc_pairingDelete: {\n        req: {\n            ttl: W.ONE_DAY,\n            prompt: !1,\n            tag: 1e3\n        },\n        res: {\n            ttl: W.ONE_DAY,\n            prompt: !1,\n            tag: 1001\n        }\n    },\n    wc_pairingPing: {\n        req: {\n            ttl: W.THIRTY_SECONDS,\n            prompt: !1,\n            tag: 1002\n        },\n        res: {\n            ttl: W.THIRTY_SECONDS,\n            prompt: !1,\n            tag: 1003\n        }\n    },\n    unregistered_method: {\n        req: {\n            ttl: W.ONE_DAY,\n            prompt: !1,\n            tag: 0\n        },\n        res: {\n            ttl: W.ONE_DAY,\n            prompt: !1,\n            tag: 0\n        }\n    }\n}, jt = {\n    create: \"pairing_create\",\n    expire: \"pairing_expire\",\n    delete: \"pairing_delete\",\n    ping: \"pairing_ping\"\n}, et = {\n    created: \"history_created\",\n    updated: \"history_updated\",\n    deleted: \"history_deleted\",\n    sync: \"history_sync\"\n}, Rb = \"history\", Ob = \"0.3\", Tb = \"expirer\", Ve = {\n    created: \"expirer_created\",\n    deleted: \"expirer_deleted\",\n    expired: \"expirer_expired\",\n    sync: \"expirer_sync\"\n}, Nb = \"0.3\";\nvar mo = \"verify-api\", Bt = \"https://verify.walletconnect.com\", Ro = \"https://verify.walletconnect.org\", Pb = [\n    Bt,\n    Ro\n], Cb = \"echo\", Ab = \"https://echo.walletconnect.com\", Oo = class {\n    get context() {\n        return De(this.logger);\n    }\n    get storageKey() {\n        return this.storagePrefix + this.version + this.core.customStoragePrefix + \"//\" + this.name;\n    }\n    setKeyChain(e) {\n        return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n            yield this.core.storage.setItem(this.storageKey, Jn(e));\n        });\n    }\n    getKeyChain() {\n        return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n            let e = yield this.core.storage.getItem(this.storageKey);\n            return typeof e < \"u\" ? Yn(e) : void 0;\n        });\n    }\n    persist() {\n        return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n            yield this.setKeyChain(this.keychain);\n        });\n    }\n    isInitialized() {\n        if (!this.initialized) {\n            let { message: e } = T(\"NOT_INITIALIZED\", this.name);\n            throw new Error(e);\n        }\n    }\n    constructor(e, r){\n        this.core = e, this.logger = r, this.keychain = new Map, this.name = cb, this.version = ub, this.initialized = !1, this.storagePrefix = Rt, this.init = ()=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                if (!this.initialized) {\n                    let t = yield this.getKeyChain();\n                    typeof t < \"u\" && (this.keychain = t), this.initialized = !0;\n                }\n            }), this.has = (t)=>(this.isInitialized(), this.keychain.has(t)), this.set = (t, s)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                this.isInitialized(), this.keychain.set(t, s), yield this.persist();\n            }), this.get = (t)=>{\n            this.isInitialized();\n            let s = this.keychain.get(t);\n            if (typeof s > \"u\") {\n                let { message: n } = T(\"NO_MATCHING_KEY\", \"\".concat(this.name, \": \").concat(t));\n                throw new Error(n);\n            }\n            return s;\n        }, this.del = (t)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                this.isInitialized(), this.keychain.delete(t), yield this.persist();\n            }), this.core = e, this.logger = Se(r, this.name);\n    }\n}, To = class {\n    get context() {\n        return De(this.logger);\n    }\n    setPrivateKey(e, r) {\n        return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n            return yield this.keychain.set(e, r), e;\n        });\n    }\n    getPrivateKey(e) {\n        return this.keychain.get(e);\n    }\n    getClientSeed() {\n        return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n            let e = \"\";\n            try {\n                e = this.keychain.get(_l);\n            } catch (r) {\n                e = ki(), yield this.keychain.set(_l, e);\n            }\n            return rb(e, \"base16\");\n        });\n    }\n    getSymKey(e) {\n        return this.keychain.get(e);\n    }\n    isInitialized() {\n        if (!this.initialized) {\n            let { message: e } = T(\"NOT_INITIALIZED\", this.name);\n            throw new Error(e);\n        }\n    }\n    constructor(e, r, t){\n        this.core = e, this.logger = r, this.name = ob, this.initialized = !1, this.init = ()=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                this.initialized || (yield this.keychain.init(), this.initialized = !0);\n            }), this.hasKeys = (s)=>(this.isInitialized(), this.keychain.has(s)), this.getClientId = ()=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                this.isInitialized();\n                let s = yield this.getClientSeed(), n = Nn(s);\n                return Ai(n.publicKey);\n            }), this.generateKeyPair = ()=>{\n            this.isInitialized();\n            let s = fh();\n            return this.setPrivateKey(s.publicKey, s.privateKey);\n        }, this.signJWT = (s)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                this.isInitialized();\n                let n = yield this.getClientSeed(), o = Nn(n), a = ki();\n                return yield nu(a, s, ab, o);\n            }), this.generateSharedKey = (s, n, o)=>{\n            this.isInitialized();\n            let a = this.getPrivateKey(s), c = dh(a, n);\n            return this.setSymKey(c, o);\n        }, this.setSymKey = (s, n)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                this.isInitialized();\n                let o = n || ph(s);\n                return yield this.keychain.set(o, s), o;\n            }), this.deleteKeyPair = (s)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                this.isInitialized(), yield this.keychain.del(s);\n            }), this.deleteSymKey = (s)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                this.isInitialized(), yield this.keychain.del(s);\n            }), this.encode = (s, n, o)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                this.isInitialized();\n                let a = Gn(o), c = Ge(n);\n                if (Wn(a)) {\n                    let p = a.senderPublicKey, d = a.receiverPublicKey;\n                    s = yield this.generateSharedKey(p, d);\n                }\n                let u = this.getSymKey(s), { type: h, senderPublicKey: l } = a;\n                return gh({\n                    type: h,\n                    symKey: u,\n                    message: c,\n                    senderPublicKey: l\n                });\n            }), this.decode = (s, n, o)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                this.isInitialized();\n                let a = mh(n, o);\n                if (Wn(a)) {\n                    let c = a.receiverPublicKey, u = a.senderPublicKey;\n                    s = yield this.generateSharedKey(c, u);\n                }\n                try {\n                    let c = this.getSymKey(s), u = yh({\n                        symKey: c,\n                        encoded: n\n                    });\n                    return dt(u);\n                } catch (c) {\n                    this.logger.error(\"Failed to decode message from topic: '\".concat(s, \"', clientId: '\").concat((yield this.getClientId()), \"'\")), this.logger.error(c);\n                }\n            }), this.getPayloadType = (s)=>{\n            let n = Yr(s);\n            return fr(n.type);\n        }, this.getPayloadSenderPublicKey = (s)=>{\n            let n = Yr(s);\n            return n.senderPublicKey ? Ee(n.senderPublicKey, Oe) : void 0;\n        }, this.core = e, this.logger = Se(r, this.name), this.keychain = t || new Oo(this.core, this.logger);\n    }\n}, No = class extends _walletconnect_types__WEBPACK_IMPORTED_MODULE_2__.IMessageTracker {\n    get context() {\n        return De(this.logger);\n    }\n    get storageKey() {\n        return this.storagePrefix + this.version + this.core.customStoragePrefix + \"//\" + this.name;\n    }\n    setRelayerMessages(e) {\n        return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n            yield this.core.storage.setItem(this.storageKey, Jn(e));\n        });\n    }\n    getRelayerMessages() {\n        return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n            let e = yield this.core.storage.getItem(this.storageKey);\n            return typeof e < \"u\" ? Yn(e) : void 0;\n        });\n    }\n    persist() {\n        return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n            yield this.setRelayerMessages(this.messages);\n        });\n    }\n    isInitialized() {\n        if (!this.initialized) {\n            let { message: e } = T(\"NOT_INITIALIZED\", this.name);\n            throw new Error(e);\n        }\n    }\n    constructor(e, r){\n        super(e, r), this.logger = e, this.core = r, this.messages = new Map, this.name = hb, this.version = lb, this.initialized = !1, this.storagePrefix = Rt, this.init = ()=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                if (!this.initialized) {\n                    this.logger.trace(\"Initialized\");\n                    try {\n                        let t = yield this.getRelayerMessages();\n                        typeof t < \"u\" && (this.messages = t), this.logger.debug(\"Successfully Restored records for \".concat(this.name)), this.logger.trace({\n                            type: \"method\",\n                            method: \"restore\",\n                            size: this.messages.size\n                        });\n                    } catch (t) {\n                        this.logger.debug(\"Failed to Restore records for \".concat(this.name)), this.logger.error(t);\n                    } finally{\n                        this.initialized = !0;\n                    }\n                }\n            }), this.set = (t, s)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                this.isInitialized();\n                let n = bt(s), o = this.messages.get(t);\n                return typeof o > \"u\" && (o = {}), typeof o[n] < \"u\" || (o[n] = s, this.messages.set(t, o), yield this.persist()), n;\n            }), this.get = (t)=>{\n            this.isInitialized();\n            let s = this.messages.get(t);\n            return typeof s > \"u\" && (s = {}), s;\n        }, this.has = (t, s)=>{\n            this.isInitialized();\n            let n = this.get(t), o = bt(s);\n            return typeof n[o] < \"u\";\n        }, this.del = (t)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                this.isInitialized(), this.messages.delete(t), yield this.persist();\n            }), this.logger = Se(e, this.name), this.core = r;\n    }\n}, Po = class extends _walletconnect_types__WEBPACK_IMPORTED_MODULE_2__.IPublisher {\n    get context() {\n        return De(this.logger);\n    }\n    rpcPublish(e, r, t, s, n, o, a) {\n        var c, u, h, l;\n        let p = {\n            method: Qr(s.protocol).publish,\n            params: {\n                topic: e,\n                message: r,\n                ttl: t,\n                prompt: n,\n                tag: o\n            },\n            id: a\n        };\n        return _e((c = p.params) == null ? void 0 : c.prompt) && ((u = p.params) == null || delete u.prompt), _e((h = p.params) == null ? void 0 : h.tag) && ((l = p.params) == null || delete l.tag), this.logger.debug(\"Outgoing Relay Payload\"), this.logger.trace({\n            type: \"message\",\n            direction: \"outgoing\",\n            request: p\n        }), this.relayer.request(p);\n    }\n    removeRequestFromQueue(e) {\n        this.queue.delete(e);\n    }\n    checkQueue() {\n        this.queue.forEach((e)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                let { topic: r, message: t, opts: s } = e;\n                yield this.publish(r, t, s);\n            }));\n    }\n    registerEventListeners() {\n        this.relayer.core.heartbeat.on(zt.HEARTBEAT_EVENTS.pulse, ()=>{\n            if (this.needsTransportRestart) {\n                this.needsTransportRestart = !1, this.relayer.events.emit(qe.connection_stalled);\n                return;\n            }\n            this.checkQueue();\n        }), this.relayer.on(qe.message_ack, (e)=>{\n            this.removeRequestFromQueue(e.id.toString());\n        });\n    }\n    constructor(e, r){\n        super(e, r), this.relayer = e, this.logger = r, this.events = new ht.EventEmitter, this.name = db, this.queue = new Map, this.publishTimeout = (0, W.toMiliseconds)(W.ONE_MINUTE), this.failedPublishTimeout = (0, W.toMiliseconds)(W.ONE_SECOND), this.needsTransportRestart = !1, this.publish = (t, s, n)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                var o;\n                this.logger.debug(\"Publishing Payload\"), this.logger.trace({\n                    type: \"method\",\n                    method: \"publish\",\n                    params: {\n                        topic: t,\n                        message: s,\n                        opts: n\n                    }\n                });\n                let a = (n == null ? void 0 : n.ttl) || fb, c = Gi(n), u = (n == null ? void 0 : n.prompt) || !1, h = (n == null ? void 0 : n.tag) || 0, l = (n == null ? void 0 : n.id) || He().toString(), p = {\n                    topic: t,\n                    message: s,\n                    opts: {\n                        ttl: a,\n                        relay: c,\n                        prompt: u,\n                        tag: h,\n                        id: l\n                    }\n                }, d = \"Failed to publish payload, please try again. id:\".concat(l, \" tag:\").concat(h), g = Date.now(), w, b = 1;\n                try {\n                    for(; w === void 0;){\n                        if (Date.now() - g > this.publishTimeout) throw new Error(d);\n                        this.logger.trace({\n                            id: l,\n                            attempts: b\n                        }, \"publisher.publish - attempt \".concat(b)), w = yield yield pr(this.rpcPublish(t, s, a, c, u, h, l).catch((E)=>this.logger.warn(E)), this.publishTimeout, d), b++, w || (yield new Promise((E)=>setTimeout(E, this.failedPublishTimeout)));\n                    }\n                    this.relayer.events.emit(qe.publish, p), this.logger.debug(\"Successfully Published Payload\"), this.logger.trace({\n                        type: \"method\",\n                        method: \"publish\",\n                        params: {\n                            id: l,\n                            topic: t,\n                            message: s,\n                            opts: n\n                        }\n                    });\n                } catch (E) {\n                    if (this.logger.debug(\"Failed to Publish Payload\"), this.logger.error(E), (o = n == null ? void 0 : n.internal) != null && o.throwOnFailedPublish) throw E;\n                    this.queue.set(l, p);\n                }\n            }), this.on = (t, s)=>{\n            this.events.on(t, s);\n        }, this.once = (t, s)=>{\n            this.events.once(t, s);\n        }, this.off = (t, s)=>{\n            this.events.off(t, s);\n        }, this.removeListener = (t, s)=>{\n            this.events.removeListener(t, s);\n        }, this.relayer = e, this.logger = Se(r, this.name), this.registerEventListeners();\n    }\n}, Co = class {\n    get topics() {\n        return Array.from(this.map.keys());\n    }\n    constructor(){\n        this.map = new Map, this.set = (e, r)=>{\n            let t = this.get(e);\n            this.exists(e, r) || this.map.set(e, [\n                ...t,\n                r\n            ]);\n        }, this.get = (e)=>this.map.get(e) || [], this.exists = (e, r)=>this.get(e).includes(r), this.delete = (e, r)=>{\n            if (typeof r > \"u\") {\n                this.map.delete(e);\n                return;\n            }\n            if (!this.map.has(e)) return;\n            let t = this.get(e);\n            if (!this.exists(e, r)) return;\n            let s = t.filter((n)=>n !== r);\n            if (!s.length) {\n                this.map.delete(e);\n                return;\n            }\n            this.map.set(e, s);\n        }, this.clear = ()=>{\n            this.map.clear();\n        };\n    }\n}, Lb = Object.defineProperty, Fb = Object.defineProperties, Ub = Object.getOwnPropertyDescriptors, Dl = Object.getOwnPropertySymbols, Mb = Object.prototype.hasOwnProperty, qb = Object.prototype.propertyIsEnumerable, Sl = (i, e, r)=>e in i ? Lb(i, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: r\n    }) : i[e] = r, oi = (i, e)=>{\n    for(var r in e || (e = {}))Mb.call(e, r) && Sl(i, r, e[r]);\n    if (Dl) for (var r of Dl(e))qb.call(e, r) && Sl(i, r, e[r]);\n    return i;\n}, wo = (i, e)=>Fb(i, Ub(e)), Ao = class extends _walletconnect_types__WEBPACK_IMPORTED_MODULE_2__.ISubscriber {\n    get context() {\n        return De(this.logger);\n    }\n    get storageKey() {\n        return this.storagePrefix + this.version + this.relayer.core.customStoragePrefix + \"//\" + this.name;\n    }\n    get length() {\n        return this.subscriptions.size;\n    }\n    get ids() {\n        return Array.from(this.subscriptions.keys());\n    }\n    get values() {\n        return Array.from(this.subscriptions.values());\n    }\n    get topics() {\n        return this.topicMap.topics;\n    }\n    hasSubscription(e, r) {\n        let t = !1;\n        try {\n            t = this.getSubscription(e).topic === r;\n        } catch (s) {}\n        return t;\n    }\n    onEnable() {\n        this.cached = [], this.initialized = !0;\n    }\n    onDisable() {\n        this.cached = this.values, this.subscriptions.clear(), this.topicMap.clear();\n    }\n    unsubscribeByTopic(e, r) {\n        return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n            let t = this.topicMap.get(e);\n            yield Promise.all(t.map((s)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                    return yield this.unsubscribeById(e, s, r);\n                })));\n        });\n    }\n    unsubscribeById(e, r, t) {\n        return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n            this.logger.debug(\"Unsubscribing Topic\"), this.logger.trace({\n                type: \"method\",\n                method: \"unsubscribe\",\n                params: {\n                    topic: e,\n                    id: r,\n                    opts: t\n                }\n            });\n            try {\n                let s = Gi(t);\n                yield this.rpcUnsubscribe(e, r, s);\n                let n = de(\"USER_DISCONNECTED\", \"\".concat(this.name, \", \").concat(e));\n                yield this.onUnsubscribe(e, r, n), this.logger.debug(\"Successfully Unsubscribed Topic\"), this.logger.trace({\n                    type: \"method\",\n                    method: \"unsubscribe\",\n                    params: {\n                        topic: e,\n                        id: r,\n                        opts: t\n                    }\n                });\n            } catch (s) {\n                throw this.logger.debug(\"Failed to Unsubscribe Topic\"), this.logger.error(s), s;\n            }\n        });\n    }\n    rpcSubscribe(e, r) {\n        return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n            let t = {\n                method: Qr(r.protocol).subscribe,\n                params: {\n                    topic: e\n                }\n            };\n            this.logger.debug(\"Outgoing Relay Payload\"), this.logger.trace({\n                type: \"payload\",\n                direction: \"outgoing\",\n                request: t\n            });\n            try {\n                return (yield yield pr(this.relayer.request(t).catch((s)=>this.logger.warn(s)), this.subscribeTimeout)) ? bt(e + this.clientId) : null;\n            } catch (s) {\n                this.logger.debug(\"Outgoing Relay Subscribe Payload stalled\"), this.relayer.events.emit(qe.connection_stalled);\n            }\n            return null;\n        });\n    }\n    rpcBatchSubscribe(e) {\n        return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n            if (!e.length) return;\n            let r = e[0].relay, t = {\n                method: Qr(r.protocol).batchSubscribe,\n                params: {\n                    topics: e.map((s)=>s.topic)\n                }\n            };\n            this.logger.debug(\"Outgoing Relay Payload\"), this.logger.trace({\n                type: \"payload\",\n                direction: \"outgoing\",\n                request: t\n            });\n            try {\n                return yield yield pr(this.relayer.request(t).catch((s)=>this.logger.warn(s)), this.subscribeTimeout);\n            } catch (s) {\n                this.relayer.events.emit(qe.connection_stalled);\n            }\n        });\n    }\n    rpcUnsubscribe(e, r, t) {\n        let s = {\n            method: Qr(t.protocol).unsubscribe,\n            params: {\n                topic: e,\n                id: r\n            }\n        };\n        return this.logger.debug(\"Outgoing Relay Payload\"), this.logger.trace({\n            type: \"payload\",\n            direction: \"outgoing\",\n            request: s\n        }), this.relayer.request(s);\n    }\n    onSubscribe(e, r) {\n        this.setSubscription(e, wo(oi({}, r), {\n            id: e\n        })), this.pending.delete(r.topic);\n    }\n    onBatchSubscribe(e) {\n        e.length && e.forEach((r)=>{\n            this.setSubscription(r.id, oi({}, r)), this.pending.delete(r.topic);\n        });\n    }\n    onUnsubscribe(e, r, t) {\n        return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n            this.events.removeAllListeners(r), this.hasSubscription(r, e) && this.deleteSubscription(r, t), yield this.relayer.messages.del(e);\n        });\n    }\n    setRelayerSubscriptions(e) {\n        return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n            yield this.relayer.core.storage.setItem(this.storageKey, e);\n        });\n    }\n    getRelayerSubscriptions() {\n        return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n            return yield this.relayer.core.storage.getItem(this.storageKey);\n        });\n    }\n    setSubscription(e, r) {\n        this.logger.debug(\"Setting subscription\"), this.logger.trace({\n            type: \"method\",\n            method: \"setSubscription\",\n            id: e,\n            subscription: r\n        }), this.addSubscription(e, r);\n    }\n    addSubscription(e, r) {\n        this.subscriptions.set(e, oi({}, r)), this.topicMap.set(r.topic, e), this.events.emit(tt.created, r);\n    }\n    getSubscription(e) {\n        this.logger.debug(\"Getting subscription\"), this.logger.trace({\n            type: \"method\",\n            method: \"getSubscription\",\n            id: e\n        });\n        let r = this.subscriptions.get(e);\n        if (!r) {\n            let { message: t } = T(\"NO_MATCHING_KEY\", \"\".concat(this.name, \": \").concat(e));\n            throw new Error(t);\n        }\n        return r;\n    }\n    deleteSubscription(e, r) {\n        this.logger.debug(\"Deleting subscription\"), this.logger.trace({\n            type: \"method\",\n            method: \"deleteSubscription\",\n            id: e,\n            reason: r\n        });\n        let t = this.getSubscription(e);\n        this.subscriptions.delete(e), this.topicMap.delete(t.topic, e), this.events.emit(tt.deleted, wo(oi({}, t), {\n            reason: r\n        }));\n    }\n    persist() {\n        return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n            yield this.setRelayerSubscriptions(this.values), this.events.emit(tt.sync);\n        });\n    }\n    reset() {\n        return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n            if (this.cached.length) {\n                let e = Math.ceil(this.cached.length / this.batchSubscribeTopicsLimit);\n                for(let r = 0; r < e; r++){\n                    let t = this.cached.splice(0, this.batchSubscribeTopicsLimit);\n                    yield this.batchSubscribe(t);\n                }\n            }\n            this.events.emit(tt.resubscribed);\n        });\n    }\n    restore() {\n        return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n            try {\n                let e = yield this.getRelayerSubscriptions();\n                if (typeof e > \"u\" || !e.length) return;\n                if (this.subscriptions.size) {\n                    let { message: r } = T(\"RESTORE_WILL_OVERRIDE\", this.name);\n                    throw this.logger.error(r), this.logger.error(\"\".concat(this.name, \": \").concat(JSON.stringify(this.values))), new Error(r);\n                }\n                this.cached = e, this.logger.debug(\"Successfully Restored subscriptions for \".concat(this.name)), this.logger.trace({\n                    type: \"method\",\n                    method: \"restore\",\n                    subscriptions: this.values\n                });\n            } catch (e) {\n                this.logger.debug(\"Failed to Restore subscriptions for \".concat(this.name)), this.logger.error(e);\n            }\n        });\n    }\n    batchSubscribe(e) {\n        return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n            if (!e.length) return;\n            let r = yield this.rpcBatchSubscribe(e);\n            yr(r) && this.onBatchSubscribe(r.map((t, s)=>wo(oi({}, e[s]), {\n                    id: t\n                })));\n        });\n    }\n    onConnect() {\n        return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n            yield this.restart(), this.onEnable();\n        });\n    }\n    onDisconnect() {\n        this.onDisable();\n    }\n    checkPending() {\n        return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n            if (!this.initialized || !this.relayer.connected) return;\n            let e = [];\n            this.pending.forEach((r)=>{\n                e.push(r);\n            }), yield this.batchSubscribe(e);\n        });\n    }\n    registerEventListeners() {\n        this.relayer.core.heartbeat.on(zt.HEARTBEAT_EVENTS.pulse, ()=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                yield this.checkPending();\n            })), this.events.on(tt.created, (e)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                let r = tt.created;\n                this.logger.info(\"Emitting \".concat(r)), this.logger.debug({\n                    type: \"event\",\n                    event: r,\n                    data: e\n                }), yield this.persist();\n            })), this.events.on(tt.deleted, (e)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                let r = tt.deleted;\n                this.logger.info(\"Emitting \".concat(r)), this.logger.debug({\n                    type: \"event\",\n                    event: r,\n                    data: e\n                }), yield this.persist();\n            }));\n    }\n    isInitialized() {\n        if (!this.initialized) {\n            let { message: e } = T(\"NOT_INITIALIZED\", this.name);\n            throw new Error(e);\n        }\n    }\n    restartToComplete() {\n        return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n            this.restartInProgress && (yield new Promise((e)=>{\n                let r = setInterval(()=>{\n                    this.restartInProgress || (clearInterval(r), e());\n                }, this.pollingInterval);\n            }));\n        });\n    }\n    constructor(e, r){\n        super(e, r), this.relayer = e, this.logger = r, this.subscriptions = new Map, this.topicMap = new Co, this.events = new ht.EventEmitter, this.name = _b, this.version = xb, this.pending = new Map, this.cached = [], this.initialized = !1, this.pendingSubscriptionWatchLabel = \"pending_sub_watch_label\", this.pollingInterval = 20, this.storagePrefix = Rt, this.subscribeTimeout = (0, W.toMiliseconds)(W.ONE_MINUTE), this.restartInProgress = !1, this.batchSubscribeTopicsLimit = 500, this.init = ()=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                this.initialized || (this.logger.trace(\"Initialized\"), this.registerEventListeners(), this.clientId = yield this.relayer.core.crypto.getClientId());\n            }), this.subscribe = (t, s)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                yield this.restartToComplete(), this.isInitialized(), this.logger.debug(\"Subscribing Topic\"), this.logger.trace({\n                    type: \"method\",\n                    method: \"subscribe\",\n                    params: {\n                        topic: t,\n                        opts: s\n                    }\n                });\n                try {\n                    let n = Gi(s), o = {\n                        topic: t,\n                        relay: n\n                    };\n                    this.pending.set(t, o);\n                    let a = yield this.rpcSubscribe(t, n);\n                    return typeof a == \"string\" && (this.onSubscribe(a, o), this.logger.debug(\"Successfully Subscribed Topic\"), this.logger.trace({\n                        type: \"method\",\n                        method: \"subscribe\",\n                        params: {\n                            topic: t,\n                            opts: s\n                        }\n                    })), a;\n                } catch (n) {\n                    throw this.logger.debug(\"Failed to Subscribe Topic\"), this.logger.error(n), n;\n                }\n            }), this.unsubscribe = (t, s)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                yield this.restartToComplete(), this.isInitialized(), typeof (s == null ? void 0 : s.id) < \"u\" ? yield this.unsubscribeById(t, s.id, s) : yield this.unsubscribeByTopic(t, s);\n            }), this.isSubscribed = (t)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                if (this.topics.includes(t)) return !0;\n                let s = \"\".concat(this.pendingSubscriptionWatchLabel, \"_\").concat(t);\n                return yield new Promise((n, o)=>{\n                    let a = new W.Watch;\n                    a.start(s);\n                    let c = setInterval(()=>{\n                        !this.pending.has(t) && this.topics.includes(t) && (clearInterval(c), a.stop(s), n(!0)), a.elapsed(s) >= Db && (clearInterval(c), a.stop(s), o(new Error(\"Subscription resolution timeout\")));\n                    }, this.pollingInterval);\n                }).catch(()=>!1);\n            }), this.on = (t, s)=>{\n            this.events.on(t, s);\n        }, this.once = (t, s)=>{\n            this.events.once(t, s);\n        }, this.off = (t, s)=>{\n            this.events.off(t, s);\n        }, this.removeListener = (t, s)=>{\n            this.events.removeListener(t, s);\n        }, this.start = ()=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                yield this.onConnect();\n            }), this.stop = ()=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                yield this.onDisconnect();\n            }), this.restart = ()=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                this.restartInProgress = !0, yield this.restore(), yield this.reset(), this.restartInProgress = !1;\n            }), this.relayer = e, this.logger = Se(r, this.name), this.clientId = \"\";\n    }\n}, jb = Object.defineProperty, Il = Object.getOwnPropertySymbols, Bb = Object.prototype.hasOwnProperty, Vb = Object.prototype.propertyIsEnumerable, Rl = (i, e, r)=>e in i ? jb(i, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: r\n    }) : i[e] = r, zb = (i, e)=>{\n    for(var r in e || (e = {}))Bb.call(e, r) && Rl(i, r, e[r]);\n    if (Il) for (var r of Il(e))Vb.call(e, r) && Rl(i, r, e[r]);\n    return i;\n}, Lo = class extends _walletconnect_types__WEBPACK_IMPORTED_MODULE_2__.IRelayer {\n    init() {\n        return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n            this.logger.trace(\"Initialized\"), this.registerEventListeners(), yield this.createProvider(), yield Promise.all([\n                this.messages.init(),\n                this.subscriber.init()\n            ]);\n            try {\n                yield this.transportOpen();\n            } catch (e) {\n                this.logger.warn(\"Connection via \".concat(this.relayUrl, \" failed, attempting to connect via failover domain \").concat(xl, \"...\")), yield this.restartTransport(xl);\n            }\n            this.initialized = !0, setTimeout(()=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                    this.subscriber.topics.length === 0 && this.subscriber.pending.size === 0 && (this.logger.info(\"No topics subscribed to after init, closing transport\"), yield this.transportClose(), this.transportExplicitlyClosed = !1);\n                }), bb);\n        });\n    }\n    get context() {\n        return De(this.logger);\n    }\n    get connected() {\n        var e, r, t;\n        return ((t = (r = (e = this.provider) == null ? void 0 : e.connection) == null ? void 0 : r.socket) == null ? void 0 : t.readyState) === 1;\n    }\n    get connecting() {\n        var e, r, t;\n        return ((t = (r = (e = this.provider) == null ? void 0 : e.connection) == null ? void 0 : r.socket) == null ? void 0 : t.readyState) === 0;\n    }\n    publish(e, r, t) {\n        return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n            this.isInitialized(), yield this.publisher.publish(e, r, t), yield this.recordMessageEvent({\n                topic: e,\n                message: r,\n                publishedAt: Date.now()\n            });\n        });\n    }\n    subscribe(e, r) {\n        return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n            var t;\n            this.isInitialized();\n            let s = ((t = this.subscriber.topicMap.get(e)) == null ? void 0 : t[0]) || \"\", n, o = (a)=>{\n                a.topic === e && (this.subscriber.off(tt.created, o), n());\n            };\n            return yield Promise.all([\n                new Promise((a)=>{\n                    n = a, this.subscriber.on(tt.created, o);\n                }),\n                new Promise((a)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                        s = (yield this.subscriber.subscribe(e, r)) || s, a();\n                    }))\n            ]), s;\n        });\n    }\n    unsubscribe(e, r) {\n        return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n            this.isInitialized(), yield this.subscriber.unsubscribe(e, r);\n        });\n    }\n    on(e, r) {\n        this.events.on(e, r);\n    }\n    once(e, r) {\n        this.events.once(e, r);\n    }\n    off(e, r) {\n        this.events.off(e, r);\n    }\n    removeListener(e, r) {\n        this.events.removeListener(e, r);\n    }\n    transportDisconnect() {\n        return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n            if (!this.hasExperiencedNetworkDisruption && this.connected && this.requestsInFlight.size > 0) try {\n                yield Promise.all(Array.from(this.requestsInFlight.values()).map((e)=>e.promise));\n            } catch (e) {\n                this.logger.warn(e);\n            }\n            this.hasExperiencedNetworkDisruption || this.connected ? yield pr(this.provider.disconnect(), 2e3, \"provider.disconnect()\").catch(()=>this.onProviderDisconnect()) : this.onProviderDisconnect();\n        });\n    }\n    transportClose() {\n        return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n            this.transportExplicitlyClosed = !0, yield this.transportDisconnect();\n        });\n    }\n    transportOpen(e) {\n        return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n            yield this.confirmOnlineStateOrThrow(), e && e !== this.relayUrl && (this.relayUrl = e, yield this.transportDisconnect(), yield this.createProvider()), this.connectionAttemptInProgress = !0, this.transportExplicitlyClosed = !1;\n            try {\n                yield new Promise((r, t)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                        let s = ()=>{\n                            this.provider.off(ke.disconnect, s), t(new Error(\"Connection interrupted while trying to subscribe\"));\n                        };\n                        this.provider.on(ke.disconnect, s), yield pr(this.provider.connect(), (0, W.toMiliseconds)(W.ONE_MINUTE), \"Socket stalled when trying to connect to \".concat(this.relayUrl)).catch((n)=>{\n                            t(n);\n                        }), yield this.subscriber.start(), this.hasExperiencedNetworkDisruption = !1, r();\n                    }));\n            } catch (r) {\n                this.logger.error(r);\n                let t = r;\n                if (!this.isConnectionStalled(t.message)) throw r;\n            } finally{\n                this.connectionAttemptInProgress = !1;\n            }\n        });\n    }\n    restartTransport(e) {\n        return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n            this.connectionAttemptInProgress || (this.relayUrl = e || this.relayUrl, yield this.confirmOnlineStateOrThrow(), yield this.transportClose(), yield this.createProvider(), yield this.transportOpen());\n        });\n    }\n    confirmOnlineStateOrThrow() {\n        return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n            if (!(yield ro())) throw new Error(\"No internet connection detected. Please restart your network and try again.\");\n        });\n    }\n    startPingTimeout() {\n        var e, r, t, s, n;\n        if (dr()) try {\n            (r = (e = this.provider) == null ? void 0 : e.connection) != null && r.socket && ((n = (s = (t = this.provider) == null ? void 0 : t.connection) == null ? void 0 : s.socket) == null || n.once(\"ping\", ()=>{\n                this.resetPingTimeout();\n            })), this.resetPingTimeout();\n        } catch (o) {\n            this.logger.warn(o);\n        }\n    }\n    isConnectionStalled(e) {\n        return this.staleConnectionErrors.some((r)=>e.includes(r));\n    }\n    createProvider() {\n        return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n            this.provider.connection && this.unregisterProviderListeners();\n            let e = yield this.core.crypto.signJWT(this.relayUrl);\n            this.provider = new ns(new os(Eh({\n                sdkVersion: wb,\n                protocol: this.protocol,\n                version: this.version,\n                relayUrl: this.relayUrl,\n                projectId: this.projectId,\n                auth: e,\n                useOnCloseEvent: !0,\n                bundleId: this.bundleId\n            }))), this.registerProviderListeners();\n        });\n    }\n    recordMessageEvent(e) {\n        return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n            let { topic: r, message: t } = e;\n            yield this.messages.set(r, t);\n        });\n    }\n    shouldIgnoreMessageEvent(e) {\n        return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n            let { topic: r, message: t } = e;\n            if (!t || t.length === 0) return this.logger.debug(\"Ignoring invalid/empty message: \".concat(t)), !0;\n            if (!(yield this.subscriber.isSubscribed(r))) return this.logger.debug(\"Ignoring message for non-subscribed topic \".concat(r)), !0;\n            let s = this.messages.has(r, t);\n            return s && this.logger.debug(\"Ignoring duplicate message: \".concat(t)), s;\n        });\n    }\n    onProviderPayload(e) {\n        return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n            if (this.logger.debug(\"Incoming Relay Payload\"), this.logger.trace({\n                type: \"payload\",\n                direction: \"incoming\",\n                payload: e\n            }), wr(e)) {\n                if (!e.method.endsWith(yb)) return;\n                let r = e.params, { topic: t, message: s, publishedAt: n } = r.data, o = {\n                    topic: t,\n                    message: s,\n                    publishedAt: n\n                };\n                this.logger.debug(\"Emitting Relayer Payload\"), this.logger.trace(zb({\n                    type: \"event\",\n                    event: r.id\n                }, o)), this.events.emit(r.id, o), yield this.acknowledgePayload(e), yield this.onMessageEvent(o);\n            } else It(e) && this.events.emit(qe.message_ack, e);\n        });\n    }\n    onMessageEvent(e) {\n        return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n            (yield this.shouldIgnoreMessageEvent(e)) || (this.events.emit(qe.message, e), yield this.recordMessageEvent(e));\n        });\n    }\n    acknowledgePayload(e) {\n        return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n            let r = mr(e.id, !0);\n            yield this.provider.connection.send(r);\n        });\n    }\n    unregisterProviderListeners() {\n        this.provider.off(ke.payload, this.onPayloadHandler), this.provider.off(ke.connect, this.onConnectHandler), this.provider.off(ke.disconnect, this.onDisconnectHandler), this.provider.off(ke.error, this.onProviderErrorHandler);\n    }\n    registerEventListeners() {\n        return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n            let e = yield ro();\n            $h((r)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                    e !== r && (e = r, r ? yield this.restartTransport().catch((t)=>this.logger.error(t)) : (this.hasExperiencedNetworkDisruption = !0, yield this.transportDisconnect(), this.transportExplicitlyClosed = !1));\n                }));\n        });\n    }\n    onProviderDisconnect() {\n        return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n            yield this.subscriber.stop(), this.events.emit(qe.disconnect), this.connectionAttemptInProgress = !1, !this.transportExplicitlyClosed && setTimeout(()=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                    yield this.transportOpen().catch((e)=>this.logger.error(e));\n                }), (0, W.toMiliseconds)(mb));\n        });\n    }\n    isInitialized() {\n        if (!this.initialized) {\n            let { message: e } = T(\"NOT_INITIALIZED\", this.name);\n            throw new Error(e);\n        }\n    }\n    toEstablishConnection() {\n        return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n            yield this.confirmOnlineStateOrThrow(), !this.connected && (this.connectionAttemptInProgress && (yield new Promise((e)=>{\n                let r = setInterval(()=>{\n                    this.connected && (clearInterval(r), e());\n                }, this.connectionStatusPollingInterval);\n            })), yield this.transportOpen());\n        });\n    }\n    constructor(e){\n        super(e), this.protocol = \"wc\", this.version = 2, this.events = new ht.EventEmitter, this.name = gb, this.transportExplicitlyClosed = !1, this.initialized = !1, this.connectionAttemptInProgress = !1, this.connectionStatusPollingInterval = 20, this.staleConnectionErrors = [\n            \"socket hang up\",\n            \"socket stalled\",\n            \"interrupted\"\n        ], this.hasExperiencedNetworkDisruption = !1, this.requestsInFlight = new Map, this.heartBeatTimeout = (0, W.toMiliseconds)(W.THIRTY_SECONDS + W.ONE_SECOND), this.request = (r)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                var t, s;\n                this.logger.debug(\"Publishing Request Payload\");\n                let n = r.id || He().toString();\n                yield this.toEstablishConnection();\n                try {\n                    let o = this.provider.request(r);\n                    this.requestsInFlight.set(n, {\n                        promise: o,\n                        request: r\n                    }), this.logger.trace({\n                        id: n,\n                        method: r.method,\n                        topic: (t = r.params) == null ? void 0 : t.topic\n                    }, \"relayer.request - attempt to publish...\");\n                    let a = yield new Promise((c, u)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                            let h = ()=>{\n                                u(new Error(\"relayer.request - publish interrupted, id: \".concat(n)));\n                            };\n                            this.provider.on(ke.disconnect, h);\n                            let l = yield o;\n                            this.provider.off(ke.disconnect, h), c(l);\n                        }));\n                    return this.logger.trace({\n                        id: n,\n                        method: r.method,\n                        topic: (s = r.params) == null ? void 0 : s.topic\n                    }, \"relayer.request - published\"), a;\n                } catch (o) {\n                    throw this.logger.debug(\"Failed to Publish Request: \".concat(n)), o;\n                } finally{\n                    this.requestsInFlight.delete(n);\n                }\n            }), this.resetPingTimeout = ()=>{\n            if (dr()) try {\n                clearTimeout(this.pingTimeout), this.pingTimeout = setTimeout(()=>{\n                    var r, t, s;\n                    (s = (t = (r = this.provider) == null ? void 0 : r.connection) == null ? void 0 : t.socket) == null || s.terminate();\n                }, this.heartBeatTimeout);\n            } catch (r) {\n                this.logger.warn(r);\n            }\n        }, this.onPayloadHandler = (r)=>{\n            this.onProviderPayload(r), this.resetPingTimeout();\n        }, this.onConnectHandler = ()=>{\n            this.startPingTimeout(), this.events.emit(qe.connect);\n        }, this.onDisconnectHandler = ()=>{\n            this.onProviderDisconnect();\n        }, this.onProviderErrorHandler = (r)=>{\n            this.logger.error(r), this.events.emit(qe.error, r), this.logger.info(\"Fatal socket error received, closing transport\"), this.transportClose();\n        }, this.registerProviderListeners = ()=>{\n            this.provider.on(ke.payload, this.onPayloadHandler), this.provider.on(ke.connect, this.onConnectHandler), this.provider.on(ke.disconnect, this.onDisconnectHandler), this.provider.on(ke.error, this.onProviderErrorHandler);\n        }, this.core = e.core, this.logger = typeof e.logger < \"u\" && typeof e.logger != \"string\" ? Se(e.logger, this.name) : (0, Qt.default)(Fr({\n            level: e.logger || pb\n        })), this.messages = new No(this.logger, e.core), this.subscriber = new Ao(this, this.logger), this.publisher = new Po(this, this.logger), this.relayUrl = (e == null ? void 0 : e.relayUrl) || Gl, this.projectId = e.projectId, this.bundleId = wh(), this.provider = {};\n    }\n}, $b = Object.defineProperty, Ol = Object.getOwnPropertySymbols, Kb = Object.prototype.hasOwnProperty, kb = Object.prototype.propertyIsEnumerable, Tl = (i, e, r)=>e in i ? $b(i, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: r\n    }) : i[e] = r, Nl = (i, e)=>{\n    for(var r in e || (e = {}))Kb.call(e, r) && Tl(i, r, e[r]);\n    if (Ol) for (var r of Ol(e))kb.call(e, r) && Tl(i, r, e[r]);\n    return i;\n}, Vt = class extends _walletconnect_types__WEBPACK_IMPORTED_MODULE_2__.IStore {\n    get context() {\n        return De(this.logger);\n    }\n    get storageKey() {\n        return this.storagePrefix + this.version + this.core.customStoragePrefix + \"//\" + this.name;\n    }\n    get length() {\n        return this.map.size;\n    }\n    get keys() {\n        return Array.from(this.map.keys());\n    }\n    get values() {\n        return Array.from(this.map.values());\n    }\n    addToRecentlyDeleted(e) {\n        this.recentlyDeleted.push(e), this.recentlyDeleted.length >= this.recentlyDeletedLimit && this.recentlyDeleted.splice(0, this.recentlyDeletedLimit / 2);\n    }\n    setDataStore(e) {\n        return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n            yield this.core.storage.setItem(this.storageKey, e);\n        });\n    }\n    getDataStore() {\n        return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n            return yield this.core.storage.getItem(this.storageKey);\n        });\n    }\n    getData(e) {\n        let r = this.map.get(e);\n        if (!r) {\n            if (this.recentlyDeleted.includes(e)) {\n                let { message: s } = T(\"MISSING_OR_INVALID\", \"Record was recently deleted - \".concat(this.name, \": \").concat(e));\n                throw this.logger.error(s), new Error(s);\n            }\n            let { message: t } = T(\"NO_MATCHING_KEY\", \"\".concat(this.name, \": \").concat(e));\n            throw this.logger.error(t), new Error(t);\n        }\n        return r;\n    }\n    persist() {\n        return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n            yield this.setDataStore(this.values);\n        });\n    }\n    restore() {\n        return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n            try {\n                let e = yield this.getDataStore();\n                if (typeof e > \"u\" || !e.length) return;\n                if (this.map.size) {\n                    let { message: r } = T(\"RESTORE_WILL_OVERRIDE\", this.name);\n                    throw this.logger.error(r), new Error(r);\n                }\n                this.cached = e, this.logger.debug(\"Successfully Restored value for \".concat(this.name)), this.logger.trace({\n                    type: \"method\",\n                    method: \"restore\",\n                    value: this.values\n                });\n            } catch (e) {\n                this.logger.debug(\"Failed to Restore value for \".concat(this.name)), this.logger.error(e);\n            }\n        });\n    }\n    isInitialized() {\n        if (!this.initialized) {\n            let { message: e } = T(\"NOT_INITIALIZED\", this.name);\n            throw new Error(e);\n        }\n    }\n    constructor(e, r, t, s = Rt, n = void 0){\n        super(e, r, t, s), this.core = e, this.logger = r, this.name = t, this.map = new Map, this.version = Eb, this.cached = [], this.initialized = !1, this.storagePrefix = Rt, this.recentlyDeleted = [], this.recentlyDeletedLimit = 200, this.init = ()=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                this.initialized || (this.logger.trace(\"Initialized\"), yield this.restore(), this.cached.forEach((o)=>{\n                    this.getKey && o !== null && !_e(o) ? this.map.set(this.getKey(o), o) : Th(o) ? this.map.set(o.id, o) : Nh(o) && this.map.set(o.topic, o);\n                }), this.cached = [], this.initialized = !0);\n            }), this.set = (o, a)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                this.isInitialized(), this.map.has(o) ? yield this.update(o, a) : (this.logger.debug(\"Setting value\"), this.logger.trace({\n                    type: \"method\",\n                    method: \"set\",\n                    key: o,\n                    value: a\n                }), this.map.set(o, a), yield this.persist());\n            }), this.get = (o)=>(this.isInitialized(), this.logger.debug(\"Getting value\"), this.logger.trace({\n                type: \"method\",\n                method: \"get\",\n                key: o\n            }), this.getData(o)), this.getAll = (o)=>(this.isInitialized(), o ? this.values.filter((a)=>Object.keys(o).every((c)=>lodash_isequal__WEBPACK_IMPORTED_MODULE_1__(a[c], o[c]))) : this.values), this.update = (o, a)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                this.isInitialized(), this.logger.debug(\"Updating value\"), this.logger.trace({\n                    type: \"method\",\n                    method: \"update\",\n                    key: o,\n                    update: a\n                });\n                let c = Nl(Nl({}, this.getData(o)), a);\n                this.map.set(o, c), yield this.persist();\n            }), this.delete = (o, a)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                this.isInitialized(), this.map.has(o) && (this.logger.debug(\"Deleting value\"), this.logger.trace({\n                    type: \"method\",\n                    method: \"delete\",\n                    key: o,\n                    reason: a\n                }), this.map.delete(o), this.addToRecentlyDeleted(o), yield this.persist());\n            }), this.logger = Se(r, this.name), this.storagePrefix = s, this.getKey = n;\n    }\n}, Fo = class {\n    get context() {\n        return De(this.logger);\n    }\n    isInitialized() {\n        if (!this.initialized) {\n            let { message: e } = T(\"NOT_INITIALIZED\", this.name);\n            throw new Error(e);\n        }\n    }\n    registerRelayerEvents() {\n        this.core.relayer.on(qe.message, (e)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                let { topic: r, message: t } = e;\n                if (!this.pairings.keys.includes(r) || this.ignoredPayloadTypes.includes(this.core.crypto.getPayloadType(t))) return;\n                let s = yield this.core.crypto.decode(r, t);\n                try {\n                    wr(s) ? (this.core.history.set(r, s), this.onRelayEventRequest({\n                        topic: r,\n                        payload: s\n                    })) : It(s) && (yield this.core.history.resolve(s), yield this.onRelayEventResponse({\n                        topic: r,\n                        payload: s\n                    }), this.core.history.delete(r, s.id));\n                } catch (n) {\n                    this.logger.error(n);\n                }\n            }));\n    }\n    registerExpirerEvents() {\n        this.core.expirer.on(Ve.expired, (e)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                let { topic: r } = Hi(e.target);\n                r && this.pairings.keys.includes(r) && (yield this.deletePairing(r, !0), this.events.emit(jt.expire, {\n                    topic: r\n                }));\n            }));\n    }\n    constructor(e, r){\n        this.core = e, this.logger = r, this.name = Sb, this.version = Ib, this.events = new ht.default, this.initialized = !1, this.storagePrefix = Rt, this.ignoredPayloadTypes = [\n            ut\n        ], this.registeredMethods = [], this.init = ()=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                this.initialized || (yield this.pairings.init(), yield this.cleanup(), this.registerRelayerEvents(), this.registerExpirerEvents(), this.initialized = !0, this.logger.trace(\"Initialized\"));\n            }), this.register = (param)=>{\n            let { methods: t } = param;\n            this.isInitialized(), this.registeredMethods = [\n                ...new Set([\n                    ...this.registeredMethods,\n                    ...t\n                ])\n            ];\n        }, this.create = ()=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                this.isInitialized();\n                let t = ki(), s = yield this.core.crypto.setSymKey(t), n = Ce(W.FIVE_MINUTES), o = {\n                    protocol: zo\n                }, a = {\n                    topic: s,\n                    expiry: n,\n                    relay: o,\n                    active: !1\n                }, c = Ih({\n                    protocol: this.core.protocol,\n                    version: this.core.version,\n                    topic: s,\n                    symKey: t,\n                    relay: o,\n                    expiryTimestamp: n\n                });\n                return yield this.pairings.set(s, a), yield this.core.relayer.subscribe(s), this.core.expirer.set(s, n), {\n                    topic: s,\n                    uri: c\n                };\n            }), this.pair = (t)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                this.isInitialized(), this.isValidPair(t);\n                let { topic: s, symKey: n, relay: o, expiryTimestamp: a } = Xn(t.uri), c;\n                if (this.pairings.keys.includes(s) && (c = this.pairings.get(s), c.active)) throw new Error(\"Pairing already exists: \".concat(s, \". Please try again with a new connection URI.\"));\n                let u = a || Ce(W.FIVE_MINUTES), h = {\n                    topic: s,\n                    relay: o,\n                    expiry: u,\n                    active: !1\n                };\n                return yield this.pairings.set(s, h), this.core.expirer.set(s, u), t.activatePairing && (yield this.activate({\n                    topic: s\n                })), this.events.emit(jt.create, h), this.core.crypto.keychain.has(s) || (yield this.core.crypto.setSymKey(n, s)), yield this.core.relayer.subscribe(s, {\n                    relay: o\n                }), h;\n            }), this.activate = (s)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, [\n                s\n            ], function*(param) {\n                let { topic: t } = param;\n                this.isInitialized();\n                let n = Ce(W.THIRTY_DAYS);\n                yield this.pairings.update(t, {\n                    active: !0,\n                    expiry: n\n                }), this.core.expirer.set(t, n);\n            }), this.ping = (t)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                this.isInitialized(), yield this.isValidPing(t);\n                let { topic: s } = t;\n                if (this.pairings.keys.includes(s)) {\n                    let n = yield this.sendRequest(s, \"wc_pairingPing\", {}), { done: o, resolve: a, reject: c } = vt();\n                    this.events.once(oe(\"pairing_ping\", n), (param)=>{\n                        let { error: u } = param;\n                        u ? c(u) : a();\n                    }), yield o();\n                }\n            }), this.updateExpiry = (n)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, [\n                n\n            ], function*(param) {\n                let { topic: t, expiry: s } = param;\n                this.isInitialized(), yield this.pairings.update(t, {\n                    expiry: s\n                });\n            }), this.updateMetadata = (n)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, [\n                n\n            ], function*(param) {\n                let { topic: t, metadata: s } = param;\n                this.isInitialized(), yield this.pairings.update(t, {\n                    peerMetadata: s\n                });\n            }), this.getPairings = ()=>(this.isInitialized(), this.pairings.values), this.disconnect = (t)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                this.isInitialized(), yield this.isValidDisconnect(t);\n                let { topic: s } = t;\n                this.pairings.keys.includes(s) && (yield this.sendRequest(s, \"wc_pairingDelete\", de(\"USER_DISCONNECTED\")), yield this.deletePairing(s));\n            }), this.sendRequest = (t, s, n)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                let o = Ze(s, n), a = yield this.core.crypto.encode(t, o), c = ni[s].req;\n                return this.core.history.set(t, o), this.core.relayer.publish(t, a, c), o.id;\n            }), this.sendResult = (t, s, n)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                let o = mr(t, n), a = yield this.core.crypto.encode(s, o), c = yield this.core.history.get(s, t), u = ni[c.request.method].res;\n                yield this.core.relayer.publish(s, a, u), yield this.core.history.resolve(o);\n            }), this.sendError = (t, s, n)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                let o = qt(t, n), a = yield this.core.crypto.encode(s, o), c = yield this.core.history.get(s, t), u = ni[c.request.method] ? ni[c.request.method].res : ni.unregistered_method.res;\n                yield this.core.relayer.publish(s, a, u), yield this.core.history.resolve(o);\n            }), this.deletePairing = (t, s)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                yield this.core.relayer.unsubscribe(t), yield Promise.all([\n                    this.pairings.delete(t, de(\"USER_DISCONNECTED\")),\n                    this.core.crypto.deleteSymKey(t),\n                    s ? Promise.resolve() : this.core.expirer.del(t)\n                ]);\n            }), this.cleanup = ()=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                let t = this.pairings.getAll().filter((s)=>Qe(s.expiry));\n                yield Promise.all(t.map((s)=>this.deletePairing(s.topic)));\n            }), this.onRelayEventRequest = (t)=>{\n            let { topic: s, payload: n } = t;\n            switch(n.method){\n                case \"wc_pairingPing\":\n                    return this.onPairingPingRequest(s, n);\n                case \"wc_pairingDelete\":\n                    return this.onPairingDeleteRequest(s, n);\n                default:\n                    return this.onUnknownRpcMethodRequest(s, n);\n            }\n        }, this.onRelayEventResponse = (t)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                let { topic: s, payload: n } = t, o = (yield this.core.history.get(s, n.id)).request.method;\n                switch(o){\n                    case \"wc_pairingPing\":\n                        return this.onPairingPingResponse(s, n);\n                    default:\n                        return this.onUnknownRpcMethodResponse(o);\n                }\n            }), this.onPairingPingRequest = (t, s)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                let { id: n } = s;\n                try {\n                    this.isValidPing({\n                        topic: t\n                    }), yield this.sendResult(n, t, !0), this.events.emit(jt.ping, {\n                        id: n,\n                        topic: t\n                    });\n                } catch (o) {\n                    yield this.sendError(n, t, o), this.logger.error(o);\n                }\n            }), this.onPairingPingResponse = (t, s)=>{\n            let { id: n } = s;\n            setTimeout(()=>{\n                Ke(s) ? this.events.emit(oe(\"pairing_ping\", n), {}) : Le(s) && this.events.emit(oe(\"pairing_ping\", n), {\n                    error: s.error\n                });\n            }, 500);\n        }, this.onPairingDeleteRequest = (t, s)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                let { id: n } = s;\n                try {\n                    this.isValidDisconnect({\n                        topic: t\n                    }), yield this.deletePairing(t), this.events.emit(jt.delete, {\n                        id: n,\n                        topic: t\n                    });\n                } catch (o) {\n                    yield this.sendError(n, t, o), this.logger.error(o);\n                }\n            }), this.onUnknownRpcMethodRequest = (t, s)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                let { id: n, method: o } = s;\n                try {\n                    if (this.registeredMethods.includes(o)) return;\n                    let a = de(\"WC_METHOD_UNSUPPORTED\", o);\n                    yield this.sendError(n, t, a), this.logger.error(a);\n                } catch (a) {\n                    yield this.sendError(n, t, a), this.logger.error(a);\n                }\n            }), this.onUnknownRpcMethodResponse = (t)=>{\n            this.registeredMethods.includes(t) || this.logger.error(de(\"WC_METHOD_UNSUPPORTED\", t));\n        }, this.isValidPair = (t)=>{\n            var s;\n            if (!Te(t)) {\n                let { message: o } = T(\"MISSING_OR_INVALID\", \"pair() params: \".concat(t));\n                throw new Error(o);\n            }\n            if (!Oh(t.uri)) {\n                let { message: o } = T(\"MISSING_OR_INVALID\", \"pair() uri: \".concat(t.uri));\n                throw new Error(o);\n            }\n            let n = Xn(t.uri);\n            if (!((s = n == null ? void 0 : n.relay) != null && s.protocol)) {\n                let { message: o } = T(\"MISSING_OR_INVALID\", \"pair() uri#relay-protocol\");\n                throw new Error(o);\n            }\n            if (!(n != null && n.symKey)) {\n                let { message: o } = T(\"MISSING_OR_INVALID\", \"pair() uri#symKey\");\n                throw new Error(o);\n            }\n            if (n != null && n.expiryTimestamp && (0, W.toMiliseconds)(n == null ? void 0 : n.expiryTimestamp) < Date.now()) {\n                let { message: o } = T(\"EXPIRED\", \"pair() URI has expired. Please try again with a new connection URI.\");\n                throw new Error(o);\n            }\n        }, this.isValidPing = (t)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                if (!Te(t)) {\n                    let { message: n } = T(\"MISSING_OR_INVALID\", \"ping() params: \".concat(t));\n                    throw new Error(n);\n                }\n                let { topic: s } = t;\n                yield this.isValidPairingTopic(s);\n            }), this.isValidDisconnect = (t)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                if (!Te(t)) {\n                    let { message: n } = T(\"MISSING_OR_INVALID\", \"disconnect() params: \".concat(t));\n                    throw new Error(n);\n                }\n                let { topic: s } = t;\n                yield this.isValidPairingTopic(s);\n            }), this.isValidPairingTopic = (t)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                if (!me(t, !1)) {\n                    let { message: s } = T(\"MISSING_OR_INVALID\", \"pairing topic should be a string: \".concat(t));\n                    throw new Error(s);\n                }\n                if (!this.pairings.keys.includes(t)) {\n                    let { message: s } = T(\"NO_MATCHING_KEY\", \"pairing topic doesn't exist: \".concat(t));\n                    throw new Error(s);\n                }\n                if (Qe(this.pairings.get(t).expiry)) {\n                    yield this.deletePairing(t);\n                    let { message: s } = T(\"EXPIRED\", \"pairing topic: \".concat(t));\n                    throw new Error(s);\n                }\n            }), this.core = e, this.logger = Se(r, this.name), this.pairings = new Vt(this.core, this.logger, this.name, this.storagePrefix);\n    }\n}, Uo = class extends _walletconnect_types__WEBPACK_IMPORTED_MODULE_2__.IJsonRpcHistory {\n    get context() {\n        return De(this.logger);\n    }\n    get storageKey() {\n        return this.storagePrefix + this.version + this.core.customStoragePrefix + \"//\" + this.name;\n    }\n    get size() {\n        return this.records.size;\n    }\n    get keys() {\n        return Array.from(this.records.keys());\n    }\n    get values() {\n        return Array.from(this.records.values());\n    }\n    get pending() {\n        let e = [];\n        return this.values.forEach((r)=>{\n            if (typeof r.response < \"u\") return;\n            let t = {\n                topic: r.topic,\n                request: Ze(r.request.method, r.request.params, r.id),\n                chainId: r.chainId\n            };\n            return e.push(t);\n        }), e;\n    }\n    setJsonRpcRecords(e) {\n        return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n            yield this.core.storage.setItem(this.storageKey, e);\n        });\n    }\n    getJsonRpcRecords() {\n        return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n            return yield this.core.storage.getItem(this.storageKey);\n        });\n    }\n    getRecord(e) {\n        this.isInitialized();\n        let r = this.records.get(e);\n        if (!r) {\n            let { message: t } = T(\"NO_MATCHING_KEY\", \"\".concat(this.name, \": \").concat(e));\n            throw new Error(t);\n        }\n        return r;\n    }\n    persist() {\n        return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n            yield this.setJsonRpcRecords(this.values), this.events.emit(et.sync);\n        });\n    }\n    restore() {\n        return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n            try {\n                let e = yield this.getJsonRpcRecords();\n                if (typeof e > \"u\" || !e.length) return;\n                if (this.records.size) {\n                    let { message: r } = T(\"RESTORE_WILL_OVERRIDE\", this.name);\n                    throw this.logger.error(r), new Error(r);\n                }\n                this.cached = e, this.logger.debug(\"Successfully Restored records for \".concat(this.name)), this.logger.trace({\n                    type: \"method\",\n                    method: \"restore\",\n                    records: this.values\n                });\n            } catch (e) {\n                this.logger.debug(\"Failed to Restore records for \".concat(this.name)), this.logger.error(e);\n            }\n        });\n    }\n    registerEventListeners() {\n        this.events.on(et.created, (e)=>{\n            let r = et.created;\n            this.logger.info(\"Emitting \".concat(r)), this.logger.debug({\n                type: \"event\",\n                event: r,\n                record: e\n            }), this.persist();\n        }), this.events.on(et.updated, (e)=>{\n            let r = et.updated;\n            this.logger.info(\"Emitting \".concat(r)), this.logger.debug({\n                type: \"event\",\n                event: r,\n                record: e\n            }), this.persist();\n        }), this.events.on(et.deleted, (e)=>{\n            let r = et.deleted;\n            this.logger.info(\"Emitting \".concat(r)), this.logger.debug({\n                type: \"event\",\n                event: r,\n                record: e\n            }), this.persist();\n        }), this.core.heartbeat.on(zt.HEARTBEAT_EVENTS.pulse, ()=>{\n            this.cleanup();\n        });\n    }\n    cleanup() {\n        try {\n            this.records.forEach((e)=>{\n                (0, W.toMiliseconds)(e.expiry || 0) - Date.now() <= 0 && (this.logger.info(\"Deleting expired history log: \".concat(e.id)), this.delete(e.topic, e.id));\n            });\n        } catch (e) {\n            this.logger.warn(e);\n        }\n    }\n    isInitialized() {\n        if (!this.initialized) {\n            let { message: e } = T(\"NOT_INITIALIZED\", this.name);\n            throw new Error(e);\n        }\n    }\n    constructor(e, r){\n        super(e, r), this.core = e, this.logger = r, this.records = new Map, this.events = new ht.EventEmitter, this.name = Rb, this.version = Ob, this.cached = [], this.initialized = !1, this.storagePrefix = Rt, this.init = ()=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                this.initialized || (this.logger.trace(\"Initialized\"), yield this.restore(), this.cached.forEach((t)=>this.records.set(t.id, t)), this.cached = [], this.registerEventListeners(), this.initialized = !0);\n            }), this.set = (t, s, n)=>{\n            if (this.isInitialized(), this.logger.debug(\"Setting JSON-RPC request history record\"), this.logger.trace({\n                type: \"method\",\n                method: \"set\",\n                topic: t,\n                request: s,\n                chainId: n\n            }), this.records.has(s.id)) return;\n            let o = {\n                id: s.id,\n                topic: t,\n                request: {\n                    method: s.method,\n                    params: s.params || null\n                },\n                chainId: n,\n                expiry: Ce(W.THIRTY_DAYS)\n            };\n            this.records.set(o.id, o), this.events.emit(et.created, o);\n        }, this.resolve = (t)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                if (this.isInitialized(), this.logger.debug(\"Updating JSON-RPC response history record\"), this.logger.trace({\n                    type: \"method\",\n                    method: \"update\",\n                    response: t\n                }), !this.records.has(t.id)) return;\n                let s = yield this.getRecord(t.id);\n                typeof s.response > \"u\" && (s.response = Le(t) ? {\n                    error: t.error\n                } : {\n                    result: t.result\n                }, this.records.set(s.id, s), this.events.emit(et.updated, s));\n            }), this.get = (t, s)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                return this.isInitialized(), this.logger.debug(\"Getting record\"), this.logger.trace({\n                    type: \"method\",\n                    method: \"get\",\n                    topic: t,\n                    id: s\n                }), yield this.getRecord(s);\n            }), this.delete = (t, s)=>{\n            this.isInitialized(), this.logger.debug(\"Deleting record\"), this.logger.trace({\n                type: \"method\",\n                method: \"delete\",\n                id: s\n            }), this.values.forEach((n)=>{\n                if (n.topic === t) {\n                    if (typeof s < \"u\" && n.id !== s) return;\n                    this.records.delete(n.id), this.events.emit(et.deleted, n);\n                }\n            });\n        }, this.exists = (t, s)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                return this.isInitialized(), this.records.has(s) ? (yield this.getRecord(s)).topic === t : !1;\n            }), this.on = (t, s)=>{\n            this.events.on(t, s);\n        }, this.once = (t, s)=>{\n            this.events.once(t, s);\n        }, this.off = (t, s)=>{\n            this.events.off(t, s);\n        }, this.removeListener = (t, s)=>{\n            this.events.removeListener(t, s);\n        }, this.logger = Se(r, this.name);\n    }\n}, Mo = class extends _walletconnect_types__WEBPACK_IMPORTED_MODULE_2__.IExpirer {\n    get context() {\n        return De(this.logger);\n    }\n    get storageKey() {\n        return this.storagePrefix + this.version + this.core.customStoragePrefix + \"//\" + this.name;\n    }\n    get length() {\n        return this.expirations.size;\n    }\n    get keys() {\n        return Array.from(this.expirations.keys());\n    }\n    get values() {\n        return Array.from(this.expirations.values());\n    }\n    formatTarget(e) {\n        if (typeof e == \"string\") return _h(e);\n        if (typeof e == \"number\") return xh(e);\n        let { message: r } = T(\"UNKNOWN_TYPE\", \"Target type: \".concat(typeof e));\n        throw new Error(r);\n    }\n    setExpirations(e) {\n        return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n            yield this.core.storage.setItem(this.storageKey, e);\n        });\n    }\n    getExpirations() {\n        return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n            return yield this.core.storage.getItem(this.storageKey);\n        });\n    }\n    persist() {\n        return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n            yield this.setExpirations(this.values), this.events.emit(Ve.sync);\n        });\n    }\n    restore() {\n        return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n            try {\n                let e = yield this.getExpirations();\n                if (typeof e > \"u\" || !e.length) return;\n                if (this.expirations.size) {\n                    let { message: r } = T(\"RESTORE_WILL_OVERRIDE\", this.name);\n                    throw this.logger.error(r), new Error(r);\n                }\n                this.cached = e, this.logger.debug(\"Successfully Restored expirations for \".concat(this.name)), this.logger.trace({\n                    type: \"method\",\n                    method: \"restore\",\n                    expirations: this.values\n                });\n            } catch (e) {\n                this.logger.debug(\"Failed to Restore expirations for \".concat(this.name)), this.logger.error(e);\n            }\n        });\n    }\n    getExpiration(e) {\n        let r = this.expirations.get(e);\n        if (!r) {\n            let { message: t } = T(\"NO_MATCHING_KEY\", \"\".concat(this.name, \": \").concat(e));\n            throw this.logger.warn(t), new Error(t);\n        }\n        return r;\n    }\n    checkExpiry(e, r) {\n        let { expiry: t } = r;\n        (0, W.toMiliseconds)(t) - Date.now() <= 0 && this.expire(e, r);\n    }\n    expire(e, r) {\n        this.expirations.delete(e), this.events.emit(Ve.expired, {\n            target: e,\n            expiration: r\n        });\n    }\n    checkExpirations() {\n        this.core.relayer.connected && this.expirations.forEach((e, r)=>this.checkExpiry(r, e));\n    }\n    registerEventListeners() {\n        this.core.heartbeat.on(zt.HEARTBEAT_EVENTS.pulse, ()=>this.checkExpirations()), this.events.on(Ve.created, (e)=>{\n            let r = Ve.created;\n            this.logger.info(\"Emitting \".concat(r)), this.logger.debug({\n                type: \"event\",\n                event: r,\n                data: e\n            }), this.persist();\n        }), this.events.on(Ve.expired, (e)=>{\n            let r = Ve.expired;\n            this.logger.info(\"Emitting \".concat(r)), this.logger.debug({\n                type: \"event\",\n                event: r,\n                data: e\n            }), this.persist();\n        }), this.events.on(Ve.deleted, (e)=>{\n            let r = Ve.deleted;\n            this.logger.info(\"Emitting \".concat(r)), this.logger.debug({\n                type: \"event\",\n                event: r,\n                data: e\n            }), this.persist();\n        });\n    }\n    isInitialized() {\n        if (!this.initialized) {\n            let { message: e } = T(\"NOT_INITIALIZED\", this.name);\n            throw new Error(e);\n        }\n    }\n    constructor(e, r){\n        super(e, r), this.core = e, this.logger = r, this.expirations = new Map, this.events = new ht.EventEmitter, this.name = Tb, this.version = Nb, this.cached = [], this.initialized = !1, this.storagePrefix = Rt, this.init = ()=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                this.initialized || (this.logger.trace(\"Initialized\"), yield this.restore(), this.cached.forEach((t)=>this.expirations.set(t.target, t)), this.cached = [], this.registerEventListeners(), this.initialized = !0);\n            }), this.has = (t)=>{\n            try {\n                let s = this.formatTarget(t);\n                return typeof this.getExpiration(s) < \"u\";\n            } catch (s) {\n                return !1;\n            }\n        }, this.set = (t, s)=>{\n            this.isInitialized();\n            let n = this.formatTarget(t), o = {\n                target: n,\n                expiry: s\n            };\n            this.expirations.set(n, o), this.checkExpiry(n, o), this.events.emit(Ve.created, {\n                target: n,\n                expiration: o\n            });\n        }, this.get = (t)=>{\n            this.isInitialized();\n            let s = this.formatTarget(t);\n            return this.getExpiration(s);\n        }, this.del = (t)=>{\n            if (this.isInitialized(), this.has(t)) {\n                let s = this.formatTarget(t), n = this.getExpiration(s);\n                this.expirations.delete(s), this.events.emit(Ve.deleted, {\n                    target: s,\n                    expiration: n\n                });\n            }\n        }, this.on = (t, s)=>{\n            this.events.on(t, s);\n        }, this.once = (t, s)=>{\n            this.events.once(t, s);\n        }, this.off = (t, s)=>{\n            this.events.off(t, s);\n        }, this.removeListener = (t, s)=>{\n            this.events.removeListener(t, s);\n        }, this.logger = Se(r, this.name);\n    }\n}, qo = class extends _walletconnect_types__WEBPACK_IMPORTED_MODULE_2__.IVerify {\n    get context() {\n        return De(this.logger);\n    }\n    startAbortTimer(e) {\n        return this.abortController = new AbortController, setTimeout(()=>this.abortController.abort(), (0, W.toMiliseconds)(e));\n    }\n    constructor(e, r){\n        super(e, r), this.projectId = e, this.logger = r, this.name = mo, this.initialized = !1, this.queue = [], this.verifyDisabled = !1, this.init = (t)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                if (this.verifyDisabled || Mt() || !Et()) return;\n                let s = this.getVerifyUrl(t == null ? void 0 : t.verifyUrl);\n                this.verifyUrl !== s && this.removeIframe(), this.verifyUrl = s;\n                try {\n                    yield this.createIframe();\n                } catch (n) {\n                    this.logger.info(\"Verify iframe failed to load: \".concat(this.verifyUrl)), this.logger.info(n);\n                }\n                if (!this.initialized) {\n                    this.removeIframe(), this.verifyUrl = Ro;\n                    try {\n                        yield this.createIframe();\n                    } catch (n) {\n                        this.logger.info(\"Verify iframe failed to load: \".concat(this.verifyUrl)), this.logger.info(n), this.verifyDisabled = !0;\n                    }\n                }\n            }), this.register = (t)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                this.initialized ? this.sendPost(t.attestationId) : (this.addToQueue(t.attestationId), yield this.init());\n            }), this.resolve = (t)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                if (this.isDevEnv) return \"\";\n                let s = this.getVerifyUrl(t == null ? void 0 : t.verifyUrl), n;\n                try {\n                    n = yield this.fetchAttestation(t.attestationId, s);\n                } catch (o) {\n                    this.logger.info(\"failed to resolve attestation: \".concat(t.attestationId, \" from url: \").concat(s)), this.logger.info(o), n = yield this.fetchAttestation(t.attestationId, Ro);\n                }\n                return n;\n            }), this.fetchAttestation = (t, s)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                this.logger.info(\"resolving attestation: \".concat(t, \" from url: \").concat(s));\n                let n = this.startAbortTimer(W.ONE_SECOND * 2), o = yield fetch(\"\".concat(s, \"/attestation/\").concat(t), {\n                    signal: this.abortController.signal\n                });\n                return clearTimeout(n), o.status === 200 ? yield o.json() : void 0;\n            }), this.addToQueue = (t)=>{\n            this.queue.push(t);\n        }, this.processQueue = ()=>{\n            this.queue.length !== 0 && (this.queue.forEach((t)=>this.sendPost(t)), this.queue = []);\n        }, this.sendPost = (t)=>{\n            var s;\n            try {\n                if (!this.iframe) return;\n                (s = this.iframe.contentWindow) == null || s.postMessage(t, \"*\"), this.logger.info(\"postMessage sent: \".concat(t, \" \").concat(this.verifyUrl));\n            } catch (n) {}\n        }, this.createIframe = ()=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                let t, s = (n)=>{\n                    n.data === \"verify_ready\" && (this.onInit(), window.removeEventListener(\"message\", s), t());\n                };\n                yield Promise.race([\n                    new Promise((n)=>{\n                        let o = document.getElementById(mo);\n                        if (o) return this.iframe = o, this.onInit(), n();\n                        window.addEventListener(\"message\", s);\n                        let a = document.createElement(\"iframe\");\n                        a.id = mo, a.src = \"\".concat(this.verifyUrl, \"/\").concat(this.projectId), a.style.display = \"none\", document.body.append(a), this.iframe = a, t = n;\n                    }),\n                    new Promise((n, o)=>setTimeout(()=>{\n                            window.removeEventListener(\"message\", s), o(\"verify iframe load timeout\");\n                        }, (0, W.toMiliseconds)(W.FIVE_SECONDS)))\n                ]);\n            }), this.onInit = ()=>{\n            this.initialized = !0, this.processQueue();\n        }, this.removeIframe = ()=>{\n            this.iframe && (this.iframe.remove(), this.iframe = void 0, this.initialized = !1);\n        }, this.getVerifyUrl = (t)=>{\n            let s = t || Bt;\n            return Pb.includes(s) || (this.logger.info(\"verify url: \".concat(s, \", not included in trusted list, assigning default: \").concat(Bt)), s = Bt), s;\n        }, this.logger = Se(r, this.name), this.verifyUrl = Bt, this.abortController = new AbortController, this.isDevEnv = dr() && process.env.IS_VITEST;\n    }\n}, jo = class extends _walletconnect_types__WEBPACK_IMPORTED_MODULE_2__.IEchoClient {\n    constructor(e, r){\n        super(e, r), this.projectId = e, this.logger = r, this.context = Cb, this.registerDeviceToken = (t)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                let { clientId: s, token: n, notificationType: o, enableEncrypted: a = !1 } = t, c = \"\".concat(Ab, \"/\").concat(this.projectId, \"/clients\");\n                yield (0, Ll.default)(c, {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    },\n                    body: JSON.stringify({\n                        client_id: s,\n                        type: o,\n                        token: n,\n                        always_raw: a\n                    })\n                });\n            }), this.logger = Se(r, this.context);\n    }\n}, Hb = Object.defineProperty, Pl = Object.getOwnPropertySymbols, Gb = Object.prototype.hasOwnProperty, Wb = Object.prototype.propertyIsEnumerable, Cl = (i, e, r)=>e in i ? Hb(i, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: r\n    }) : i[e] = r, Al = (i, e)=>{\n    for(var r in e || (e = {}))Gb.call(e, r) && Cl(i, r, e[r]);\n    if (Pl) for (var r of Pl(e))Wb.call(e, r) && Cl(i, r, e[r]);\n    return i;\n}, Bo = class i extends _walletconnect_types__WEBPACK_IMPORTED_MODULE_2__.ICore {\n    static init(e) {\n        return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n            let r = new i(e);\n            yield r.initialize();\n            let t = yield r.crypto.getClientId();\n            return yield r.storage.setItem(vb, t), r;\n        });\n    }\n    get context() {\n        return De(this.logger);\n    }\n    start() {\n        return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n            this.initialized || (yield this.initialize());\n        });\n    }\n    initialize() {\n        return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n            this.logger.trace(\"Initialized\");\n            try {\n                yield this.crypto.init(), yield this.history.init(), yield this.expirer.init(), yield this.relayer.init(), yield this.heartbeat.init(), yield this.pairing.init(), this.initialized = !0, this.logger.info(\"Core Initialization Success\");\n            } catch (e) {\n                throw this.logger.warn(\"Core Initialization Failure at epoch \".concat(Date.now()), e), this.logger.error(e.message), e;\n            }\n        });\n    }\n    constructor(e){\n        super(e), this.protocol = Hl, this.version = ib, this.name = Vo, this.events = new ht.EventEmitter, this.initialized = !1, this.on = (t, s)=>this.events.on(t, s), this.once = (t, s)=>this.events.once(t, s), this.off = (t, s)=>this.events.off(t, s), this.removeListener = (t, s)=>this.events.removeListener(t, s), this.projectId = e == null ? void 0 : e.projectId, this.relayUrl = (e == null ? void 0 : e.relayUrl) || Gl, this.customStoragePrefix = e != null && e.customStoragePrefix ? \":\".concat(e.customStoragePrefix) : \"\";\n        let r = typeof (e == null ? void 0 : e.logger) < \"u\" && typeof (e == null ? void 0 : e.logger) != \"string\" ? e.logger : (0, Qt.default)(Fr({\n            level: (e == null ? void 0 : e.logger) || sb.logger\n        }));\n        this.logger = Se(r, this.name), this.heartbeat = new zt.HeartBeat, this.crypto = new To(this, this.logger, e == null ? void 0 : e.keychain), this.history = new Uo(this, this.logger), this.expirer = new Mo(this, this.logger), this.storage = e != null && e.storage ? e.storage : new li(Al(Al({}, nb), e == null ? void 0 : e.storageOptions)), this.relayer = new Lo({\n            core: this,\n            logger: this.logger,\n            relayUrl: this.relayUrl,\n            projectId: this.projectId\n        }), this.pairing = new Fo(this, this.logger), this.verify = new qo(this.projectId || \"\", this.logger), this.echoClient = new jo(this.projectId || \"\", this.logger);\n    }\n}, Wl = Bo;\n\nvar hs = (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.j)(kt()), ae = (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.j)(Tt());\nvar Ql = \"wc\", Zl = 2, ef = \"client\", Jo = \"\".concat(Ql, \"@\").concat(Zl, \":\").concat(ef, \":\"), $o = {\n    name: ef,\n    logger: \"error\",\n    controller: !1,\n    relayUrl: \"wss://relay.walletconnect.com\"\n}, nx = {\n    session_proposal: \"session_proposal\",\n    session_update: \"session_update\",\n    session_extend: \"session_extend\",\n    session_ping: \"session_ping\",\n    session_delete: \"session_delete\",\n    session_expire: \"session_expire\",\n    session_request: \"session_request\",\n    session_request_sent: \"session_request_sent\",\n    session_event: \"session_event\",\n    proposal_expire: \"proposal_expire\",\n    session_request_expire: \"session_request_expire\"\n}, ox = {\n    database: \":memory:\"\n}, Jl = \"WALLETCONNECT_DEEPLINK_CHOICE\", ax = {\n    created: \"history_created\",\n    updated: \"history_updated\",\n    deleted: \"history_deleted\",\n    sync: \"history_sync\"\n}, cx = \"history\", ux = \"0.3\", Xb = \"proposal\", hx = ae.THIRTY_DAYS, Qb = \"Proposal expired\", Zb = \"session\", cs = ae.SEVEN_DAYS, e1 = \"engine\", lt = {\n    wc_sessionPropose: {\n        req: {\n            ttl: ae.FIVE_MINUTES,\n            prompt: !0,\n            tag: 1100\n        },\n        res: {\n            ttl: ae.FIVE_MINUTES,\n            prompt: !1,\n            tag: 1101\n        }\n    },\n    wc_sessionSettle: {\n        req: {\n            ttl: ae.FIVE_MINUTES,\n            prompt: !1,\n            tag: 1102\n        },\n        res: {\n            ttl: ae.FIVE_MINUTES,\n            prompt: !1,\n            tag: 1103\n        }\n    },\n    wc_sessionUpdate: {\n        req: {\n            ttl: ae.ONE_DAY,\n            prompt: !1,\n            tag: 1104\n        },\n        res: {\n            ttl: ae.ONE_DAY,\n            prompt: !1,\n            tag: 1105\n        }\n    },\n    wc_sessionExtend: {\n        req: {\n            ttl: ae.ONE_DAY,\n            prompt: !1,\n            tag: 1106\n        },\n        res: {\n            ttl: ae.ONE_DAY,\n            prompt: !1,\n            tag: 1107\n        }\n    },\n    wc_sessionRequest: {\n        req: {\n            ttl: ae.FIVE_MINUTES,\n            prompt: !0,\n            tag: 1108\n        },\n        res: {\n            ttl: ae.FIVE_MINUTES,\n            prompt: !1,\n            tag: 1109\n        }\n    },\n    wc_sessionEvent: {\n        req: {\n            ttl: ae.FIVE_MINUTES,\n            prompt: !0,\n            tag: 1110\n        },\n        res: {\n            ttl: ae.FIVE_MINUTES,\n            prompt: !1,\n            tag: 1111\n        }\n    },\n    wc_sessionDelete: {\n        req: {\n            ttl: ae.ONE_DAY,\n            prompt: !1,\n            tag: 1112\n        },\n        res: {\n            ttl: ae.ONE_DAY,\n            prompt: !1,\n            tag: 1113\n        }\n    },\n    wc_sessionPing: {\n        req: {\n            ttl: ae.ONE_DAY,\n            prompt: !1,\n            tag: 1114\n        },\n        res: {\n            ttl: ae.ONE_DAY,\n            prompt: !1,\n            tag: 1115\n        }\n    }\n}, Ko = {\n    min: ae.FIVE_MINUTES,\n    max: ae.SEVEN_DAYS\n}, ft = {\n    idle: \"IDLE\",\n    active: \"ACTIVE\"\n}, t1 = \"request\", r1 = [\n    \"wc_sessionPropose\",\n    \"wc_sessionRequest\",\n    \"wc_authRequest\"\n], i1 = Object.defineProperty, s1 = Object.defineProperties, n1 = Object.getOwnPropertyDescriptors, Yl = Object.getOwnPropertySymbols, o1 = Object.prototype.hasOwnProperty, a1 = Object.prototype.propertyIsEnumerable, Xl = (i, e, r)=>e in i ? i1(i, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: r\n    }) : i[e] = r, Fe = (i, e)=>{\n    for(var r in e || (e = {}))o1.call(e, r) && Xl(i, r, e[r]);\n    if (Yl) for (var r of Yl(e))a1.call(e, r) && Xl(i, r, e[r]);\n    return i;\n}, br = (i, e)=>s1(i, n1(e)), ko = class extends _walletconnect_types__WEBPACK_IMPORTED_MODULE_2__.IEngine {\n    isInitialized() {\n        return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n            if (!this.initialized) {\n                let { message: e } = T(\"NOT_INITIALIZED\", this.name);\n                throw new Error(e);\n            }\n            yield this.client.core.relayer.confirmOnlineStateOrThrow();\n        });\n    }\n    registerRelayerEvents() {\n        this.client.core.relayer.on(qe.message, (e)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                let { topic: r, message: t } = e;\n                if (this.ignoredPayloadTypes.includes(this.client.core.crypto.getPayloadType(t))) return;\n                let s = yield this.client.core.crypto.decode(r, t);\n                try {\n                    wr(s) ? (this.client.core.history.set(r, s), this.onRelayEventRequest({\n                        topic: r,\n                        payload: s\n                    })) : It(s) ? (yield this.client.core.history.resolve(s), yield this.onRelayEventResponse({\n                        topic: r,\n                        payload: s\n                    }), this.client.core.history.delete(r, s.id)) : this.onRelayEventUnknownPayload({\n                        topic: r,\n                        payload: s\n                    });\n                } catch (n) {\n                    this.client.logger.error(n);\n                }\n            }));\n    }\n    registerExpirerEvents() {\n        this.client.core.expirer.on(Ve.expired, (e)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                let { topic: r, id: t } = Hi(e.target);\n                if (t && this.client.pendingRequest.keys.includes(t)) return yield this.deletePendingSessionRequest(t, T(\"EXPIRED\"), !0);\n                r ? this.client.session.keys.includes(r) && (yield this.deleteSession({\n                    topic: r,\n                    expirerHasDeleted: !0\n                }), this.client.events.emit(\"session_expire\", {\n                    topic: r\n                })) : t && (yield this.deleteProposal(t, !0), this.client.events.emit(\"proposal_expire\", {\n                    id: t\n                }));\n            }));\n    }\n    registerPairingEvents() {\n        this.client.core.pairing.events.on(jt.create, (e)=>this.onPairingCreated(e)), this.client.core.pairing.events.on(jt.delete, (e)=>{\n            this.addToRecentlyDeleted(e.topic, \"pairing\");\n        });\n    }\n    isValidPairingTopic(e) {\n        if (!me(e, !1)) {\n            let { message: r } = T(\"MISSING_OR_INVALID\", \"pairing topic should be a string: \".concat(e));\n            throw new Error(r);\n        }\n        if (!this.client.core.pairing.pairings.keys.includes(e)) {\n            let { message: r } = T(\"NO_MATCHING_KEY\", \"pairing topic doesn't exist: \".concat(e));\n            throw new Error(r);\n        }\n        if (Qe(this.client.core.pairing.pairings.get(e).expiry)) {\n            let { message: r } = T(\"EXPIRED\", \"pairing topic: \".concat(e));\n            throw new Error(r);\n        }\n    }\n    isValidSessionTopic(e) {\n        return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n            if (!me(e, !1)) {\n                let { message: r } = T(\"MISSING_OR_INVALID\", \"session topic should be a string: \".concat(e));\n                throw new Error(r);\n            }\n            if (this.checkRecentlyDeleted(e), !this.client.session.keys.includes(e)) {\n                let { message: r } = T(\"NO_MATCHING_KEY\", \"session topic doesn't exist: \".concat(e));\n                throw new Error(r);\n            }\n            if (Qe(this.client.session.get(e).expiry)) {\n                yield this.deleteSession({\n                    topic: e\n                });\n                let { message: r } = T(\"EXPIRED\", \"session topic: \".concat(e));\n                throw new Error(r);\n            }\n            if (!this.client.core.crypto.keychain.has(e)) {\n                let { message: r } = T(\"MISSING_OR_INVALID\", \"session topic does not exist in keychain: \".concat(e));\n                throw yield this.deleteSession({\n                    topic: e\n                }), new Error(r);\n            }\n        });\n    }\n    isValidSessionOrPairingTopic(e) {\n        return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n            if (this.checkRecentlyDeleted(e), this.client.session.keys.includes(e)) yield this.isValidSessionTopic(e);\n            else if (this.client.core.pairing.pairings.keys.includes(e)) this.isValidPairingTopic(e);\n            else if (me(e, !1)) {\n                let { message: r } = T(\"NO_MATCHING_KEY\", \"session or pairing topic doesn't exist: \".concat(e));\n                throw new Error(r);\n            } else {\n                let { message: r } = T(\"MISSING_OR_INVALID\", \"session or pairing topic should be a string: \".concat(e));\n                throw new Error(r);\n            }\n        });\n    }\n    isValidProposalId(e) {\n        return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n            if (!Fh(e)) {\n                let { message: r } = T(\"MISSING_OR_INVALID\", \"proposal id should be a number: \".concat(e));\n                throw new Error(r);\n            }\n            if (!this.client.proposal.keys.includes(e)) {\n                let { message: r } = T(\"NO_MATCHING_KEY\", \"proposal id doesn't exist: \".concat(e));\n                throw new Error(r);\n            }\n            if (Qe(this.client.proposal.get(e).expiryTimestamp)) {\n                yield this.deleteProposal(e);\n                let { message: r } = T(\"EXPIRED\", \"proposal id: \".concat(e));\n                throw new Error(r);\n            }\n        });\n    }\n    constructor(e){\n        var _this;\n        super(e), _this = this, this.name = e1, this.events = new hs.default, this.initialized = !1, this.ignoredPayloadTypes = [\n            ut\n        ], this.requestQueue = {\n            state: ft.idle,\n            queue: []\n        }, this.sessionRequestQueue = {\n            state: ft.idle,\n            queue: []\n        }, this.requestQueueDelay = ae.ONE_SECOND, this.recentlyDeletedMap = new Map, this.recentlyDeletedLimit = 200, this.init = ()=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                this.initialized || (yield this.cleanup(), this.registerRelayerEvents(), this.registerExpirerEvents(), this.registerPairingEvents(), this.client.core.pairing.register({\n                    methods: Object.keys(lt)\n                }), this.initialized = !0, setTimeout(()=>{\n                    this.sessionRequestQueue.queue = this.getPendingSessionRequests(), this.processSessionRequestQueue();\n                }, (0, ae.toMiliseconds)(this.requestQueueDelay)));\n            }), this.connect = (r)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                yield this.isInitialized();\n                let t = br(Fe({}, r), {\n                    requiredNamespaces: r.requiredNamespaces || {},\n                    optionalNamespaces: r.optionalNamespaces || {}\n                });\n                yield this.isValidConnect(t);\n                let { pairingTopic: s, requiredNamespaces: n, optionalNamespaces: o, sessionProperties: a, relays: c } = t, u = s, h, l = !1;\n                try {\n                    u && (l = this.client.core.pairing.pairings.get(u).active);\n                } catch (v) {\n                    throw this.client.logger.error(\"connect() -> pairing.get(\".concat(u, \") failed\")), v;\n                }\n                if (!u || !l) {\n                    let { topic: v, uri: S } = yield this.client.core.pairing.create();\n                    u = v, h = S;\n                }\n                if (!u) {\n                    let { message: v } = T(\"NO_MATCHING_KEY\", \"connect() pairing topic: \".concat(u));\n                    throw new Error(v);\n                }\n                let p = yield this.client.core.crypto.generateKeyPair(), d = lt.wc_sessionPropose.req.ttl || ae.FIVE_MINUTES, g = Ce(d), w = Fe({\n                    requiredNamespaces: n,\n                    optionalNamespaces: o,\n                    relays: c != null ? c : [\n                        {\n                            protocol: zo\n                        }\n                    ],\n                    proposer: {\n                        publicKey: p,\n                        metadata: this.client.metadata\n                    },\n                    expiryTimestamp: g\n                }, a && {\n                    sessionProperties: a\n                }), { reject: b, resolve: E, done: I } = vt(d, Qb);\n                this.events.once(oe(\"session_connect\"), (N)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, [\n                        N\n                    ], function*(param) {\n                        let { error: v, session: S } = param;\n                        if (v) b(v);\n                        else if (S) {\n                            S.self.publicKey = p;\n                            let y = br(Fe({}, S), {\n                                requiredNamespaces: w.requiredNamespaces,\n                                optionalNamespaces: w.optionalNamespaces\n                            });\n                            yield this.client.session.set(S.topic, y), yield this.setExpiry(S.topic, S.expiry), u && (yield this.client.core.pairing.updateMetadata({\n                                topic: u,\n                                metadata: S.peer.metadata\n                            })), E(y);\n                        }\n                    }));\n                let _ = yield this.sendRequest({\n                    topic: u,\n                    method: \"wc_sessionPropose\",\n                    params: w,\n                    throwOnFailedPublish: !0\n                });\n                return yield this.setProposal(_, Fe({\n                    id: _\n                }, w)), {\n                    uri: h,\n                    approval: I\n                };\n            }), this.pair = (r)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                yield this.isInitialized();\n                try {\n                    return yield this.client.core.pairing.pair(r);\n                } catch (t) {\n                    throw this.client.logger.error(\"pair() failed\"), t;\n                }\n            }), this.approve = (r)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                yield this.isInitialized();\n                try {\n                    yield this.isValidApprove(r);\n                } catch (E) {\n                    throw this.client.logger.error(\"approve() -> isValidApprove() failed\"), E;\n                }\n                let { id: t, relayProtocol: s, namespaces: n, sessionProperties: o } = r, a;\n                try {\n                    a = this.client.proposal.get(t);\n                } catch (E) {\n                    throw this.client.logger.error(\"approve() -> proposal.get(\".concat(t, \") failed\")), E;\n                }\n                let { pairingTopic: c, proposer: u, requiredNamespaces: h, optionalNamespaces: l } = a;\n                c = c || \"\";\n                let p = yield this.client.core.crypto.generateKeyPair(), d = u.publicKey, g = yield this.client.core.crypto.generateSharedKey(p, d), w = Fe({\n                    relay: {\n                        protocol: s != null ? s : \"irn\"\n                    },\n                    namespaces: n,\n                    pairingTopic: c,\n                    controller: {\n                        publicKey: p,\n                        metadata: this.client.metadata\n                    },\n                    expiry: Ce(cs)\n                }, o && {\n                    sessionProperties: o\n                });\n                yield this.client.core.relayer.subscribe(g);\n                let b = br(Fe({}, w), {\n                    topic: g,\n                    requiredNamespaces: h,\n                    optionalNamespaces: l,\n                    pairingTopic: c,\n                    acknowledged: !1,\n                    self: w.controller,\n                    peer: {\n                        publicKey: u.publicKey,\n                        metadata: u.metadata\n                    },\n                    controller: p\n                });\n                yield this.client.session.set(g, b);\n                try {\n                    yield this.sendResult({\n                        id: t,\n                        topic: c,\n                        result: {\n                            relay: {\n                                protocol: s != null ? s : \"irn\"\n                            },\n                            responderPublicKey: p\n                        },\n                        throwOnFailedPublish: !0\n                    }), yield this.sendRequest({\n                        topic: g,\n                        method: \"wc_sessionSettle\",\n                        params: w,\n                        throwOnFailedPublish: !0\n                    });\n                } catch (E) {\n                    throw this.client.logger.error(E), this.client.session.delete(g, de(\"USER_DISCONNECTED\")), yield this.client.core.relayer.unsubscribe(g), E;\n                }\n                return yield this.client.core.pairing.updateMetadata({\n                    topic: c,\n                    metadata: u.metadata\n                }), yield this.client.proposal.delete(t, de(\"USER_DISCONNECTED\")), yield this.client.core.pairing.activate({\n                    topic: c\n                }), yield this.setExpiry(g, Ce(cs)), {\n                    topic: g,\n                    acknowledged: ()=>new Promise((E)=>setTimeout(()=>E(this.client.session.get(g)), 500))\n                };\n            }), this.reject = (r)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                yield this.isInitialized();\n                try {\n                    yield this.isValidReject(r);\n                } catch (o) {\n                    throw this.client.logger.error(\"reject() -> isValidReject() failed\"), o;\n                }\n                let { id: t, reason: s } = r, n;\n                try {\n                    n = this.client.proposal.get(t).pairingTopic;\n                } catch (o) {\n                    throw this.client.logger.error(\"reject() -> proposal.get(\".concat(t, \") failed\")), o;\n                }\n                n && (yield this.sendError(t, n, s), yield this.client.proposal.delete(t, de(\"USER_DISCONNECTED\")));\n            }), this.update = (r)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                yield this.isInitialized();\n                try {\n                    yield this.isValidUpdate(r);\n                } catch (l) {\n                    throw this.client.logger.error(\"update() -> isValidUpdate() failed\"), l;\n                }\n                let { topic: t, namespaces: s } = r, { done: n, resolve: o, reject: a } = vt(), c = St(), u = He().toString(), h = this.client.session.get(t).namespaces;\n                return this.events.once(oe(\"session_update\", c), (p)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, [\n                        p\n                    ], function*(param) {\n                        let { error: l } = param;\n                        l ? a(l) : (yield this.client.session.update(t, {\n                            namespaces: s\n                        }), o());\n                    })), this.sendRequest({\n                    topic: t,\n                    method: \"wc_sessionUpdate\",\n                    params: {\n                        namespaces: s\n                    },\n                    throwOnFailedPublish: !0,\n                    clientRpcId: c,\n                    relayRpcId: u\n                }).catch((l)=>{\n                    this.client.logger.error(l), this.client.session.update(t, {\n                        namespaces: h\n                    }), a(l);\n                }), {\n                    acknowledged: n\n                };\n            }), this.extend = (r)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                yield this.isInitialized();\n                try {\n                    yield this.isValidExtend(r);\n                } catch (c) {\n                    throw this.client.logger.error(\"extend() -> isValidExtend() failed\"), c;\n                }\n                let { topic: t } = r, s = St(), { done: n, resolve: o, reject: a } = vt();\n                return this.events.once(oe(\"session_extend\", s), (param)=>{\n                    let { error: c } = param;\n                    c ? a(c) : o();\n                }), yield this.setExpiry(t, Ce(cs)), this.sendRequest({\n                    topic: t,\n                    method: \"wc_sessionExtend\",\n                    params: {},\n                    clientRpcId: s,\n                    throwOnFailedPublish: !0\n                }).catch((c)=>{\n                    a(c);\n                }), {\n                    acknowledged: n\n                };\n            }), this.request = (r)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                yield this.isInitialized();\n                try {\n                    yield this.isValidRequest(r);\n                } catch (p) {\n                    throw this.client.logger.error(\"request() -> isValidRequest() failed\"), p;\n                }\n                let { chainId: t, request: s, topic: n, expiry: o = lt.wc_sessionRequest.req.ttl } = r, a = St(), c = He().toString(), { done: u, resolve: h, reject: l } = vt(o, \"Request expired. Please try again.\");\n                return this.events.once(oe(\"session_request\", a), (param)=>{\n                    let { error: p, result: d } = param;\n                    p ? l(p) : h(d);\n                }), yield Promise.all([\n                    new Promise((p)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                            yield this.sendRequest({\n                                clientRpcId: a,\n                                relayRpcId: c,\n                                topic: n,\n                                method: \"wc_sessionRequest\",\n                                params: {\n                                    request: br(Fe({}, s), {\n                                        expiryTimestamp: Ce(o)\n                                    }),\n                                    chainId: t\n                                },\n                                expiry: o,\n                                throwOnFailedPublish: !0\n                            }).catch((d)=>l(d)), this.client.events.emit(\"session_request_sent\", {\n                                topic: n,\n                                request: s,\n                                chainId: t,\n                                id: a\n                            }), p();\n                        })),\n                    new Promise((p)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                            let d = yield Sh(this.client.core.storage, Jl);\n                            Dh({\n                                id: a,\n                                topic: n,\n                                wcDeepLink: d\n                            }), p();\n                        })),\n                    u()\n                ]).then((p)=>p[2]);\n            }), this.respond = (r)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                yield this.isInitialized(), yield this.isValidRespond(r);\n                let { topic: t, response: s } = r, { id: n } = s;\n                Ke(s) ? yield this.sendResult({\n                    id: n,\n                    topic: t,\n                    result: s.result,\n                    throwOnFailedPublish: !0\n                }) : Le(s) && (yield this.sendError(n, t, s.error)), this.cleanupAfterResponse(r);\n            }), this.ping = (r)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                yield this.isInitialized();\n                try {\n                    yield this.isValidPing(r);\n                } catch (s) {\n                    throw this.client.logger.error(\"ping() -> isValidPing() failed\"), s;\n                }\n                let { topic: t } = r;\n                if (this.client.session.keys.includes(t)) {\n                    let s = St(), n = He().toString(), { done: o, resolve: a, reject: c } = vt();\n                    this.events.once(oe(\"session_ping\", s), (param)=>{\n                        let { error: u } = param;\n                        u ? c(u) : a();\n                    }), yield Promise.all([\n                        this.sendRequest({\n                            topic: t,\n                            method: \"wc_sessionPing\",\n                            params: {},\n                            throwOnFailedPublish: !0,\n                            clientRpcId: s,\n                            relayRpcId: n\n                        }),\n                        o()\n                    ]);\n                } else this.client.core.pairing.pairings.keys.includes(t) && (yield this.client.core.pairing.ping({\n                    topic: t\n                }));\n            }), this.emit = (r)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                yield this.isInitialized(), yield this.isValidEmit(r);\n                let { topic: t, event: s, chainId: n } = r, o = He().toString();\n                yield this.sendRequest({\n                    topic: t,\n                    method: \"wc_sessionEvent\",\n                    params: {\n                        event: s,\n                        chainId: n\n                    },\n                    throwOnFailedPublish: !0,\n                    relayRpcId: o\n                });\n            }), this.disconnect = (r)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                yield this.isInitialized(), yield this.isValidDisconnect(r);\n                let { topic: t } = r;\n                if (this.client.session.keys.includes(t)) yield this.sendRequest({\n                    topic: t,\n                    method: \"wc_sessionDelete\",\n                    params: de(\"USER_DISCONNECTED\"),\n                    throwOnFailedPublish: !0\n                }), yield this.deleteSession({\n                    topic: t,\n                    emitEvent: !1\n                });\n                else if (this.client.core.pairing.pairings.keys.includes(t)) yield this.client.core.pairing.disconnect({\n                    topic: t\n                });\n                else {\n                    let { message: s } = T(\"MISMATCHED_TOPIC\", \"Session or pairing topic not found: \".concat(t));\n                    throw new Error(s);\n                }\n            }), this.find = (r)=>(this.isInitialized(), this.client.session.getAll().filter((t)=>Rh(t, r))), this.getPendingSessionRequests = ()=>this.client.pendingRequest.getAll(), this.cleanupDuplicatePairings = (r)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                if (r.pairingTopic) try {\n                    let t = this.client.core.pairing.pairings.get(r.pairingTopic), s = this.client.core.pairing.pairings.getAll().filter((n)=>{\n                        var o, a;\n                        return ((o = n.peerMetadata) == null ? void 0 : o.url) && ((a = n.peerMetadata) == null ? void 0 : a.url) === r.peer.metadata.url && n.topic && n.topic !== t.topic;\n                    });\n                    if (s.length === 0) return;\n                    this.client.logger.info(\"Cleaning up \".concat(s.length, \" duplicate pairing(s)\")), yield Promise.all(s.map((n)=>this.client.core.pairing.disconnect({\n                            topic: n.topic\n                        }))), this.client.logger.info(\"Duplicate pairings clean up finished\");\n                } catch (t) {\n                    this.client.logger.error(t);\n                }\n            }), this.deleteSession = (r)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                let { topic: t, expirerHasDeleted: s = !1, emitEvent: n = !0, id: o = 0 } = r, { self: a } = this.client.session.get(t);\n                yield this.client.core.relayer.unsubscribe(t), yield this.client.session.delete(t, de(\"USER_DISCONNECTED\")), this.addToRecentlyDeleted(t, \"session\"), this.client.core.crypto.keychain.has(a.publicKey) && (yield this.client.core.crypto.deleteKeyPair(a.publicKey)), this.client.core.crypto.keychain.has(t) && (yield this.client.core.crypto.deleteSymKey(t)), s || this.client.core.expirer.del(t), this.client.core.storage.removeItem(Jl).catch((c)=>this.client.logger.warn(c)), this.getPendingSessionRequests().forEach((c)=>{\n                    c.topic === t && this.deletePendingSessionRequest(c.id, de(\"USER_DISCONNECTED\"));\n                }), n && this.client.events.emit(\"session_delete\", {\n                    id: o,\n                    topic: t\n                });\n            }), this.deleteProposal = (r, t)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                yield Promise.all([\n                    this.client.proposal.delete(r, de(\"USER_DISCONNECTED\")),\n                    t ? Promise.resolve() : this.client.core.expirer.del(r)\n                ]), this.addToRecentlyDeleted(r, \"proposal\");\n            }), this.deletePendingSessionRequest = function(r, t) {\n            let s = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1;\n            return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(_this, null, function*() {\n                yield Promise.all([\n                    this.client.pendingRequest.delete(r, t),\n                    s ? Promise.resolve() : this.client.core.expirer.del(r)\n                ]), this.addToRecentlyDeleted(r, \"request\"), this.sessionRequestQueue.queue = this.sessionRequestQueue.queue.filter((n)=>n.id !== r), s && (this.sessionRequestQueue.state = ft.idle, this.client.events.emit(\"session_request_expire\", {\n                    id: r\n                }));\n            });\n        }, this.setExpiry = (r, t)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                this.client.session.keys.includes(r) && (yield this.client.session.update(r, {\n                    expiry: t\n                })), this.client.core.expirer.set(r, t);\n            }), this.setProposal = (r, t)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                yield this.client.proposal.set(r, t), this.client.core.expirer.set(r, Ce(lt.wc_sessionPropose.req.ttl));\n            }), this.setPendingSessionRequest = (r)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                let { id: t, topic: s, params: n, verifyContext: o } = r, a = n.request.expiryTimestamp || Ce(lt.wc_sessionRequest.req.ttl);\n                yield this.client.pendingRequest.set(t, {\n                    id: t,\n                    topic: s,\n                    params: n,\n                    verifyContext: o\n                }), a && this.client.core.expirer.set(t, a);\n            }), this.sendRequest = (r)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                let { topic: t, method: s, params: n, expiry: o, relayRpcId: a, clientRpcId: c, throwOnFailedPublish: u } = r, h = Ze(s, n, c);\n                if (Et() && r1.includes(s)) {\n                    let d = bt(JSON.stringify(h));\n                    this.client.core.verify.register({\n                        attestationId: d\n                    });\n                }\n                let l;\n                try {\n                    l = yield this.client.core.crypto.encode(t, h);\n                } catch (d) {\n                    throw yield this.cleanup(), this.client.logger.error(\"sendRequest() -> core.crypto.encode() for topic \".concat(t, \" failed\")), d;\n                }\n                let p = lt[s].req;\n                return o && (p.ttl = o), a && (p.id = a), this.client.core.history.set(t, h), u ? (p.internal = br(Fe({}, p.internal), {\n                    throwOnFailedPublish: !0\n                }), yield this.client.core.relayer.publish(t, l, p)) : this.client.core.relayer.publish(t, l, p).catch((d)=>this.client.logger.error(d)), h.id;\n            }), this.sendResult = (r)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                let { id: t, topic: s, result: n, throwOnFailedPublish: o } = r, a = mr(t, n), c;\n                try {\n                    c = yield this.client.core.crypto.encode(s, a);\n                } catch (l) {\n                    throw yield this.cleanup(), this.client.logger.error(\"sendResult() -> core.crypto.encode() for topic \".concat(s, \" failed\")), l;\n                }\n                let u;\n                try {\n                    u = yield this.client.core.history.get(s, t);\n                } catch (l) {\n                    throw this.client.logger.error(\"sendResult() -> history.get(\".concat(s, \", \").concat(t, \") failed\")), l;\n                }\n                let h = lt[u.request.method].res;\n                o ? (h.internal = br(Fe({}, h.internal), {\n                    throwOnFailedPublish: !0\n                }), yield this.client.core.relayer.publish(s, c, h)) : this.client.core.relayer.publish(s, c, h).catch((l)=>this.client.logger.error(l)), yield this.client.core.history.resolve(a);\n            }), this.sendError = (r, t, s)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                let n = qt(r, s), o;\n                try {\n                    o = yield this.client.core.crypto.encode(t, n);\n                } catch (u) {\n                    throw yield this.cleanup(), this.client.logger.error(\"sendError() -> core.crypto.encode() for topic \".concat(t, \" failed\")), u;\n                }\n                let a;\n                try {\n                    a = yield this.client.core.history.get(t, r);\n                } catch (u) {\n                    throw this.client.logger.error(\"sendError() -> history.get(\".concat(t, \", \").concat(r, \") failed\")), u;\n                }\n                let c = lt[a.request.method].res;\n                this.client.core.relayer.publish(t, o, c), yield this.client.core.history.resolve(n);\n            }), this.cleanup = ()=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                let r = [], t = [];\n                this.client.session.getAll().forEach((s)=>{\n                    let n = !1;\n                    Qe(s.expiry) && (n = !0), this.client.core.crypto.keychain.has(s.topic) || (n = !0), n && r.push(s.topic);\n                }), this.client.proposal.getAll().forEach((s)=>{\n                    Qe(s.expiryTimestamp) && t.push(s.id);\n                }), yield Promise.all([\n                    ...r.map((s)=>this.deleteSession({\n                            topic: s\n                        })),\n                    ...t.map((s)=>this.deleteProposal(s))\n                ]);\n            }), this.onRelayEventRequest = (r)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                this.requestQueue.queue.push(r), yield this.processRequestsQueue();\n            }), this.processRequestsQueue = ()=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                if (this.requestQueue.state === ft.active) {\n                    this.client.logger.info(\"Request queue already active, skipping...\");\n                    return;\n                }\n                for(this.client.logger.info(\"Request queue starting with \".concat(this.requestQueue.queue.length, \" requests\")); this.requestQueue.queue.length > 0;){\n                    this.requestQueue.state = ft.active;\n                    let r = this.requestQueue.queue.shift();\n                    if (r) try {\n                        this.processRequest(r), yield new Promise((t)=>setTimeout(t, 300));\n                    } catch (t) {\n                        this.client.logger.warn(t);\n                    }\n                }\n                this.requestQueue.state = ft.idle;\n            }), this.processRequest = (r)=>{\n            let { topic: t, payload: s } = r, n = s.method;\n            switch(n){\n                case \"wc_sessionPropose\":\n                    return this.onSessionProposeRequest(t, s);\n                case \"wc_sessionSettle\":\n                    return this.onSessionSettleRequest(t, s);\n                case \"wc_sessionUpdate\":\n                    return this.onSessionUpdateRequest(t, s);\n                case \"wc_sessionExtend\":\n                    return this.onSessionExtendRequest(t, s);\n                case \"wc_sessionPing\":\n                    return this.onSessionPingRequest(t, s);\n                case \"wc_sessionDelete\":\n                    return this.onSessionDeleteRequest(t, s);\n                case \"wc_sessionRequest\":\n                    return this.onSessionRequest(t, s);\n                case \"wc_sessionEvent\":\n                    return this.onSessionEventRequest(t, s);\n                default:\n                    return this.client.logger.info(\"Unsupported request method \".concat(n));\n            }\n        }, this.onRelayEventResponse = (r)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                let { topic: t, payload: s } = r, n = (yield this.client.core.history.get(t, s.id)).request.method;\n                switch(n){\n                    case \"wc_sessionPropose\":\n                        return this.onSessionProposeResponse(t, s);\n                    case \"wc_sessionSettle\":\n                        return this.onSessionSettleResponse(t, s);\n                    case \"wc_sessionUpdate\":\n                        return this.onSessionUpdateResponse(t, s);\n                    case \"wc_sessionExtend\":\n                        return this.onSessionExtendResponse(t, s);\n                    case \"wc_sessionPing\":\n                        return this.onSessionPingResponse(t, s);\n                    case \"wc_sessionRequest\":\n                        return this.onSessionRequestResponse(t, s);\n                    default:\n                        return this.client.logger.info(\"Unsupported response method \".concat(n));\n                }\n            }), this.onRelayEventUnknownPayload = (r)=>{\n            let { topic: t } = r, { message: s } = T(\"MISSING_OR_INVALID\", \"Decoded payload on topic \".concat(t, \" is not identifiable as a JSON-RPC request or a response.\"));\n            throw new Error(s);\n        }, this.onSessionProposeRequest = (r, t)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                let { params: s, id: n } = t;\n                try {\n                    this.isValidConnect(Fe({}, t.params));\n                    let o = s.expiryTimestamp || Ce(lt.wc_sessionPropose.req.ttl), a = Fe({\n                        id: n,\n                        pairingTopic: r,\n                        expiryTimestamp: o\n                    }, s);\n                    yield this.setProposal(n, a);\n                    let c = bt(JSON.stringify(t)), u = yield this.getVerifyContext(c, a.proposer.metadata);\n                    this.client.events.emit(\"session_proposal\", {\n                        id: n,\n                        params: a,\n                        verifyContext: u\n                    });\n                } catch (o) {\n                    yield this.sendError(n, r, o), this.client.logger.error(o);\n                }\n            }), this.onSessionProposeResponse = (r, t)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                let { id: s } = t;\n                if (Ke(t)) {\n                    let { result: n } = t;\n                    this.client.logger.trace({\n                        type: \"method\",\n                        method: \"onSessionProposeResponse\",\n                        result: n\n                    });\n                    let o = this.client.proposal.get(s);\n                    this.client.logger.trace({\n                        type: \"method\",\n                        method: \"onSessionProposeResponse\",\n                        proposal: o\n                    });\n                    let a = o.proposer.publicKey;\n                    this.client.logger.trace({\n                        type: \"method\",\n                        method: \"onSessionProposeResponse\",\n                        selfPublicKey: a\n                    });\n                    let c = n.responderPublicKey;\n                    this.client.logger.trace({\n                        type: \"method\",\n                        method: \"onSessionProposeResponse\",\n                        peerPublicKey: c\n                    });\n                    let u = yield this.client.core.crypto.generateSharedKey(a, c);\n                    this.client.logger.trace({\n                        type: \"method\",\n                        method: \"onSessionProposeResponse\",\n                        sessionTopic: u\n                    });\n                    let h = yield this.client.core.relayer.subscribe(u);\n                    this.client.logger.trace({\n                        type: \"method\",\n                        method: \"onSessionProposeResponse\",\n                        subscriptionId: h\n                    }), yield this.client.core.pairing.activate({\n                        topic: r\n                    });\n                } else if (Le(t)) {\n                    yield this.client.proposal.delete(s, de(\"USER_DISCONNECTED\"));\n                    let n = oe(\"session_connect\");\n                    if (this.events.listenerCount(n) === 0) throw new Error(\"emitting \".concat(n, \" without any listeners, 954\"));\n                    this.events.emit(oe(\"session_connect\"), {\n                        error: t.error\n                    });\n                }\n            }), this.onSessionSettleRequest = (r, t)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                let { id: s, params: n } = t;\n                try {\n                    this.isValidSessionSettleRequest(n);\n                    let { relay: o, controller: a, expiry: c, namespaces: u, sessionProperties: h, pairingTopic: l } = t.params, p = Fe({\n                        topic: r,\n                        relay: o,\n                        expiry: c,\n                        namespaces: u,\n                        acknowledged: !0,\n                        pairingTopic: l,\n                        requiredNamespaces: {},\n                        optionalNamespaces: {},\n                        controller: a.publicKey,\n                        self: {\n                            publicKey: \"\",\n                            metadata: this.client.metadata\n                        },\n                        peer: {\n                            publicKey: a.publicKey,\n                            metadata: a.metadata\n                        }\n                    }, h && {\n                        sessionProperties: h\n                    });\n                    yield this.sendResult({\n                        id: t.id,\n                        topic: r,\n                        result: !0,\n                        throwOnFailedPublish: !0\n                    });\n                    let d = oe(\"session_connect\");\n                    if (this.events.listenerCount(d) === 0) throw new Error(\"emitting \".concat(d, \" without any listeners 997\"));\n                    this.events.emit(oe(\"session_connect\"), {\n                        session: p\n                    }), this.cleanupDuplicatePairings(p);\n                } catch (o) {\n                    yield this.sendError(s, r, o), this.client.logger.error(o);\n                }\n            }), this.onSessionSettleResponse = (r, t)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                let { id: s } = t;\n                Ke(t) ? (yield this.client.session.update(r, {\n                    acknowledged: !0\n                }), this.events.emit(oe(\"session_approve\", s), {})) : Le(t) && (yield this.client.session.delete(r, de(\"USER_DISCONNECTED\")), this.events.emit(oe(\"session_approve\", s), {\n                    error: t.error\n                }));\n            }), this.onSessionUpdateRequest = (r, t)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                let { params: s, id: n } = t;\n                try {\n                    let o = \"\".concat(r, \"_session_update\"), a = mt.get(o);\n                    if (a && this.isRequestOutOfSync(a, n)) {\n                        this.client.logger.info(\"Discarding out of sync request - \".concat(n)), this.sendError(n, r, de(\"INVALID_UPDATE_REQUEST\"));\n                        return;\n                    }\n                    this.isValidUpdate(Fe({\n                        topic: r\n                    }, s));\n                    try {\n                        mt.set(o, n), yield this.client.session.update(r, {\n                            namespaces: s.namespaces\n                        }), yield this.sendResult({\n                            id: n,\n                            topic: r,\n                            result: !0,\n                            throwOnFailedPublish: !0\n                        });\n                    } catch (c) {\n                        throw mt.delete(o), c;\n                    }\n                    this.client.events.emit(\"session_update\", {\n                        id: n,\n                        topic: r,\n                        params: s\n                    });\n                } catch (o) {\n                    yield this.sendError(n, r, o), this.client.logger.error(o);\n                }\n            }), this.isRequestOutOfSync = (r, t)=>parseInt(t.toString().slice(0, -3)) <= parseInt(r.toString().slice(0, -3)), this.onSessionUpdateResponse = (r, t)=>{\n            let { id: s } = t, n = oe(\"session_update\", s);\n            if (this.events.listenerCount(n) === 0) throw new Error(\"emitting \".concat(n, \" without any listeners\"));\n            Ke(t) ? this.events.emit(oe(\"session_update\", s), {}) : Le(t) && this.events.emit(oe(\"session_update\", s), {\n                error: t.error\n            });\n        }, this.onSessionExtendRequest = (r, t)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                let { id: s } = t;\n                try {\n                    this.isValidExtend({\n                        topic: r\n                    }), yield this.setExpiry(r, Ce(cs)), yield this.sendResult({\n                        id: s,\n                        topic: r,\n                        result: !0,\n                        throwOnFailedPublish: !0\n                    }), this.client.events.emit(\"session_extend\", {\n                        id: s,\n                        topic: r\n                    });\n                } catch (n) {\n                    yield this.sendError(s, r, n), this.client.logger.error(n);\n                }\n            }), this.onSessionExtendResponse = (r, t)=>{\n            let { id: s } = t, n = oe(\"session_extend\", s);\n            if (this.events.listenerCount(n) === 0) throw new Error(\"emitting \".concat(n, \" without any listeners\"));\n            Ke(t) ? this.events.emit(oe(\"session_extend\", s), {}) : Le(t) && this.events.emit(oe(\"session_extend\", s), {\n                error: t.error\n            });\n        }, this.onSessionPingRequest = (r, t)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                let { id: s } = t;\n                try {\n                    this.isValidPing({\n                        topic: r\n                    }), yield this.sendResult({\n                        id: s,\n                        topic: r,\n                        result: !0,\n                        throwOnFailedPublish: !0\n                    }), this.client.events.emit(\"session_ping\", {\n                        id: s,\n                        topic: r\n                    });\n                } catch (n) {\n                    yield this.sendError(s, r, n), this.client.logger.error(n);\n                }\n            }), this.onSessionPingResponse = (r, t)=>{\n            let { id: s } = t, n = oe(\"session_ping\", s);\n            if (this.events.listenerCount(n) === 0) throw new Error(\"emitting \".concat(n, \" without any listeners\"));\n            setTimeout(()=>{\n                Ke(t) ? this.events.emit(oe(\"session_ping\", s), {}) : Le(t) && this.events.emit(oe(\"session_ping\", s), {\n                    error: t.error\n                });\n            }, 500);\n        }, this.onSessionDeleteRequest = (r, t)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                let { id: s } = t;\n                try {\n                    this.isValidDisconnect({\n                        topic: r,\n                        reason: t.params\n                    }), yield Promise.all([\n                        new Promise((n)=>{\n                            this.client.core.relayer.once(qe.publish, ()=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                                    n((yield this.deleteSession({\n                                        topic: r,\n                                        id: s\n                                    })));\n                                }));\n                        }),\n                        this.sendResult({\n                            id: s,\n                            topic: r,\n                            result: !0,\n                            throwOnFailedPublish: !0\n                        }),\n                        this.cleanupPendingSentRequestsForTopic({\n                            topic: r,\n                            error: de(\"USER_DISCONNECTED\")\n                        })\n                    ]);\n                } catch (n) {\n                    this.client.logger.error(n);\n                }\n            }), this.onSessionRequest = (r, t)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                let { id: s, params: n } = t;\n                try {\n                    this.isValidRequest(Fe({\n                        topic: r\n                    }, n));\n                    let o = bt(JSON.stringify(Ze(\"wc_sessionRequest\", n, s))), a = this.client.session.get(r), c = yield this.getVerifyContext(o, a.peer.metadata), u = {\n                        id: s,\n                        topic: r,\n                        params: n,\n                        verifyContext: c\n                    };\n                    yield this.setPendingSessionRequest(u), this.addSessionRequestToSessionRequestQueue(u), this.processSessionRequestQueue();\n                } catch (o) {\n                    yield this.sendError(s, r, o), this.client.logger.error(o);\n                }\n            }), this.onSessionRequestResponse = (r, t)=>{\n            let { id: s } = t, n = oe(\"session_request\", s);\n            if (this.events.listenerCount(n) === 0) throw new Error(\"emitting \".concat(n, \" without any listeners\"));\n            Ke(t) ? this.events.emit(oe(\"session_request\", s), {\n                result: t.result\n            }) : Le(t) && this.events.emit(oe(\"session_request\", s), {\n                error: t.error\n            });\n        }, this.onSessionEventRequest = (r, t)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                let { id: s, params: n } = t;\n                try {\n                    let o = \"\".concat(r, \"_session_event_\").concat(n.event.name), a = mt.get(o);\n                    if (a && this.isRequestOutOfSync(a, s)) {\n                        this.client.logger.info(\"Discarding out of sync request - \".concat(s));\n                        return;\n                    }\n                    this.isValidEmit(Fe({\n                        topic: r\n                    }, n)), this.client.events.emit(\"session_event\", {\n                        id: s,\n                        topic: r,\n                        params: n\n                    }), mt.set(o, s);\n                } catch (o) {\n                    yield this.sendError(s, r, o), this.client.logger.error(o);\n                }\n            }), this.addSessionRequestToSessionRequestQueue = (r)=>{\n            this.sessionRequestQueue.queue.push(r);\n        }, this.cleanupAfterResponse = (r)=>{\n            this.deletePendingSessionRequest(r.response.id, {\n                message: \"fulfilled\",\n                code: 0\n            }), setTimeout(()=>{\n                this.sessionRequestQueue.state = ft.idle, this.processSessionRequestQueue();\n            }, (0, ae.toMiliseconds)(this.requestQueueDelay));\n        }, this.cleanupPendingSentRequestsForTopic = (param)=>{\n            let { topic: r, error: t } = param;\n            let s = this.client.core.history.pending;\n            s.length > 0 && s.filter((n)=>n.topic === r && n.request.method === \"wc_sessionRequest\").forEach((n)=>{\n                let o = n.request.id, a = oe(\"session_request\", o);\n                if (this.events.listenerCount(a) === 0) throw new Error(\"emitting \".concat(a, \" without any listeners\"));\n                this.events.emit(oe(\"session_request\", n.request.id), {\n                    error: t\n                });\n            });\n        }, this.processSessionRequestQueue = ()=>{\n            if (this.sessionRequestQueue.state === ft.active) {\n                this.client.logger.info(\"session request queue is already active.\");\n                return;\n            }\n            let r = this.sessionRequestQueue.queue[0];\n            if (!r) {\n                this.client.logger.info(\"session request queue is empty.\");\n                return;\n            }\n            try {\n                this.sessionRequestQueue.state = ft.active, this.client.events.emit(\"session_request\", r);\n            } catch (t) {\n                this.client.logger.error(t);\n            }\n        }, this.onPairingCreated = (r)=>{\n            if (r.active) return;\n            let t = this.client.proposal.getAll().find((s)=>s.pairingTopic === r.topic);\n            t && this.onSessionProposeRequest(r.topic, Ze(\"wc_sessionPropose\", {\n                requiredNamespaces: t.requiredNamespaces,\n                optionalNamespaces: t.optionalNamespaces,\n                relays: t.relays,\n                proposer: t.proposer,\n                sessionProperties: t.sessionProperties\n            }, t.id));\n        }, this.isValidConnect = (r)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                if (!Te(r)) {\n                    let { message: c } = T(\"MISSING_OR_INVALID\", \"connect() params: \".concat(JSON.stringify(r)));\n                    throw new Error(c);\n                }\n                let { pairingTopic: t, requiredNamespaces: s, optionalNamespaces: n, sessionProperties: o, relays: a } = r;\n                if (_e(t) || (yield this.isValidPairingTopic(t)), !Lh(a, !0)) {\n                    let { message: c } = T(\"MISSING_OR_INVALID\", \"connect() relays: \".concat(a));\n                    throw new Error(c);\n                }\n                !_e(s) && Zr(s) !== 0 && this.validateNamespaces(s, \"requiredNamespaces\"), !_e(n) && Zr(n) !== 0 && this.validateNamespaces(n, \"optionalNamespaces\"), _e(o) || this.validateSessionProps(o, \"sessionProperties\");\n            }), this.validateNamespaces = (r, t)=>{\n            let s = Ah(r, \"connect()\", t);\n            if (s) throw new Error(s.message);\n        }, this.isValidApprove = (r)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                if (!Te(r)) throw new Error(T(\"MISSING_OR_INVALID\", \"approve() params: \".concat(r)).message);\n                let { id: t, namespaces: s, relayProtocol: n, sessionProperties: o } = r;\n                this.checkRecentlyDeleted(t), yield this.isValidProposalId(t);\n                let a = this.client.proposal.get(t), c = Wi(s, \"approve()\");\n                if (c) throw new Error(c.message);\n                let u = to(a.requiredNamespaces, s, \"approve()\");\n                if (u) throw new Error(u.message);\n                if (!me(n, !0)) {\n                    let { message: h } = T(\"MISSING_OR_INVALID\", \"approve() relayProtocol: \".concat(n));\n                    throw new Error(h);\n                }\n                _e(o) || this.validateSessionProps(o, \"sessionProperties\");\n            }), this.isValidReject = (r)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                if (!Te(r)) {\n                    let { message: n } = T(\"MISSING_OR_INVALID\", \"reject() params: \".concat(r));\n                    throw new Error(n);\n                }\n                let { id: t, reason: s } = r;\n                if (this.checkRecentlyDeleted(t), yield this.isValidProposalId(t), !Uh(s)) {\n                    let { message: n } = T(\"MISSING_OR_INVALID\", \"reject() reason: \".concat(JSON.stringify(s)));\n                    throw new Error(n);\n                }\n            }), this.isValidSessionSettleRequest = (r)=>{\n            if (!Te(r)) {\n                let { message: u } = T(\"MISSING_OR_INVALID\", \"onSessionSettleRequest() params: \".concat(r));\n                throw new Error(u);\n            }\n            let { relay: t, controller: s, namespaces: n, expiry: o } = r;\n            if (!Zn(t)) {\n                let { message: u } = T(\"MISSING_OR_INVALID\", \"onSessionSettleRequest() relay protocol should be a string\");\n                throw new Error(u);\n            }\n            let a = Ph(s, \"onSessionSettleRequest()\");\n            if (a) throw new Error(a.message);\n            let c = Wi(n, \"onSessionSettleRequest()\");\n            if (c) throw new Error(c.message);\n            if (Qe(o)) {\n                let { message: u } = T(\"EXPIRED\", \"onSessionSettleRequest()\");\n                throw new Error(u);\n            }\n        }, this.isValidUpdate = (r)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                if (!Te(r)) {\n                    let { message: c } = T(\"MISSING_OR_INVALID\", \"update() params: \".concat(r));\n                    throw new Error(c);\n                }\n                let { topic: t, namespaces: s } = r;\n                this.checkRecentlyDeleted(t), yield this.isValidSessionTopic(t);\n                let n = this.client.session.get(t), o = Wi(s, \"update()\");\n                if (o) throw new Error(o.message);\n                let a = to(n.requiredNamespaces, s, \"update()\");\n                if (a) throw new Error(a.message);\n            }), this.isValidExtend = (r)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                if (!Te(r)) {\n                    let { message: s } = T(\"MISSING_OR_INVALID\", \"extend() params: \".concat(r));\n                    throw new Error(s);\n                }\n                let { topic: t } = r;\n                this.checkRecentlyDeleted(t), yield this.isValidSessionTopic(t);\n            }), this.isValidRequest = (r)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                if (!Te(r)) {\n                    let { message: c } = T(\"MISSING_OR_INVALID\", \"request() params: \".concat(r));\n                    throw new Error(c);\n                }\n                let { topic: t, request: s, chainId: n, expiry: o } = r;\n                this.checkRecentlyDeleted(t), yield this.isValidSessionTopic(t);\n                let { namespaces: a } = this.client.session.get(t);\n                if (!eo(a, n)) {\n                    let { message: c } = T(\"MISSING_OR_INVALID\", \"request() chainId: \".concat(n));\n                    throw new Error(c);\n                }\n                if (!Mh(s)) {\n                    let { message: c } = T(\"MISSING_OR_INVALID\", \"request() \".concat(JSON.stringify(s)));\n                    throw new Error(c);\n                }\n                if (!Bh(a, n, s.method)) {\n                    let { message: c } = T(\"MISSING_OR_INVALID\", \"request() method: \".concat(s.method));\n                    throw new Error(c);\n                }\n                if (o && !zh(o, Ko)) {\n                    let { message: c } = T(\"MISSING_OR_INVALID\", \"request() expiry: \".concat(o, \". Expiry must be a number (in seconds) between \").concat(Ko.min, \" and \").concat(Ko.max));\n                    throw new Error(c);\n                }\n            }), this.isValidRespond = (r)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                var t;\n                if (!Te(r)) {\n                    let { message: o } = T(\"MISSING_OR_INVALID\", \"respond() params: \".concat(r));\n                    throw new Error(o);\n                }\n                let { topic: s, response: n } = r;\n                try {\n                    yield this.isValidSessionTopic(s);\n                } catch (o) {\n                    throw (t = r == null ? void 0 : r.response) != null && t.id && this.cleanupAfterResponse(r), o;\n                }\n                if (!qh(n)) {\n                    let { message: o } = T(\"MISSING_OR_INVALID\", \"respond() response: \".concat(JSON.stringify(n)));\n                    throw new Error(o);\n                }\n            }), this.isValidPing = (r)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                if (!Te(r)) {\n                    let { message: s } = T(\"MISSING_OR_INVALID\", \"ping() params: \".concat(r));\n                    throw new Error(s);\n                }\n                let { topic: t } = r;\n                yield this.isValidSessionOrPairingTopic(t);\n            }), this.isValidEmit = (r)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                if (!Te(r)) {\n                    let { message: a } = T(\"MISSING_OR_INVALID\", \"emit() params: \".concat(r));\n                    throw new Error(a);\n                }\n                let { topic: t, event: s, chainId: n } = r;\n                yield this.isValidSessionTopic(t);\n                let { namespaces: o } = this.client.session.get(t);\n                if (!eo(o, n)) {\n                    let { message: a } = T(\"MISSING_OR_INVALID\", \"emit() chainId: \".concat(n));\n                    throw new Error(a);\n                }\n                if (!jh(s)) {\n                    let { message: a } = T(\"MISSING_OR_INVALID\", \"emit() event: \".concat(JSON.stringify(s)));\n                    throw new Error(a);\n                }\n                if (!Vh(o, n, s.name)) {\n                    let { message: a } = T(\"MISSING_OR_INVALID\", \"emit() event: \".concat(JSON.stringify(s)));\n                    throw new Error(a);\n                }\n            }), this.isValidDisconnect = (r)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                if (!Te(r)) {\n                    let { message: s } = T(\"MISSING_OR_INVALID\", \"disconnect() params: \".concat(r));\n                    throw new Error(s);\n                }\n                let { topic: t } = r;\n                yield this.isValidSessionOrPairingTopic(t);\n            }), this.getVerifyContext = (r, t)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                let s = {\n                    verified: {\n                        verifyUrl: t.verifyUrl || Bt,\n                        validation: \"UNKNOWN\",\n                        origin: t.url || \"\"\n                    }\n                };\n                try {\n                    let n = yield this.client.core.verify.resolve({\n                        attestationId: r,\n                        verifyUrl: t.verifyUrl\n                    });\n                    n && (s.verified.origin = n.origin, s.verified.isScam = n.isScam, s.verified.validation = n.origin === new URL(t.url).origin ? \"VALID\" : \"INVALID\");\n                } catch (n) {\n                    this.client.logger.info(n);\n                }\n                return this.client.logger.info(\"Verify context: \".concat(JSON.stringify(s))), s;\n            }), this.validateSessionProps = (r, t)=>{\n            Object.values(r).forEach((s)=>{\n                if (!me(s, !1)) {\n                    let { message: n } = T(\"MISSING_OR_INVALID\", \"\".concat(t, \" must be in Record<string, string> format. Received: \").concat(JSON.stringify(s)));\n                    throw new Error(n);\n                }\n            });\n        }, this.addToRecentlyDeleted = (r, t)=>{\n            if (this.recentlyDeletedMap.set(r, t), this.recentlyDeletedMap.size >= this.recentlyDeletedLimit) {\n                let s = 0, n = this.recentlyDeletedLimit / 2;\n                for (let o of this.recentlyDeletedMap.keys()){\n                    if (s++ >= n) break;\n                    this.recentlyDeletedMap.delete(o);\n                }\n            }\n        }, this.checkRecentlyDeleted = (r)=>{\n            let t = this.recentlyDeletedMap.get(r);\n            if (t) {\n                let { message: s } = T(\"MISSING_OR_INVALID\", \"Record was recently deleted - \".concat(t, \": \").concat(r));\n                throw new Error(s);\n            }\n        };\n    }\n}, Ho = class extends Vt {\n    constructor(e, r){\n        super(e, r, Xb, Jo), this.core = e, this.logger = r;\n    }\n}, us = class extends Vt {\n    constructor(e, r){\n        super(e, r, Zb, Jo), this.core = e, this.logger = r;\n    }\n}, Go = class extends Vt {\n    constructor(e, r){\n        super(e, r, t1, Jo, (t)=>t.id), this.core = e, this.logger = r;\n    }\n}, Wo = class i extends _walletconnect_types__WEBPACK_IMPORTED_MODULE_2__.ISignClient {\n    static init(e) {\n        return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n            let r = new i(e);\n            return yield r.initialize(), r;\n        });\n    }\n    get context() {\n        return De(this.logger);\n    }\n    get pairing() {\n        return this.core.pairing.pairings;\n    }\n    initialize() {\n        return (0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n            this.logger.trace(\"Initialized\");\n            try {\n                yield this.core.start(), yield this.session.init(), yield this.proposal.init(), yield this.pendingRequest.init(), yield this.engine.init(), this.core.verify.init({\n                    verifyUrl: this.metadata.verifyUrl\n                }), this.logger.info(\"SignClient Initialization Success\");\n            } catch (e) {\n                throw this.logger.info(\"SignClient Initialization Failure\"), this.logger.error(e.message), e;\n            }\n        });\n    }\n    constructor(e){\n        super(e), this.protocol = Ql, this.version = Zl, this.name = $o.name, this.events = new hs.EventEmitter, this.on = (t, s)=>this.events.on(t, s), this.once = (t, s)=>this.events.once(t, s), this.off = (t, s)=>this.events.off(t, s), this.removeListener = (t, s)=>this.events.removeListener(t, s), this.removeAllListeners = (t)=>this.events.removeAllListeners(t), this.connect = (t)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                try {\n                    return yield this.engine.connect(t);\n                } catch (s) {\n                    throw this.logger.error(s.message), s;\n                }\n            }), this.pair = (t)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                try {\n                    return yield this.engine.pair(t);\n                } catch (s) {\n                    throw this.logger.error(s.message), s;\n                }\n            }), this.approve = (t)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                try {\n                    return yield this.engine.approve(t);\n                } catch (s) {\n                    throw this.logger.error(s.message), s;\n                }\n            }), this.reject = (t)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                try {\n                    return yield this.engine.reject(t);\n                } catch (s) {\n                    throw this.logger.error(s.message), s;\n                }\n            }), this.update = (t)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                try {\n                    return yield this.engine.update(t);\n                } catch (s) {\n                    throw this.logger.error(s.message), s;\n                }\n            }), this.extend = (t)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                try {\n                    return yield this.engine.extend(t);\n                } catch (s) {\n                    throw this.logger.error(s.message), s;\n                }\n            }), this.request = (t)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                try {\n                    return yield this.engine.request(t);\n                } catch (s) {\n                    throw this.logger.error(s.message), s;\n                }\n            }), this.respond = (t)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                try {\n                    return yield this.engine.respond(t);\n                } catch (s) {\n                    throw this.logger.error(s.message), s;\n                }\n            }), this.ping = (t)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                try {\n                    return yield this.engine.ping(t);\n                } catch (s) {\n                    throw this.logger.error(s.message), s;\n                }\n            }), this.emit = (t)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                try {\n                    return yield this.engine.emit(t);\n                } catch (s) {\n                    throw this.logger.error(s.message), s;\n                }\n            }), this.disconnect = (t)=>(0,_chunk_2DI3TDIG_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this, null, function*() {\n                try {\n                    return yield this.engine.disconnect(t);\n                } catch (s) {\n                    throw this.logger.error(s.message), s;\n                }\n            }), this.find = (t)=>{\n            try {\n                return this.engine.find(t);\n            } catch (s) {\n                throw this.logger.error(s.message), s;\n            }\n        }, this.getPendingSessionRequests = ()=>{\n            try {\n                return this.engine.getPendingSessionRequests();\n            } catch (t) {\n                throw this.logger.error(t.message), t;\n            }\n        }, this.name = (e == null ? void 0 : e.name) || $o.name, this.metadata = (e == null ? void 0 : e.metadata) || bh();\n        let r = typeof (e == null ? void 0 : e.logger) < \"u\" && typeof (e == null ? void 0 : e.logger) != \"string\" ? e.logger : (0, Qt.default)(Fr({\n            level: (e == null ? void 0 : e.logger) || $o.logger\n        }));\n        this.core = (e == null ? void 0 : e.core) || new Wl(e), this.logger = Se(r, this.name), this.session = new us(this.core, this.logger), this.proposal = new Ho(this.core, this.logger), this.pendingRequest = new Go(this.core, this.logger), this.engine = new ko(this);\n    }\n}, lx = us, fx = Wo;\n /*! Bundled license information:\n\ntslib/tslib.es6.js:\n  (*! *****************************************************************************\n  Copyright (c) Microsoft Corporation.\n  \n  Permission to use, copy, modify, and/or distribute this software for any\n  purpose with or without fee is hereby granted.\n  \n  THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\n  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\n  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\n  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\n  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\n  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\n  PERFORMANCE OF THIS SOFTWARE.\n  ***************************************************************************** *)\n\ntslib/tslib.es6.js:\n  (*! *****************************************************************************\n  Copyright (c) Microsoft Corporation.\n  \n  Permission to use, copy, modify, and/or distribute this software for any\n  purpose with or without fee is hereby granted.\n  \n  THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\n  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\n  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\n  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\n  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\n  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\n  PERFORMANCE OF THIS SOFTWARE.\n  ***************************************************************************** *)\n\ntslib/tslib.es6.js:\n  (*! *****************************************************************************\n  Copyright (c) Microsoft Corporation.\n  \n  Permission to use, copy, modify, and/or distribute this software for any\n  purpose with or without fee is hereby granted.\n  \n  THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\n  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\n  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\n  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\n  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\n  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\n  PERFORMANCE OF THIS SOFTWARE.\n  ***************************************************************************** *)\n*/  //# sourceMappingURL=index.es-GKCR6GAY.mjs.map\nvar _c, _c1, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12, _c13, _c14, _c15, _c16, _c17, _c18, _c19, _c20, _c21, _c22, _c23, _c24, _c25, _c26, _c27, _c28, _c29, _c30, _c31, _c32, _c33, _c34, _c35, _c36, _c37, _c38, _c39, _c40, _c41, _c42, _c43, _c44, _c45, _c46, _c47, _c48, _c49, _c50, _c51, _c52, _c53, _c54, _c55, _c56, _c57, _c58, _c59, _c60, _c61, _c62, _c63, _c64, _c65, _c66, _c67, _c68, _c69, _c70, _c71, _c72, _c73, _c74, _c75, _c76, _c77, _c78, _c79, _c80, _c81, _c82, _c83, _c84, _c85, _c86, _c87, _c88, _c89, _c90, _c91, _c92, _c93, _c94, _c95, _c96, _c97, _c98, _c99, _c100, _c101, _c102, _c103, _c104, _c105, _c106, _c107, _c108, _c109, _c110, _c111, _c112, _c113, _c114, _c115, _c116, _c117, _c118, _c119, _c120, _c121, _c122, _c123, _c124, _c125, _c126, _c127, _c128, _c129, _c130, _c131, _c132, _c133, _c134, _c135, _c136, _c137, _c138, _c139, _c140, _c141, _c142, _c143, _c144, _c145, _c146, _c147, _c148, _c149, _c150, _c151, _c152, _c153, _c154, _c155, _c156, _c157, _c158, _c159, _c160, _c161, _c162, _c163, _c164, _c165, _c166, _c167, _c168, _c169, _c170, _c171, _c172, _c173, _c174, _c175, _c176, _c177, _c178, _c179;\n$RefreshReg$(_c, \"Tf\");\n$RefreshReg$(_c1, \"Nf\");\n$RefreshReg$(_c2, \"Pf\");\n$RefreshReg$(_c3, \"Cf\");\n$RefreshReg$(_c4, \"Af\");\n$RefreshReg$(_c5, \"Lf\");\n$RefreshReg$(_c6, \"Ff\");\n$RefreshReg$(_c7, \"Uf\");\n$RefreshReg$(_c8, \"Mf\");\n$RefreshReg$(_c9, \"Dr\");\n$RefreshReg$(_c10, \"Bf\");\n$RefreshReg$(_c11, \"Vf\");\n$RefreshReg$(_c12, \"Kf\");\n$RefreshReg$(_c13, \"Hf\");\n$RefreshReg$(_c14, \"Gf\");\n$RefreshReg$(_c15, \"Wf\");\n$RefreshReg$(_c16, \"Jf\");\n$RefreshReg$(_c17, \"Yf\");\n$RefreshReg$(_c18, \"Xf\");\n$RefreshReg$(_c19, \"Qf\");\n$RefreshReg$(_c20, \"Zf\");\n$RefreshReg$(_c21, \"Ds\");\n$RefreshReg$(_c22, \"Ea\");\n$RefreshReg$(_c23, \"Rr\");\n$RefreshReg$(_c24, \"Ss$H\");\n$RefreshReg$(_c25, \"Ss\");\n$RefreshReg$(_c26, \"Ia$H\");\n$RefreshReg$(_c27, \"Ia\");\n$RefreshReg$(_c28, \"Oa$H\");\n$RefreshReg$(_c29, \"Oa\");\n$RefreshReg$(_c30, \"Ta$H\");\n$RefreshReg$(_c31, \"Ta\");\n$RefreshReg$(_c32, \"Na$H\");\n$RefreshReg$(_c33, \"Na\");\n$RefreshReg$(_c34, \"Pa$H\");\n$RefreshReg$(_c35, \"Pa\");\n$RefreshReg$(_c36, \"Tt$H\");\n$RefreshReg$(_c37, \"Tt\");\n$RefreshReg$(_c38, \"La$$t\");\n$RefreshReg$(_c39, \"La\");\n$RefreshReg$(_c40, \"Fa$H\");\n$RefreshReg$(_c41, \"Fa\");\n$RefreshReg$(_c42, \"Ps$H\");\n$RefreshReg$(_c43, \"Ps\");\n$RefreshReg$(_c44, \"Ua$H\");\n$RefreshReg$(_c45, \"Ua\");\n$RefreshReg$(_c46, \"As$H\");\n$RefreshReg$(_c47, \"As\");\n$RefreshReg$(_c48, \"Ma$H\");\n$RefreshReg$(_c49, \"Ma\");\n$RefreshReg$(_c50, \"Ba$H\");\n$RefreshReg$(_c51, \"Ba\");\n$RefreshReg$(_c52, \"Bs$H\");\n$RefreshReg$(_c53, \"Bs\");\n$RefreshReg$(_c54, \"Ya$H\");\n$RefreshReg$(_c55, \"Ya\");\n$RefreshReg$(_c56, \"Xa$H\");\n$RefreshReg$(_c57, \"Xa\");\n$RefreshReg$(_c58, \"Qa$H\");\n$RefreshReg$(_c59, \"Qa\");\n$RefreshReg$(_c60, \"Za$H\");\n$RefreshReg$(_c61, \"Za\");\n$RefreshReg$(_c62, \"Zt$H\");\n$RefreshReg$(_c63, \"Zt\");\n$RefreshReg$(_c64, \"Ur$H\");\n$RefreshReg$(_c65, \"Ur\");\n$RefreshReg$(_c66, \"Sc$H\");\n$RefreshReg$(_c67, \"Sc\");\n$RefreshReg$(_c68, \"Fi$H\");\n$RefreshReg$(_c69, \"Fi\");\n$RefreshReg$(_c70, \"Su$H\");\n$RefreshReg$(_c71, \"Su\");\n$RefreshReg$(_c72, \"Mn$H\");\n$RefreshReg$(_c73, \"Mn\");\n$RefreshReg$(_c74, \"Cu$H\");\n$RefreshReg$(_c75, \"Cu\");\n$RefreshReg$(_c76, \"Lu$H\");\n$RefreshReg$(_c77, \"Lu\");\n$RefreshReg$(_c78, \"Vu$H\");\n$RefreshReg$(_c79, \"Vu\");\n$RefreshReg$(_c80, \"Xu$H\");\n$RefreshReg$(_c81, \"Xu\");\n$RefreshReg$(_c82, \"Jm\");\n$RefreshReg$(_c83, \"Ym\");\n$RefreshReg$(_c84, \"Xm\");\n$RefreshReg$(_c85, \"Qm\");\n$RefreshReg$(_c86, \"Zm\");\n$RefreshReg$(_c87, \"Jh\");\n$RefreshReg$(_c88, \"Zh$H\");\n$RefreshReg$(_c89, \"Zh\");\n$RefreshReg$(_c90, \"R0\");\n$RefreshReg$(_c91, \"Er\");\n$RefreshReg$(_c92, \"Pe\");\n$RefreshReg$(_c93, \"Ot\");\n$RefreshReg$(_c94, \"Ge\");\n$RefreshReg$(_c95, \"Sf\");\n$RefreshReg$(_c96, \"Fr\");\n$RefreshReg$(_c97, \"Kd\");\n$RefreshReg$(_c98, \"De\");\n$RefreshReg$(_c99, \"Hd\");\n$RefreshReg$(_c100, \"Se\");\n$RefreshReg$(_c101, \"At\");\n$RefreshReg$(_c102, \"Vp\");\n$RefreshReg$(_c103, \"Kc\");\n$RefreshReg$(_c104, \"Ee\");\n$RefreshReg$(_c105, \"Ci\");\n$RefreshReg$(_c106, \"Ai\");\n$RefreshReg$(_c107, \"Xg\");\n$RefreshReg$(_c108, \"Nn\");\n$RefreshReg$(_c109, \"Nu\");\n$RefreshReg$(_c110, \"Uy\");\n$RefreshReg$(_c111, \"Tu\");\n$RefreshReg$(_c112, \"My\");\n$RefreshReg$(_c113, \"Yr\");\n$RefreshReg$(_c114, \"Gn\");\n$RefreshReg$(_c115, \"Wn\");\n$RefreshReg$(_c116, \"Mt\");\n$RefreshReg$(_c117, \"Et\");\n$RefreshReg$(_c118, \"Xr\");\n$RefreshReg$(_c119, \"Eh\");\n$RefreshReg$(_c120, \"Ut\");\n$RefreshReg$(_c121, \"Jn\");\n$RefreshReg$(_c122, \"Yn\");\n$RefreshReg$(_c123, \"Hi\");\n$RefreshReg$(_c124, \"Ce\");\n$RefreshReg$(_c125, \"Qe\");\n$RefreshReg$(_c126, \"Dh\");\n$RefreshReg$(_c127, \"Sh\");\n$RefreshReg$(_c128, \"Gi\");\n$RefreshReg$(_c129, \"Qr\");\n$RefreshReg$(_c130, \"Im\");\n$RefreshReg$(_c131, \"Xn\");\n$RefreshReg$(_c132, \"Rm\");\n$RefreshReg$(_c133, \"Om\");\n$RefreshReg$(_c134, \"Ih\");\n$RefreshReg$(_c135, \"Tm\");\n$RefreshReg$(_c136, \"Nm\");\n$RefreshReg$(_c137, \"Pm\");\n$RefreshReg$(_c138, \"T\");\n$RefreshReg$(_c139, \"Zr\");\n$RefreshReg$(_c140, \"Qn\");\n$RefreshReg$(_c141, \"Rh\");\n$RefreshReg$(_c142, \"Lm\");\n$RefreshReg$(_c143, \"Oh\");\n$RefreshReg$(_c144, \"Th\");\n$RefreshReg$(_c145, \"Nh\");\n$RefreshReg$(_c146, \"Ph\");\n$RefreshReg$(_c147, \"Fm\");\n$RefreshReg$(_c148, \"Um\");\n$RefreshReg$(_c149, \"Mm\");\n$RefreshReg$(_c150, \"Ch\");\n$RefreshReg$(_c151, \"Ah\");\n$RefreshReg$(_c152, \"Wi\");\n$RefreshReg$(_c153, \"Zn\");\n$RefreshReg$(_c154, \"Lh\");\n$RefreshReg$(_c155, \"Fh\");\n$RefreshReg$(_c156, \"Te\");\n$RefreshReg$(_c157, \"Uh\");\n$RefreshReg$(_c158, \"Mh\");\n$RefreshReg$(_c159, \"Bh\");\n$RefreshReg$(_c160, \"Vh\");\n$RefreshReg$(_c161, \"Bm\");\n$RefreshReg$(_c162, \"Vm\");\n$RefreshReg$(_c163, \"Km\");\n$RefreshReg$(_c164, \"Hm\");\n$RefreshReg$(_c165, \"Gm\");\n$RefreshReg$(_c166, \"Xi\");\n$RefreshReg$(_c167, \"Wh\");\n$RefreshReg$(_c168, \"Qi\");\n$RefreshReg$(_c169, \"Zi\");\n$RefreshReg$(_c170, \"Wm\");\n$RefreshReg$(_c171, \"St\");\n$RefreshReg$(_c172, \"He\");\n$RefreshReg$(_c173, \"Ze\");\n$RefreshReg$(_c174, \"It\");\n$RefreshReg$(_c175, \"Ke\");\n$RefreshReg$(_c176, \"Le\");\n$RefreshReg$(_c177, \"Iw\");\n$RefreshReg$(_c178, \"Rw\");\n$RefreshReg$(_c179, \"Kl\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/@swing.xyz/ui/dist/index.es-GKCR6GAY.mjs\n"));

/***/ })

}]);