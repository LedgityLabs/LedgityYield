"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.startuWebSocketsServer = startuWebSocketsServer;
const uWebSockets_1 = require("graphql-ws/lib/use/uWebSockets");
const getGraphQLWSOpts_js_1 = require("./getGraphQLWSOpts.js");
async function startuWebSocketsServer({ meshHTTPHandler, getBuiltMesh, sslCredentials, graphqlPath, hostname, port, }) {
    let uWebSocketsApp;
    if (sslCredentials) {
        const { SSLApp } = await Promise.resolve().then(() => __importStar(require('uWebSockets.js')));
        uWebSocketsApp = SSLApp({
            key_file_name: sslCredentials.key,
            cert_file_name: sslCredentials.cert,
        });
    }
    else {
        const { App } = await Promise.resolve().then(() => __importStar(require('uWebSockets.js')));
        uWebSocketsApp = App();
    }
    uWebSocketsApp.any('/*', meshHTTPHandler);
    const wsHandler = (0, uWebSockets_1.makeBehavior)((0, getGraphQLWSOpts_js_1.getGraphQLWSOptions)(getBuiltMesh));
    uWebSocketsApp.ws(graphqlPath, wsHandler);
    return new Promise(function (resolve, reject) {
        uWebSocketsApp.listen(hostname, port, listenSocket => {
            if (!listenSocket) {
                reject(new Error(`Failed to listen ${port} on ${hostname}`));
            }
            resolve({
                stop() {
                    uWebSocketsApp?.close?.();
                },
            });
        });
    });
}
