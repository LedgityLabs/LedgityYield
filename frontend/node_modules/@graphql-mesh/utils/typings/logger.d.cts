import type { LazyLoggerMessage, Logger } from '@graphql-mesh/types';
type MessageTransformer = (msg: string) => string;
export declare const warnColor: MessageTransformer;
export declare const infoColor: MessageTransformer;
export declare const errorColor: MessageTransformer;
export declare const debugColor: MessageTransformer;
export declare const titleBold: MessageTransformer;
export declare enum LogLevel {
    debug = 0,
    info = 1,
    warn = 2,
    error = 3,
    silent = 4
}
export declare class DefaultLogger implements Logger {
    name?: string;
    logLevel: LogLevel;
    private trim?;
    constructor(name?: string, logLevel?: LogLevel, trim?: number);
    private getLoggerMessage;
    private handleLazyMessage;
    private get isDebug();
    private get prefix();
    log(...args: any[]): VoidFunction;
    warn(...args: any[]): VoidFunction;
    info(...args: any[]): VoidFunction;
    error(...args: any[]): VoidFunction;
    debug(...lazyArgs: LazyLoggerMessage[]): VoidFunction;
    child(name: string): Logger;
    addPrefix(prefix: string): Logger;
    toJSON(): any;
}
export {};
