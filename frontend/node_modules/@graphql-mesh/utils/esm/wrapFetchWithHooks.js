import { iterateAsync } from './iterateAsync.js';
import { DefaultLogger } from './logger.js';
import { mapMaybePromise } from './map-maybe-promise.js';
export const requestIdByRequest = new WeakMap();
export const loggerForExecutionRequest = new WeakMap();
export function wrapFetchWithHooks(onFetchHooks) {
    return function wrappedFetchFn(url, options, context, info) {
        let fetchFn;
        const onFetchDoneHooks = [];
        return mapMaybePromise(iterateAsync(onFetchHooks, onFetch => onFetch({
            fetchFn,
            setFetchFn(newFetchFn) {
                fetchFn = newFetchFn;
            },
            url,
            setURL(newUrl) {
                url = String(newUrl);
            },
            options,
            setOptions(newOptions) {
                options = newOptions;
            },
            context,
            info,
            get executionRequest() {
                return info?.executionRequest;
            },
            get requestId() {
                if (context?.request) {
                    return requestIdByRequest.get(context.request);
                }
            },
            get logger() {
                let logger;
                if (info?.executionRequest) {
                    logger = loggerForExecutionRequest.get(info.executionRequest);
                }
                if (!logger) {
                    logger = new DefaultLogger('fetch');
                }
                if (context?.request) {
                    const requestId = requestIdByRequest.get(context.request);
                    if (requestId) {
                        logger = logger.child(requestId);
                    }
                }
                if (info?.executionRequest) {
                    loggerForExecutionRequest.set(info.executionRequest, logger);
                }
                return logger;
            },
        }), onFetchDoneHooks), function handleIterationResult() {
            const res$ = fetchFn(url, options, context, info);
            if (onFetchDoneHooks.length === 0) {
                return res$;
            }
            return mapMaybePromise(res$, function (response) {
                return mapMaybePromise(iterateAsync(onFetchDoneHooks, onFetchDone => onFetchDone({
                    response,
                    setResponse(newResponse) {
                        response = newResponse;
                    },
                })), function handleOnFetchDone() {
                    return response;
                });
            });
        });
    };
}
