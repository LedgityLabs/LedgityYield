"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useGraphQlJit = void 0;
const graphql_jit_1 = require("graphql-jit");
const value_or_promise_1 = require("value-or-promise");
const core_1 = require("@envelop/core");
const useGraphQlJit = (compilerOptions = {}, pluginOptions = {}) => {
    const jitCacheByDocumentString = pluginOptions.cache;
    const jitCacheByDocument = new WeakMap();
    function getCacheEntry(args) {
        let cacheEntry;
        cacheEntry = jitCacheByDocument.get(args.document);
        if (!cacheEntry && jitCacheByDocumentString) {
            const documentSource = (0, core_1.getDocumentString)(args.document);
            if (documentSource) {
                cacheEntry = jitCacheByDocumentString.get(documentSource);
            }
        }
        if (!cacheEntry) {
            const compilationResult = (0, graphql_jit_1.compileQuery)(args.schema, args.document, args.operationName ?? undefined, compilerOptions);
            if (!(0, graphql_jit_1.isCompiledQuery)(compilationResult)) {
                if (pluginOptions?.onError) {
                    pluginOptions.onError(compilationResult);
                }
                else {
                    console.error(compilationResult);
                }
                cacheEntry = {
                    query: () => compilationResult,
                    stringify: r => JSON.stringify(r),
                };
            }
            else {
                cacheEntry = compilationResult;
            }
            jitCacheByDocument.set(args.document, cacheEntry);
            if (jitCacheByDocumentString) {
                const documentSource = (0, core_1.getDocumentString)(args.document);
                if (documentSource) {
                    jitCacheByDocumentString.set(documentSource, cacheEntry);
                }
            }
        }
        return cacheEntry;
    }
    function jitExecutor(args) {
        const cacheEntry = getCacheEntry(args);
        const executeFn = cacheEntry.subscribe ? cacheEntry.subscribe : cacheEntry.query;
        return new value_or_promise_1.ValueOrPromise(() => executeFn(args.rootValue, args.contextValue, args.variableValues))
            .then(result => {
            result.stringify = cacheEntry.stringify;
            return result;
        })
            .resolve();
    }
    const executeFn = (0, core_1.makeExecute)(jitExecutor);
    const subscribeFn = (0, core_1.makeSubscribe)(jitExecutor);
    const enableIfFn = pluginOptions.enableIf;
    return {
        onExecute({ args, setExecuteFn }) {
            if (enableIfFn) {
                return new value_or_promise_1.ValueOrPromise(() => enableIfFn(args))
                    .then(enableIfRes => {
                    if (enableIfRes) {
                        setExecuteFn(executeFn);
                    }
                })
                    .resolve();
            }
            setExecuteFn(executeFn);
        },
        onSubscribe({ args, setSubscribeFn }) {
            if (enableIfFn) {
                return new value_or_promise_1.ValueOrPromise(() => enableIfFn(args))
                    .then(enableIfRes => {
                    if (enableIfRes) {
                        setSubscribeFn(subscribeFn);
                    }
                })
                    .resolve();
            }
            setSubscribeFn(subscribeFn);
        },
    };
};
exports.useGraphQlJit = useGraphQlJit;
