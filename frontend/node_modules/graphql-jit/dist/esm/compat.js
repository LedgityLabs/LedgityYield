"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveFieldDef = exports.getGraphQLErrorOptions = exports.formatError = exports.getOperationRootType = void 0;
const graphql_1 = require("graphql");
const errorUtilities = __importStar(require("graphql/error"));
const utilities = __importStar(require("graphql/utilities"));
const execute = __importStar(require("graphql/execution/execute"));
/**
 * A helper file to support backward compatibility for different versions of graphql-js.
 */
/**
 * v15 does not have schema.getRootType
 * v16 has both
 * v17 will not have getOperationRootType
 *
 * To support all these 3 versions of graphql-js, at least for migration, this helper
 * would be useful.
 *
 * This can be removed once we drop support for v15.
 *
 * GraphQL v17 would remove getOperationRootType.
 */
function getOperationRootType(schema, operation) {
    if (graphql_1.versionInfo.major < 16) {
        return utilities.getOperationRootType(schema, operation);
    }
    const type = schema.getRootType(operation.operation);
    if (!type) {
        throw new Error(`No root type for operation ${operation.operation}`);
    }
    return type;
}
exports.getOperationRootType = getOperationRootType;
/**
 * v16 and lower versions don't have .toJSON method on GraphQLError
 * v17 does have .toJSON and doesn't have "formatError" export anymore
 */
function formatError(error) {
    if (graphql_1.versionInfo.major < 16) {
        return errorUtilities.formatError(error);
    }
    return error.toJSON();
}
exports.formatError = formatError;
/**
 * v17 dropped support for positional arguments in GraphQLError constructor
 * https://github.com/graphql/graphql-js/pull/3577
 */
function getGraphQLErrorOptions(nodes) {
    if (graphql_1.versionInfo.major < 16) {
        return nodes;
    }
    return { nodes };
}
exports.getGraphQLErrorOptions = getGraphQLErrorOptions;
/**
 * Resolves the field on the given source object. In particular, this
 * figures out the value that the field returns by calling its resolve function,
 * then calls completeValue to complete promises, serialize scalars, or execute
 * the sub-selection-set for objects.
 *
 * v15 has getFieldDef that accepts field name
 * v16 has getFieldDef that accepts field node
 * v17 drops getFieldDef support and adds getField method
 */
function resolveFieldDef(compilationContext, parentType, fieldNodes) {
    const fieldNode = fieldNodes[0];
    if (graphql_1.versionInfo.major < 16) {
        const fieldName = fieldNode.name.value;
        return execute.getFieldDef(compilationContext.schema, parentType, fieldName);
    }
    if (graphql_1.versionInfo.major < 17) {
        return execute.getFieldDef(compilationContext.schema, parentType, fieldNode);
    }
    return compilationContext.schema.getField(parentType, fieldNode.name.value);
}
exports.resolveFieldDef = resolveFieldDef;
//# sourceMappingURL=compat.js.map