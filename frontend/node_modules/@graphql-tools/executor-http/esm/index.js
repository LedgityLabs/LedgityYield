import { ValueOrPromise } from 'value-or-promise';
import { createGraphQLError, getOperationASTFromRequest, } from '@graphql-tools/utils';
import { fetch as defaultFetch } from '@whatwg-node/fetch';
import { createFormDataFromVariables } from './createFormDataFromVariables.js';
import { defaultPrintFn } from './defaultPrintFn.js';
import { handleEventStreamResponse } from './handleEventStreamResponse.js';
import { handleMultipartMixedResponse } from './handleMultipartMixedResponse.js';
import { isLiveQueryOperationDefinitionNode } from './isLiveQueryOperationDefinitionNode.js';
import { prepareGETUrl } from './prepareGETUrl.js';
export function buildHTTPExecutor(options) {
    const printFn = options?.print ?? defaultPrintFn;
    let disposeCtrl;
    const baseExecutor = (request) => {
        if (disposeCtrl?.signal.aborted) {
            return createResultForAbort(disposeCtrl.signal);
        }
        const fetchFn = request.extensions?.fetch ?? options?.fetch ?? defaultFetch;
        let method = request.extensions?.method || options?.method;
        const operationAst = getOperationASTFromRequest(request);
        const operationType = operationAst.operation;
        if ((options?.useGETForQueries || request.extensions?.useGETForQueries) &&
            operationType === 'query') {
            method = 'GET';
        }
        let accept = 'application/graphql-response+json, application/json, multipart/mixed';
        if (operationType === 'subscription' || isLiveQueryOperationDefinitionNode(operationAst)) {
            method ||= 'GET';
            accept = 'text/event-stream';
        }
        else {
            method ||= 'POST';
        }
        const endpoint = request.extensions?.endpoint || options?.endpoint || '/graphql';
        const headers = { accept };
        if (options?.headers) {
            Object.assign(headers, typeof options?.headers === 'function' ? options.headers(request) : options?.headers);
        }
        if (request.extensions?.headers) {
            const { headers: headersFromExtensions, ...restExtensions } = request.extensions;
            Object.assign(headers, headersFromExtensions);
            request.extensions = restExtensions;
        }
        const query = printFn(request.document);
        let signal = disposeCtrl?.signal;
        let clearTimeoutFn = () => { };
        if (options?.timeout) {
            const timeoutCtrl = new AbortController();
            signal = timeoutCtrl.signal;
            disposeCtrl?.signal.addEventListener('abort', clearTimeoutFn);
            const timeoutId = setTimeout(() => {
                if (!timeoutCtrl.signal.aborted) {
                    timeoutCtrl.abort('timeout');
                }
                disposeCtrl?.signal.removeEventListener('abort', clearTimeoutFn);
            }, options.timeout);
            clearTimeoutFn = () => {
                clearTimeout(timeoutId);
            };
        }
        const upstreamErrorExtensions = {
            request: {
                method,
            },
            response: {},
        };
        return new ValueOrPromise(() => {
            switch (method) {
                case 'GET': {
                    const finalUrl = prepareGETUrl({
                        baseUrl: endpoint,
                        query,
                        variables: request.variables,
                        operationName: request.operationName,
                        extensions: request.extensions,
                    });
                    const fetchOptions = {
                        method: 'GET',
                        headers,
                        signal,
                    };
                    if (options?.credentials != null) {
                        fetchOptions.credentials = options.credentials;
                    }
                    upstreamErrorExtensions.request.url = finalUrl;
                    return fetchFn(finalUrl, fetchOptions, request.context, request.info);
                }
                case 'POST': {
                    const body = {
                        query,
                        variables: request.variables,
                        operationName: request.operationName,
                        extensions: request.extensions,
                    };
                    upstreamErrorExtensions.request.body = body;
                    return new ValueOrPromise(() => createFormDataFromVariables(body, {
                        File: options?.File,
                        FormData: options?.FormData,
                    }))
                        .then(body => {
                        if (typeof body === 'string' && !headers['content-type']) {
                            upstreamErrorExtensions.request.body = body;
                            headers['content-type'] = 'application/json';
                        }
                        const fetchOptions = {
                            method: 'POST',
                            body,
                            headers,
                            signal,
                        };
                        if (options?.credentials != null) {
                            fetchOptions.credentials = options.credentials;
                        }
                        return fetchFn(endpoint, fetchOptions, request.context, request.info);
                    })
                        .resolve();
                }
            }
        })
            .then((fetchResult) => {
            upstreamErrorExtensions.response.status = fetchResult.status;
            upstreamErrorExtensions.response.statusText = fetchResult.statusText;
            Object.defineProperty(upstreamErrorExtensions.response, 'headers', {
                get() {
                    return Object.fromEntries(fetchResult.headers.entries());
                },
            });
            clearTimeoutFn();
            // Retry should respect HTTP Errors
            if (options?.retry != null && !fetchResult.status.toString().startsWith('2')) {
                throw new Error(fetchResult.statusText || `Upstream HTTP Error: ${fetchResult.status}`);
            }
            const contentType = fetchResult.headers.get('content-type');
            if (contentType?.includes('text/event-stream')) {
                return handleEventStreamResponse(fetchResult);
            }
            else if (contentType?.includes('multipart/mixed')) {
                return handleMultipartMixedResponse(fetchResult);
            }
            return fetchResult.text();
        })
            .then(result => {
            if (typeof result === 'string') {
                upstreamErrorExtensions.response.body = result;
                if (result) {
                    try {
                        const parsedResult = JSON.parse(result);
                        upstreamErrorExtensions.response.body = parsedResult;
                        if (parsedResult.data == null &&
                            (parsedResult.errors == null || parsedResult.errors.length === 0)) {
                            return {
                                errors: [
                                    createGraphQLError('Unexpected empty "data" and "errors" fields in result: ' + result, {
                                        extensions: upstreamErrorExtensions,
                                    }),
                                ],
                            };
                        }
                        if (Array.isArray(parsedResult.errors)) {
                            return {
                                ...parsedResult,
                                errors: parsedResult.errors.map(({ message, ...options }) => createGraphQLError(message, {
                                    ...options,
                                    extensions: {
                                        code: 'DOWNSTREAM_SERVICE_ERROR',
                                        ...(options.extensions || {}),
                                    },
                                })),
                            };
                        }
                        return parsedResult;
                    }
                    catch (e) {
                        return {
                            errors: [
                                createGraphQLError(`Unexpected response: ${JSON.stringify(result)}`, {
                                    extensions: upstreamErrorExtensions,
                                    originalError: e,
                                }),
                            ],
                        };
                    }
                }
            }
            else {
                return result;
            }
        })
            .catch((e) => {
            if (e.name === 'AggregateError') {
                return {
                    errors: e.errors.map((e) => coerceFetchError(e, {
                        signal,
                        endpoint,
                        upstreamErrorExtensions,
                    })),
                };
            }
            return {
                errors: [
                    coerceFetchError(e, {
                        signal,
                        endpoint,
                        upstreamErrorExtensions,
                    }),
                ],
            };
        })
            .resolve();
    };
    let executor = baseExecutor;
    if (options?.retry != null) {
        executor = function retryExecutor(request) {
            let result;
            let attempt = 0;
            function retryAttempt() {
                if (disposeCtrl?.signal.aborted) {
                    return createResultForAbort(disposeCtrl.signal);
                }
                attempt++;
                if (attempt > options.retry) {
                    if (result != null) {
                        return result;
                    }
                    return {
                        errors: [createGraphQLError('No response returned from fetch')],
                    };
                }
                return new ValueOrPromise(() => baseExecutor(request))
                    .then(res => {
                    result = res;
                    if (result?.errors?.length) {
                        return retryAttempt();
                    }
                    return result;
                })
                    .resolve();
            }
            return retryAttempt();
        };
    }
    if (!options?.disposable) {
        disposeCtrl = undefined;
        return executor;
    }
    disposeCtrl = new AbortController();
    Object.defineProperties(executor, {
        [Symbol.dispose]: {
            get() {
                return function dispose() {
                    return disposeCtrl.abort(createAbortErrorReason());
                };
            },
        },
        [Symbol.asyncDispose]: {
            get() {
                return function asyncDispose() {
                    return disposeCtrl.abort(createAbortErrorReason());
                };
            },
        },
    });
    return executor;
}
function coerceFetchError(e, { signal, endpoint, upstreamErrorExtensions, }) {
    if (typeof e === 'string') {
        return createGraphQLError(e, {
            extensions: upstreamErrorExtensions,
        });
    }
    else if (e.name === 'GraphQLError') {
        return e;
    }
    else if (e.name === 'TypeError' && e.message === 'fetch failed') {
        return createGraphQLError(`fetch failed to ${endpoint}`, {
            extensions: upstreamErrorExtensions,
            originalError: e,
        });
    }
    else if (e.name === 'AbortError' && signal?.reason) {
        return createGraphQLErrorForAbort(signal, {
            extensions: upstreamErrorExtensions,
        });
    }
    else if (e.message) {
        return createGraphQLError(e.message, {
            extensions: upstreamErrorExtensions,
            originalError: e,
        });
    }
    else {
        return createGraphQLError('Unknown error', {
            extensions: upstreamErrorExtensions,
            originalError: e,
        });
    }
}
function createAbortErrorReason() {
    return new Error('Executor was disposed.');
}
function createGraphQLErrorForAbort(signal, extensions) {
    return createGraphQLError('The operation was aborted. reason: ' + signal.reason, {
        extensions,
    });
}
function createResultForAbort(signal, extensions) {
    return {
        errors: [createGraphQLErrorForAbort(signal, extensions)],
    };
}
export { isLiveQueryOperationDefinitionNode };
