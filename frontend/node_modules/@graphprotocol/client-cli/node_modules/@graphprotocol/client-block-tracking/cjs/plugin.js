"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useBlockTracking = useBlockTracking;
const utils_1 = require("@graphql-tools/utils");
const shared_js_1 = require("./shared.js");
function useBlockTracking(configInput) {
    const config = {
        ...shared_js_1.DEFAULT_CONFIG,
        ...configInput,
    };
    const minBlockMap = new Map();
    return {
        onSubgraphExecute({ subgraph, subgraphName, executionRequest, setExecutionRequest }) {
            setExecutionRequest((0, shared_js_1.transformExecutionRequest)(executionRequest, config, subgraph, false, minBlockMap.get(subgraphName)));
            function handleResult(result) {
                const newBlockNumber = (0, shared_js_1.getNewBlockNumberFromExecutionResult)(result, config);
                const currentMinBlockNumber = minBlockMap.get(subgraphName);
                if (newBlockNumber != null && (currentMinBlockNumber == null || newBlockNumber > currentMinBlockNumber)) {
                    minBlockMap.set(subgraphName, newBlockNumber);
                }
            }
            return ({ result }) => {
                if ((0, utils_1.isAsyncIterable)(result)) {
                    return {
                        onNext({ result }) {
                            handleResult(result);
                        },
                    };
                }
                handleResult(result);
                return;
            };
        },
    };
}
