/* eslint-disable import/no-nodejs-modules */
import { promises as fsPromises } from 'fs';
import { useServer } from 'graphql-ws/lib/use/ws';
import { getGraphQLWSOptions } from './getGraphQLWSOpts.js';
export async function startNodeHttpServer({ meshHTTPHandler, getBuiltMesh, sslCredentials, graphqlPath, hostname, port, }) {
    let server;
    if (sslCredentials) {
        const [key, cert] = await Promise.all([
            fsPromises.readFile(sslCredentials.key),
            fsPromises.readFile(sslCredentials.cert),
        ]);
        const nodeHttps = await import('https');
        server = nodeHttps.createServer({
            key,
            cert,
        }, meshHTTPHandler);
    }
    else {
        const nodeHttp = await import('http');
        server = nodeHttp.createServer(meshHTTPHandler);
    }
    const ws = await import('ws');
    const wsServer = new ws.WebSocketServer({
        path: graphqlPath,
        server,
    });
    useServer(getGraphQLWSOptions(getBuiltMesh), wsServer);
    return new Promise((resolve, reject) => {
        server.once('error', err => reject(err));
        server.listen(port, hostname, () => {
            resolve({
                stop: () => {
                    server.closeAllConnections();
                    server.close();
                },
            });
        });
    });
}
