"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.typeDescriptionAdded = exports.typeDescriptionAddedFromMeta = exports.typeDescriptionRemoved = exports.typeDescriptionRemovedFromMeta = exports.typeDescriptionChanged = exports.typeDescriptionChangedFromMeta = exports.typeKindChanged = exports.typeKindChangedFromMeta = exports.typeAdded = exports.typeAddedFromMeta = exports.typeRemoved = exports.typeRemovedFromMeta = void 0;
const graphql_js_1 = require("../../utils/graphql.js");
const change_js_1 = require("./change.js");
function buildTypeRemovedMessage(type) {
    return `Type '${type.removedTypeName}' was removed`;
}
function typeRemovedFromMeta(args) {
    return {
        criticality: {
            level: change_js_1.CriticalityLevel.Breaking,
        },
        type: change_js_1.ChangeType.TypeRemoved,
        message: buildTypeRemovedMessage(args.meta),
        meta: args.meta,
        path: args.meta.removedTypeName,
    };
}
exports.typeRemovedFromMeta = typeRemovedFromMeta;
function typeRemoved(type) {
    return typeRemovedFromMeta({
        type: change_js_1.ChangeType.TypeRemoved,
        meta: {
            removedTypeName: type.name,
        },
    });
}
exports.typeRemoved = typeRemoved;
function buildTypeAddedMessage(type) {
    return `Type '${type.addedTypeName}' was added`;
}
function typeAddedFromMeta(args) {
    return {
        criticality: {
            level: change_js_1.CriticalityLevel.NonBreaking,
        },
        type: change_js_1.ChangeType.TypeAdded,
        message: buildTypeAddedMessage(args.meta),
        meta: args.meta,
        path: args.meta.addedTypeName,
    };
}
exports.typeAddedFromMeta = typeAddedFromMeta;
function typeAdded(type) {
    return typeAddedFromMeta({
        type: change_js_1.ChangeType.TypeAdded,
        meta: {
            addedTypeName: type.name,
        },
    });
}
exports.typeAdded = typeAdded;
function buildTypeKindChangedMessage(args) {
    return `'${args.meta.typeName}' kind changed from '${args.meta.oldTypeKind}' to '${args.meta.newTypeKind}'`;
}
function typeKindChangedFromMeta(args) {
    return {
        criticality: {
            level: change_js_1.CriticalityLevel.Breaking,
            reason: `Changing the kind of a type is a breaking change because it can cause existing queries to error. For example, turning an object type to a scalar type would break queries that define a selection set for this type.`,
        },
        type: change_js_1.ChangeType.TypeKindChanged,
        message: buildTypeKindChangedMessage(args),
        path: args.meta.typeName,
        meta: args.meta,
    };
}
exports.typeKindChangedFromMeta = typeKindChangedFromMeta;
function typeKindChanged(oldType, newType) {
    return typeKindChangedFromMeta({
        type: change_js_1.ChangeType.TypeKindChanged,
        meta: {
            typeName: oldType.name,
            newTypeKind: String((0, graphql_js_1.getKind)(newType)),
            oldTypeKind: String((0, graphql_js_1.getKind)(oldType)),
        },
    });
}
exports.typeKindChanged = typeKindChanged;
function buildTypeDescriptionChangedMessage(args) {
    return `Description '${args.oldTypeDescription}' on type '${args.typeName}' has changed to '${args.newTypeDescription}'`;
}
function typeDescriptionChangedFromMeta(args) {
    return {
        criticality: {
            level: change_js_1.CriticalityLevel.NonBreaking,
        },
        type: change_js_1.ChangeType.TypeDescriptionChanged,
        message: buildTypeDescriptionChangedMessage(args.meta),
        path: args.meta.typeName,
        meta: args.meta,
    };
}
exports.typeDescriptionChangedFromMeta = typeDescriptionChangedFromMeta;
function typeDescriptionChanged(oldType, newType) {
    return typeDescriptionChangedFromMeta({
        type: change_js_1.ChangeType.TypeDescriptionChanged,
        meta: {
            typeName: oldType.name,
            newTypeDescription: newType.description ?? '',
            oldTypeDescription: oldType.description ?? '',
        },
    });
}
exports.typeDescriptionChanged = typeDescriptionChanged;
function buildTypeDescriptionRemoved(args) {
    return `Description '${args.removedTypeDescription}' was removed from object type '${args.typeName}'`;
}
function typeDescriptionRemovedFromMeta(args) {
    return {
        criticality: {
            level: change_js_1.CriticalityLevel.NonBreaking,
        },
        type: change_js_1.ChangeType.TypeDescriptionRemoved,
        message: buildTypeDescriptionRemoved(args.meta),
        path: args.meta.typeName,
        meta: args.meta,
    };
}
exports.typeDescriptionRemovedFromMeta = typeDescriptionRemovedFromMeta;
function typeDescriptionRemoved(type) {
    return typeDescriptionRemovedFromMeta({
        type: change_js_1.ChangeType.TypeDescriptionRemoved,
        meta: {
            typeName: type.name,
            removedTypeDescription: type.description ?? '',
        },
    });
}
exports.typeDescriptionRemoved = typeDescriptionRemoved;
function buildTypeDescriptionAddedMessage(args) {
    return `Object type '${args.typeName}' has description '${args.addedTypeDescription}'`;
}
function typeDescriptionAddedFromMeta(args) {
    return {
        criticality: {
            level: change_js_1.CriticalityLevel.NonBreaking,
        },
        type: change_js_1.ChangeType.TypeDescriptionAdded,
        message: buildTypeDescriptionAddedMessage(args.meta),
        path: args.meta.typeName,
        meta: args.meta,
    };
}
exports.typeDescriptionAddedFromMeta = typeDescriptionAddedFromMeta;
function typeDescriptionAdded(type) {
    return typeDescriptionAddedFromMeta({
        type: change_js_1.ChangeType.TypeDescriptionAdded,
        meta: {
            typeName: type.name,
            addedTypeDescription: type.description ?? '',
        },
    });
}
exports.typeDescriptionAdded = typeDescriptionAdded;
