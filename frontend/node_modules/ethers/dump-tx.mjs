import fs from "fs";

import { ethers } from "./lib.esm/index.js";
import { read } from "/Users/ricmoo/Development/firefly/pixie-repl/scripts/node_modules/read/dist/esm/read.js";

const path = "/Volumes/PrivateData/Ethereum/ENS/wallet-waterloo.json";

const ensName = "firefly.eth";
const newOwner = "0x5555763613a12D8F3e73be831DFf8598089d3dCa";

(async function() {
  const provider = new ethers.InfuraProvider();

  const password = await read({
    prompt: "password: ",
    silent: true,
    replace: "*"
  });
  const data = fs.readFileSync(path);

  const wallet = (await ethers.Wallet.fromEncryptedJson(data, password)).connect(provider);
  console.log({ wallet });


  const contract = new ethers.Contract("0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e", [
    "function owner(bytes32 nodeHash) constant returns (address owner)",
    "function resolver(bytes32 nodeHash) constant returns (address resolver)",
    "function setOwner(bytes32 nodeHash, address owner) @100000",
  ], wallet);
  const namehash = ethers.namehash(ensName);
  console.log(await contract.owner(namehash));
  let tx = await contract.setOwner.populateTransaction(namehash, newOwner);
  tx = await wallet.populateTransaction(tx);
  console.log({ tx });
  const signed = await wallet.signTransaction(tx);
  console.log(signed);
  console.log(await provider.broadcastTransaction(signed));
})();
